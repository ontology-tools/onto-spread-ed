"use strict";
(() => {
  // node_modules/@vue/shared/dist/shared.esm-bundler.js
  // @__NO_SIDE_EFFECTS__
  function makeMap(str) {
    const map2 = /* @__PURE__ */ Object.create(null);
    for (const key of str.split(","))
      map2[key] = 1;
    return (val) => val in map2;
  }
  var EMPTY_OBJ = true ? Object.freeze({}) : {};
  var EMPTY_ARR = true ? Object.freeze([]) : [];
  var NOOP = () => {
  };
  var NO = () => false;
  var isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
  (key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
  var isModelListener = (key) => key.startsWith("onUpdate:");
  var extend = Object.assign;
  var remove = (arr, el) => {
    const i = arr.indexOf(el);
    if (i > -1) {
      arr.splice(i, 1);
    }
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var hasOwn = (val, key) => hasOwnProperty.call(val, key);
  var isArray = Array.isArray;
  var isMap = (val) => toTypeString(val) === "[object Map]";
  var isSet = (val) => toTypeString(val) === "[object Set]";
  var isDate = (val) => toTypeString(val) === "[object Date]";
  var isFunction = (val) => typeof val === "function";
  var isString = (val) => typeof val === "string";
  var isSymbol = (val) => typeof val === "symbol";
  var isObject = (val) => val !== null && typeof val === "object";
  var isPromise = (val) => {
    return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
  };
  var objectToString = Object.prototype.toString;
  var toTypeString = (value) => objectToString.call(value);
  var toRawType = (value) => {
    return toTypeString(value).slice(8, -1);
  };
  var isPlainObject = (val) => toTypeString(val) === "[object Object]";
  var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
  var isReservedProp = /* @__PURE__ */ makeMap(
    // the leading comma is intentional so empty string "" is also included
    ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
  );
  var isBuiltInDirective = /* @__PURE__ */ makeMap(
    "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
  );
  var cacheStringFunction = (fn) => {
    const cache = /* @__PURE__ */ Object.create(null);
    return (str) => {
      const hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  };
  var camelizeRE = /-(\w)/g;
  var camelize = cacheStringFunction(
    (str) => {
      return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
    }
  );
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cacheStringFunction(
    (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
  );
  var capitalize = cacheStringFunction((str) => {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });
  var toHandlerKey = cacheStringFunction(
    (str) => {
      const s = str ? `on${capitalize(str)}` : ``;
      return s;
    }
  );
  var hasChanged = (value, oldValue) => !Object.is(value, oldValue);
  var invokeArrayFns = (fns, ...arg) => {
    for (let i = 0; i < fns.length; i++) {
      fns[i](...arg);
    }
  };
  var def = (obj, key, value, writable = false) => {
    Object.defineProperty(obj, key, {
      configurable: true,
      enumerable: false,
      writable,
      value
    });
  };
  var looseToNumber = (val) => {
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
  };
  var toNumber = (val) => {
    const n = isString(val) ? Number(val) : NaN;
    return isNaN(n) ? val : n;
  };
  var _globalThis;
  var getGlobalThis = () => {
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
  };
  function normalizeStyle(value) {
    if (isArray(value)) {
      const res = {};
      for (let i = 0; i < value.length; i++) {
        const item = value[i];
        const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
        if (normalized) {
          for (const key in normalized) {
            res[key] = normalized[key];
          }
        }
      }
      return res;
    } else if (isString(value) || isObject(value)) {
      return value;
    }
  }
  var listDelimiterRE = /;(?![^(]*\))/g;
  var propertyDelimiterRE = /:([^]+)/;
  var styleCommentRE = /\/\*[^]*?\*\//g;
  function parseStringStyle(cssText) {
    const ret = {};
    cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
      if (item) {
        const tmp = item.split(propertyDelimiterRE);
        tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return ret;
  }
  function normalizeClass(value) {
    let res = "";
    if (isString(value)) {
      res = value;
    } else if (isArray(value)) {
      for (let i = 0; i < value.length; i++) {
        const normalized = normalizeClass(value[i]);
        if (normalized) {
          res += normalized + " ";
        }
      }
    } else if (isObject(value)) {
      for (const name in value) {
        if (value[name]) {
          res += name + " ";
        }
      }
    }
    return res.trim();
  }
  function normalizeProps(props) {
    if (!props)
      return null;
    let { class: klass, style } = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (style) {
      props.style = normalizeStyle(style);
    }
    return props;
  }
  var HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
  var SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
  var MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
  var isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
  var isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
  var isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
  var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
  var isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
  var isBooleanAttr = /* @__PURE__ */ makeMap(
    specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
  );
  function includeBooleanAttr(value) {
    return !!value || value === "";
  }
  function looseCompareArrays(a, b) {
    if (a.length !== b.length)
      return false;
    let equal = true;
    for (let i = 0; equal && i < a.length; i++) {
      equal = looseEqual(a[i], b[i]);
    }
    return equal;
  }
  function looseEqual(a, b) {
    if (a === b)
      return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) {
      return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    }
    aValidType = isSymbol(a);
    bValidType = isSymbol(b);
    if (aValidType || bValidType) {
      return a === b;
    }
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) {
      return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    }
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
      if (!aValidType || !bValidType) {
        return false;
      }
      const aKeysCount = Object.keys(a).length;
      const bKeysCount = Object.keys(b).length;
      if (aKeysCount !== bKeysCount) {
        return false;
      }
      for (const key in a) {
        const aHasKey = a.hasOwnProperty(key);
        const bHasKey = b.hasOwnProperty(key);
        if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
          return false;
        }
      }
    }
    return String(a) === String(b);
  }
  function looseIndexOf(arr, val) {
    return arr.findIndex((item) => looseEqual(item, val));
  }
  var isRef = (val) => {
    return !!(val && val["__v_isRef"] === true);
  };
  var toDisplayString = (val) => {
    return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);
  };
  var replacer = (_key, val) => {
    if (isRef(val)) {
      return replacer(_key, val.value);
    } else if (isMap(val)) {
      return {
        [`Map(${val.size})`]: [...val.entries()].reduce(
          (entries, [key, val2], i) => {
            entries[stringifySymbol(key, i) + " =>"] = val2;
            return entries;
          },
          {}
        )
      };
    } else if (isSet(val)) {
      return {
        [`Set(${val.size})`]: [...val.values()].map((v) => stringifySymbol(v))
      };
    } else if (isSymbol(val)) {
      return stringifySymbol(val);
    } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
      return String(val);
    }
    return val;
  };
  var stringifySymbol = (v, i = "") => {
    var _a;
    return (
      // Symbol.description in es2019+ so we need to cast here to pass
      // the lib: es2016 check
      isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v
    );
  };

  // node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
  function warn(msg, ...args) {
    console.warn(`[Vue warn] ${msg}`, ...args);
  }
  var activeEffectScope;
  var EffectScope = class {
    constructor(detached = false) {
      this.detached = detached;
      this._active = true;
      this.effects = [];
      this.cleanups = [];
      this._isPaused = false;
      this.parent = activeEffectScope;
      if (!detached && activeEffectScope) {
        this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
          this
        ) - 1;
      }
    }
    get active() {
      return this._active;
    }
    pause() {
      if (this._active) {
        this._isPaused = true;
        let i, l;
        if (this.scopes) {
          for (i = 0, l = this.scopes.length; i < l; i++) {
            this.scopes[i].pause();
          }
        }
        for (i = 0, l = this.effects.length; i < l; i++) {
          this.effects[i].pause();
        }
      }
    }
    /**
     * Resumes the effect scope, including all child scopes and effects.
     */
    resume() {
      if (this._active) {
        if (this._isPaused) {
          this._isPaused = false;
          let i, l;
          if (this.scopes) {
            for (i = 0, l = this.scopes.length; i < l; i++) {
              this.scopes[i].resume();
            }
          }
          for (i = 0, l = this.effects.length; i < l; i++) {
            this.effects[i].resume();
          }
        }
      }
    }
    run(fn) {
      if (this._active) {
        const currentEffectScope = activeEffectScope;
        try {
          activeEffectScope = this;
          return fn();
        } finally {
          activeEffectScope = currentEffectScope;
        }
      } else if (true) {
        warn(`cannot run an inactive effect scope.`);
      }
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    on() {
      activeEffectScope = this;
    }
    /**
     * This should only be called on non-detached scopes
     * @internal
     */
    off() {
      activeEffectScope = this.parent;
    }
    stop(fromParent) {
      if (this._active) {
        this._active = false;
        let i, l;
        for (i = 0, l = this.effects.length; i < l; i++) {
          this.effects[i].stop();
        }
        this.effects.length = 0;
        for (i = 0, l = this.cleanups.length; i < l; i++) {
          this.cleanups[i]();
        }
        this.cleanups.length = 0;
        if (this.scopes) {
          for (i = 0, l = this.scopes.length; i < l; i++) {
            this.scopes[i].stop(true);
          }
          this.scopes.length = 0;
        }
        if (!this.detached && this.parent && !fromParent) {
          const last = this.parent.scopes.pop();
          if (last && last !== this) {
            this.parent.scopes[this.index] = last;
            last.index = this.index;
          }
        }
        this.parent = void 0;
      }
    }
  };
  function effectScope(detached) {
    return new EffectScope(detached);
  }
  function getCurrentScope() {
    return activeEffectScope;
  }
  function onScopeDispose(fn, failSilently = false) {
    if (activeEffectScope) {
      activeEffectScope.cleanups.push(fn);
    } else if (!failSilently) {
      warn(
        `onScopeDispose() is called when there is no active effect scope to be associated with.`
      );
    }
  }
  var activeSub;
  var pausedQueueEffects = /* @__PURE__ */ new WeakSet();
  var ReactiveEffect = class {
    constructor(fn) {
      this.fn = fn;
      this.deps = void 0;
      this.depsTail = void 0;
      this.flags = 1 | 4;
      this.next = void 0;
      this.cleanup = void 0;
      this.scheduler = void 0;
      if (activeEffectScope && activeEffectScope.active) {
        activeEffectScope.effects.push(this);
      }
    }
    pause() {
      this.flags |= 64;
    }
    resume() {
      if (this.flags & 64) {
        this.flags &= ~64;
        if (pausedQueueEffects.has(this)) {
          pausedQueueEffects.delete(this);
          this.trigger();
        }
      }
    }
    /**
     * @internal
     */
    notify() {
      if (this.flags & 2 && !(this.flags & 32)) {
        return;
      }
      if (!(this.flags & 8)) {
        batch(this);
      }
    }
    run() {
      if (!(this.flags & 1)) {
        return this.fn();
      }
      this.flags |= 2;
      cleanupEffect(this);
      prepareDeps(this);
      const prevEffect = activeSub;
      const prevShouldTrack = shouldTrack;
      activeSub = this;
      shouldTrack = true;
      try {
        return this.fn();
      } finally {
        if (activeSub !== this) {
          warn(
            "Active effect was not restored correctly - this is likely a Vue internal bug."
          );
        }
        cleanupDeps(this);
        activeSub = prevEffect;
        shouldTrack = prevShouldTrack;
        this.flags &= ~2;
      }
    }
    stop() {
      if (this.flags & 1) {
        for (let link2 = this.deps; link2; link2 = link2.nextDep) {
          removeSub(link2);
        }
        this.deps = this.depsTail = void 0;
        cleanupEffect(this);
        this.onStop && this.onStop();
        this.flags &= ~1;
      }
    }
    trigger() {
      if (this.flags & 64) {
        pausedQueueEffects.add(this);
      } else if (this.scheduler) {
        this.scheduler();
      } else {
        this.runIfDirty();
      }
    }
    /**
     * @internal
     */
    runIfDirty() {
      if (isDirty(this)) {
        this.run();
      }
    }
    get dirty() {
      return isDirty(this);
    }
  };
  var batchDepth = 0;
  var batchedSub;
  var batchedComputed;
  function batch(sub, isComputed = false) {
    sub.flags |= 8;
    if (isComputed) {
      sub.next = batchedComputed;
      batchedComputed = sub;
      return;
    }
    sub.next = batchedSub;
    batchedSub = sub;
  }
  function startBatch() {
    batchDepth++;
  }
  function endBatch() {
    if (--batchDepth > 0) {
      return;
    }
    if (batchedComputed) {
      let e = batchedComputed;
      batchedComputed = void 0;
      while (e) {
        const next = e.next;
        e.next = void 0;
        e.flags &= ~8;
        e = next;
      }
    }
    let error;
    while (batchedSub) {
      let e = batchedSub;
      batchedSub = void 0;
      while (e) {
        const next = e.next;
        e.next = void 0;
        e.flags &= ~8;
        if (e.flags & 1) {
          try {
            ;
            e.trigger();
          } catch (err) {
            if (!error)
              error = err;
          }
        }
        e = next;
      }
    }
    if (error)
      throw error;
  }
  function prepareDeps(sub) {
    for (let link2 = sub.deps; link2; link2 = link2.nextDep) {
      link2.version = -1;
      link2.prevActiveLink = link2.dep.activeLink;
      link2.dep.activeLink = link2;
    }
  }
  function cleanupDeps(sub) {
    let head;
    let tail = sub.depsTail;
    let link2 = tail;
    while (link2) {
      const prev = link2.prevDep;
      if (link2.version === -1) {
        if (link2 === tail)
          tail = prev;
        removeSub(link2);
        removeDep(link2);
      } else {
        head = link2;
      }
      link2.dep.activeLink = link2.prevActiveLink;
      link2.prevActiveLink = void 0;
      link2 = prev;
    }
    sub.deps = head;
    sub.depsTail = tail;
  }
  function isDirty(sub) {
    for (let link2 = sub.deps; link2; link2 = link2.nextDep) {
      if (link2.dep.version !== link2.version || link2.dep.computed && (refreshComputed(link2.dep.computed) || link2.dep.version !== link2.version)) {
        return true;
      }
    }
    if (sub._dirty) {
      return true;
    }
    return false;
  }
  function refreshComputed(computed3) {
    if (computed3.flags & 4 && !(computed3.flags & 16)) {
      return;
    }
    computed3.flags &= ~16;
    if (computed3.globalVersion === globalVersion) {
      return;
    }
    computed3.globalVersion = globalVersion;
    const dep = computed3.dep;
    computed3.flags |= 2;
    if (dep.version > 0 && !computed3.isSSR && computed3.deps && !isDirty(computed3)) {
      computed3.flags &= ~2;
      return;
    }
    const prevSub = activeSub;
    const prevShouldTrack = shouldTrack;
    activeSub = computed3;
    shouldTrack = true;
    try {
      prepareDeps(computed3);
      const value = computed3.fn(computed3._value);
      if (dep.version === 0 || hasChanged(value, computed3._value)) {
        computed3._value = value;
        dep.version++;
      }
    } catch (err) {
      dep.version++;
      throw err;
    } finally {
      activeSub = prevSub;
      shouldTrack = prevShouldTrack;
      cleanupDeps(computed3);
      computed3.flags &= ~2;
    }
  }
  function removeSub(link2, soft = false) {
    const { dep, prevSub, nextSub } = link2;
    if (prevSub) {
      prevSub.nextSub = nextSub;
      link2.prevSub = void 0;
    }
    if (nextSub) {
      nextSub.prevSub = prevSub;
      link2.nextSub = void 0;
    }
    if (dep.subsHead === link2) {
      dep.subsHead = nextSub;
    }
    if (dep.subs === link2) {
      dep.subs = prevSub;
      if (!prevSub && dep.computed) {
        dep.computed.flags &= ~4;
        for (let l = dep.computed.deps; l; l = l.nextDep) {
          removeSub(l, true);
        }
      }
    }
    if (!soft && !--dep.sc && dep.map) {
      dep.map.delete(dep.key);
    }
  }
  function removeDep(link2) {
    const { prevDep, nextDep } = link2;
    if (prevDep) {
      prevDep.nextDep = nextDep;
      link2.prevDep = void 0;
    }
    if (nextDep) {
      nextDep.prevDep = prevDep;
      link2.nextDep = void 0;
    }
  }
  var shouldTrack = true;
  var trackStack = [];
  function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
  }
  function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === void 0 ? true : last;
  }
  function cleanupEffect(e) {
    const { cleanup } = e;
    e.cleanup = void 0;
    if (cleanup) {
      const prevSub = activeSub;
      activeSub = void 0;
      try {
        cleanup();
      } finally {
        activeSub = prevSub;
      }
    }
  }
  var globalVersion = 0;
  var Link = class {
    constructor(sub, dep) {
      this.sub = sub;
      this.dep = dep;
      this.version = dep.version;
      this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
    }
  };
  var Dep = class {
    constructor(computed3) {
      this.computed = computed3;
      this.version = 0;
      this.activeLink = void 0;
      this.subs = void 0;
      this.map = void 0;
      this.key = void 0;
      this.sc = 0;
      if (true) {
        this.subsHead = void 0;
      }
    }
    track(debugInfo) {
      if (!activeSub || !shouldTrack || activeSub === this.computed) {
        return;
      }
      let link2 = this.activeLink;
      if (link2 === void 0 || link2.sub !== activeSub) {
        link2 = this.activeLink = new Link(activeSub, this);
        if (!activeSub.deps) {
          activeSub.deps = activeSub.depsTail = link2;
        } else {
          link2.prevDep = activeSub.depsTail;
          activeSub.depsTail.nextDep = link2;
          activeSub.depsTail = link2;
        }
        addSub(link2);
      } else if (link2.version === -1) {
        link2.version = this.version;
        if (link2.nextDep) {
          const next = link2.nextDep;
          next.prevDep = link2.prevDep;
          if (link2.prevDep) {
            link2.prevDep.nextDep = next;
          }
          link2.prevDep = activeSub.depsTail;
          link2.nextDep = void 0;
          activeSub.depsTail.nextDep = link2;
          activeSub.depsTail = link2;
          if (activeSub.deps === link2) {
            activeSub.deps = next;
          }
        }
      }
      if (activeSub.onTrack) {
        activeSub.onTrack(
          extend(
            {
              effect: activeSub
            },
            debugInfo
          )
        );
      }
      return link2;
    }
    trigger(debugInfo) {
      this.version++;
      globalVersion++;
      this.notify(debugInfo);
    }
    notify(debugInfo) {
      startBatch();
      try {
        if (true) {
          for (let head = this.subsHead; head; head = head.nextSub) {
            if (head.sub.onTrigger && !(head.sub.flags & 8)) {
              head.sub.onTrigger(
                extend(
                  {
                    effect: head.sub
                  },
                  debugInfo
                )
              );
            }
          }
        }
        for (let link2 = this.subs; link2; link2 = link2.prevSub) {
          if (link2.sub.notify()) {
            ;
            link2.sub.dep.notify();
          }
        }
      } finally {
        endBatch();
      }
    }
  };
  function addSub(link2) {
    link2.dep.sc++;
    if (link2.sub.flags & 4) {
      const computed3 = link2.dep.computed;
      if (computed3 && !link2.dep.subs) {
        computed3.flags |= 4 | 16;
        for (let l = computed3.deps; l; l = l.nextDep) {
          addSub(l);
        }
      }
      const currentTail = link2.dep.subs;
      if (currentTail !== link2) {
        link2.prevSub = currentTail;
        if (currentTail)
          currentTail.nextSub = link2;
      }
      if (link2.dep.subsHead === void 0) {
        link2.dep.subsHead = link2;
      }
      link2.dep.subs = link2;
    }
  }
  var targetMap = /* @__PURE__ */ new WeakMap();
  var ITERATE_KEY = Symbol(
    true ? "Object iterate" : ""
  );
  var MAP_KEY_ITERATE_KEY = Symbol(
    true ? "Map keys iterate" : ""
  );
  var ARRAY_ITERATE_KEY = Symbol(
    true ? "Array iterate" : ""
  );
  function track(target, type, key) {
    if (shouldTrack && activeSub) {
      let depsMap = targetMap.get(target);
      if (!depsMap) {
        targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
      }
      let dep = depsMap.get(key);
      if (!dep) {
        depsMap.set(key, dep = new Dep());
        dep.map = depsMap;
        dep.key = key;
      }
      if (true) {
        dep.track({
          target,
          type,
          key
        });
      } else {
        dep.track();
      }
    }
  }
  function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) {
      globalVersion++;
      return;
    }
    const run = (dep) => {
      if (dep) {
        if (true) {
          dep.trigger({
            target,
            type,
            key,
            newValue,
            oldValue,
            oldTarget
          });
        } else {
          dep.trigger();
        }
      }
    };
    startBatch();
    if (type === "clear") {
      depsMap.forEach(run);
    } else {
      const targetIsArray = isArray(target);
      const isArrayIndex = targetIsArray && isIntegerKey(key);
      if (targetIsArray && key === "length") {
        const newLength = Number(newValue);
        depsMap.forEach((dep, key2) => {
          if (key2 === "length" || key2 === ARRAY_ITERATE_KEY || !isSymbol(key2) && key2 >= newLength) {
            run(dep);
          }
        });
      } else {
        if (key !== void 0 || depsMap.has(void 0)) {
          run(depsMap.get(key));
        }
        if (isArrayIndex) {
          run(depsMap.get(ARRAY_ITERATE_KEY));
        }
        switch (type) {
          case "add":
            if (!targetIsArray) {
              run(depsMap.get(ITERATE_KEY));
              if (isMap(target)) {
                run(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            } else if (isArrayIndex) {
              run(depsMap.get("length"));
            }
            break;
          case "delete":
            if (!targetIsArray) {
              run(depsMap.get(ITERATE_KEY));
              if (isMap(target)) {
                run(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            }
            break;
          case "set":
            if (isMap(target)) {
              run(depsMap.get(ITERATE_KEY));
            }
            break;
        }
      }
    }
    endBatch();
  }
  function getDepFromReactive(object, key) {
    const depMap = targetMap.get(object);
    return depMap && depMap.get(key);
  }
  function reactiveReadArray(array2) {
    const raw = toRaw(array2);
    if (raw === array2)
      return raw;
    track(raw, "iterate", ARRAY_ITERATE_KEY);
    return isShallow(array2) ? raw : raw.map(toReactive);
  }
  function shallowReadArray(arr) {
    track(arr = toRaw(arr), "iterate", ARRAY_ITERATE_KEY);
    return arr;
  }
  var arrayInstrumentations = {
    __proto__: null,
    [Symbol.iterator]() {
      return iterator(this, Symbol.iterator, toReactive);
    },
    concat(...args) {
      return reactiveReadArray(this).concat(
        ...args.map((x) => isArray(x) ? reactiveReadArray(x) : x)
      );
    },
    entries() {
      return iterator(this, "entries", (value) => {
        value[1] = toReactive(value[1]);
        return value;
      });
    },
    every(fn, thisArg) {
      return apply(this, "every", fn, thisArg, void 0, arguments);
    },
    filter(fn, thisArg) {
      return apply(this, "filter", fn, thisArg, (v) => v.map(toReactive), arguments);
    },
    find(fn, thisArg) {
      return apply(this, "find", fn, thisArg, toReactive, arguments);
    },
    findIndex(fn, thisArg) {
      return apply(this, "findIndex", fn, thisArg, void 0, arguments);
    },
    findLast(fn, thisArg) {
      return apply(this, "findLast", fn, thisArg, toReactive, arguments);
    },
    findLastIndex(fn, thisArg) {
      return apply(this, "findLastIndex", fn, thisArg, void 0, arguments);
    },
    // flat, flatMap could benefit from ARRAY_ITERATE but are not straight-forward to implement
    forEach(fn, thisArg) {
      return apply(this, "forEach", fn, thisArg, void 0, arguments);
    },
    includes(...args) {
      return searchProxy(this, "includes", args);
    },
    indexOf(...args) {
      return searchProxy(this, "indexOf", args);
    },
    join(separator) {
      return reactiveReadArray(this).join(separator);
    },
    // keys() iterator only reads `length`, no optimisation required
    lastIndexOf(...args) {
      return searchProxy(this, "lastIndexOf", args);
    },
    map(fn, thisArg) {
      return apply(this, "map", fn, thisArg, void 0, arguments);
    },
    pop() {
      return noTracking(this, "pop");
    },
    push(...args) {
      return noTracking(this, "push", args);
    },
    reduce(fn, ...args) {
      return reduce(this, "reduce", fn, args);
    },
    reduceRight(fn, ...args) {
      return reduce(this, "reduceRight", fn, args);
    },
    shift() {
      return noTracking(this, "shift");
    },
    // slice could use ARRAY_ITERATE but also seems to beg for range tracking
    some(fn, thisArg) {
      return apply(this, "some", fn, thisArg, void 0, arguments);
    },
    splice(...args) {
      return noTracking(this, "splice", args);
    },
    toReversed() {
      return reactiveReadArray(this).toReversed();
    },
    toSorted(comparer) {
      return reactiveReadArray(this).toSorted(comparer);
    },
    toSpliced(...args) {
      return reactiveReadArray(this).toSpliced(...args);
    },
    unshift(...args) {
      return noTracking(this, "unshift", args);
    },
    values() {
      return iterator(this, "values", toReactive);
    }
  };
  function iterator(self2, method, wrapValue) {
    const arr = shallowReadArray(self2);
    const iter = arr[method]();
    if (arr !== self2 && !isShallow(self2)) {
      iter._next = iter.next;
      iter.next = () => {
        const result = iter._next();
        if (result.value) {
          result.value = wrapValue(result.value);
        }
        return result;
      };
    }
    return iter;
  }
  var arrayProto = Array.prototype;
  function apply(self2, method, fn, thisArg, wrappedRetFn, args) {
    const arr = shallowReadArray(self2);
    const needsWrap = arr !== self2 && !isShallow(self2);
    const methodFn = arr[method];
    if (methodFn !== arrayProto[method]) {
      const result2 = methodFn.apply(self2, args);
      return needsWrap ? toReactive(result2) : result2;
    }
    let wrappedFn = fn;
    if (arr !== self2) {
      if (needsWrap) {
        wrappedFn = function(item, index7) {
          return fn.call(this, toReactive(item), index7, self2);
        };
      } else if (fn.length > 2) {
        wrappedFn = function(item, index7) {
          return fn.call(this, item, index7, self2);
        };
      }
    }
    const result = methodFn.call(arr, wrappedFn, thisArg);
    return needsWrap && wrappedRetFn ? wrappedRetFn(result) : result;
  }
  function reduce(self2, method, fn, args) {
    const arr = shallowReadArray(self2);
    let wrappedFn = fn;
    if (arr !== self2) {
      if (!isShallow(self2)) {
        wrappedFn = function(acc, item, index7) {
          return fn.call(this, acc, toReactive(item), index7, self2);
        };
      } else if (fn.length > 3) {
        wrappedFn = function(acc, item, index7) {
          return fn.call(this, acc, item, index7, self2);
        };
      }
    }
    return arr[method](wrappedFn, ...args);
  }
  function searchProxy(self2, method, args) {
    const arr = toRaw(self2);
    track(arr, "iterate", ARRAY_ITERATE_KEY);
    const res = arr[method](...args);
    if ((res === -1 || res === false) && isProxy(args[0])) {
      args[0] = toRaw(args[0]);
      return arr[method](...args);
    }
    return res;
  }
  function noTracking(self2, method, args = []) {
    pauseTracking();
    startBatch();
    const res = toRaw(self2)[method].apply(self2, args);
    endBatch();
    resetTracking();
    return res;
  }
  var isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
  var builtInSymbols = new Set(
    /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
  );
  function hasOwnProperty2(key) {
    if (!isSymbol(key))
      key = String(key);
    const obj = toRaw(this);
    track(obj, "has", key);
    return obj.hasOwnProperty(key);
  }
  var BaseReactiveHandler = class {
    constructor(_isReadonly = false, _isShallow = false) {
      this._isReadonly = _isReadonly;
      this._isShallow = _isShallow;
    }
    get(target, key, receiver) {
      if (key === "__v_skip")
        return target["__v_skip"];
      const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
      if (key === "__v_isReactive") {
        return !isReadonly2;
      } else if (key === "__v_isReadonly") {
        return isReadonly2;
      } else if (key === "__v_isShallow") {
        return isShallow2;
      } else if (key === "__v_raw") {
        if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
        // this means the receiver is a user proxy of the reactive proxy
        Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
          return target;
        }
        return;
      }
      const targetIsArray = isArray(target);
      if (!isReadonly2) {
        let fn;
        if (targetIsArray && (fn = arrayInstrumentations[key])) {
          return fn;
        }
        if (key === "hasOwnProperty") {
          return hasOwnProperty2;
        }
      }
      const res = Reflect.get(
        target,
        key,
        // if this is a proxy wrapping a ref, return methods using the raw ref
        // as receiver so that we don't have to call `toRaw` on the ref in all
        // its class methods
        isRef2(target) ? target : receiver
      );
      if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
        return res;
      }
      if (!isReadonly2) {
        track(target, "get", key);
      }
      if (isShallow2) {
        return res;
      }
      if (isRef2(res)) {
        return targetIsArray && isIntegerKey(key) ? res : res.value;
      }
      if (isObject(res)) {
        return isReadonly2 ? readonly(res) : reactive(res);
      }
      return res;
    }
  };
  var MutableReactiveHandler = class extends BaseReactiveHandler {
    constructor(isShallow2 = false) {
      super(false, isShallow2);
    }
    set(target, key, value, receiver) {
      let oldValue = target[key];
      if (!this._isShallow) {
        const isOldValueReadonly = isReadonly(oldValue);
        if (!isShallow(value) && !isReadonly(value)) {
          oldValue = toRaw(oldValue);
          value = toRaw(value);
        }
        if (!isArray(target) && isRef2(oldValue) && !isRef2(value)) {
          if (isOldValueReadonly) {
            return false;
          } else {
            oldValue.value = value;
            return true;
          }
        }
      }
      const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
      const result = Reflect.set(
        target,
        key,
        value,
        isRef2(target) ? target : receiver
      );
      if (target === toRaw(receiver)) {
        if (!hadKey) {
          trigger(target, "add", key, value);
        } else if (hasChanged(value, oldValue)) {
          trigger(target, "set", key, value, oldValue);
        }
      }
      return result;
    }
    deleteProperty(target, key) {
      const hadKey = hasOwn(target, key);
      const oldValue = target[key];
      const result = Reflect.deleteProperty(target, key);
      if (result && hadKey) {
        trigger(target, "delete", key, void 0, oldValue);
      }
      return result;
    }
    has(target, key) {
      const result = Reflect.has(target, key);
      if (!isSymbol(key) || !builtInSymbols.has(key)) {
        track(target, "has", key);
      }
      return result;
    }
    ownKeys(target) {
      track(
        target,
        "iterate",
        isArray(target) ? "length" : ITERATE_KEY
      );
      return Reflect.ownKeys(target);
    }
  };
  var ReadonlyReactiveHandler = class extends BaseReactiveHandler {
    constructor(isShallow2 = false) {
      super(true, isShallow2);
    }
    set(target, key) {
      if (true) {
        warn(
          `Set operation on key "${String(key)}" failed: target is readonly.`,
          target
        );
      }
      return true;
    }
    deleteProperty(target, key) {
      if (true) {
        warn(
          `Delete operation on key "${String(key)}" failed: target is readonly.`,
          target
        );
      }
      return true;
    }
  };
  var mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
  var readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
  var shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(true);
  var shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
  var toShallow = (value) => value;
  var getProto = (v) => Reflect.getPrototypeOf(v);
  function createIterableMethod(method, isReadonly2, isShallow2) {
    return function(...args) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const targetIsMap = isMap(rawTarget);
      const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
      const isKeyOnly = method === "keys" && targetIsMap;
      const innerIterator = target[method](...args);
      const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
      !isReadonly2 && track(
        rawTarget,
        "iterate",
        isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
      );
      return {
        // iterator protocol
        next() {
          const { value, done } = innerIterator.next();
          return done ? { value, done } : {
            value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
            done
          };
        },
        // iterable protocol
        [Symbol.iterator]() {
          return this;
        }
      };
    };
  }
  function createReadonlyMethod(type) {
    return function(...args) {
      if (true) {
        const key = args[0] ? `on key "${args[0]}" ` : ``;
        warn(
          `${capitalize(type)} operation ${key}failed: target is readonly.`,
          toRaw(this)
        );
      }
      return type === "delete" ? false : type === "clear" ? void 0 : this;
    };
  }
  function createInstrumentations(readonly2, shallow) {
    const instrumentations = {
      get(key) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const rawKey = toRaw(key);
        if (!readonly2) {
          if (hasChanged(key, rawKey)) {
            track(rawTarget, "get", key);
          }
          track(rawTarget, "get", rawKey);
        }
        const { has } = getProto(rawTarget);
        const wrap = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
        if (has.call(rawTarget, key)) {
          return wrap(target.get(key));
        } else if (has.call(rawTarget, rawKey)) {
          return wrap(target.get(rawKey));
        } else if (target !== rawTarget) {
          target.get(key);
        }
      },
      get size() {
        const target = this["__v_raw"];
        !readonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
        return Reflect.get(target, "size", target);
      },
      has(key) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const rawKey = toRaw(key);
        if (!readonly2) {
          if (hasChanged(key, rawKey)) {
            track(rawTarget, "has", key);
          }
          track(rawTarget, "has", rawKey);
        }
        return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
      },
      forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw"];
        const rawTarget = toRaw(target);
        const wrap = shallow ? toShallow : readonly2 ? toReadonly : toReactive;
        !readonly2 && track(rawTarget, "iterate", ITERATE_KEY);
        return target.forEach((value, key) => {
          return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
      }
    };
    extend(
      instrumentations,
      readonly2 ? {
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear")
      } : {
        add(value) {
          if (!shallow && !isShallow(value) && !isReadonly(value)) {
            value = toRaw(value);
          }
          const target = toRaw(this);
          const proto = getProto(target);
          const hadKey = proto.has.call(target, value);
          if (!hadKey) {
            target.add(value);
            trigger(target, "add", value, value);
          }
          return this;
        },
        set(key, value) {
          if (!shallow && !isShallow(value) && !isReadonly(value)) {
            value = toRaw(value);
          }
          const target = toRaw(this);
          const { has, get: get2 } = getProto(target);
          let hadKey = has.call(target, key);
          if (!hadKey) {
            key = toRaw(key);
            hadKey = has.call(target, key);
          } else if (true) {
            checkIdentityKeys(target, has, key);
          }
          const oldValue = get2.call(target, key);
          target.set(key, value);
          if (!hadKey) {
            trigger(target, "add", key, value);
          } else if (hasChanged(value, oldValue)) {
            trigger(target, "set", key, value, oldValue);
          }
          return this;
        },
        delete(key) {
          const target = toRaw(this);
          const { has, get: get2 } = getProto(target);
          let hadKey = has.call(target, key);
          if (!hadKey) {
            key = toRaw(key);
            hadKey = has.call(target, key);
          } else if (true) {
            checkIdentityKeys(target, has, key);
          }
          const oldValue = get2 ? get2.call(target, key) : void 0;
          const result = target.delete(key);
          if (hadKey) {
            trigger(target, "delete", key, void 0, oldValue);
          }
          return result;
        },
        clear() {
          const target = toRaw(this);
          const hadItems = target.size !== 0;
          const oldTarget = true ? isMap(target) ? new Map(target) : new Set(target) : void 0;
          const result = target.clear();
          if (hadItems) {
            trigger(
              target,
              "clear",
              void 0,
              void 0,
              oldTarget
            );
          }
          return result;
        }
      }
    );
    const iteratorMethods = [
      "keys",
      "values",
      "entries",
      Symbol.iterator
    ];
    iteratorMethods.forEach((method) => {
      instrumentations[method] = createIterableMethod(method, readonly2, shallow);
    });
    return instrumentations;
  }
  function createInstrumentationGetter(isReadonly2, shallow) {
    const instrumentations = createInstrumentations(isReadonly2, shallow);
    return (target, key, receiver) => {
      if (key === "__v_isReactive") {
        return !isReadonly2;
      } else if (key === "__v_isReadonly") {
        return isReadonly2;
      } else if (key === "__v_raw") {
        return target;
      }
      return Reflect.get(
        hasOwn(instrumentations, key) && key in target ? instrumentations : target,
        key,
        receiver
      );
    };
  }
  var mutableCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(false, false)
  };
  var shallowCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(false, true)
  };
  var readonlyCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(true, false)
  };
  var shallowReadonlyCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(true, true)
  };
  function checkIdentityKeys(target, has, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has.call(target, rawKey)) {
      const type = toRawType(target);
      warn(
        `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
      );
    }
  }
  var reactiveMap = /* @__PURE__ */ new WeakMap();
  var shallowReactiveMap = /* @__PURE__ */ new WeakMap();
  var readonlyMap = /* @__PURE__ */ new WeakMap();
  var shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
  function targetTypeMap(rawType) {
    switch (rawType) {
      case "Object":
      case "Array":
        return 1;
      case "Map":
      case "Set":
      case "WeakMap":
      case "WeakSet":
        return 2;
      default:
        return 0;
    }
  }
  function getTargetType(value) {
    return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
  }
  function reactive(target) {
    if (isReadonly(target)) {
      return target;
    }
    return createReactiveObject(
      target,
      false,
      mutableHandlers,
      mutableCollectionHandlers,
      reactiveMap
    );
  }
  function shallowReactive(target) {
    return createReactiveObject(
      target,
      false,
      shallowReactiveHandlers,
      shallowCollectionHandlers,
      shallowReactiveMap
    );
  }
  function readonly(target) {
    return createReactiveObject(
      target,
      true,
      readonlyHandlers,
      readonlyCollectionHandlers,
      readonlyMap
    );
  }
  function shallowReadonly(target) {
    return createReactiveObject(
      target,
      true,
      shallowReadonlyHandlers,
      shallowReadonlyCollectionHandlers,
      shallowReadonlyMap
    );
  }
  function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
    if (!isObject(target)) {
      if (true) {
        warn(
          `value cannot be made ${isReadonly2 ? "readonly" : "reactive"}: ${String(
            target
          )}`
        );
      }
      return target;
    }
    if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
      return target;
    }
    const existingProxy = proxyMap.get(target);
    if (existingProxy) {
      return existingProxy;
    }
    const targetType = getTargetType(target);
    if (targetType === 0) {
      return target;
    }
    const proxy = new Proxy(
      target,
      targetType === 2 ? collectionHandlers : baseHandlers
    );
    proxyMap.set(target, proxy);
    return proxy;
  }
  function isReactive(value) {
    if (isReadonly(value)) {
      return isReactive(value["__v_raw"]);
    }
    return !!(value && value["__v_isReactive"]);
  }
  function isReadonly(value) {
    return !!(value && value["__v_isReadonly"]);
  }
  function isShallow(value) {
    return !!(value && value["__v_isShallow"]);
  }
  function isProxy(value) {
    return value ? !!value["__v_raw"] : false;
  }
  function toRaw(observed) {
    const raw = observed && observed["__v_raw"];
    return raw ? toRaw(raw) : observed;
  }
  function markRaw(value) {
    if (!hasOwn(value, "__v_skip") && Object.isExtensible(value)) {
      def(value, "__v_skip", true);
    }
    return value;
  }
  var toReactive = (value) => isObject(value) ? reactive(value) : value;
  var toReadonly = (value) => isObject(value) ? readonly(value) : value;
  function isRef2(r) {
    return r ? r["__v_isRef"] === true : false;
  }
  function ref(value) {
    return createRef(value, false);
  }
  function shallowRef(value) {
    return createRef(value, true);
  }
  function createRef(rawValue, shallow) {
    if (isRef2(rawValue)) {
      return rawValue;
    }
    return new RefImpl(rawValue, shallow);
  }
  var RefImpl = class {
    constructor(value, isShallow2) {
      this.dep = new Dep();
      this["__v_isRef"] = true;
      this["__v_isShallow"] = false;
      this._rawValue = isShallow2 ? value : toRaw(value);
      this._value = isShallow2 ? value : toReactive(value);
      this["__v_isShallow"] = isShallow2;
    }
    get value() {
      if (true) {
        this.dep.track({
          target: this,
          type: "get",
          key: "value"
        });
      } else {
        this.dep.track();
      }
      return this._value;
    }
    set value(newValue) {
      const oldValue = this._rawValue;
      const useDirectValue = this["__v_isShallow"] || isShallow(newValue) || isReadonly(newValue);
      newValue = useDirectValue ? newValue : toRaw(newValue);
      if (hasChanged(newValue, oldValue)) {
        this._rawValue = newValue;
        this._value = useDirectValue ? newValue : toReactive(newValue);
        if (true) {
          this.dep.trigger({
            target: this,
            type: "set",
            key: "value",
            newValue,
            oldValue
          });
        } else {
          this.dep.trigger();
        }
      }
    }
  };
  function unref(ref2) {
    return isRef2(ref2) ? ref2.value : ref2;
  }
  function toValue(source) {
    return isFunction(source) ? source() : unref(source);
  }
  var shallowUnwrapHandlers = {
    get: (target, key, receiver) => key === "__v_raw" ? target : unref(Reflect.get(target, key, receiver)),
    set: (target, key, value, receiver) => {
      const oldValue = target[key];
      if (isRef2(oldValue) && !isRef2(value)) {
        oldValue.value = value;
        return true;
      } else {
        return Reflect.set(target, key, value, receiver);
      }
    }
  };
  function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
  }
  var CustomRefImpl = class {
    constructor(factory) {
      this["__v_isRef"] = true;
      this._value = void 0;
      const dep = this.dep = new Dep();
      const { get: get2, set: set2 } = factory(dep.track.bind(dep), dep.trigger.bind(dep));
      this._get = get2;
      this._set = set2;
    }
    get value() {
      return this._value = this._get();
    }
    set value(newVal) {
      this._set(newVal);
    }
  };
  function customRef(factory) {
    return new CustomRefImpl(factory);
  }
  var ObjectRefImpl = class {
    constructor(_object, _key, _defaultValue) {
      this._object = _object;
      this._key = _key;
      this._defaultValue = _defaultValue;
      this["__v_isRef"] = true;
      this._value = void 0;
    }
    get value() {
      const val = this._object[this._key];
      return this._value = val === void 0 ? this._defaultValue : val;
    }
    set value(newVal) {
      this._object[this._key] = newVal;
    }
    get dep() {
      return getDepFromReactive(toRaw(this._object), this._key);
    }
  };
  var GetterRefImpl = class {
    constructor(_getter) {
      this._getter = _getter;
      this["__v_isRef"] = true;
      this["__v_isReadonly"] = true;
      this._value = void 0;
    }
    get value() {
      return this._value = this._getter();
    }
  };
  function toRef(source, key, defaultValue) {
    if (isRef2(source)) {
      return source;
    } else if (isFunction(source)) {
      return new GetterRefImpl(source);
    } else if (isObject(source) && arguments.length > 1) {
      return propertyToRef(source, key, defaultValue);
    } else {
      return ref(source);
    }
  }
  function propertyToRef(source, key, defaultValue) {
    const val = source[key];
    return isRef2(val) ? val : new ObjectRefImpl(source, key, defaultValue);
  }
  var ComputedRefImpl = class {
    constructor(fn, setter, isSSR) {
      this.fn = fn;
      this.setter = setter;
      this._value = void 0;
      this.dep = new Dep(this);
      this.__v_isRef = true;
      this.deps = void 0;
      this.depsTail = void 0;
      this.flags = 16;
      this.globalVersion = globalVersion - 1;
      this.next = void 0;
      this.effect = this;
      this["__v_isReadonly"] = !setter;
      this.isSSR = isSSR;
    }
    /**
     * @internal
     */
    notify() {
      this.flags |= 16;
      if (!(this.flags & 8) && // avoid infinite self recursion
      activeSub !== this) {
        batch(this, true);
        return true;
      } else if (true)
        ;
    }
    get value() {
      const link2 = true ? this.dep.track({
        target: this,
        type: "get",
        key: "value"
      }) : this.dep.track();
      refreshComputed(this);
      if (link2) {
        link2.version = this.dep.version;
      }
      return this._value;
    }
    set value(newValue) {
      if (this.setter) {
        this.setter(newValue);
      } else if (true) {
        warn("Write operation failed: computed value is readonly");
      }
    }
  };
  function computed(getterOrOptions, debugOptions, isSSR = false) {
    let getter;
    let setter;
    if (isFunction(getterOrOptions)) {
      getter = getterOrOptions;
    } else {
      getter = getterOrOptions.get;
      setter = getterOrOptions.set;
    }
    const cRef = new ComputedRefImpl(getter, setter, isSSR);
    if (debugOptions && !isSSR) {
      cRef.onTrack = debugOptions.onTrack;
      cRef.onTrigger = debugOptions.onTrigger;
    }
    return cRef;
  }
  var INITIAL_WATCHER_VALUE = {};
  var cleanupMap = /* @__PURE__ */ new WeakMap();
  var activeWatcher = void 0;
  function onWatcherCleanup(cleanupFn, failSilently = false, owner = activeWatcher) {
    if (owner) {
      let cleanups = cleanupMap.get(owner);
      if (!cleanups)
        cleanupMap.set(owner, cleanups = []);
      cleanups.push(cleanupFn);
    } else if (!failSilently) {
      warn(
        `onWatcherCleanup() was called when there was no active watcher to associate with.`
      );
    }
  }
  function watch(source, cb, options = EMPTY_OBJ) {
    const { immediate, deep, once, scheduler, augmentJob, call } = options;
    const warnInvalidSource = (s) => {
      (options.onWarn || warn)(
        `Invalid watch source: `,
        s,
        `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
      );
    };
    const reactiveGetter = (source2) => {
      if (deep)
        return source2;
      if (isShallow(source2) || deep === false || deep === 0)
        return traverse(source2, 1);
      return traverse(source2);
    };
    let effect2;
    let getter;
    let cleanup;
    let boundCleanup;
    let forceTrigger = false;
    let isMultiSource = false;
    if (isRef2(source)) {
      getter = () => source.value;
      forceTrigger = isShallow(source);
    } else if (isReactive(source)) {
      getter = () => reactiveGetter(source);
      forceTrigger = true;
    } else if (isArray(source)) {
      isMultiSource = true;
      forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
      getter = () => source.map((s) => {
        if (isRef2(s)) {
          return s.value;
        } else if (isReactive(s)) {
          return reactiveGetter(s);
        } else if (isFunction(s)) {
          return call ? call(s, 2) : s();
        } else {
          warnInvalidSource(s);
        }
      });
    } else if (isFunction(source)) {
      if (cb) {
        getter = call ? () => call(source, 2) : source;
      } else {
        getter = () => {
          if (cleanup) {
            pauseTracking();
            try {
              cleanup();
            } finally {
              resetTracking();
            }
          }
          const currentEffect = activeWatcher;
          activeWatcher = effect2;
          try {
            return call ? call(source, 3, [boundCleanup]) : source(boundCleanup);
          } finally {
            activeWatcher = currentEffect;
          }
        };
      }
    } else {
      getter = NOOP;
      warnInvalidSource(source);
    }
    if (cb && deep) {
      const baseGetter = getter;
      const depth = deep === true ? Infinity : deep;
      getter = () => traverse(baseGetter(), depth);
    }
    const scope = getCurrentScope();
    const watchHandle = () => {
      effect2.stop();
      if (scope && scope.active) {
        remove(scope.effects, effect2);
      }
    };
    if (once && cb) {
      const _cb = cb;
      cb = (...args) => {
        _cb(...args);
        watchHandle();
      };
    }
    let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
    const job = (immediateFirstRun) => {
      if (!(effect2.flags & 1) || !effect2.dirty && !immediateFirstRun) {
        return;
      }
      if (cb) {
        const newValue = effect2.run();
        if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue))) {
          if (cleanup) {
            cleanup();
          }
          const currentWatcher = activeWatcher;
          activeWatcher = effect2;
          try {
            const args = [
              newValue,
              // pass undefined as the old value when it's changed for the first time
              oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
              boundCleanup
            ];
            call ? call(cb, 3, args) : (
              // @ts-expect-error
              cb(...args)
            );
            oldValue = newValue;
          } finally {
            activeWatcher = currentWatcher;
          }
        }
      } else {
        effect2.run();
      }
    };
    if (augmentJob) {
      augmentJob(job);
    }
    effect2 = new ReactiveEffect(getter);
    effect2.scheduler = scheduler ? () => scheduler(job, false) : job;
    boundCleanup = (fn) => onWatcherCleanup(fn, false, effect2);
    cleanup = effect2.onStop = () => {
      const cleanups = cleanupMap.get(effect2);
      if (cleanups) {
        if (call) {
          call(cleanups, 4);
        } else {
          for (const cleanup2 of cleanups)
            cleanup2();
        }
        cleanupMap.delete(effect2);
      }
    };
    if (true) {
      effect2.onTrack = options.onTrack;
      effect2.onTrigger = options.onTrigger;
    }
    if (cb) {
      if (immediate) {
        job(true);
      } else {
        oldValue = effect2.run();
      }
    } else if (scheduler) {
      scheduler(job.bind(null, true), true);
    } else {
      effect2.run();
    }
    watchHandle.pause = effect2.pause.bind(effect2);
    watchHandle.resume = effect2.resume.bind(effect2);
    watchHandle.stop = watchHandle;
    return watchHandle;
  }
  function traverse(value, depth = Infinity, seen) {
    if (depth <= 0 || !isObject(value) || value["__v_skip"]) {
      return value;
    }
    seen = seen || /* @__PURE__ */ new Set();
    if (seen.has(value)) {
      return value;
    }
    seen.add(value);
    depth--;
    if (isRef2(value)) {
      traverse(value.value, depth, seen);
    } else if (isArray(value)) {
      for (let i = 0; i < value.length; i++) {
        traverse(value[i], depth, seen);
      }
    } else if (isSet(value) || isMap(value)) {
      value.forEach((v) => {
        traverse(v, depth, seen);
      });
    } else if (isPlainObject(value)) {
      for (const key in value) {
        traverse(value[key], depth, seen);
      }
      for (const key of Object.getOwnPropertySymbols(value)) {
        if (Object.prototype.propertyIsEnumerable.call(value, key)) {
          traverse(value[key], depth, seen);
        }
      }
    }
    return value;
  }

  // node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
  var stack = [];
  function pushWarningContext(vnode) {
    stack.push(vnode);
  }
  function popWarningContext() {
    stack.pop();
  }
  var isWarning = false;
  function warn$1(msg, ...args) {
    if (isWarning)
      return;
    isWarning = true;
    pauseTracking();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) {
      callWithErrorHandling(
        appWarnHandler,
        instance,
        11,
        [
          // eslint-disable-next-line no-restricted-syntax
          msg + args.map((a) => {
            var _a, _b;
            return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);
          }).join(""),
          instance && instance.proxy,
          trace.map(
            ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
          ).join("\n"),
          trace
        ]
      );
    } else {
      const warnArgs = [`[Vue warn]: ${msg}`, ...args];
      if (trace.length && // avoid spamming console during tests
      true) {
        warnArgs.push(`
`, ...formatTrace(trace));
      }
      console.warn(...warnArgs);
    }
    resetTracking();
    isWarning = false;
  }
  function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) {
      return [];
    }
    const normalizedStack = [];
    while (currentVNode) {
      const last = normalizedStack[0];
      if (last && last.vnode === currentVNode) {
        last.recurseCount++;
      } else {
        normalizedStack.push({
          vnode: currentVNode,
          recurseCount: 0
        });
      }
      const parentInstance = currentVNode.component && currentVNode.component.parent;
      currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
  }
  function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i) => {
      logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
    });
    return logs;
  }
  function formatTraceEntry({ vnode, recurseCount }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(
      vnode.component,
      vnode.type,
      isRoot
    )}`;
    const close = `>` + postfix;
    return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
  }
  function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach((key) => {
      res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) {
      res.push(` ...`);
    }
    return res;
  }
  function formatProp(key, value, raw) {
    if (isString(value)) {
      value = JSON.stringify(value);
      return raw ? value : [`${key}=${value}`];
    } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
      return raw ? value : [`${key}=${value}`];
    } else if (isRef2(value)) {
      value = formatProp(key, toRaw(value.value), true);
      return raw ? value : [`${key}=Ref<`, value, `>`];
    } else if (isFunction(value)) {
      return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
    } else {
      value = toRaw(value);
      return raw ? value : [`${key}=`, value];
    }
  }
  function assertNumber(val, type) {
    if (false)
      return;
    if (val === void 0) {
      return;
    } else if (typeof val !== "number") {
      warn$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
    } else if (isNaN(val)) {
      warn$1(`${type} is NaN - the duration expression might be incorrect.`);
    }
  }
  var ErrorTypeStrings$1 = {
    ["sp"]: "serverPrefetch hook",
    ["bc"]: "beforeCreate hook",
    ["c"]: "created hook",
    ["bm"]: "beforeMount hook",
    ["m"]: "mounted hook",
    ["bu"]: "beforeUpdate hook",
    ["u"]: "updated",
    ["bum"]: "beforeUnmount hook",
    ["um"]: "unmounted hook",
    ["a"]: "activated hook",
    ["da"]: "deactivated hook",
    ["ec"]: "errorCaptured hook",
    ["rtc"]: "renderTracked hook",
    ["rtg"]: "renderTriggered hook",
    [0]: "setup function",
    [1]: "render function",
    [2]: "watcher getter",
    [3]: "watcher callback",
    [4]: "watcher cleanup function",
    [5]: "native event handler",
    [6]: "component event handler",
    [7]: "vnode hook",
    [8]: "directive hook",
    [9]: "transition hook",
    [10]: "app errorHandler",
    [11]: "app warnHandler",
    [12]: "ref function",
    [13]: "async component loader",
    [14]: "scheduler flush",
    [15]: "component update",
    [16]: "app unmount cleanup function"
  };
  function callWithErrorHandling(fn, instance, type, args) {
    try {
      return args ? fn(...args) : fn();
    } catch (err) {
      handleError(err, instance, type);
    }
  }
  function callWithAsyncErrorHandling(fn, instance, type, args) {
    if (isFunction(fn)) {
      const res = callWithErrorHandling(fn, instance, type, args);
      if (res && isPromise(res)) {
        res.catch((err) => {
          handleError(err, instance, type);
        });
      }
      return res;
    }
    if (isArray(fn)) {
      const values = [];
      for (let i = 0; i < fn.length; i++) {
        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
      }
      return values;
    } else if (true) {
      warn$1(
        `Invalid value type passed to callWithAsyncErrorHandling(): ${typeof fn}`
      );
    }
  }
  function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    const { errorHandler, throwUnhandledErrorInProduction } = instance && instance.appContext.config || EMPTY_OBJ;
    if (instance) {
      let cur = instance.parent;
      const exposedInstance = instance.proxy;
      const errorInfo = true ? ErrorTypeStrings$1[type] : `https://vuejs.org/error-reference/#runtime-${type}`;
      while (cur) {
        const errorCapturedHooks = cur.ec;
        if (errorCapturedHooks) {
          for (let i = 0; i < errorCapturedHooks.length; i++) {
            if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
              return;
            }
          }
        }
        cur = cur.parent;
      }
      if (errorHandler) {
        pauseTracking();
        callWithErrorHandling(errorHandler, null, 10, [
          err,
          exposedInstance,
          errorInfo
        ]);
        resetTracking();
        return;
      }
    }
    logError(err, type, contextVNode, throwInDev, throwUnhandledErrorInProduction);
  }
  function logError(err, type, contextVNode, throwInDev = true, throwInProd = false) {
    if (true) {
      const info = ErrorTypeStrings$1[type];
      if (contextVNode) {
        pushWarningContext(contextVNode);
      }
      warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
      if (contextVNode) {
        popWarningContext();
      }
      if (throwInDev) {
        throw err;
      } else {
        console.error(err);
      }
    } else if (throwInProd) {
      throw err;
    } else {
      console.error(err);
    }
  }
  var queue = [];
  var flushIndex = -1;
  var pendingPostFlushCbs = [];
  var activePostFlushCbs = null;
  var postFlushIndex = 0;
  var resolvedPromise = /* @__PURE__ */ Promise.resolve();
  var currentFlushPromise = null;
  var RECURSION_LIMIT = 100;
  function nextTick(fn) {
    const p2 = currentFlushPromise || resolvedPromise;
    return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
  }
  function findInsertionIndex(id) {
    let start = flushIndex + 1;
    let end = queue.length;
    while (start < end) {
      const middle = start + end >>> 1;
      const middleJob = queue[middle];
      const middleJobId = getId(middleJob);
      if (middleJobId < id || middleJobId === id && middleJob.flags & 2) {
        start = middle + 1;
      } else {
        end = middle;
      }
    }
    return start;
  }
  function queueJob(job) {
    if (!(job.flags & 1)) {
      const jobId = getId(job);
      const lastJob = queue[queue.length - 1];
      if (!lastJob || // fast path when the job id is larger than the tail
      !(job.flags & 2) && jobId >= getId(lastJob)) {
        queue.push(job);
      } else {
        queue.splice(findInsertionIndex(jobId), 0, job);
      }
      job.flags |= 1;
      queueFlush();
    }
  }
  function queueFlush() {
    if (!currentFlushPromise) {
      currentFlushPromise = resolvedPromise.then(flushJobs);
    }
  }
  function queuePostFlushCb(cb) {
    if (!isArray(cb)) {
      if (activePostFlushCbs && cb.id === -1) {
        activePostFlushCbs.splice(postFlushIndex + 1, 0, cb);
      } else if (!(cb.flags & 1)) {
        pendingPostFlushCbs.push(cb);
        cb.flags |= 1;
      }
    } else {
      pendingPostFlushCbs.push(...cb);
    }
    queueFlush();
  }
  function flushPreFlushCbs(instance, seen, i = flushIndex + 1) {
    if (true) {
      seen = seen || /* @__PURE__ */ new Map();
    }
    for (; i < queue.length; i++) {
      const cb = queue[i];
      if (cb && cb.flags & 2) {
        if (instance && cb.id !== instance.uid) {
          continue;
        }
        if (checkRecursiveUpdates(seen, cb)) {
          continue;
        }
        queue.splice(i, 1);
        i--;
        if (cb.flags & 4) {
          cb.flags &= ~1;
        }
        cb();
        if (!(cb.flags & 4)) {
          cb.flags &= ~1;
        }
      }
    }
  }
  function flushPostFlushCbs(seen) {
    if (pendingPostFlushCbs.length) {
      const deduped = [...new Set(pendingPostFlushCbs)].sort(
        (a, b) => getId(a) - getId(b)
      );
      pendingPostFlushCbs.length = 0;
      if (activePostFlushCbs) {
        activePostFlushCbs.push(...deduped);
        return;
      }
      activePostFlushCbs = deduped;
      if (true) {
        seen = seen || /* @__PURE__ */ new Map();
      }
      for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
        const cb = activePostFlushCbs[postFlushIndex];
        if (checkRecursiveUpdates(seen, cb)) {
          continue;
        }
        if (cb.flags & 4) {
          cb.flags &= ~1;
        }
        if (!(cb.flags & 8))
          cb();
        cb.flags &= ~1;
      }
      activePostFlushCbs = null;
      postFlushIndex = 0;
    }
  }
  var getId = (job) => job.id == null ? job.flags & 2 ? -1 : Infinity : job.id;
  function flushJobs(seen) {
    if (true) {
      seen = seen || /* @__PURE__ */ new Map();
    }
    const check = true ? (job) => checkRecursiveUpdates(seen, job) : NOOP;
    try {
      for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
        const job = queue[flushIndex];
        if (job && !(job.flags & 8)) {
          if (check(job)) {
            continue;
          }
          if (job.flags & 4) {
            job.flags &= ~1;
          }
          callWithErrorHandling(
            job,
            job.i,
            job.i ? 15 : 14
          );
          if (!(job.flags & 4)) {
            job.flags &= ~1;
          }
        }
      }
    } finally {
      for (; flushIndex < queue.length; flushIndex++) {
        const job = queue[flushIndex];
        if (job) {
          job.flags &= ~1;
        }
      }
      flushIndex = -1;
      queue.length = 0;
      flushPostFlushCbs(seen);
      currentFlushPromise = null;
      if (queue.length || pendingPostFlushCbs.length) {
        flushJobs(seen);
      }
    }
  }
  function checkRecursiveUpdates(seen, fn) {
    const count = seen.get(fn) || 0;
    if (count > RECURSION_LIMIT) {
      const instance = fn.i;
      const componentName = instance && getComponentName(instance.type);
      handleError(
        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,
        null,
        10
      );
      return true;
    }
    seen.set(fn, count + 1);
    return false;
  }
  var isHmrUpdating = false;
  var hmrDirtyComponents = /* @__PURE__ */ new Map();
  if (true) {
    getGlobalThis().__VUE_HMR_RUNTIME__ = {
      createRecord: tryWrap(createRecord),
      rerender: tryWrap(rerender),
      reload: tryWrap(reload)
    };
  }
  var map = /* @__PURE__ */ new Map();
  function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
      createRecord(id, instance.type);
      record = map.get(id);
    }
    record.instances.add(instance);
  }
  function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
  }
  function createRecord(id, initialDef) {
    if (map.has(id)) {
      return false;
    }
    map.set(id, {
      initialDef: normalizeClassComponent(initialDef),
      instances: /* @__PURE__ */ new Set()
    });
    return true;
  }
  function normalizeClassComponent(component) {
    return isClassComponent(component) ? component.__vccOpts : component;
  }
  function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) {
      return;
    }
    record.initialDef.render = newRender;
    [...record.instances].forEach((instance) => {
      if (newRender) {
        instance.render = newRender;
        normalizeClassComponent(instance.type).render = newRender;
      }
      instance.renderCache = [];
      isHmrUpdating = true;
      instance.update();
      isHmrUpdating = false;
    });
  }
  function reload(id, newComp) {
    const record = map.get(id);
    if (!record)
      return;
    newComp = normalizeClassComponent(newComp);
    updateComponentDef(record.initialDef, newComp);
    const instances = [...record.instances];
    for (let i = 0; i < instances.length; i++) {
      const instance = instances[i];
      const oldComp = normalizeClassComponent(instance.type);
      let dirtyInstances = hmrDirtyComponents.get(oldComp);
      if (!dirtyInstances) {
        if (oldComp !== record.initialDef) {
          updateComponentDef(oldComp, newComp);
        }
        hmrDirtyComponents.set(oldComp, dirtyInstances = /* @__PURE__ */ new Set());
      }
      dirtyInstances.add(instance);
      instance.appContext.propsCache.delete(instance.type);
      instance.appContext.emitsCache.delete(instance.type);
      instance.appContext.optionsCache.delete(instance.type);
      if (instance.ceReload) {
        dirtyInstances.add(instance);
        instance.ceReload(newComp.styles);
        dirtyInstances.delete(instance);
      } else if (instance.parent) {
        queueJob(() => {
          isHmrUpdating = true;
          instance.parent.update();
          isHmrUpdating = false;
          dirtyInstances.delete(instance);
        });
      } else if (instance.appContext.reload) {
        instance.appContext.reload();
      } else if (typeof window !== "undefined") {
        window.location.reload();
      } else {
        console.warn(
          "[HMR] Root or manually mounted instance modified. Full reload required."
        );
      }
      if (instance.root.ce && instance !== instance.root) {
        instance.root.ce._removeChildStyle(oldComp);
      }
    }
    queuePostFlushCb(() => {
      hmrDirtyComponents.clear();
    });
  }
  function updateComponentDef(oldComp, newComp) {
    extend(oldComp, newComp);
    for (const key in oldComp) {
      if (key !== "__file" && !(key in newComp)) {
        delete oldComp[key];
      }
    }
  }
  function tryWrap(fn) {
    return (id, arg) => {
      try {
        return fn(id, arg);
      } catch (e) {
        console.error(e);
        console.warn(
          `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
        );
      }
    };
  }
  var devtools$1;
  var buffer = [];
  var devtoolsNotInstalled = false;
  function emit$1(event, ...args) {
    if (devtools$1) {
      devtools$1.emit(event, ...args);
    } else if (!devtoolsNotInstalled) {
      buffer.push({ event, args });
    }
  }
  function setDevtoolsHook$1(hook, target) {
    var _a, _b;
    devtools$1 = hook;
    if (devtools$1) {
      devtools$1.enabled = true;
      buffer.forEach(({ event, args }) => devtools$1.emit(event, ...args));
      buffer = [];
    } else if (
      // handle late devtools injection - only do this if we are in an actual
      // browser environment to avoid the timer handle stalling test runner exit
      // (#4815)
      typeof window !== "undefined" && // some envs mock window but not fully
      window.HTMLElement && // also exclude jsdom
      // eslint-disable-next-line no-restricted-syntax
      !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))
    ) {
      const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
      replay.push((newHook) => {
        setDevtoolsHook$1(newHook, target);
      });
      setTimeout(() => {
        if (!devtools$1) {
          target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
          devtoolsNotInstalled = true;
          buffer = [];
        }
      }, 3e3);
    } else {
      devtoolsNotInstalled = true;
      buffer = [];
    }
  }
  function devtoolsInitApp(app2, version2) {
    emit$1("app:init", app2, version2, {
      Fragment,
      Text,
      Comment,
      Static
    });
  }
  function devtoolsUnmountApp(app2) {
    emit$1("app:unmount", app2);
  }
  var devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(
    "component:added"
    /* COMPONENT_ADDED */
  );
  var devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(
    "component:updated"
    /* COMPONENT_UPDATED */
  );
  var _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(
    "component:removed"
    /* COMPONENT_REMOVED */
  );
  var devtoolsComponentRemoved = (component) => {
    if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" && // remove the component if it wasn't buffered
    !devtools$1.cleanupBuffer(component)) {
      _devtoolsComponentRemoved(component);
    }
  };
  // @__NO_SIDE_EFFECTS__
  function createDevtoolsComponentHook(hook) {
    return (component) => {
      emit$1(
        hook,
        component.appContext.app,
        component.uid,
        component.parent ? component.parent.uid : void 0,
        component
      );
    };
  }
  var devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook(
    "perf:start"
    /* PERFORMANCE_START */
  );
  var devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook(
    "perf:end"
    /* PERFORMANCE_END */
  );
  function createDevtoolsPerformanceHook(hook) {
    return (component, type, time2) => {
      emit$1(hook, component.appContext.app, component.uid, component, type, time2);
    };
  }
  function devtoolsComponentEmit(component, event, params) {
    emit$1(
      "component:emit",
      component.appContext.app,
      component,
      event,
      params
    );
  }
  var currentRenderingInstance = null;
  var currentScopeId = null;
  function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = instance && instance.type.__scopeId || null;
    return prev;
  }
  function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
    if (!ctx)
      return fn;
    if (fn._n) {
      return fn;
    }
    const renderFnWithContext = (...args) => {
      if (renderFnWithContext._d) {
        setBlockTracking(-1);
      }
      const prevInstance = setCurrentRenderingInstance(ctx);
      let res;
      try {
        res = fn(...args);
      } finally {
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) {
          setBlockTracking(1);
        }
      }
      if (true) {
        devtoolsComponentUpdated(ctx);
      }
      return res;
    };
    renderFnWithContext._n = true;
    renderFnWithContext._c = true;
    renderFnWithContext._d = true;
    return renderFnWithContext;
  }
  function validateDirectiveName(name) {
    if (isBuiltInDirective(name)) {
      warn$1("Do not use built-in directive ids as custom directive id: " + name);
    }
  }
  function withDirectives(vnode, directives) {
    if (currentRenderingInstance === null) {
      warn$1(`withDirectives can only be used inside render functions.`);
      return vnode;
    }
    const instance = getComponentPublicInstance(currentRenderingInstance);
    const bindings2 = vnode.dirs || (vnode.dirs = []);
    for (let i = 0; i < directives.length; i++) {
      let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
      if (dir) {
        if (isFunction(dir)) {
          dir = {
            mounted: dir,
            updated: dir
          };
        }
        if (dir.deep) {
          traverse(value);
        }
        bindings2.push({
          dir,
          instance,
          value,
          oldValue: void 0,
          arg,
          modifiers
        });
      }
    }
    return vnode;
  }
  function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings2 = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for (let i = 0; i < bindings2.length; i++) {
      const binding = bindings2[i];
      if (oldBindings) {
        binding.oldValue = oldBindings[i].value;
      }
      let hook = binding.dir[name];
      if (hook) {
        pauseTracking();
        callWithAsyncErrorHandling(hook, instance, 8, [
          vnode.el,
          binding,
          vnode,
          prevVNode
        ]);
        resetTracking();
      }
    }
  }
  var TeleportEndKey = Symbol("_vte");
  var isTeleport = (type) => type.__isTeleport;
  var isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
  var isTeleportDeferred = (props) => props && (props.defer || props.defer === "");
  var isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
  var isTargetMathML = (target) => typeof MathMLElement === "function" && target instanceof MathMLElement;
  var resolveTarget = (props, select) => {
    const targetSelector = props && props.to;
    if (isString(targetSelector)) {
      if (!select) {
        warn$1(
          `Current renderer does not support string target for Teleports. (missing querySelector renderer option)`
        );
        return null;
      } else {
        const target = select(targetSelector);
        if (!target && !isTeleportDisabled(props)) {
          warn$1(
            `Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`
          );
        }
        return target;
      }
    } else {
      if (!targetSelector && !isTeleportDisabled(props)) {
        warn$1(`Invalid Teleport target: ${targetSelector}`);
      }
      return targetSelector;
    }
  };
  var TeleportImpl = {
    name: "Teleport",
    __isTeleport: true,
    process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
      const {
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        o: { insert, querySelector, createText, createComment }
      } = internals;
      const disabled = isTeleportDisabled(n2.props);
      let { shapeFlag, children, dynamicChildren } = n2;
      if (isHmrUpdating) {
        optimized = false;
        dynamicChildren = null;
      }
      if (n1 == null) {
        const placeholder = n2.el = true ? createComment("teleport start") : createText("");
        const mainAnchor = n2.anchor = true ? createComment("teleport end") : createText("");
        insert(placeholder, container, anchor);
        insert(mainAnchor, container, anchor);
        const mount = (container2, anchor2) => {
          if (shapeFlag & 16) {
            if (parentComponent && parentComponent.isCE) {
              parentComponent.ce._teleportTarget = container2;
            }
            mountChildren(
              children,
              container2,
              anchor2,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
          }
        };
        const mountToTarget = () => {
          const target = n2.target = resolveTarget(n2.props, querySelector);
          const targetAnchor = prepareAnchor(target, n2, createText, insert);
          if (target) {
            if (namespace !== "svg" && isTargetSVG(target)) {
              namespace = "svg";
            } else if (namespace !== "mathml" && isTargetMathML(target)) {
              namespace = "mathml";
            }
            if (!disabled) {
              mount(target, targetAnchor);
              updateCssVars(n2, false);
            }
          } else if (!disabled) {
            warn$1(
              "Invalid Teleport target on mount:",
              target,
              `(${typeof target})`
            );
          }
        };
        if (disabled) {
          mount(container, mainAnchor);
          updateCssVars(n2, true);
        }
        if (isTeleportDeferred(n2.props)) {
          queuePostRenderEffect(() => {
            mountToTarget();
            n2.el.__isMounted = true;
          }, parentSuspense);
        } else {
          mountToTarget();
        }
      } else {
        if (isTeleportDeferred(n2.props) && !n1.el.__isMounted) {
          queuePostRenderEffect(() => {
            TeleportImpl.process(
              n1,
              n2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized,
              internals
            );
            delete n1.el.__isMounted;
          }, parentSuspense);
          return;
        }
        n2.el = n1.el;
        n2.targetStart = n1.targetStart;
        const mainAnchor = n2.anchor = n1.anchor;
        const target = n2.target = n1.target;
        const targetAnchor = n2.targetAnchor = n1.targetAnchor;
        const wasDisabled = isTeleportDisabled(n1.props);
        const currentContainer = wasDisabled ? container : target;
        const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
        if (namespace === "svg" || isTargetSVG(target)) {
          namespace = "svg";
        } else if (namespace === "mathml" || isTargetMathML(target)) {
          namespace = "mathml";
        }
        if (dynamicChildren) {
          patchBlockChildren(
            n1.dynamicChildren,
            dynamicChildren,
            currentContainer,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds
          );
          traverseStaticChildren(n1, n2, true);
        } else if (!optimized) {
          patchChildren(
            n1,
            n2,
            currentContainer,
            currentAnchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            false
          );
        }
        if (disabled) {
          if (!wasDisabled) {
            moveTeleport(
              n2,
              container,
              mainAnchor,
              internals,
              1
            );
          } else {
            if (n2.props && n1.props && n2.props.to !== n1.props.to) {
              n2.props.to = n1.props.to;
            }
          }
        } else {
          if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
            const nextTarget = n2.target = resolveTarget(
              n2.props,
              querySelector
            );
            if (nextTarget) {
              moveTeleport(
                n2,
                nextTarget,
                null,
                internals,
                0
              );
            } else if (true) {
              warn$1(
                "Invalid Teleport target on update:",
                target,
                `(${typeof target})`
              );
            }
          } else if (wasDisabled) {
            moveTeleport(
              n2,
              target,
              targetAnchor,
              internals,
              1
            );
          }
        }
        updateCssVars(n2, disabled);
      }
    },
    remove(vnode, parentComponent, parentSuspense, { um: unmount, o: { remove: hostRemove } }, doRemove) {
      const {
        shapeFlag,
        children,
        anchor,
        targetStart,
        targetAnchor,
        target,
        props
      } = vnode;
      if (target) {
        hostRemove(targetStart);
        hostRemove(targetAnchor);
      }
      doRemove && hostRemove(anchor);
      if (shapeFlag & 16) {
        const shouldRemove = doRemove || !isTeleportDisabled(props);
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          unmount(
            child,
            parentComponent,
            parentSuspense,
            shouldRemove,
            !!child.dynamicChildren
          );
        }
      }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
  };
  function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
    if (moveType === 0) {
      insert(vnode.targetAnchor, container, parentAnchor);
    }
    const { el, anchor, shapeFlag, children, props } = vnode;
    const isReorder = moveType === 2;
    if (isReorder) {
      insert(el, container, parentAnchor);
    }
    if (!isReorder || isTeleportDisabled(props)) {
      if (shapeFlag & 16) {
        for (let i = 0; i < children.length; i++) {
          move(
            children[i],
            container,
            parentAnchor,
            2
          );
        }
      }
    }
    if (isReorder) {
      insert(anchor, container, parentAnchor);
    }
  }
  function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
    o: { nextSibling, parentNode, querySelector, insert, createText }
  }, hydrateChildren) {
    const target = vnode.target = resolveTarget(
      vnode.props,
      querySelector
    );
    if (target) {
      const disabled = isTeleportDisabled(vnode.props);
      const targetNode = target._lpa || target.firstChild;
      if (vnode.shapeFlag & 16) {
        if (disabled) {
          vnode.anchor = hydrateChildren(
            nextSibling(node),
            vnode,
            parentNode(node),
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          );
          vnode.targetStart = targetNode;
          vnode.targetAnchor = targetNode && nextSibling(targetNode);
        } else {
          vnode.anchor = nextSibling(node);
          let targetAnchor = targetNode;
          while (targetAnchor) {
            if (targetAnchor && targetAnchor.nodeType === 8) {
              if (targetAnchor.data === "teleport start anchor") {
                vnode.targetStart = targetAnchor;
              } else if (targetAnchor.data === "teleport anchor") {
                vnode.targetAnchor = targetAnchor;
                target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                break;
              }
            }
            targetAnchor = nextSibling(targetAnchor);
          }
          if (!vnode.targetAnchor) {
            prepareAnchor(target, vnode, createText, insert);
          }
          hydrateChildren(
            targetNode && nextSibling(targetNode),
            vnode,
            target,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          );
        }
      }
      updateCssVars(vnode, disabled);
    }
    return vnode.anchor && nextSibling(vnode.anchor);
  }
  var Teleport = TeleportImpl;
  function updateCssVars(vnode, isDisabled) {
    const ctx = vnode.ctx;
    if (ctx && ctx.ut) {
      let node, anchor;
      if (isDisabled) {
        node = vnode.el;
        anchor = vnode.anchor;
      } else {
        node = vnode.targetStart;
        anchor = vnode.targetAnchor;
      }
      while (node && node !== anchor) {
        if (node.nodeType === 1)
          node.setAttribute("data-v-owner", ctx.uid);
        node = node.nextSibling;
      }
      ctx.ut();
    }
  }
  function prepareAnchor(target, vnode, createText, insert) {
    const targetStart = vnode.targetStart = createText("");
    const targetAnchor = vnode.targetAnchor = createText("");
    targetStart[TeleportEndKey] = targetAnchor;
    if (target) {
      insert(targetStart, target);
      insert(targetAnchor, target);
    }
    return targetAnchor;
  }
  var leaveCbKey = Symbol("_leaveCb");
  var enterCbKey = Symbol("_enterCb");
  function useTransitionState() {
    const state = {
      isMounted: false,
      isLeaving: false,
      isUnmounting: false,
      leavingVNodes: /* @__PURE__ */ new Map()
    };
    onMounted(() => {
      state.isMounted = true;
    });
    onBeforeUnmount(() => {
      state.isUnmounting = true;
    });
    return state;
  }
  var TransitionHookValidator = [Function, Array];
  var BaseTransitionPropsValidators = {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    // enter
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    // leave
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    // appear
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
  };
  var recursiveGetSubtree = (instance) => {
    const subTree = instance.subTree;
    return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;
  };
  var BaseTransitionImpl = {
    name: `BaseTransition`,
    props: BaseTransitionPropsValidators,
    setup(props, { slots }) {
      const instance = getCurrentInstance();
      const state = useTransitionState();
      return () => {
        const children = slots.default && getTransitionRawChildren(slots.default(), true);
        if (!children || !children.length) {
          return;
        }
        const child = findNonCommentChild(children);
        const rawProps = toRaw(props);
        const { mode } = rawProps;
        if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
          warn$1(`invalid <transition> mode: ${mode}`);
        }
        if (state.isLeaving) {
          return emptyPlaceholder(child);
        }
        const innerChild = getInnerChild$1(child);
        if (!innerChild) {
          return emptyPlaceholder(child);
        }
        let enterHooks = resolveTransitionHooks(
          innerChild,
          rawProps,
          state,
          instance,
          // #11061, ensure enterHooks is fresh after clone
          (hooks) => enterHooks = hooks
        );
        if (innerChild.type !== Comment) {
          setTransitionHooks(innerChild, enterHooks);
        }
        let oldInnerChild = instance.subTree && getInnerChild$1(instance.subTree);
        if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {
          let leavingHooks = resolveTransitionHooks(
            oldInnerChild,
            rawProps,
            state,
            instance
          );
          setTransitionHooks(oldInnerChild, leavingHooks);
          if (mode === "out-in" && innerChild.type !== Comment) {
            state.isLeaving = true;
            leavingHooks.afterLeave = () => {
              state.isLeaving = false;
              if (!(instance.job.flags & 8)) {
                instance.update();
              }
              delete leavingHooks.afterLeave;
              oldInnerChild = void 0;
            };
            return emptyPlaceholder(child);
          } else if (mode === "in-out" && innerChild.type !== Comment) {
            leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
              const leavingVNodesCache = getLeavingNodesForType(
                state,
                oldInnerChild
              );
              leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
              el[leaveCbKey] = () => {
                earlyRemove();
                el[leaveCbKey] = void 0;
                delete enterHooks.delayedLeave;
                oldInnerChild = void 0;
              };
              enterHooks.delayedLeave = () => {
                delayedLeave();
                delete enterHooks.delayedLeave;
                oldInnerChild = void 0;
              };
            };
          } else {
            oldInnerChild = void 0;
          }
        } else if (oldInnerChild) {
          oldInnerChild = void 0;
        }
        return child;
      };
    }
  };
  function findNonCommentChild(children) {
    let child = children[0];
    if (children.length > 1) {
      let hasFound = false;
      for (const c of children) {
        if (c.type !== Comment) {
          if (hasFound) {
            warn$1(
              "<transition> can only be used on a single element or component. Use <transition-group> for lists."
            );
            break;
          }
          child = c;
          hasFound = true;
          if (false)
            break;
        }
      }
    }
    return child;
  }
  var BaseTransition = BaseTransitionImpl;
  function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
      leavingVNodesCache = /* @__PURE__ */ Object.create(null);
      leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
  }
  function resolveTransitionHooks(vnode, props, state, instance, postClone) {
    const {
      appear,
      mode,
      persisted = false,
      onBeforeEnter,
      onEnter,
      onAfterEnter,
      onEnterCancelled,
      onBeforeLeave,
      onLeave,
      onAfterLeave,
      onLeaveCancelled,
      onBeforeAppear,
      onAppear,
      onAfterAppear,
      onAppearCancelled
    } = props;
    const key = String(vnode.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode);
    const callHook3 = (hook, args) => {
      hook && callWithAsyncErrorHandling(
        hook,
        instance,
        9,
        args
      );
    };
    const callAsyncHook = (hook, args) => {
      const done = args[1];
      callHook3(hook, args);
      if (isArray(hook)) {
        if (hook.every((hook2) => hook2.length <= 1))
          done();
      } else if (hook.length <= 1) {
        done();
      }
    };
    const hooks = {
      mode,
      persisted,
      beforeEnter(el) {
        let hook = onBeforeEnter;
        if (!state.isMounted) {
          if (appear) {
            hook = onBeforeAppear || onBeforeEnter;
          } else {
            return;
          }
        }
        if (el[leaveCbKey]) {
          el[leaveCbKey](
            true
            /* cancelled */
          );
        }
        const leavingVNode = leavingVNodesCache[key];
        if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {
          leavingVNode.el[leaveCbKey]();
        }
        callHook3(hook, [el]);
      },
      enter(el) {
        let hook = onEnter;
        let afterHook = onAfterEnter;
        let cancelHook = onEnterCancelled;
        if (!state.isMounted) {
          if (appear) {
            hook = onAppear || onEnter;
            afterHook = onAfterAppear || onAfterEnter;
            cancelHook = onAppearCancelled || onEnterCancelled;
          } else {
            return;
          }
        }
        let called = false;
        const done = el[enterCbKey] = (cancelled) => {
          if (called)
            return;
          called = true;
          if (cancelled) {
            callHook3(cancelHook, [el]);
          } else {
            callHook3(afterHook, [el]);
          }
          if (hooks.delayedLeave) {
            hooks.delayedLeave();
          }
          el[enterCbKey] = void 0;
        };
        if (hook) {
          callAsyncHook(hook, [el, done]);
        } else {
          done();
        }
      },
      leave(el, remove2) {
        const key2 = String(vnode.key);
        if (el[enterCbKey]) {
          el[enterCbKey](
            true
            /* cancelled */
          );
        }
        if (state.isUnmounting) {
          return remove2();
        }
        callHook3(onBeforeLeave, [el]);
        let called = false;
        const done = el[leaveCbKey] = (cancelled) => {
          if (called)
            return;
          called = true;
          remove2();
          if (cancelled) {
            callHook3(onLeaveCancelled, [el]);
          } else {
            callHook3(onAfterLeave, [el]);
          }
          el[leaveCbKey] = void 0;
          if (leavingVNodesCache[key2] === vnode) {
            delete leavingVNodesCache[key2];
          }
        };
        leavingVNodesCache[key2] = vnode;
        if (onLeave) {
          callAsyncHook(onLeave, [el, done]);
        } else {
          done();
        }
      },
      clone(vnode2) {
        const hooks2 = resolveTransitionHooks(
          vnode2,
          props,
          state,
          instance,
          postClone
        );
        if (postClone)
          postClone(hooks2);
        return hooks2;
      }
    };
    return hooks;
  }
  function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
      vnode = cloneVNode(vnode);
      vnode.children = null;
      return vnode;
    }
  }
  function getInnerChild$1(vnode) {
    if (!isKeepAlive(vnode)) {
      if (isTeleport(vnode.type) && vnode.children) {
        return findNonCommentChild(vnode.children);
      }
      return vnode;
    }
    if (vnode.component) {
      return vnode.component.subTree;
    }
    const { shapeFlag, children } = vnode;
    if (children) {
      if (shapeFlag & 16) {
        return children[0];
      }
      if (shapeFlag & 32 && isFunction(children.default)) {
        return children.default();
      }
    }
  }
  function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 && vnode.component) {
      vnode.transition = hooks;
      setTransitionHooks(vnode.component.subTree, hooks);
    } else if (vnode.shapeFlag & 128) {
      vnode.ssContent.transition = hooks.clone(vnode.ssContent);
      vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    } else {
      vnode.transition = hooks;
    }
  }
  function getTransitionRawChildren(children, keepComment = false, parentKey) {
    let ret = [];
    let keyedFragmentCount = 0;
    for (let i = 0; i < children.length; i++) {
      let child = children[i];
      const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
      if (child.type === Fragment) {
        if (child.patchFlag & 128)
          keyedFragmentCount++;
        ret = ret.concat(
          getTransitionRawChildren(child.children, keepComment, key)
        );
      } else if (keepComment || child.type !== Comment) {
        ret.push(key != null ? cloneVNode(child, { key }) : child);
      }
    }
    if (keyedFragmentCount > 1) {
      for (let i = 0; i < ret.length; i++) {
        ret[i].patchFlag = -2;
      }
    }
    return ret;
  }
  // @__NO_SIDE_EFFECTS__
  function defineComponent(options, extraOptions) {
    return isFunction(options) ? (
      // #8236: extend call and options.name access are considered side-effects
      // by Rollup, so we have to wrap it in a pure-annotated IIFE.
      /* @__PURE__ */ (() => extend({ name: options.name }, extraOptions, { setup: options }))()
    ) : options;
  }
  function useId() {
    const i = getCurrentInstance();
    if (i) {
      return (i.appContext.config.idPrefix || "v") + "-" + i.ids[0] + i.ids[1]++;
    } else if (true) {
      warn$1(
        `useId() is called when there is no active component instance to be associated with.`
      );
    }
    return "";
  }
  function markAsyncBoundary(instance) {
    instance.ids = [instance.ids[0] + instance.ids[2]++ + "-", 0, 0];
  }
  var knownTemplateRefs = /* @__PURE__ */ new WeakSet();
  function useTemplateRef(key) {
    const i = getCurrentInstance();
    const r = shallowRef(null);
    if (i) {
      const refs = i.refs === EMPTY_OBJ ? i.refs = {} : i.refs;
      let desc;
      if ((desc = Object.getOwnPropertyDescriptor(refs, key)) && !desc.configurable) {
        warn$1(`useTemplateRef('${key}') already exists.`);
      } else {
        Object.defineProperty(refs, key, {
          enumerable: true,
          get: () => r.value,
          set: (val) => r.value = val
        });
      }
    } else if (true) {
      warn$1(
        `useTemplateRef() is called when there is no active component instance to be associated with.`
      );
    }
    const ret = true ? readonly(r) : r;
    if (true) {
      knownTemplateRefs.add(ret);
    }
    return ret;
  }
  function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
    if (isArray(rawRef)) {
      rawRef.forEach(
        (r, i) => setRef(
          r,
          oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef),
          parentSuspense,
          vnode,
          isUnmount
        )
      );
      return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) {
      if (vnode.shapeFlag & 512 && vnode.type.__asyncResolved && vnode.component.subTree.component) {
        setRef(rawRef, oldRawRef, parentSuspense, vnode.component.subTree);
      }
      return;
    }
    const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner, r: ref2 } = rawRef;
    if (!owner) {
      warn$1(
        `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
      );
      return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
    const setupState = owner.setupState;
    const rawSetupState = toRaw(setupState);
    const canSetSetupRef = setupState === EMPTY_OBJ ? () => false : (key) => {
      if (true) {
        if (hasOwn(rawSetupState, key) && !isRef2(rawSetupState[key])) {
          warn$1(
            `Template ref "${key}" used on a non-ref value. It will not work in the production build.`
          );
        }
        if (knownTemplateRefs.has(rawSetupState[key])) {
          return false;
        }
      }
      return hasOwn(rawSetupState, key);
    };
    if (oldRef != null && oldRef !== ref2) {
      if (isString(oldRef)) {
        refs[oldRef] = null;
        if (canSetSetupRef(oldRef)) {
          setupState[oldRef] = null;
        }
      } else if (isRef2(oldRef)) {
        oldRef.value = null;
      }
    }
    if (isFunction(ref2)) {
      callWithErrorHandling(ref2, owner, 12, [value, refs]);
    } else {
      const _isString = isString(ref2);
      const _isRef = isRef2(ref2);
      if (_isString || _isRef) {
        const doSet = () => {
          if (rawRef.f) {
            const existing = _isString ? canSetSetupRef(ref2) ? setupState[ref2] : refs[ref2] : ref2.value;
            if (isUnmount) {
              isArray(existing) && remove(existing, refValue);
            } else {
              if (!isArray(existing)) {
                if (_isString) {
                  refs[ref2] = [refValue];
                  if (canSetSetupRef(ref2)) {
                    setupState[ref2] = refs[ref2];
                  }
                } else {
                  ref2.value = [refValue];
                  if (rawRef.k)
                    refs[rawRef.k] = ref2.value;
                }
              } else if (!existing.includes(refValue)) {
                existing.push(refValue);
              }
            }
          } else if (_isString) {
            refs[ref2] = value;
            if (canSetSetupRef(ref2)) {
              setupState[ref2] = value;
            }
          } else if (_isRef) {
            ref2.value = value;
            if (rawRef.k)
              refs[rawRef.k] = value;
          } else if (true) {
            warn$1("Invalid template ref type:", ref2, `(${typeof ref2})`);
          }
        };
        if (value) {
          doSet.id = -1;
          queuePostRenderEffect(doSet, parentSuspense);
        } else {
          doSet();
        }
      } else if (true) {
        warn$1("Invalid template ref type:", ref2, `(${typeof ref2})`);
      }
    }
  }
  var requestIdleCallback = getGlobalThis().requestIdleCallback || ((cb) => setTimeout(cb, 1));
  var cancelIdleCallback = getGlobalThis().cancelIdleCallback || ((id) => clearTimeout(id));
  var isAsyncWrapper = (i) => !!i.type.__asyncLoader;
  var isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
  function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a", target);
  }
  function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da", target);
  }
  function registerKeepAliveHook(hook, type, target = currentInstance) {
    const wrappedHook = hook.__wdc || (hook.__wdc = () => {
      let current = target;
      while (current) {
        if (current.isDeactivated) {
          return;
        }
        current = current.parent;
      }
      return hook();
    });
    injectHook(type, wrappedHook, target);
    if (target) {
      let current = target.parent;
      while (current && current.parent) {
        if (isKeepAlive(current.parent.vnode)) {
          injectToKeepAliveRoot(wrappedHook, type, target, current);
        }
        current = current.parent;
      }
    }
  }
  function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    const injected = injectHook(
      type,
      hook,
      keepAliveRoot,
      true
      /* prepend */
    );
    onUnmounted(() => {
      remove(keepAliveRoot[type], injected);
    }, target);
  }
  function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
      const hooks = target[type] || (target[type] = []);
      const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
        pauseTracking();
        const reset = setCurrentInstance(target);
        const res = callWithAsyncErrorHandling(hook, target, type, args);
        reset();
        resetTracking();
        return res;
      });
      if (prepend) {
        hooks.unshift(wrappedHook);
      } else {
        hooks.push(wrappedHook);
      }
      return wrappedHook;
    } else if (true) {
      const apiName = toHandlerKey(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
      warn$1(
        `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`
      );
    }
  }
  var createHook = (lifecycle) => (hook, target = currentInstance) => {
    if (!isInSSRComponentSetup || lifecycle === "sp") {
      injectHook(lifecycle, (...args) => hook(...args), target);
    }
  };
  var onBeforeMount = createHook("bm");
  var onMounted = createHook("m");
  var onBeforeUpdate = createHook(
    "bu"
  );
  var onUpdated = createHook("u");
  var onBeforeUnmount = createHook(
    "bum"
  );
  var onUnmounted = createHook("um");
  var onServerPrefetch = createHook(
    "sp"
  );
  var onRenderTriggered = createHook("rtg");
  var onRenderTracked = createHook("rtc");
  function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec", hook, target);
  }
  var COMPONENTS = "components";
  var NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
  function resolveDynamicComponent(component) {
    if (isString(component)) {
      return resolveAsset(COMPONENTS, component, false) || component;
    } else {
      return component || NULL_DYNAMIC_COMPONENT;
    }
  }
  function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
      const Component = instance.type;
      if (type === COMPONENTS) {
        const selfName = getComponentName(
          Component,
          false
        );
        if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
          return Component;
        }
      }
      const res = (
        // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) || // global registration
        resolve(instance.appContext[type], name)
      );
      if (!res && maybeSelfReference) {
        return Component;
      }
      if (warnMissing && !res) {
        const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
        warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
      }
      return res;
    } else if (true) {
      warn$1(
        `resolve${capitalize(type.slice(0, -1))} can only be used in render() or setup().`
      );
    }
  }
  function resolve(registry, name) {
    return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
  }
  function renderList(source, renderItem, cache, index7) {
    let ret;
    const cached = cache && cache[index7];
    const sourceIsArray = isArray(source);
    if (sourceIsArray || isString(source)) {
      const sourceIsReactiveArray = sourceIsArray && isReactive(source);
      let needsWrap = false;
      if (sourceIsReactiveArray) {
        needsWrap = !isShallow(source);
        source = shallowReadArray(source);
      }
      ret = new Array(source.length);
      for (let i = 0, l = source.length; i < l; i++) {
        ret[i] = renderItem(
          needsWrap ? toReactive(source[i]) : source[i],
          i,
          void 0,
          cached && cached[i]
        );
      }
    } else if (typeof source === "number") {
      if (!Number.isInteger(source)) {
        warn$1(`The v-for range expect an integer value but got ${source}.`);
      }
      ret = new Array(source);
      for (let i = 0; i < source; i++) {
        ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
      }
    } else if (isObject(source)) {
      if (source[Symbol.iterator]) {
        ret = Array.from(
          source,
          (item, i) => renderItem(item, i, void 0, cached && cached[i])
        );
      } else {
        const keys = Object.keys(source);
        ret = new Array(keys.length);
        for (let i = 0, l = keys.length; i < l; i++) {
          const key = keys[i];
          ret[i] = renderItem(source[key], key, i, cached && cached[i]);
        }
      }
    } else {
      ret = [];
    }
    if (cache) {
      cache[index7] = ret;
    }
    return ret;
  }
  function createSlots(slots, dynamicSlots) {
    for (let i = 0; i < dynamicSlots.length; i++) {
      const slot = dynamicSlots[i];
      if (isArray(slot)) {
        for (let j = 0; j < slot.length; j++) {
          slots[slot[j].name] = slot[j].fn;
        }
      } else if (slot) {
        slots[slot.name] = slot.key ? (...args) => {
          const res = slot.fn(...args);
          if (res)
            res.key = slot.key;
          return res;
        } : slot.fn;
      }
    }
    return slots;
  }
  function renderSlot(slots, name, props = {}, fallback, noSlotted) {
    if (currentRenderingInstance.ce || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.ce) {
      if (name !== "default")
        props.name = name;
      return openBlock(), createBlock(
        Fragment,
        null,
        [createVNode("slot", props, fallback && fallback())],
        64
      );
    }
    let slot = slots[name];
    if (slot && slot.length > 1) {
      warn$1(
        `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
      );
      slot = () => [];
    }
    if (slot && slot._c) {
      slot._d = false;
    }
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const slotKey = props.key || // slot content array of a dynamic conditional slot may have a branch
    // key attached in the `createSlots` helper, respect that
    validSlotContent && validSlotContent.key;
    const rendered = createBlock(
      Fragment,
      {
        key: (slotKey && !isSymbol(slotKey) ? slotKey : `_${name}`) + // #7256 force differentiate fallback content from actual content
        (!validSlotContent && fallback ? "_fb" : "")
      },
      validSlotContent || (fallback ? fallback() : []),
      validSlotContent && slots._ === 1 ? 64 : -2
    );
    if (!noSlotted && rendered.scopeId) {
      rendered.slotScopeIds = [rendered.scopeId + "-s"];
    }
    if (slot && slot._c) {
      slot._d = true;
    }
    return rendered;
  }
  function ensureValidVNode(vnodes) {
    return vnodes.some((child) => {
      if (!isVNode(child))
        return true;
      if (child.type === Comment)
        return false;
      if (child.type === Fragment && !ensureValidVNode(child.children))
        return false;
      return true;
    }) ? vnodes : null;
  }
  var getPublicInstance = (i) => {
    if (!i)
      return null;
    if (isStatefulComponent(i))
      return getComponentPublicInstance(i);
    return getPublicInstance(i.parent);
  };
  var publicPropertiesMap = (
    // Move PURE marker to new line to workaround compiler discarding it
    // due to type annotation
    /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
      $: (i) => i,
      $el: (i) => i.vnode.el,
      $data: (i) => i.data,
      $props: (i) => true ? shallowReadonly(i.props) : i.props,
      $attrs: (i) => true ? shallowReadonly(i.attrs) : i.attrs,
      $slots: (i) => true ? shallowReadonly(i.slots) : i.slots,
      $refs: (i) => true ? shallowReadonly(i.refs) : i.refs,
      $parent: (i) => getPublicInstance(i.parent),
      $root: (i) => getPublicInstance(i.root),
      $host: (i) => i.ce,
      $emit: (i) => i.emit,
      $options: (i) => true ? resolveMergedOptions(i) : i.type,
      $forceUpdate: (i) => i.f || (i.f = () => {
        queueJob(i.update);
      }),
      $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
      $watch: (i) => true ? instanceWatch.bind(i) : NOOP
    })
  );
  var isReservedPrefix = (key) => key === "_" || key === "$";
  var hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn(state, key);
  var PublicInstanceProxyHandlers = {
    get({ _: instance }, key) {
      if (key === "__v_skip") {
        return true;
      }
      const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
      if (key === "__isVue") {
        return true;
      }
      let normalizedProps;
      if (key[0] !== "$") {
        const n = accessCache[key];
        if (n !== void 0) {
          switch (n) {
            case 1:
              return setupState[key];
            case 2:
              return data[key];
            case 4:
              return ctx[key];
            case 3:
              return props[key];
          }
        } else if (hasSetupBinding(setupState, key)) {
          accessCache[key] = 1;
          return setupState[key];
        } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
          accessCache[key] = 2;
          return data[key];
        } else if (
          // only cache other properties when instance has declared (thus stable)
          // props
          (normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)
        ) {
          accessCache[key] = 3;
          return props[key];
        } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
          accessCache[key] = 4;
          return ctx[key];
        } else if (shouldCacheAccess) {
          accessCache[key] = 0;
        }
      }
      const publicGetter = publicPropertiesMap[key];
      let cssModule, globalProperties;
      if (publicGetter) {
        if (key === "$attrs") {
          track(instance.attrs, "get", "");
          markAttrsAccessed();
        } else if (key === "$slots") {
          track(instance, "get", key);
        }
        return publicGetter(instance);
      } else if (
        // css module (injected by vue-loader)
        (cssModule = type.__cssModules) && (cssModule = cssModule[key])
      ) {
        return cssModule;
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (
        // global properties
        globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)
      ) {
        {
          return globalProperties[key];
        }
      } else if (currentRenderingInstance && (!isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
      // to infinite warning loop
      key.indexOf("__v") !== 0)) {
        if (data !== EMPTY_OBJ && isReservedPrefix(key[0]) && hasOwn(data, key)) {
          warn$1(
            `Property ${JSON.stringify(
              key
            )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
          );
        } else if (instance === currentRenderingInstance) {
          warn$1(
            `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
          );
        }
      }
    },
    set({ _: instance }, key, value) {
      const { data, setupState, ctx } = instance;
      if (hasSetupBinding(setupState, key)) {
        setupState[key] = value;
        return true;
      } else if (setupState.__isScriptSetup && hasOwn(setupState, key)) {
        warn$1(`Cannot mutate <script setup> binding "${key}" from Options API.`);
        return false;
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        data[key] = value;
        return true;
      } else if (hasOwn(instance.props, key)) {
        warn$1(`Attempting to mutate prop "${key}". Props are readonly.`);
        return false;
      }
      if (key[0] === "$" && key.slice(1) in instance) {
        warn$1(
          `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
        );
        return false;
      } else {
        if (key in instance.appContext.config.globalProperties) {
          Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            value
          });
        } else {
          ctx[key] = value;
        }
      }
      return true;
    },
    has({
      _: { data, setupState, accessCache, ctx, appContext, propsOptions }
    }, key) {
      let normalizedProps;
      return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
    },
    defineProperty(target, key, descriptor) {
      if (descriptor.get != null) {
        target._.accessCache[key] = 0;
      } else if (hasOwn(descriptor, "value")) {
        this.set(target, key, descriptor.value, null);
      }
      return Reflect.defineProperty(target, key, descriptor);
    }
  };
  if (true) {
    PublicInstanceProxyHandlers.ownKeys = (target) => {
      warn$1(
        `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
      );
      return Reflect.ownKeys(target);
    };
  }
  function createDevRenderContext(instance) {
    const target = {};
    Object.defineProperty(target, `_`, {
      configurable: true,
      enumerable: false,
      get: () => instance
    });
    Object.keys(publicPropertiesMap).forEach((key) => {
      Object.defineProperty(target, key, {
        configurable: true,
        enumerable: false,
        get: () => publicPropertiesMap[key](instance),
        // intercepted by the proxy so no need for implementation,
        // but needed to prevent set errors
        set: NOOP
      });
    });
    return target;
  }
  function exposePropsOnRenderContext(instance) {
    const {
      ctx,
      propsOptions: [propsOptions]
    } = instance;
    if (propsOptions) {
      Object.keys(propsOptions).forEach((key) => {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => instance.props[key],
          set: NOOP
        });
      });
    }
  }
  function exposeSetupStateOnRenderContext(instance) {
    const { ctx, setupState } = instance;
    Object.keys(toRaw(setupState)).forEach((key) => {
      if (!setupState.__isScriptSetup) {
        if (isReservedPrefix(key[0])) {
          warn$1(
            `setup() return property ${JSON.stringify(
              key
            )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
          );
          return;
        }
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => setupState[key],
          set: NOOP
        });
      }
    });
  }
  function useSlots() {
    return getContext().slots;
  }
  function useAttrs() {
    return getContext().attrs;
  }
  function getContext() {
    const i = getCurrentInstance();
    if (!i) {
      warn$1(`useContext() called without active instance.`);
    }
    return i.setupContext || (i.setupContext = createSetupContext(i));
  }
  function normalizePropsOrEmits(props) {
    return isArray(props) ? props.reduce(
      (normalized, p2) => (normalized[p2] = null, normalized),
      {}
    ) : props;
  }
  function mergeModels(a, b) {
    if (!a || !b)
      return a || b;
    if (isArray(a) && isArray(b))
      return a.concat(b);
    return extend({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));
  }
  function createDuplicateChecker() {
    const cache = /* @__PURE__ */ Object.create(null);
    return (type, key) => {
      if (cache[key]) {
        warn$1(`${type} property "${key}" is already defined in ${cache[key]}.`);
      } else {
        cache[key] = type;
      }
    };
  }
  var shouldCacheAccess = true;
  function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    shouldCacheAccess = false;
    if (options.beforeCreate) {
      callHook(options.beforeCreate, instance, "bc");
    }
    const {
      // state
      data: dataOptions,
      computed: computedOptions,
      methods,
      watch: watchOptions,
      provide: provideOptions,
      inject: injectOptions,
      // lifecycle
      created,
      beforeMount,
      mounted,
      beforeUpdate,
      updated,
      activated,
      deactivated,
      beforeDestroy,
      beforeUnmount,
      destroyed,
      unmounted,
      render: render5,
      renderTracked,
      renderTriggered,
      errorCaptured,
      serverPrefetch,
      // public API
      expose,
      inheritAttrs,
      // assets
      components,
      directives,
      filters
    } = options;
    const checkDuplicateProperties = true ? createDuplicateChecker() : null;
    if (true) {
      const [propsOptions] = instance.propsOptions;
      if (propsOptions) {
        for (const key in propsOptions) {
          checkDuplicateProperties("Props", key);
        }
      }
    }
    if (injectOptions) {
      resolveInjections(injectOptions, ctx, checkDuplicateProperties);
    }
    if (methods) {
      for (const key in methods) {
        const methodHandler = methods[key];
        if (isFunction(methodHandler)) {
          if (true) {
            Object.defineProperty(ctx, key, {
              value: methodHandler.bind(publicThis),
              configurable: true,
              enumerable: true,
              writable: true
            });
          } else {
            ctx[key] = methodHandler.bind(publicThis);
          }
          if (true) {
            checkDuplicateProperties("Methods", key);
          }
        } else if (true) {
          warn$1(
            `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
          );
        }
      }
    }
    if (dataOptions) {
      if (!isFunction(dataOptions)) {
        warn$1(
          `The data option must be a function. Plain object usage is no longer supported.`
        );
      }
      const data = dataOptions.call(publicThis, publicThis);
      if (isPromise(data)) {
        warn$1(
          `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
        );
      }
      if (!isObject(data)) {
        warn$1(`data() should return an object.`);
      } else {
        instance.data = reactive(data);
        if (true) {
          for (const key in data) {
            checkDuplicateProperties("Data", key);
            if (!isReservedPrefix(key[0])) {
              Object.defineProperty(ctx, key, {
                configurable: true,
                enumerable: true,
                get: () => data[key],
                set: NOOP
              });
            }
          }
        }
      }
    }
    shouldCacheAccess = true;
    if (computedOptions) {
      for (const key in computedOptions) {
        const opt = computedOptions[key];
        const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
        if (get2 === NOOP) {
          warn$1(`Computed property "${key}" has no getter.`);
        }
        const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : true ? () => {
          warn$1(
            `Write operation failed: computed property "${key}" is readonly.`
          );
        } : NOOP;
        const c = computed2({
          get: get2,
          set: set2
        });
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => c.value,
          set: (v) => c.value = v
        });
        if (true) {
          checkDuplicateProperties("Computed", key);
        }
      }
    }
    if (watchOptions) {
      for (const key in watchOptions) {
        createWatcher(watchOptions[key], ctx, publicThis, key);
      }
    }
    if (provideOptions) {
      const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
      Reflect.ownKeys(provides).forEach((key) => {
        provide(key, provides[key]);
      });
    }
    if (created) {
      callHook(created, instance, "c");
    }
    function registerLifecycleHook(register, hook) {
      if (isArray(hook)) {
        hook.forEach((_hook) => register(_hook.bind(publicThis)));
      } else if (hook) {
        register(hook.bind(publicThis));
      }
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if (isArray(expose)) {
      if (expose.length) {
        const exposed = instance.exposed || (instance.exposed = {});
        expose.forEach((key) => {
          Object.defineProperty(exposed, key, {
            get: () => publicThis[key],
            set: (val) => publicThis[key] = val
          });
        });
      } else if (!instance.exposed) {
        instance.exposed = {};
      }
    }
    if (render5 && instance.render === NOOP) {
      instance.render = render5;
    }
    if (inheritAttrs != null) {
      instance.inheritAttrs = inheritAttrs;
    }
    if (components)
      instance.components = components;
    if (directives)
      instance.directives = directives;
    if (serverPrefetch) {
      markAsyncBoundary(instance);
    }
  }
  function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
    if (isArray(injectOptions)) {
      injectOptions = normalizeInject(injectOptions);
    }
    for (const key in injectOptions) {
      const opt = injectOptions[key];
      let injected;
      if (isObject(opt)) {
        if ("default" in opt) {
          injected = inject(
            opt.from || key,
            opt.default,
            true
          );
        } else {
          injected = inject(opt.from || key);
        }
      } else {
        injected = inject(opt);
      }
      if (isRef2(injected)) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v) => injected.value = v
        });
      } else {
        ctx[key] = injected;
      }
      if (true) {
        checkDuplicateProperties("Inject", key);
      }
    }
  }
  function callHook(hook, instance, type) {
    callWithAsyncErrorHandling(
      isArray(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
      instance,
      type
    );
  }
  function createWatcher(raw, ctx, publicThis, key) {
    let getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
    if (isString(raw)) {
      const handler = ctx[raw];
      if (isFunction(handler)) {
        {
          watch2(getter, handler);
        }
      } else if (true) {
        warn$1(`Invalid watch handler specified by key "${raw}"`, handler);
      }
    } else if (isFunction(raw)) {
      {
        watch2(getter, raw.bind(publicThis));
      }
    } else if (isObject(raw)) {
      if (isArray(raw)) {
        raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
      } else {
        const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
        if (isFunction(handler)) {
          watch2(getter, handler, raw);
        } else if (true) {
          warn$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
        }
      }
    } else if (true) {
      warn$1(`Invalid watch option: "${key}"`, raw);
    }
  }
  function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins, extends: extendsOptions } = base;
    const {
      mixins: globalMixins,
      optionsCache: cache,
      config: { optionMergeStrategies }
    } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) {
      resolved = cached;
    } else if (!globalMixins.length && !mixins && !extendsOptions) {
      {
        resolved = base;
      }
    } else {
      resolved = {};
      if (globalMixins.length) {
        globalMixins.forEach(
          (m) => mergeOptions(resolved, m, optionMergeStrategies, true)
        );
      }
      mergeOptions(resolved, base, optionMergeStrategies);
    }
    if (isObject(base)) {
      cache.set(base, resolved);
    }
    return resolved;
  }
  function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins, extends: extendsOptions } = from;
    if (extendsOptions) {
      mergeOptions(to, extendsOptions, strats, true);
    }
    if (mixins) {
      mixins.forEach(
        (m) => mergeOptions(to, m, strats, true)
      );
    }
    for (const key in from) {
      if (asMixin && key === "expose") {
        warn$1(
          `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
        );
      } else {
        const strat = internalOptionMergeStrats[key] || strats && strats[key];
        to[key] = strat ? strat(to[key], from[key]) : from[key];
      }
    }
    return to;
  }
  var internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeEmitsOrPropsOptions,
    emits: mergeEmitsOrPropsOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    beforeUnmount: mergeAsArray,
    destroyed: mergeAsArray,
    unmounted: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
  };
  function mergeDataFn(to, from) {
    if (!from) {
      return to;
    }
    if (!to) {
      return from;
    }
    return function mergedDataFn() {
      return extend(
        isFunction(to) ? to.call(this, this) : to,
        isFunction(from) ? from.call(this, this) : from
      );
    };
  }
  function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
  }
  function normalizeInject(raw) {
    if (isArray(raw)) {
      const res = {};
      for (let i = 0; i < raw.length; i++) {
        res[raw[i]] = raw[i];
      }
      return res;
    }
    return raw;
  }
  function mergeAsArray(to, from) {
    return to ? [...new Set([].concat(to, from))] : from;
  }
  function mergeObjectOptions(to, from) {
    return to ? extend(/* @__PURE__ */ Object.create(null), to, from) : from;
  }
  function mergeEmitsOrPropsOptions(to, from) {
    if (to) {
      if (isArray(to) && isArray(from)) {
        return [.../* @__PURE__ */ new Set([...to, ...from])];
      }
      return extend(
        /* @__PURE__ */ Object.create(null),
        normalizePropsOrEmits(to),
        normalizePropsOrEmits(from != null ? from : {})
      );
    } else {
      return from;
    }
  }
  function mergeWatchOptions(to, from) {
    if (!to)
      return from;
    if (!from)
      return to;
    const merged = extend(/* @__PURE__ */ Object.create(null), to);
    for (const key in from) {
      merged[key] = mergeAsArray(to[key], from[key]);
    }
    return merged;
  }
  function createAppContext() {
    return {
      app: null,
      config: {
        isNativeTag: NO,
        performance: false,
        globalProperties: {},
        optionMergeStrategies: {},
        errorHandler: void 0,
        warnHandler: void 0,
        compilerOptions: {}
      },
      mixins: [],
      components: {},
      directives: {},
      provides: /* @__PURE__ */ Object.create(null),
      optionsCache: /* @__PURE__ */ new WeakMap(),
      propsCache: /* @__PURE__ */ new WeakMap(),
      emitsCache: /* @__PURE__ */ new WeakMap()
    };
  }
  var uid$1 = 0;
  function createAppAPI(render5, hydrate) {
    return function createApp2(rootComponent, rootProps = null) {
      if (!isFunction(rootComponent)) {
        rootComponent = extend({}, rootComponent);
      }
      if (rootProps != null && !isObject(rootProps)) {
        warn$1(`root props passed to app.mount() must be an object.`);
        rootProps = null;
      }
      const context = createAppContext();
      const installedPlugins = /* @__PURE__ */ new WeakSet();
      const pluginCleanupFns = [];
      let isMounted = false;
      const app2 = context.app = {
        _uid: uid$1++,
        _component: rootComponent,
        _props: rootProps,
        _container: null,
        _context: context,
        _instance: null,
        version,
        get config() {
          return context.config;
        },
        set config(v) {
          if (true) {
            warn$1(
              `app.config cannot be replaced. Modify individual options instead.`
            );
          }
        },
        use(plugin, ...options) {
          if (installedPlugins.has(plugin)) {
            warn$1(`Plugin has already been applied to target app.`);
          } else if (plugin && isFunction(plugin.install)) {
            installedPlugins.add(plugin);
            plugin.install(app2, ...options);
          } else if (isFunction(plugin)) {
            installedPlugins.add(plugin);
            plugin(app2, ...options);
          } else if (true) {
            warn$1(
              `A plugin must either be a function or an object with an "install" function.`
            );
          }
          return app2;
        },
        mixin(mixin) {
          if (true) {
            if (!context.mixins.includes(mixin)) {
              context.mixins.push(mixin);
            } else if (true) {
              warn$1(
                "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
              );
            }
          } else if (true) {
            warn$1("Mixins are only available in builds supporting Options API");
          }
          return app2;
        },
        component(name, component) {
          if (true) {
            validateComponentName(name, context.config);
          }
          if (!component) {
            return context.components[name];
          }
          if (context.components[name]) {
            warn$1(`Component "${name}" has already been registered in target app.`);
          }
          context.components[name] = component;
          return app2;
        },
        directive(name, directive) {
          if (true) {
            validateDirectiveName(name);
          }
          if (!directive) {
            return context.directives[name];
          }
          if (context.directives[name]) {
            warn$1(`Directive "${name}" has already been registered in target app.`);
          }
          context.directives[name] = directive;
          return app2;
        },
        mount(rootContainer, isHydrate, namespace) {
          if (!isMounted) {
            if (rootContainer.__vue_app__) {
              warn$1(
                `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
              );
            }
            const vnode = app2._ceVNode || createVNode(rootComponent, rootProps);
            vnode.appContext = context;
            if (namespace === true) {
              namespace = "svg";
            } else if (namespace === false) {
              namespace = void 0;
            }
            if (true) {
              context.reload = () => {
                render5(
                  cloneVNode(vnode),
                  rootContainer,
                  namespace
                );
              };
            }
            if (isHydrate && hydrate) {
              hydrate(vnode, rootContainer);
            } else {
              render5(vnode, rootContainer, namespace);
            }
            isMounted = true;
            app2._container = rootContainer;
            rootContainer.__vue_app__ = app2;
            if (true) {
              app2._instance = vnode.component;
              devtoolsInitApp(app2, version);
            }
            return getComponentPublicInstance(vnode.component);
          } else if (true) {
            warn$1(
              `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
            );
          }
        },
        onUnmount(cleanupFn) {
          if (typeof cleanupFn !== "function") {
            warn$1(
              `Expected function as first argument to app.onUnmount(), but got ${typeof cleanupFn}`
            );
          }
          pluginCleanupFns.push(cleanupFn);
        },
        unmount() {
          if (isMounted) {
            callWithAsyncErrorHandling(
              pluginCleanupFns,
              app2._instance,
              16
            );
            render5(null, app2._container);
            if (true) {
              app2._instance = null;
              devtoolsUnmountApp(app2);
            }
            delete app2._container.__vue_app__;
          } else if (true) {
            warn$1(`Cannot unmount an app that is not mounted.`);
          }
        },
        provide(key, value) {
          if (key in context.provides) {
            warn$1(
              `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
            );
          }
          context.provides[key] = value;
          return app2;
        },
        runWithContext(fn) {
          const lastApp = currentApp;
          currentApp = app2;
          try {
            return fn();
          } finally {
            currentApp = lastApp;
          }
        }
      };
      return app2;
    };
  }
  var currentApp = null;
  function provide(key, value) {
    if (!currentInstance) {
      if (true) {
        warn$1(`provide() can only be used inside setup().`);
      }
    } else {
      let provides = currentInstance.provides;
      const parentProvides = currentInstance.parent && currentInstance.parent.provides;
      if (parentProvides === provides) {
        provides = currentInstance.provides = Object.create(parentProvides);
      }
      provides[key] = value;
    }
  }
  function inject(key, defaultValue, treatDefaultAsFactory = false) {
    const instance = currentInstance || currentRenderingInstance;
    if (instance || currentApp) {
      const provides = currentApp ? currentApp._context.provides : instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : void 0;
      if (provides && key in provides) {
        return provides[key];
      } else if (arguments.length > 1) {
        return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
      } else if (true) {
        warn$1(`injection "${String(key)}" not found.`);
      }
    } else if (true) {
      warn$1(`inject() can only be used inside setup() or functional components.`);
    }
  }
  var internalObjectProto = {};
  var createInternalObject = () => Object.create(internalObjectProto);
  var isInternalObject = (obj) => Object.getPrototypeOf(obj) === internalObjectProto;
  function initProps(instance, rawProps, isStateful, isSSR = false) {
    const props = {};
    const attrs = createInternalObject();
    instance.propsDefaults = /* @__PURE__ */ Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    for (const key in instance.propsOptions[0]) {
      if (!(key in props)) {
        props[key] = void 0;
      }
    }
    if (true) {
      validateProps(rawProps || {}, props, instance);
    }
    if (isStateful) {
      instance.props = isSSR ? props : shallowReactive(props);
    } else {
      if (!instance.type.props) {
        instance.props = attrs;
      } else {
        instance.props = props;
      }
    }
    instance.attrs = attrs;
  }
  function isInHmrContext(instance) {
    while (instance) {
      if (instance.type.__hmrId)
        return true;
      instance = instance.parent;
    }
  }
  function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const {
      props,
      attrs,
      vnode: { patchFlag }
    } = instance;
    const rawCurrentProps = toRaw(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (
      // always force full diff in dev
      // - #1942 if hmr is enabled with sfc component
      // - vite#872 non-sfc component used by sfc component
      !isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
    ) {
      if (patchFlag & 8) {
        const propsToUpdate = instance.vnode.dynamicProps;
        for (let i = 0; i < propsToUpdate.length; i++) {
          let key = propsToUpdate[i];
          if (isEmitListener(instance.emitsOptions, key)) {
            continue;
          }
          const value = rawProps[key];
          if (options) {
            if (hasOwn(attrs, key)) {
              if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
              }
            } else {
              const camelizedKey = camelize(key);
              props[camelizedKey] = resolvePropValue(
                options,
                rawCurrentProps,
                camelizedKey,
                value,
                instance,
                false
              );
            }
          } else {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          }
        }
      }
    } else {
      if (setFullProps(instance, rawProps, props, attrs)) {
        hasAttrsChanged = true;
      }
      let kebabKey;
      for (const key in rawCurrentProps) {
        if (!rawProps || // for camelCase
        !hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
        // and converted to camelCase (#955)
        ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
          if (options) {
            if (rawPrevProps && // for camelCase
            (rawPrevProps[key] !== void 0 || // for kebab-case
            rawPrevProps[kebabKey] !== void 0)) {
              props[key] = resolvePropValue(
                options,
                rawCurrentProps,
                key,
                void 0,
                instance,
                true
              );
            }
          } else {
            delete props[key];
          }
        }
      }
      if (attrs !== rawCurrentProps) {
        for (const key in attrs) {
          if (!rawProps || !hasOwn(rawProps, key) && true) {
            delete attrs[key];
            hasAttrsChanged = true;
          }
        }
      }
    }
    if (hasAttrsChanged) {
      trigger(instance.attrs, "set", "");
    }
    if (true) {
      validateProps(rawProps || {}, props, instance);
    }
  }
  function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) {
      for (let key in rawProps) {
        if (isReservedProp(key)) {
          continue;
        }
        const value = rawProps[key];
        let camelKey;
        if (options && hasOwn(options, camelKey = camelize(key))) {
          if (!needCastKeys || !needCastKeys.includes(camelKey)) {
            props[camelKey] = value;
          } else {
            (rawCastValues || (rawCastValues = {}))[camelKey] = value;
          }
        } else if (!isEmitListener(instance.emitsOptions, key)) {
          if (!(key in attrs) || value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
    if (needCastKeys) {
      const rawCurrentProps = toRaw(props);
      const castValues = rawCastValues || EMPTY_OBJ;
      for (let i = 0; i < needCastKeys.length; i++) {
        const key = needCastKeys[i];
        props[key] = resolvePropValue(
          options,
          rawCurrentProps,
          key,
          castValues[key],
          instance,
          !hasOwn(castValues, key)
        );
      }
    }
    return hasAttrsChanged;
  }
  function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
      const hasDefault = hasOwn(opt, "default");
      if (hasDefault && value === void 0) {
        const defaultValue = opt.default;
        if (opt.type !== Function && !opt.skipFactory && isFunction(defaultValue)) {
          const { propsDefaults } = instance;
          if (key in propsDefaults) {
            value = propsDefaults[key];
          } else {
            const reset = setCurrentInstance(instance);
            value = propsDefaults[key] = defaultValue.call(
              null,
              props
            );
            reset();
          }
        } else {
          value = defaultValue;
        }
        if (instance.ce) {
          instance.ce._setProp(key, value);
        }
      }
      if (opt[
        0
        /* shouldCast */
      ]) {
        if (isAbsent && !hasDefault) {
          value = false;
        } else if (opt[
          1
          /* shouldCastTrue */
        ] && (value === "" || value === hyphenate(key))) {
          value = true;
        }
      }
    }
    return value;
  }
  var mixinPropsCache = /* @__PURE__ */ new WeakMap();
  function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = asMixin ? mixinPropsCache : appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) {
      return cached;
    }
    const raw = comp.props;
    const normalized = {};
    const needCastKeys = [];
    let hasExtends = false;
    if (!isFunction(comp)) {
      const extendProps = (raw2) => {
        hasExtends = true;
        const [props, keys] = normalizePropsOptions(raw2, appContext, true);
        extend(normalized, props);
        if (keys)
          needCastKeys.push(...keys);
      };
      if (!asMixin && appContext.mixins.length) {
        appContext.mixins.forEach(extendProps);
      }
      if (comp.extends) {
        extendProps(comp.extends);
      }
      if (comp.mixins) {
        comp.mixins.forEach(extendProps);
      }
    }
    if (!raw && !hasExtends) {
      if (isObject(comp)) {
        cache.set(comp, EMPTY_ARR);
      }
      return EMPTY_ARR;
    }
    if (isArray(raw)) {
      for (let i = 0; i < raw.length; i++) {
        if (!isString(raw[i])) {
          warn$1(`props must be strings when using array syntax.`, raw[i]);
        }
        const normalizedKey = camelize(raw[i]);
        if (validatePropName(normalizedKey)) {
          normalized[normalizedKey] = EMPTY_OBJ;
        }
      }
    } else if (raw) {
      if (!isObject(raw)) {
        warn$1(`invalid props options`, raw);
      }
      for (const key in raw) {
        const normalizedKey = camelize(key);
        if (validatePropName(normalizedKey)) {
          const opt = raw[key];
          const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? { type: opt } : extend({}, opt);
          const propType = prop.type;
          let shouldCast = false;
          let shouldCastTrue = true;
          if (isArray(propType)) {
            for (let index7 = 0; index7 < propType.length; ++index7) {
              const type = propType[index7];
              const typeName = isFunction(type) && type.name;
              if (typeName === "Boolean") {
                shouldCast = true;
                break;
              } else if (typeName === "String") {
                shouldCastTrue = false;
              }
            }
          } else {
            shouldCast = isFunction(propType) && propType.name === "Boolean";
          }
          prop[
            0
            /* shouldCast */
          ] = shouldCast;
          prop[
            1
            /* shouldCastTrue */
          ] = shouldCastTrue;
          if (shouldCast || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
    const res = [normalized, needCastKeys];
    if (isObject(comp)) {
      cache.set(comp, res);
    }
    return res;
  }
  function validatePropName(key) {
    if (key[0] !== "$" && !isReservedProp(key)) {
      return true;
    } else if (true) {
      warn$1(`Invalid prop name: "${key}" is a reserved property.`);
    }
    return false;
  }
  function getType(ctor) {
    if (ctor === null) {
      return "null";
    }
    if (typeof ctor === "function") {
      return ctor.name || "";
    } else if (typeof ctor === "object") {
      const name = ctor.constructor && ctor.constructor.name;
      return name || "";
    }
    return "";
  }
  function validateProps(rawProps, props, instance) {
    const resolvedValues = toRaw(props);
    const options = instance.propsOptions[0];
    const camelizePropsKey = Object.keys(rawProps).map((key) => camelize(key));
    for (const key in options) {
      let opt = options[key];
      if (opt == null)
        continue;
      validateProp(
        key,
        resolvedValues[key],
        opt,
        true ? shallowReadonly(resolvedValues) : resolvedValues,
        !camelizePropsKey.includes(key)
      );
    }
  }
  function validateProp(name, value, prop, props, isAbsent) {
    const { type, required, validator, skipCheck } = prop;
    if (required && isAbsent) {
      warn$1('Missing required prop: "' + name + '"');
      return;
    }
    if (value == null && !required) {
      return;
    }
    if (type != null && type !== true && !skipCheck) {
      let isValid = false;
      const types = isArray(type) ? type : [type];
      const expectedTypes = [];
      for (let i = 0; i < types.length && !isValid; i++) {
        const { valid, expectedType } = assertType(value, types[i]);
        expectedTypes.push(expectedType || "");
        isValid = valid;
      }
      if (!isValid) {
        warn$1(getInvalidTypeMessage(name, value, expectedTypes));
        return;
      }
    }
    if (validator && !validator(value, props)) {
      warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
    }
  }
  var isSimpleType = /* @__PURE__ */ makeMap(
    "String,Number,Boolean,Function,Symbol,BigInt"
  );
  function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (expectedType === "null") {
      valid = value === null;
    } else if (isSimpleType(expectedType)) {
      const t = typeof value;
      valid = t === expectedType.toLowerCase();
      if (!valid && t === "object") {
        valid = value instanceof type;
      }
    } else if (expectedType === "Object") {
      valid = isObject(value);
    } else if (expectedType === "Array") {
      valid = isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid,
      expectedType
    };
  }
  function getInvalidTypeMessage(name, value, expectedTypes) {
    if (expectedTypes.length === 0) {
      return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
    }
    let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(" | ")}`;
    const expectedType = expectedTypes[0];
    const receivedType = toRawType(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
      message += ` with value ${expectedValue}`;
    }
    message += `, got ${receivedType} `;
    if (isExplicable(receivedType)) {
      message += `with value ${receivedValue}.`;
    }
    return message;
  }
  function styleValue(value, type) {
    if (type === "String") {
      return `"${value}"`;
    } else if (type === "Number") {
      return `${Number(value)}`;
    } else {
      return `${value}`;
    }
  }
  function isExplicable(type) {
    const explicitTypes = ["string", "number", "boolean"];
    return explicitTypes.some((elem) => type.toLowerCase() === elem);
  }
  function isBoolean(...args) {
    return args.some((elem) => elem.toLowerCase() === "boolean");
  }
  var isInternalKey = (key) => key[0] === "_" || key === "$stable";
  var normalizeSlotValue = (value) => isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
  var normalizeSlot = (key, rawSlot, ctx) => {
    if (rawSlot._n) {
      return rawSlot;
    }
    const normalized = withCtx((...args) => {
      if (currentInstance && (!ctx || ctx.root === currentInstance.root)) {
        warn$1(
          `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
        );
      }
      return normalizeSlotValue(rawSlot(...args));
    }, ctx);
    normalized._c = false;
    return normalized;
  };
  var normalizeObjectSlots = (rawSlots, slots, instance) => {
    const ctx = rawSlots._ctx;
    for (const key in rawSlots) {
      if (isInternalKey(key))
        continue;
      const value = rawSlots[key];
      if (isFunction(value)) {
        slots[key] = normalizeSlot(key, value, ctx);
      } else if (value != null) {
        if (true) {
          warn$1(
            `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
          );
        }
        const normalized = normalizeSlotValue(value);
        slots[key] = () => normalized;
      }
    }
  };
  var normalizeVNodeSlots = (instance, children) => {
    if (!isKeepAlive(instance.vnode) && true) {
      warn$1(
        `Non-function value encountered for default slot. Prefer function slots for better performance.`
      );
    }
    const normalized = normalizeSlotValue(children);
    instance.slots.default = () => normalized;
  };
  var assignSlots = (slots, children, optimized) => {
    for (const key in children) {
      if (optimized || key !== "_") {
        slots[key] = children[key];
      }
    }
  };
  var initSlots = (instance, children, optimized) => {
    const slots = instance.slots = createInternalObject();
    if (instance.vnode.shapeFlag & 32) {
      const type = children._;
      if (type) {
        assignSlots(slots, children, optimized);
        if (optimized) {
          def(slots, "_", type, true);
        }
      } else {
        normalizeObjectSlots(children, slots);
      }
    } else if (children) {
      normalizeVNodeSlots(instance, children);
    }
  };
  var updateSlots = (instance, children, optimized) => {
    const { vnode, slots } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = EMPTY_OBJ;
    if (vnode.shapeFlag & 32) {
      const type = children._;
      if (type) {
        if (isHmrUpdating) {
          assignSlots(slots, children, optimized);
          trigger(instance, "set", "$slots");
        } else if (optimized && type === 1) {
          needDeletionCheck = false;
        } else {
          assignSlots(slots, children, optimized);
        }
      } else {
        needDeletionCheck = !children.$stable;
        normalizeObjectSlots(children, slots);
      }
      deletionComparisonTarget = children;
    } else if (children) {
      normalizeVNodeSlots(instance, children);
      deletionComparisonTarget = { default: 1 };
    }
    if (needDeletionCheck) {
      for (const key in slots) {
        if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {
          delete slots[key];
        }
      }
    }
  };
  var supported;
  var perf;
  function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
      perf.mark(`vue-${type}-${instance.uid}`);
    }
    if (true) {
      devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
    }
  }
  function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
      const startTag = `vue-${type}-${instance.uid}`;
      const endTag = startTag + `:end`;
      perf.mark(endTag);
      perf.measure(
        `<${formatComponentName(instance, instance.type)}> ${type}`,
        startTag,
        endTag
      );
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
    }
    if (true) {
      devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
    }
  }
  function isSupported() {
    if (supported !== void 0) {
      return supported;
    }
    if (typeof window !== "undefined" && window.performance) {
      supported = true;
      perf = window.performance;
    } else {
      supported = false;
    }
    return supported;
  }
  function initFeatureFlags() {
    const needWarn = [];
    if (false) {
      needWarn.push(`__VUE_OPTIONS_API__`);
      getGlobalThis().__VUE_OPTIONS_API__ = true;
    }
    if (false) {
      needWarn.push(`__VUE_PROD_DEVTOOLS__`);
      getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (false) {
      needWarn.push(`__VUE_PROD_HYDRATION_MISMATCH_DETAILS__`);
      getGlobalThis().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__ = false;
    }
    if (needWarn.length) {
      const multi = needWarn.length > 1;
      console.warn(
        `Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`
      );
    }
  }
  var queuePostRenderEffect = queueEffectWithSuspense;
  function createRenderer(options) {
    return baseCreateRenderer(options);
  }
  function baseCreateRenderer(options, createHydrationFns) {
    {
      initFeatureFlags();
    }
    const target = getGlobalThis();
    target.__VUE__ = true;
    if (true) {
      setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
    }
    const {
      insert: hostInsert,
      remove: hostRemove,
      patchProp: hostPatchProp,
      createElement: hostCreateElement,
      createText: hostCreateText,
      createComment: hostCreateComment,
      setText: hostSetText,
      setElementText: hostSetElementText,
      parentNode: hostParentNode,
      nextSibling: hostNextSibling,
      setScopeId: hostSetScopeId = NOOP,
      insertStaticContent: hostInsertStaticContent
    } = options;
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
      if (n1 === n2) {
        return;
      }
      if (n1 && !isSameVNodeType(n1, n2)) {
        anchor = getNextHostNode(n1);
        unmount(n1, parentComponent, parentSuspense, true);
        n1 = null;
      }
      if (n2.patchFlag === -2) {
        optimized = false;
        n2.dynamicChildren = null;
      }
      const { type, ref: ref2, shapeFlag } = n2;
      switch (type) {
        case Text:
          processText(n1, n2, container, anchor);
          break;
        case Comment:
          processCommentNode(n1, n2, container, anchor);
          break;
        case Static:
          if (n1 == null) {
            mountStaticNode(n2, container, anchor, namespace);
          } else if (true) {
            patchStaticNode(n1, n2, container, namespace);
          }
          break;
        case Fragment:
          processFragment(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          break;
        default:
          if (shapeFlag & 1) {
            processElement(
              n1,
              n2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
          } else if (shapeFlag & 6) {
            processComponent(
              n1,
              n2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
          } else if (shapeFlag & 64) {
            type.process(
              n1,
              n2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized,
              internals
            );
          } else if (shapeFlag & 128) {
            type.process(
              n1,
              n2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized,
              internals
            );
          } else if (true) {
            warn$1("Invalid VNode type:", type, `(${typeof type})`);
          }
      }
      if (ref2 != null && parentComponent) {
        setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
      }
    };
    const processText = (n1, n2, container, anchor) => {
      if (n1 == null) {
        hostInsert(
          n2.el = hostCreateText(n2.children),
          container,
          anchor
        );
      } else {
        const el = n2.el = n1.el;
        if (n2.children !== n1.children) {
          hostSetText(el, n2.children);
        }
      }
    };
    const processCommentNode = (n1, n2, container, anchor) => {
      if (n1 == null) {
        hostInsert(
          n2.el = hostCreateComment(n2.children || ""),
          container,
          anchor
        );
      } else {
        n2.el = n1.el;
      }
    };
    const mountStaticNode = (n2, container, anchor, namespace) => {
      [n2.el, n2.anchor] = hostInsertStaticContent(
        n2.children,
        container,
        anchor,
        namespace,
        n2.el,
        n2.anchor
      );
    };
    const patchStaticNode = (n1, n2, container, namespace) => {
      if (n2.children !== n1.children) {
        const anchor = hostNextSibling(n1.anchor);
        removeStaticNode(n1);
        [n2.el, n2.anchor] = hostInsertStaticContent(
          n2.children,
          container,
          anchor,
          namespace
        );
      } else {
        n2.el = n1.el;
        n2.anchor = n1.anchor;
      }
    };
    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
      let next;
      while (el && el !== anchor) {
        next = hostNextSibling(el);
        hostInsert(el, container, nextSibling);
        el = next;
      }
      hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el, anchor }) => {
      let next;
      while (el && el !== anchor) {
        next = hostNextSibling(el);
        hostRemove(el);
        el = next;
      }
      hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
      if (n2.type === "svg") {
        namespace = "svg";
      } else if (n2.type === "math") {
        namespace = "mathml";
      }
      if (n1 == null) {
        mountElement(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        patchElement(
          n1,
          n2,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
      let el;
      let vnodeHook;
      const { props, shapeFlag, transition, dirs } = vnode;
      el = vnode.el = hostCreateElement(
        vnode.type,
        namespace,
        props && props.is,
        props
      );
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(
          vnode.children,
          el,
          null,
          parentComponent,
          parentSuspense,
          resolveChildrenNamespace(vnode, namespace),
          slotScopeIds,
          optimized
        );
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
      if (props) {
        for (const key in props) {
          if (key !== "value" && !isReservedProp(key)) {
            hostPatchProp(el, key, null, props[key], namespace, parentComponent);
          }
        }
        if ("value" in props) {
          hostPatchProp(el, "value", null, props.value, namespace);
        }
        if (vnodeHook = props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      if (true) {
        def(el, "__vnode", vnode, true);
        def(el, "__vueParentComponent", parentComponent, true);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
      }
      const needCallTransitionHooks = needTransition(parentSuspense, transition);
      if (needCallTransitionHooks) {
        transition.beforeEnter(el);
      }
      hostInsert(el, container, anchor);
      if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
        queuePostRenderEffect(() => {
          vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
          needCallTransitionHooks && transition.enter(el);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
      }
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
      if (scopeId) {
        hostSetScopeId(el, scopeId);
      }
      if (slotScopeIds) {
        for (let i = 0; i < slotScopeIds.length; i++) {
          hostSetScopeId(el, slotScopeIds[i]);
        }
      }
      if (parentComponent) {
        let subTree = parentComponent.subTree;
        if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
          subTree = filterSingleRoot(subTree.children) || subTree;
        }
        if (vnode === subTree || isSuspense(subTree.type) && (subTree.ssContent === vnode || subTree.ssFallback === vnode)) {
          const parentVNode = parentComponent.vnode;
          setScopeId(
            el,
            parentVNode,
            parentVNode.scopeId,
            parentVNode.slotScopeIds,
            parentComponent.parent
          );
        }
      }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {
      for (let i = start; i < children.length; i++) {
        const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
        patch(
          null,
          child,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
      const el = n2.el = n1.el;
      if (true) {
        el.__vnode = n2;
      }
      let { patchFlag, dynamicChildren, dirs } = n2;
      patchFlag |= n1.patchFlag & 16;
      const oldProps = n1.props || EMPTY_OBJ;
      const newProps = n2.props || EMPTY_OBJ;
      let vnodeHook;
      parentComponent && toggleRecurse(parentComponent, false);
      if (vnodeHook = newProps.onVnodeBeforeUpdate) {
        invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
      }
      if (dirs) {
        invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
      }
      parentComponent && toggleRecurse(parentComponent, true);
      if (isHmrUpdating) {
        patchFlag = 0;
        optimized = false;
        dynamicChildren = null;
      }
      if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) {
        hostSetElementText(el, "");
      }
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          el,
          parentComponent,
          parentSuspense,
          resolveChildrenNamespace(n2, namespace),
          slotScopeIds
        );
        if (true) {
          traverseStaticChildren(n1, n2);
        }
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          el,
          null,
          parentComponent,
          parentSuspense,
          resolveChildrenNamespace(n2, namespace),
          slotScopeIds,
          false
        );
      }
      if (patchFlag > 0) {
        if (patchFlag & 16) {
          patchProps(el, oldProps, newProps, parentComponent, namespace);
        } else {
          if (patchFlag & 2) {
            if (oldProps.class !== newProps.class) {
              hostPatchProp(el, "class", null, newProps.class, namespace);
            }
          }
          if (patchFlag & 4) {
            hostPatchProp(el, "style", oldProps.style, newProps.style, namespace);
          }
          if (patchFlag & 8) {
            const propsToUpdate = n2.dynamicProps;
            for (let i = 0; i < propsToUpdate.length; i++) {
              const key = propsToUpdate[i];
              const prev = oldProps[key];
              const next = newProps[key];
              if (next !== prev || key === "value") {
                hostPatchProp(el, key, prev, next, namespace, parentComponent);
              }
            }
          }
        }
        if (patchFlag & 1) {
          if (n1.children !== n2.children) {
            hostSetElementText(el, n2.children);
          }
        }
      } else if (!optimized && dynamicChildren == null) {
        patchProps(el, oldProps, newProps, parentComponent, namespace);
      }
      if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
        queuePostRenderEffect(() => {
          vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
          dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
        }, parentSuspense);
      }
    };
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
      for (let i = 0; i < newChildren.length; i++) {
        const oldVNode = oldChildren[i];
        const newVNode = newChildren[i];
        const container = (
          // oldVNode may be an errored async setup() component inside Suspense
          // which will not have a mounted element
          oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
          // of the Fragment itself so it can move its children.
          (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
          // which also requires the correct parent container
          !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
          oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
            // In other cases, the parent container is not actually used so we
            // just pass the block element here to avoid a DOM parentNode call.
            fallbackContainer
          )
        );
        patch(
          oldVNode,
          newVNode,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          true
        );
      }
    };
    const patchProps = (el, oldProps, newProps, parentComponent, namespace) => {
      if (oldProps !== newProps) {
        if (oldProps !== EMPTY_OBJ) {
          for (const key in oldProps) {
            if (!isReservedProp(key) && !(key in newProps)) {
              hostPatchProp(
                el,
                key,
                oldProps[key],
                null,
                namespace,
                parentComponent
              );
            }
          }
        }
        for (const key in newProps) {
          if (isReservedProp(key))
            continue;
          const next = newProps[key];
          const prev = oldProps[key];
          if (next !== prev && key !== "value") {
            hostPatchProp(el, key, prev, next, namespace, parentComponent);
          }
        }
        if ("value" in newProps) {
          hostPatchProp(el, "value", oldProps.value, newProps.value, namespace);
        }
      }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
      const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
      const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
      let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
      if (
        // #5523 dev root fragment may inherit directives
        isHmrUpdating || patchFlag & 2048
      ) {
        patchFlag = 0;
        optimized = false;
        dynamicChildren = null;
      }
      if (fragmentSlotScopeIds) {
        slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
      }
      if (n1 == null) {
        hostInsert(fragmentStartAnchor, container, anchor);
        hostInsert(fragmentEndAnchor, container, anchor);
        mountChildren(
          // #10007
          // such fragment like `<></>` will be compiled into
          // a fragment which doesn't have a children.
          // In this case fallback to an empty array
          n2.children || [],
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
        // of renderSlot() with no valid children
        n1.dynamicChildren) {
          patchBlockChildren(
            n1.dynamicChildren,
            dynamicChildren,
            container,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds
          );
          if (true) {
            traverseStaticChildren(n1, n2);
          } else if (
            // #2080 if the stable fragment has a key, it's a <template v-for> that may
            //  get moved around. Make sure all root level vnodes inherit el.
            // #2134 or if it's a component root, it may also get moved around
            // as the component is being moved.
            n2.key != null || parentComponent && n2 === parentComponent.subTree
          ) {
            traverseStaticChildren(
              n1,
              n2,
              true
              /* shallow */
            );
          }
        } else {
          patchChildren(
            n1,
            n2,
            container,
            fragmentEndAnchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      }
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
      n2.slotScopeIds = slotScopeIds;
      if (n1 == null) {
        if (n2.shapeFlag & 512) {
          parentComponent.ctx.activate(
            n2,
            container,
            anchor,
            namespace,
            optimized
          );
        } else {
          mountComponent(
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            optimized
          );
        }
      } else {
        updateComponent(n1, n2, optimized);
      }
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {
      const instance = initialVNode.component = createComponentInstance(
        initialVNode,
        parentComponent,
        parentSuspense
      );
      if (instance.type.__hmrId) {
        registerHMR(instance);
      }
      if (true) {
        pushWarningContext(initialVNode);
        startMeasure(instance, `mount`);
      }
      if (isKeepAlive(initialVNode)) {
        instance.ctx.renderer = internals;
      }
      {
        if (true) {
          startMeasure(instance, `init`);
        }
        setupComponent(instance, false, optimized);
        if (true) {
          endMeasure(instance, `init`);
        }
      }
      if (instance.asyncDep) {
        if (isHmrUpdating)
          initialVNode.el = null;
        parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
        if (!initialVNode.el) {
          const placeholder = instance.subTree = createVNode(Comment);
          processCommentNode(null, placeholder, container, anchor);
        }
      } else {
        setupRenderEffect(
          instance,
          initialVNode,
          container,
          anchor,
          parentSuspense,
          namespace,
          optimized
        );
      }
      if (true) {
        popWarningContext();
        endMeasure(instance, `mount`);
      }
    };
    const updateComponent = (n1, n2, optimized) => {
      const instance = n2.component = n1.component;
      if (shouldUpdateComponent(n1, n2, optimized)) {
        if (instance.asyncDep && !instance.asyncResolved) {
          if (true) {
            pushWarningContext(n2);
          }
          updateComponentPreRender(instance, n2, optimized);
          if (true) {
            popWarningContext();
          }
          return;
        } else {
          instance.next = n2;
          instance.update();
        }
      } else {
        n2.el = n1.el;
        instance.vnode = n2;
      }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {
      const componentUpdateFn = () => {
        if (!instance.isMounted) {
          let vnodeHook;
          const { el, props } = initialVNode;
          const { bm, m, parent, root, type } = instance;
          const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
          toggleRecurse(instance, false);
          if (bm) {
            invokeArrayFns(bm);
          }
          if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
            invokeVNodeHook(vnodeHook, parent, initialVNode);
          }
          toggleRecurse(instance, true);
          if (el && hydrateNode) {
            const hydrateSubTree = () => {
              if (true) {
                startMeasure(instance, `render`);
              }
              instance.subTree = renderComponentRoot(instance);
              if (true) {
                endMeasure(instance, `render`);
              }
              if (true) {
                startMeasure(instance, `hydrate`);
              }
              hydrateNode(
                el,
                instance.subTree,
                instance,
                parentSuspense,
                null
              );
              if (true) {
                endMeasure(instance, `hydrate`);
              }
            };
            if (isAsyncWrapperVNode && type.__asyncHydrate) {
              type.__asyncHydrate(
                el,
                instance,
                hydrateSubTree
              );
            } else {
              hydrateSubTree();
            }
          } else {
            if (root.ce) {
              root.ce._injectChildStyle(type);
            }
            if (true) {
              startMeasure(instance, `render`);
            }
            const subTree = instance.subTree = renderComponentRoot(instance);
            if (true) {
              endMeasure(instance, `render`);
            }
            if (true) {
              startMeasure(instance, `patch`);
            }
            patch(
              null,
              subTree,
              container,
              anchor,
              instance,
              parentSuspense,
              namespace
            );
            if (true) {
              endMeasure(instance, `patch`);
            }
            initialVNode.el = subTree.el;
          }
          if (m) {
            queuePostRenderEffect(m, parentSuspense);
          }
          if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
            const scopedInitialVNode = initialVNode;
            queuePostRenderEffect(
              () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
              parentSuspense
            );
          }
          if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
            instance.a && queuePostRenderEffect(instance.a, parentSuspense);
          }
          instance.isMounted = true;
          if (true) {
            devtoolsComponentAdded(instance);
          }
          initialVNode = container = anchor = null;
        } else {
          let { next, bu, u, parent, vnode } = instance;
          {
            const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
            if (nonHydratedAsyncRoot) {
              if (next) {
                next.el = vnode.el;
                updateComponentPreRender(instance, next, optimized);
              }
              nonHydratedAsyncRoot.asyncDep.then(() => {
                if (!instance.isUnmounted) {
                  componentUpdateFn();
                }
              });
              return;
            }
          }
          let originNext = next;
          let vnodeHook;
          if (true) {
            pushWarningContext(next || instance.vnode);
          }
          toggleRecurse(instance, false);
          if (next) {
            next.el = vnode.el;
            updateComponentPreRender(instance, next, optimized);
          } else {
            next = vnode;
          }
          if (bu) {
            invokeArrayFns(bu);
          }
          if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
            invokeVNodeHook(vnodeHook, parent, next, vnode);
          }
          toggleRecurse(instance, true);
          if (true) {
            startMeasure(instance, `render`);
          }
          const nextTree = renderComponentRoot(instance);
          if (true) {
            endMeasure(instance, `render`);
          }
          const prevTree = instance.subTree;
          instance.subTree = nextTree;
          if (true) {
            startMeasure(instance, `patch`);
          }
          patch(
            prevTree,
            nextTree,
            // parent may have changed if it's in a teleport
            hostParentNode(prevTree.el),
            // anchor may have changed if it's in a fragment
            getNextHostNode(prevTree),
            instance,
            parentSuspense,
            namespace
          );
          if (true) {
            endMeasure(instance, `patch`);
          }
          next.el = nextTree.el;
          if (originNext === null) {
            updateHOCHostEl(instance, nextTree.el);
          }
          if (u) {
            queuePostRenderEffect(u, parentSuspense);
          }
          if (vnodeHook = next.props && next.props.onVnodeUpdated) {
            queuePostRenderEffect(
              () => invokeVNodeHook(vnodeHook, parent, next, vnode),
              parentSuspense
            );
          }
          if (true) {
            devtoolsComponentUpdated(instance);
          }
          if (true) {
            popWarningContext();
          }
        }
      };
      instance.scope.on();
      const effect2 = instance.effect = new ReactiveEffect(componentUpdateFn);
      instance.scope.off();
      const update = instance.update = effect2.run.bind(effect2);
      const job = instance.job = effect2.runIfDirty.bind(effect2);
      job.i = instance;
      job.id = instance.uid;
      effect2.scheduler = () => queueJob(job);
      toggleRecurse(instance, true);
      if (true) {
        effect2.onTrack = instance.rtc ? (e) => invokeArrayFns(instance.rtc, e) : void 0;
        effect2.onTrigger = instance.rtg ? (e) => invokeArrayFns(instance.rtg, e) : void 0;
      }
      update();
    };
    const updateComponentPreRender = (instance, nextVNode, optimized) => {
      nextVNode.component = instance;
      const prevProps = instance.vnode.props;
      instance.vnode = nextVNode;
      instance.next = null;
      updateProps(instance, nextVNode.props, prevProps, optimized);
      updateSlots(instance, nextVNode.children, optimized);
      pauseTracking();
      flushPreFlushCbs(instance);
      resetTracking();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
      const c1 = n1 && n1.children;
      const prevShapeFlag = n1 ? n1.shapeFlag : 0;
      const c2 = n2.children;
      const { patchFlag, shapeFlag } = n2;
      if (patchFlag > 0) {
        if (patchFlag & 128) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          return;
        } else if (patchFlag & 256) {
          patchUnkeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          return;
        }
      }
      if (shapeFlag & 8) {
        if (prevShapeFlag & 16) {
          unmountChildren(c1, parentComponent, parentSuspense);
        }
        if (c2 !== c1) {
          hostSetElementText(container, c2);
        }
      } else {
        if (prevShapeFlag & 16) {
          if (shapeFlag & 16) {
            patchKeyedChildren(
              c1,
              c2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
          } else {
            unmountChildren(c1, parentComponent, parentSuspense, true);
          }
        } else {
          if (prevShapeFlag & 8) {
            hostSetElementText(container, "");
          }
          if (shapeFlag & 16) {
            mountChildren(
              c2,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
          }
        }
      }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
      c1 = c1 || EMPTY_ARR;
      c2 = c2 || EMPTY_ARR;
      const oldLength = c1.length;
      const newLength = c2.length;
      const commonLength = Math.min(oldLength, newLength);
      let i;
      for (i = 0; i < commonLength; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        patch(
          c1[i],
          nextChild,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
      if (oldLength > newLength) {
        unmountChildren(
          c1,
          parentComponent,
          parentSuspense,
          true,
          false,
          commonLength
        );
      } else {
        mountChildren(
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized,
          commonLength
        );
      }
    };
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
      let i = 0;
      const l2 = c2.length;
      let e1 = c1.length - 1;
      let e2 = l2 - 1;
      while (i <= e1 && i <= e2) {
        const n1 = c1[i];
        const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (isSameVNodeType(n1, n2)) {
          patch(
            n1,
            n2,
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          break;
        }
        i++;
      }
      while (i <= e1 && i <= e2) {
        const n1 = c1[e1];
        const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
        if (isSameVNodeType(n1, n2)) {
          patch(
            n1,
            n2,
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          break;
        }
        e1--;
        e2--;
      }
      if (i > e1) {
        if (i <= e2) {
          const nextPos = e2 + 1;
          const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
          while (i <= e2) {
            patch(
              null,
              c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]),
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
            i++;
          }
        }
      } else if (i > e2) {
        while (i <= e1) {
          unmount(c1[i], parentComponent, parentSuspense, true);
          i++;
        }
      } else {
        const s1 = i;
        const s2 = i;
        const keyToNewIndexMap = /* @__PURE__ */ new Map();
        for (i = s2; i <= e2; i++) {
          const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
          if (nextChild.key != null) {
            if (keyToNewIndexMap.has(nextChild.key)) {
              warn$1(
                `Duplicate keys found during update:`,
                JSON.stringify(nextChild.key),
                `Make sure keys are unique.`
              );
            }
            keyToNewIndexMap.set(nextChild.key, i);
          }
        }
        let j;
        let patched = 0;
        const toBePatched = e2 - s2 + 1;
        let moved = false;
        let maxNewIndexSoFar = 0;
        const newIndexToOldIndexMap = new Array(toBePatched);
        for (i = 0; i < toBePatched; i++)
          newIndexToOldIndexMap[i] = 0;
        for (i = s1; i <= e1; i++) {
          const prevChild = c1[i];
          if (patched >= toBePatched) {
            unmount(prevChild, parentComponent, parentSuspense, true);
            continue;
          }
          let newIndex;
          if (prevChild.key != null) {
            newIndex = keyToNewIndexMap.get(prevChild.key);
          } else {
            for (j = s2; j <= e2; j++) {
              if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                newIndex = j;
                break;
              }
            }
          }
          if (newIndex === void 0) {
            unmount(prevChild, parentComponent, parentSuspense, true);
          } else {
            newIndexToOldIndexMap[newIndex - s2] = i + 1;
            if (newIndex >= maxNewIndexSoFar) {
              maxNewIndexSoFar = newIndex;
            } else {
              moved = true;
            }
            patch(
              prevChild,
              c2[newIndex],
              container,
              null,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
            patched++;
          }
        }
        const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
        j = increasingNewIndexSequence.length - 1;
        for (i = toBePatched - 1; i >= 0; i--) {
          const nextIndex = s2 + i;
          const nextChild = c2[nextIndex];
          const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
          if (newIndexToOldIndexMap[i] === 0) {
            patch(
              null,
              nextChild,
              container,
              anchor,
              parentComponent,
              parentSuspense,
              namespace,
              slotScopeIds,
              optimized
            );
          } else if (moved) {
            if (j < 0 || i !== increasingNewIndexSequence[j]) {
              move(nextChild, container, anchor, 2);
            } else {
              j--;
            }
          }
        }
      }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
      const { el, type, transition, children, shapeFlag } = vnode;
      if (shapeFlag & 6) {
        move(vnode.component.subTree, container, anchor, moveType);
        return;
      }
      if (shapeFlag & 128) {
        vnode.suspense.move(container, anchor, moveType);
        return;
      }
      if (shapeFlag & 64) {
        type.move(vnode, container, anchor, internals);
        return;
      }
      if (type === Fragment) {
        hostInsert(el, container, anchor);
        for (let i = 0; i < children.length; i++) {
          move(children[i], container, anchor, moveType);
        }
        hostInsert(vnode.anchor, container, anchor);
        return;
      }
      if (type === Static) {
        moveStaticNode(vnode, container, anchor);
        return;
      }
      const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
      if (needTransition2) {
        if (moveType === 0) {
          transition.beforeEnter(el);
          hostInsert(el, container, anchor);
          queuePostRenderEffect(() => transition.enter(el), parentSuspense);
        } else {
          const { leave, delayLeave, afterLeave } = transition;
          const remove22 = () => hostInsert(el, container, anchor);
          const performLeave = () => {
            leave(el, () => {
              remove22();
              afterLeave && afterLeave();
            });
          };
          if (delayLeave) {
            delayLeave(el, remove22, performLeave);
          } else {
            performLeave();
          }
        }
      } else {
        hostInsert(el, container, anchor);
      }
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
      const {
        type,
        props,
        ref: ref2,
        children,
        dynamicChildren,
        shapeFlag,
        patchFlag,
        dirs,
        cacheIndex
      } = vnode;
      if (patchFlag === -2) {
        optimized = false;
      }
      if (ref2 != null) {
        setRef(ref2, null, parentSuspense, vnode, true);
      }
      if (cacheIndex != null) {
        parentComponent.renderCache[cacheIndex] = void 0;
      }
      if (shapeFlag & 256) {
        parentComponent.ctx.deactivate(vnode);
        return;
      }
      const shouldInvokeDirs = shapeFlag & 1 && dirs;
      const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
      let vnodeHook;
      if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
      if (shapeFlag & 6) {
        unmountComponent(vnode.component, parentSuspense, doRemove);
      } else {
        if (shapeFlag & 128) {
          vnode.suspense.unmount(parentSuspense, doRemove);
          return;
        }
        if (shouldInvokeDirs) {
          invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
        }
        if (shapeFlag & 64) {
          vnode.type.remove(
            vnode,
            parentComponent,
            parentSuspense,
            internals,
            doRemove
          );
        } else if (dynamicChildren && // #5154
        // when v-once is used inside a block, setBlockTracking(-1) marks the
        // parent block with hasOnce: true
        // so that it doesn't take the fast path during unmount - otherwise
        // components nested in v-once are never unmounted.
        !dynamicChildren.hasOnce && // #1153: fast path should not be taken for non-stable (v-for) fragments
        (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
          unmountChildren(
            dynamicChildren,
            parentComponent,
            parentSuspense,
            false,
            true
          );
        } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
          unmountChildren(children, parentComponent, parentSuspense);
        }
        if (doRemove) {
          remove2(vnode);
        }
      }
      if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
        queuePostRenderEffect(() => {
          vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
          shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
        }, parentSuspense);
      }
    };
    const remove2 = (vnode) => {
      const { type, el, anchor, transition } = vnode;
      if (type === Fragment) {
        if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
          vnode.children.forEach((child) => {
            if (child.type === Comment) {
              hostRemove(child.el);
            } else {
              remove2(child);
            }
          });
        } else {
          removeFragment(el, anchor);
        }
        return;
      }
      if (type === Static) {
        removeStaticNode(vnode);
        return;
      }
      const performRemove = () => {
        hostRemove(el);
        if (transition && !transition.persisted && transition.afterLeave) {
          transition.afterLeave();
        }
      };
      if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
        const { leave, delayLeave } = transition;
        const performLeave = () => leave(el, performRemove);
        if (delayLeave) {
          delayLeave(vnode.el, performRemove, performLeave);
        } else {
          performLeave();
        }
      } else {
        performRemove();
      }
    };
    const removeFragment = (cur, end) => {
      let next;
      while (cur !== end) {
        next = hostNextSibling(cur);
        hostRemove(cur);
        cur = next;
      }
      hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove) => {
      if (instance.type.__hmrId) {
        unregisterHMR(instance);
      }
      const { bum, scope, job, subTree, um, m, a } = instance;
      invalidateMount(m);
      invalidateMount(a);
      if (bum) {
        invokeArrayFns(bum);
      }
      scope.stop();
      if (job) {
        job.flags |= 8;
        unmount(subTree, instance, parentSuspense, doRemove);
      }
      if (um) {
        queuePostRenderEffect(um, parentSuspense);
      }
      queuePostRenderEffect(() => {
        instance.isUnmounted = true;
      }, parentSuspense);
      if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
        parentSuspense.deps--;
        if (parentSuspense.deps === 0) {
          parentSuspense.resolve();
        }
      }
      if (true) {
        devtoolsComponentRemoved(instance);
      }
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
      for (let i = start; i < children.length; i++) {
        unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
      }
    };
    const getNextHostNode = (vnode) => {
      if (vnode.shapeFlag & 6) {
        return getNextHostNode(vnode.component.subTree);
      }
      if (vnode.shapeFlag & 128) {
        return vnode.suspense.next();
      }
      const el = hostNextSibling(vnode.anchor || vnode.el);
      const teleportEnd = el && el[TeleportEndKey];
      return teleportEnd ? hostNextSibling(teleportEnd) : el;
    };
    let isFlushing = false;
    const render5 = (vnode, container, namespace) => {
      if (vnode == null) {
        if (container._vnode) {
          unmount(container._vnode, null, null, true);
        }
      } else {
        patch(
          container._vnode || null,
          vnode,
          container,
          null,
          null,
          null,
          namespace
        );
      }
      container._vnode = vnode;
      if (!isFlushing) {
        isFlushing = true;
        flushPreFlushCbs();
        flushPostFlushCbs();
        isFlushing = false;
      }
    };
    const internals = {
      p: patch,
      um: unmount,
      m: move,
      r: remove2,
      mt: mountComponent,
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      n: getNextHostNode,
      o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) {
      [hydrate, hydrateNode] = createHydrationFns(
        internals
      );
    }
    return {
      render: render5,
      hydrate,
      createApp: createAppAPI(render5, hydrate)
    };
  }
  function resolveChildrenNamespace({ type, props }, currentNamespace) {
    return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
  }
  function toggleRecurse({ effect: effect2, job }, allowed) {
    if (allowed) {
      effect2.flags |= 32;
      job.flags |= 4;
    } else {
      effect2.flags &= ~32;
      job.flags &= ~4;
    }
  }
  function needTransition(parentSuspense, transition) {
    return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
  }
  function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if (isArray(ch1) && isArray(ch2)) {
      for (let i = 0; i < ch1.length; i++) {
        const c1 = ch1[i];
        let c2 = ch2[i];
        if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
          if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
            c2 = ch2[i] = cloneIfMounted(ch2[i]);
            c2.el = c1.el;
          }
          if (!shallow && c2.patchFlag !== -2)
            traverseStaticChildren(c1, c2);
        }
        if (c2.type === Text) {
          c2.el = c1.el;
        }
        if (c2.type === Comment && !c2.el) {
          c2.el = c1.el;
        }
      }
    }
  }
  function getSequence(arr) {
    const p2 = arr.slice();
    const result = [0];
    let i, j, u, v, c;
    const len = arr.length;
    for (i = 0; i < len; i++) {
      const arrI = arr[i];
      if (arrI !== 0) {
        j = result[result.length - 1];
        if (arr[j] < arrI) {
          p2[i] = j;
          result.push(i);
          continue;
        }
        u = 0;
        v = result.length - 1;
        while (u < v) {
          c = u + v >> 1;
          if (arr[result[c]] < arrI) {
            u = c + 1;
          } else {
            v = c;
          }
        }
        if (arrI < arr[result[u]]) {
          if (u > 0) {
            p2[i] = result[u - 1];
          }
          result[u] = i;
        }
      }
    }
    u = result.length;
    v = result[u - 1];
    while (u-- > 0) {
      result[u] = v;
      v = p2[v];
    }
    return result;
  }
  function locateNonHydratedAsyncRoot(instance) {
    const subComponent = instance.subTree.component;
    if (subComponent) {
      if (subComponent.asyncDep && !subComponent.asyncResolved) {
        return subComponent;
      } else {
        return locateNonHydratedAsyncRoot(subComponent);
      }
    }
  }
  function invalidateMount(hooks) {
    if (hooks) {
      for (let i = 0; i < hooks.length; i++)
        hooks[i].flags |= 8;
    }
  }
  var ssrContextKey = Symbol.for("v-scx");
  var useSSRContext = () => {
    {
      const ctx = inject(ssrContextKey);
      if (!ctx) {
        warn$1(
          `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
        );
      }
      return ctx;
    }
  };
  function watchEffect(effect2, options) {
    return doWatch(effect2, null, options);
  }
  function watchSyncEffect(effect2, options) {
    return doWatch(
      effect2,
      null,
      true ? extend({}, options, { flush: "sync" }) : { flush: "sync" }
    );
  }
  function watch2(source, cb, options) {
    if (!isFunction(cb)) {
      warn$1(
        `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
      );
    }
    return doWatch(source, cb, options);
  }
  function doWatch(source, cb, options = EMPTY_OBJ) {
    const { immediate, deep, flush, once } = options;
    if (!cb) {
      if (immediate !== void 0) {
        warn$1(
          `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
        );
      }
      if (deep !== void 0) {
        warn$1(
          `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
        );
      }
      if (once !== void 0) {
        warn$1(
          `watch() "once" option is only respected when using the watch(source, callback, options?) signature.`
        );
      }
    }
    const baseWatchOptions = extend({}, options);
    if (true)
      baseWatchOptions.onWarn = warn$1;
    const runsImmediately = cb && immediate || !cb && flush !== "post";
    let ssrCleanup;
    if (isInSSRComponentSetup) {
      if (flush === "sync") {
        const ctx = useSSRContext();
        ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
      } else if (!runsImmediately) {
        const watchStopHandle = () => {
        };
        watchStopHandle.stop = NOOP;
        watchStopHandle.resume = NOOP;
        watchStopHandle.pause = NOOP;
        return watchStopHandle;
      }
    }
    const instance = currentInstance;
    baseWatchOptions.call = (fn, type, args) => callWithAsyncErrorHandling(fn, instance, type, args);
    let isPre = false;
    if (flush === "post") {
      baseWatchOptions.scheduler = (job) => {
        queuePostRenderEffect(job, instance && instance.suspense);
      };
    } else if (flush !== "sync") {
      isPre = true;
      baseWatchOptions.scheduler = (job, isFirstRun) => {
        if (isFirstRun) {
          job();
        } else {
          queueJob(job);
        }
      };
    }
    baseWatchOptions.augmentJob = (job) => {
      if (cb) {
        job.flags |= 4;
      }
      if (isPre) {
        job.flags |= 2;
        if (instance) {
          job.id = instance.uid;
          job.i = instance;
        }
      }
    };
    const watchHandle = watch(source, cb, baseWatchOptions);
    if (isInSSRComponentSetup) {
      if (ssrCleanup) {
        ssrCleanup.push(watchHandle);
      } else if (runsImmediately) {
        watchHandle();
      }
    }
    return watchHandle;
  }
  function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
    let cb;
    if (isFunction(value)) {
      cb = value;
    } else {
      cb = value.handler;
      options = value;
    }
    const reset = setCurrentInstance(this);
    const res = doWatch(getter, cb.bind(publicThis), options);
    reset();
    return res;
  }
  function createPathGetter(ctx, path) {
    const segments = path.split(".");
    return () => {
      let cur = ctx;
      for (let i = 0; i < segments.length && cur; i++) {
        cur = cur[segments[i]];
      }
      return cur;
    };
  }
  function useModel(props, name, options = EMPTY_OBJ) {
    const i = getCurrentInstance();
    if (!i) {
      warn$1(`useModel() called without active instance.`);
      return ref();
    }
    const camelizedName = camelize(name);
    if (!i.propsOptions[0][camelizedName]) {
      warn$1(`useModel() called with prop "${name}" which is not declared.`);
      return ref();
    }
    const hyphenatedName = hyphenate(name);
    const modifiers = getModelModifiers(props, camelizedName);
    const res = customRef((track2, trigger2) => {
      let localValue;
      let prevSetValue = EMPTY_OBJ;
      let prevEmittedValue;
      watchSyncEffect(() => {
        const propValue = props[camelizedName];
        if (hasChanged(localValue, propValue)) {
          localValue = propValue;
          trigger2();
        }
      });
      return {
        get() {
          track2();
          return options.get ? options.get(localValue) : localValue;
        },
        set(value) {
          const emittedValue = options.set ? options.set(value) : value;
          if (!hasChanged(emittedValue, localValue) && !(prevSetValue !== EMPTY_OBJ && hasChanged(value, prevSetValue))) {
            return;
          }
          const rawProps = i.vnode.props;
          if (!(rawProps && // check if parent has passed v-model
          (name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps))) {
            localValue = value;
            trigger2();
          }
          i.emit(`update:${name}`, emittedValue);
          if (hasChanged(value, emittedValue) && hasChanged(value, prevSetValue) && !hasChanged(emittedValue, prevEmittedValue)) {
            trigger2();
          }
          prevSetValue = value;
          prevEmittedValue = emittedValue;
        }
      };
    });
    res[Symbol.iterator] = () => {
      let i2 = 0;
      return {
        next() {
          if (i2 < 2) {
            return { value: i2++ ? modifiers || EMPTY_OBJ : res, done: false };
          } else {
            return { done: true };
          }
        }
      };
    };
    return res;
  }
  var getModelModifiers = (props, modelName) => {
    return modelName === "modelValue" || modelName === "model-value" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${camelize(modelName)}Modifiers`] || props[`${hyphenate(modelName)}Modifiers`];
  };
  function emit(instance, event, ...rawArgs) {
    if (instance.isUnmounted)
      return;
    const props = instance.vnode.props || EMPTY_OBJ;
    if (true) {
      const {
        emitsOptions,
        propsOptions: [propsOptions]
      } = instance;
      if (emitsOptions) {
        if (!(event in emitsOptions) && true) {
          if (!propsOptions || !(toHandlerKey(camelize(event)) in propsOptions)) {
            warn$1(
              `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(camelize(event))}" prop.`
            );
          }
        } else {
          const validator = emitsOptions[event];
          if (isFunction(validator)) {
            const isValid = validator(...rawArgs);
            if (!isValid) {
              warn$1(
                `Invalid event arguments: event validation failed for event "${event}".`
              );
            }
          }
        }
      }
    }
    let args = rawArgs;
    const isModelListener2 = event.startsWith("update:");
    const modifiers = isModelListener2 && getModelModifiers(props, event.slice(7));
    if (modifiers) {
      if (modifiers.trim) {
        args = rawArgs.map((a) => isString(a) ? a.trim() : a);
      }
      if (modifiers.number) {
        args = rawArgs.map(looseToNumber);
      }
    }
    if (true) {
      devtoolsComponentEmit(instance, event, args);
    }
    if (true) {
      const lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
        warn$1(
          `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
            instance,
            instance.type
          )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(
            event
          )}" instead of "${event}".`
        );
      }
    }
    let handlerName;
    let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
    props[handlerName = toHandlerKey(camelize(event))];
    if (!handler && isModelListener2) {
      handler = props[handlerName = toHandlerKey(hyphenate(event))];
    }
    if (handler) {
      callWithAsyncErrorHandling(
        handler,
        instance,
        6,
        args
      );
    }
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
      if (!instance.emitted) {
        instance.emitted = {};
      } else if (instance.emitted[handlerName]) {
        return;
      }
      instance.emitted[handlerName] = true;
      callWithAsyncErrorHandling(
        onceHandler,
        instance,
        6,
        args
      );
    }
  }
  function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== void 0) {
      return cached;
    }
    const raw = comp.emits;
    let normalized = {};
    let hasExtends = false;
    if (!isFunction(comp)) {
      const extendEmits = (raw2) => {
        const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
        if (normalizedFromExtend) {
          hasExtends = true;
          extend(normalized, normalizedFromExtend);
        }
      };
      if (!asMixin && appContext.mixins.length) {
        appContext.mixins.forEach(extendEmits);
      }
      if (comp.extends) {
        extendEmits(comp.extends);
      }
      if (comp.mixins) {
        comp.mixins.forEach(extendEmits);
      }
    }
    if (!raw && !hasExtends) {
      if (isObject(comp)) {
        cache.set(comp, null);
      }
      return null;
    }
    if (isArray(raw)) {
      raw.forEach((key) => normalized[key] = null);
    } else {
      extend(normalized, raw);
    }
    if (isObject(comp)) {
      cache.set(comp, normalized);
    }
    return normalized;
  }
  function isEmitListener(options, key) {
    if (!options || !isOn(key)) {
      return false;
    }
    key = key.slice(2).replace(/Once$/, "");
    return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
  }
  var accessedAttrs = false;
  function markAttrsAccessed() {
    accessedAttrs = true;
  }
  function renderComponentRoot(instance) {
    const {
      type: Component,
      vnode,
      proxy,
      withProxy,
      propsOptions: [propsOptions],
      slots,
      attrs,
      emit: emit2,
      render: render5,
      renderCache,
      props,
      data,
      setupState,
      ctx,
      inheritAttrs
    } = instance;
    const prev = setCurrentRenderingInstance(instance);
    let result;
    let fallthroughAttrs;
    if (true) {
      accessedAttrs = false;
    }
    try {
      if (vnode.shapeFlag & 4) {
        const proxyToUse = withProxy || proxy;
        const thisProxy = setupState.__isScriptSetup ? new Proxy(proxyToUse, {
          get(target, key, receiver) {
            warn$1(
              `Property '${String(
                key
              )}' was accessed via 'this'. Avoid using 'this' in templates.`
            );
            return Reflect.get(target, key, receiver);
          }
        }) : proxyToUse;
        result = normalizeVNode(
          render5.call(
            thisProxy,
            proxyToUse,
            renderCache,
            true ? shallowReadonly(props) : props,
            setupState,
            data,
            ctx
          )
        );
        fallthroughAttrs = attrs;
      } else {
        const render22 = Component;
        if (attrs === props) {
          markAttrsAccessed();
        }
        result = normalizeVNode(
          render22.length > 1 ? render22(
            true ? shallowReadonly(props) : props,
            true ? {
              get attrs() {
                markAttrsAccessed();
                return shallowReadonly(attrs);
              },
              slots,
              emit: emit2
            } : { attrs, slots, emit: emit2 }
          ) : render22(
            true ? shallowReadonly(props) : props,
            null
          )
        );
        fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
      }
    } catch (err) {
      blockStack.length = 0;
      handleError(err, instance, 1);
      result = createVNode(Comment);
    }
    let root = result;
    let setRoot = void 0;
    if (result.patchFlag > 0 && result.patchFlag & 2048) {
      [root, setRoot] = getChildRoot(result);
    }
    if (fallthroughAttrs && inheritAttrs !== false) {
      const keys = Object.keys(fallthroughAttrs);
      const { shapeFlag } = root;
      if (keys.length) {
        if (shapeFlag & (1 | 6)) {
          if (propsOptions && keys.some(isModelListener)) {
            fallthroughAttrs = filterModelListeners(
              fallthroughAttrs,
              propsOptions
            );
          }
          root = cloneVNode(root, fallthroughAttrs, false, true);
        } else if (!accessedAttrs && root.type !== Comment) {
          const allAttrs = Object.keys(attrs);
          const eventAttrs = [];
          const extraAttrs = [];
          for (let i = 0, l = allAttrs.length; i < l; i++) {
            const key = allAttrs[i];
            if (isOn(key)) {
              if (!isModelListener(key)) {
                eventAttrs.push(key[2].toLowerCase() + key.slice(3));
              }
            } else {
              extraAttrs.push(key);
            }
          }
          if (extraAttrs.length) {
            warn$1(
              `Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text or teleport root nodes.`
            );
          }
          if (eventAttrs.length) {
            warn$1(
              `Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
            );
          }
        }
      }
    }
    if (vnode.dirs) {
      if (!isElementRoot(root)) {
        warn$1(
          `Runtime directive used on component with non-element root node. The directives will not function as intended.`
        );
      }
      root = cloneVNode(root, null, false, true);
      root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    if (vnode.transition) {
      if (!isElementRoot(root)) {
        warn$1(
          `Component inside <Transition> renders non-element root node that cannot be animated.`
        );
      }
      setTransitionHooks(root, vnode.transition);
    }
    if (setRoot) {
      setRoot(root);
    } else {
      result = root;
    }
    setCurrentRenderingInstance(prev);
    return result;
  }
  var getChildRoot = (vnode) => {
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren, false);
    if (!childRoot) {
      return [vnode, void 0];
    } else if (childRoot.patchFlag > 0 && childRoot.patchFlag & 2048) {
      return getChildRoot(childRoot);
    }
    const index7 = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot) => {
      rawChildren[index7] = updatedRoot;
      if (dynamicChildren) {
        if (dynamicIndex > -1) {
          dynamicChildren[dynamicIndex] = updatedRoot;
        } else if (updatedRoot.patchFlag > 0) {
          vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
        }
      }
    };
    return [normalizeVNode(childRoot), setRoot];
  };
  function filterSingleRoot(children, recurse = true) {
    let singleRoot;
    for (let i = 0; i < children.length; i++) {
      const child = children[i];
      if (isVNode(child)) {
        if (child.type !== Comment || child.children === "v-if") {
          if (singleRoot) {
            return;
          } else {
            singleRoot = child;
            if (recurse && singleRoot.patchFlag > 0 && singleRoot.patchFlag & 2048) {
              return filterSingleRoot(singleRoot.children);
            }
          }
        }
      } else {
        return;
      }
    }
    return singleRoot;
  }
  var getFunctionalFallthrough = (attrs) => {
    let res;
    for (const key in attrs) {
      if (key === "class" || key === "style" || isOn(key)) {
        (res || (res = {}))[key] = attrs[key];
      }
    }
    return res;
  };
  var filterModelListeners = (attrs, props) => {
    const res = {};
    for (const key in attrs) {
      if (!isModelListener(key) || !(key.slice(9) in props)) {
        res[key] = attrs[key];
      }
    }
    return res;
  };
  var isElementRoot = (vnode) => {
    return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
  };
  function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps, children: prevChildren, component } = prevVNode;
    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
    const emits = component.emitsOptions;
    if ((prevChildren || nextChildren) && isHmrUpdating) {
      return true;
    }
    if (nextVNode.dirs || nextVNode.transition) {
      return true;
    }
    if (optimized && patchFlag >= 0) {
      if (patchFlag & 1024) {
        return true;
      }
      if (patchFlag & 16) {
        if (!prevProps) {
          return !!nextProps;
        }
        return hasPropsChanged(prevProps, nextProps, emits);
      } else if (patchFlag & 8) {
        const dynamicProps = nextVNode.dynamicProps;
        for (let i = 0; i < dynamicProps.length; i++) {
          const key = dynamicProps[i];
          if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
            return true;
          }
        }
      }
    } else {
      if (prevChildren || nextChildren) {
        if (!nextChildren || !nextChildren.$stable) {
          return true;
        }
      }
      if (prevProps === nextProps) {
        return false;
      }
      if (!prevProps) {
        return !!nextProps;
      }
      if (!nextProps) {
        return true;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
  }
  function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) {
      return true;
    }
    for (let i = 0; i < nextKeys.length; i++) {
      const key = nextKeys[i];
      if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
        return true;
      }
    }
    return false;
  }
  function updateHOCHostEl({ vnode, parent }, el) {
    while (parent) {
      const root = parent.subTree;
      if (root.suspense && root.suspense.activeBranch === vnode) {
        root.el = vnode.el;
      }
      if (root === vnode) {
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
      } else {
        break;
      }
    }
  }
  var isSuspense = (type) => type.__isSuspense;
  function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
      if (isArray(fn)) {
        suspense.effects.push(...fn);
      } else {
        suspense.effects.push(fn);
      }
    } else {
      queuePostFlushCb(fn);
    }
  }
  var Fragment = Symbol.for("v-fgt");
  var Text = Symbol.for("v-txt");
  var Comment = Symbol.for("v-cmt");
  var Static = Symbol.for("v-stc");
  var blockStack = [];
  var currentBlock = null;
  function openBlock(disableTracking = false) {
    blockStack.push(currentBlock = disableTracking ? null : []);
  }
  function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
  }
  var isBlockTreeEnabled = 1;
  function setBlockTracking(value, inVOnce = false) {
    isBlockTreeEnabled += value;
    if (value < 0 && currentBlock && inVOnce) {
      currentBlock.hasOnce = true;
    }
  }
  function setupBlock(vnode) {
    vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
    closeBlock();
    if (isBlockTreeEnabled > 0 && currentBlock) {
      currentBlock.push(vnode);
    }
    return vnode;
  }
  function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
    return setupBlock(
      createBaseVNode(
        type,
        props,
        children,
        patchFlag,
        dynamicProps,
        shapeFlag,
        true
      )
    );
  }
  function createBlock(type, props, children, patchFlag, dynamicProps) {
    return setupBlock(
      createVNode(
        type,
        props,
        children,
        patchFlag,
        dynamicProps,
        true
      )
    );
  }
  function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
  }
  function isSameVNodeType(n1, n2) {
    if (n2.shapeFlag & 6 && n1.component) {
      const dirtyInstances = hmrDirtyComponents.get(n2.type);
      if (dirtyInstances && dirtyInstances.has(n1.component)) {
        n1.shapeFlag &= ~256;
        n2.shapeFlag &= ~512;
        return false;
      }
    }
    return n1.type === n2.type && n1.key === n2.key;
  }
  var vnodeArgsTransformer;
  var createVNodeWithArgsTransform = (...args) => {
    return _createVNode(
      ...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args
    );
  };
  var normalizeKey = ({ key }) => key != null ? key : null;
  var normalizeRef = ({
    ref: ref2,
    ref_key,
    ref_for
  }) => {
    if (typeof ref2 === "number") {
      ref2 = "" + ref2;
    }
    return ref2 != null ? isString(ref2) || isRef2(ref2) || isFunction(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
  };
  function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
    const vnode = {
      __v_isVNode: true,
      __v_skip: true,
      type,
      props,
      key: props && normalizeKey(props),
      ref: props && normalizeRef(props),
      scopeId: currentScopeId,
      slotScopeIds: null,
      children,
      component: null,
      suspense: null,
      ssContent: null,
      ssFallback: null,
      dirs: null,
      transition: null,
      el: null,
      anchor: null,
      target: null,
      targetStart: null,
      targetAnchor: null,
      staticCount: 0,
      shapeFlag,
      patchFlag,
      dynamicProps,
      dynamicChildren: null,
      appContext: null,
      ctx: currentRenderingInstance
    };
    if (needFullChildrenNormalization) {
      normalizeChildren(vnode, children);
      if (shapeFlag & 128) {
        type.normalize(vnode);
      }
    } else if (children) {
      vnode.shapeFlag |= isString(children) ? 8 : 16;
    }
    if (vnode.key !== vnode.key) {
      warn$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    }
    if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
    !isBlockNode && // has current parent block
    currentBlock && // presence of a patch flag indicates this node needs patching on updates.
    // component nodes also should always be patched, because even if the
    // component doesn't need to update, it needs to persist the instance on to
    // the next vnode so that it can be properly unmounted later.
    (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
    // vnode should not be considered dynamic due to handler caching.
    vnode.patchFlag !== 32) {
      currentBlock.push(vnode);
    }
    return vnode;
  }
  var createVNode = true ? createVNodeWithArgsTransform : _createVNode;
  function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
      if (!type) {
        warn$1(`Invalid vnode type when creating vnode: ${type}.`);
      }
      type = Comment;
    }
    if (isVNode(type)) {
      const cloned = cloneVNode(
        type,
        props,
        true
        /* mergeRef: true */
      );
      if (children) {
        normalizeChildren(cloned, children);
      }
      if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
        if (cloned.shapeFlag & 6) {
          currentBlock[currentBlock.indexOf(type)] = cloned;
        } else {
          currentBlock.push(cloned);
        }
      }
      cloned.patchFlag = -2;
      return cloned;
    }
    if (isClassComponent(type)) {
      type = type.__vccOpts;
    }
    if (props) {
      props = guardReactiveProps(props);
      let { class: klass, style } = props;
      if (klass && !isString(klass)) {
        props.class = normalizeClass(klass);
      }
      if (isObject(style)) {
        if (isProxy(style) && !isArray(style)) {
          style = extend({}, style);
        }
        props.style = normalizeStyle(style);
      }
    }
    const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
    if (shapeFlag & 4 && isProxy(type)) {
      type = toRaw(type);
      warn$1(
        `Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
        `
Component that was made reactive: `,
        type
      );
    }
    return createBaseVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      isBlockNode,
      true
    );
  }
  function guardReactiveProps(props) {
    if (!props)
      return null;
    return isProxy(props) || isInternalObject(props) ? extend({}, props) : props;
  }
  function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
    const { props, ref: ref2, patchFlag, children, transition } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
    const cloned = {
      __v_isVNode: true,
      __v_skip: true,
      type: vnode.type,
      props: mergedProps,
      key: mergedProps && normalizeKey(mergedProps),
      ref: extraProps && extraProps.ref ? (
        // #2078 in the case of <component :is="vnode" ref="extra"/>
        // if the vnode itself already has a ref, cloneVNode will need to merge
        // the refs so the single vnode can be set on multiple refs
        mergeRef && ref2 ? isArray(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps)
      ) : ref2,
      scopeId: vnode.scopeId,
      slotScopeIds: vnode.slotScopeIds,
      children: patchFlag === -1 && isArray(children) ? children.map(deepCloneVNode) : children,
      target: vnode.target,
      targetStart: vnode.targetStart,
      targetAnchor: vnode.targetAnchor,
      staticCount: vnode.staticCount,
      shapeFlag: vnode.shapeFlag,
      // if the vnode is cloned with extra props, we can no longer assume its
      // existing patch flag to be reliable and need to add the FULL_PROPS flag.
      // note: preserve flag for fragments since they use the flag for children
      // fast paths only.
      patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
      dynamicProps: vnode.dynamicProps,
      dynamicChildren: vnode.dynamicChildren,
      appContext: vnode.appContext,
      dirs: vnode.dirs,
      transition,
      // These should technically only be non-null on mounted VNodes. However,
      // they *should* be copied for kept-alive vnodes. So we just always copy
      // them since them being non-null during a mount doesn't affect the logic as
      // they will simply be overwritten.
      component: vnode.component,
      suspense: vnode.suspense,
      ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
      ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
      el: vnode.el,
      anchor: vnode.anchor,
      ctx: vnode.ctx,
      ce: vnode.ce
    };
    if (transition && cloneTransition) {
      setTransitionHooks(
        cloned,
        transition.clone(cloned)
      );
    }
    return cloned;
  }
  function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if (isArray(vnode.children)) {
      cloned.children = vnode.children.map(deepCloneVNode);
    }
    return cloned;
  }
  function createTextVNode(text = " ", flag = 0) {
    return createVNode(Text, null, text, flag);
  }
  function createCommentVNode(text = "", asBlock = false) {
    return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
  }
  function normalizeVNode(child) {
    if (child == null || typeof child === "boolean") {
      return createVNode(Comment);
    } else if (isArray(child)) {
      return createVNode(
        Fragment,
        null,
        // #3666, avoid reference pollution when reusing vnode
        child.slice()
      );
    } else if (isVNode(child)) {
      return cloneIfMounted(child);
    } else {
      return createVNode(Text, null, String(child));
    }
  }
  function cloneIfMounted(child) {
    return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
  }
  function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag } = vnode;
    if (children == null) {
      children = null;
    } else if (isArray(children)) {
      type = 16;
    } else if (typeof children === "object") {
      if (shapeFlag & (1 | 64)) {
        const slot = children.default;
        if (slot) {
          slot._c && (slot._d = false);
          normalizeChildren(vnode, slot());
          slot._c && (slot._d = true);
        }
        return;
      } else {
        type = 32;
        const slotFlag = children._;
        if (!slotFlag && !isInternalObject(children)) {
          children._ctx = currentRenderingInstance;
        } else if (slotFlag === 3 && currentRenderingInstance) {
          if (currentRenderingInstance.slots._ === 1) {
            children._ = 1;
          } else {
            children._ = 2;
            vnode.patchFlag |= 1024;
          }
        }
      }
    } else if (isFunction(children)) {
      children = { default: children, _ctx: currentRenderingInstance };
      type = 32;
    } else {
      children = String(children);
      if (shapeFlag & 64) {
        type = 16;
        children = [createTextVNode(children)];
      } else {
        type = 8;
      }
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
  }
  function mergeProps(...args) {
    const ret = {};
    for (let i = 0; i < args.length; i++) {
      const toMerge = args[i];
      for (const key in toMerge) {
        if (key === "class") {
          if (ret.class !== toMerge.class) {
            ret.class = normalizeClass([ret.class, toMerge.class]);
          }
        } else if (key === "style") {
          ret.style = normalizeStyle([ret.style, toMerge.style]);
        } else if (isOn(key)) {
          const existing = ret[key];
          const incoming = toMerge[key];
          if (incoming && existing !== incoming && !(isArray(existing) && existing.includes(incoming))) {
            ret[key] = existing ? [].concat(existing, incoming) : incoming;
          }
        } else if (key !== "") {
          ret[key] = toMerge[key];
        }
      }
    }
    return ret;
  }
  function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7, [
      vnode,
      prevVNode
    ]);
  }
  var emptyAppContext = createAppContext();
  var uid = 0;
  function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
      uid: uid++,
      vnode,
      type,
      parent,
      appContext,
      root: null,
      // to be immediately set
      next: null,
      subTree: null,
      // will be set synchronously right after creation
      effect: null,
      update: null,
      // will be set synchronously right after creation
      job: null,
      scope: new EffectScope(
        true
        /* detached */
      ),
      render: null,
      proxy: null,
      exposed: null,
      exposeProxy: null,
      withProxy: null,
      provides: parent ? parent.provides : Object.create(appContext.provides),
      ids: parent ? parent.ids : ["", 0, 0],
      accessCache: null,
      renderCache: [],
      // local resolved assets
      components: null,
      directives: null,
      // resolved props and emits options
      propsOptions: normalizePropsOptions(type, appContext),
      emitsOptions: normalizeEmitsOptions(type, appContext),
      // emit
      emit: null,
      // to be set immediately
      emitted: null,
      // props default value
      propsDefaults: EMPTY_OBJ,
      // inheritAttrs
      inheritAttrs: type.inheritAttrs,
      // state
      ctx: EMPTY_OBJ,
      data: EMPTY_OBJ,
      props: EMPTY_OBJ,
      attrs: EMPTY_OBJ,
      slots: EMPTY_OBJ,
      refs: EMPTY_OBJ,
      setupState: EMPTY_OBJ,
      setupContext: null,
      // suspense related
      suspense,
      suspenseId: suspense ? suspense.pendingId : 0,
      asyncDep: null,
      asyncResolved: false,
      // lifecycle hooks
      // not using enums here because it results in computed properties
      isMounted: false,
      isUnmounted: false,
      isDeactivated: false,
      bc: null,
      c: null,
      bm: null,
      m: null,
      bu: null,
      u: null,
      um: null,
      bum: null,
      da: null,
      a: null,
      rtg: null,
      rtc: null,
      ec: null,
      sp: null
    };
    if (true) {
      instance.ctx = createDevRenderContext(instance);
    } else {
      instance.ctx = { _: instance };
    }
    instance.root = parent ? parent.root : instance;
    instance.emit = emit.bind(null, instance);
    if (vnode.ce) {
      vnode.ce(instance);
    }
    return instance;
  }
  var currentInstance = null;
  var getCurrentInstance = () => currentInstance || currentRenderingInstance;
  var internalSetCurrentInstance;
  var setInSSRSetupState;
  {
    const g = getGlobalThis();
    const registerGlobalSetter = (key, setter) => {
      let setters;
      if (!(setters = g[key]))
        setters = g[key] = [];
      setters.push(setter);
      return (v) => {
        if (setters.length > 1)
          setters.forEach((set2) => set2(v));
        else
          setters[0](v);
      };
    };
    internalSetCurrentInstance = registerGlobalSetter(
      `__VUE_INSTANCE_SETTERS__`,
      (v) => currentInstance = v
    );
    setInSSRSetupState = registerGlobalSetter(
      `__VUE_SSR_SETTERS__`,
      (v) => isInSSRComponentSetup = v
    );
  }
  var setCurrentInstance = (instance) => {
    const prev = currentInstance;
    internalSetCurrentInstance(instance);
    instance.scope.on();
    return () => {
      instance.scope.off();
      internalSetCurrentInstance(prev);
    };
  };
  var unsetCurrentInstance = () => {
    currentInstance && currentInstance.scope.off();
    internalSetCurrentInstance(null);
  };
  var isBuiltInTag = /* @__PURE__ */ makeMap("slot,component");
  function validateComponentName(name, { isNativeTag }) {
    if (isBuiltInTag(name) || isNativeTag(name)) {
      warn$1(
        "Do not use built-in or reserved HTML elements as component id: " + name
      );
    }
  }
  function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4;
  }
  var isInSSRComponentSetup = false;
  function setupComponent(instance, isSSR = false, optimized = false) {
    isSSR && setInSSRSetupState(isSSR);
    const { props, children } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children, optimized);
    const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
    isSSR && setInSSRSetupState(false);
    return setupResult;
  }
  function setupStatefulComponent(instance, isSSR) {
    var _a;
    const Component = instance.type;
    if (true) {
      if (Component.name) {
        validateComponentName(Component.name, instance.appContext.config);
      }
      if (Component.components) {
        const names = Object.keys(Component.components);
        for (let i = 0; i < names.length; i++) {
          validateComponentName(names[i], instance.appContext.config);
        }
      }
      if (Component.directives) {
        const names = Object.keys(Component.directives);
        for (let i = 0; i < names.length; i++) {
          validateDirectiveName(names[i]);
        }
      }
      if (Component.compilerOptions && isRuntimeOnly()) {
        warn$1(
          `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
        );
      }
    }
    instance.accessCache = /* @__PURE__ */ Object.create(null);
    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
    if (true) {
      exposePropsOnRenderContext(instance);
    }
    const { setup } = Component;
    if (setup) {
      pauseTracking();
      const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
      const reset = setCurrentInstance(instance);
      const setupResult = callWithErrorHandling(
        setup,
        instance,
        0,
        [
          true ? shallowReadonly(instance.props) : instance.props,
          setupContext
        ]
      );
      const isAsyncSetup = isPromise(setupResult);
      resetTracking();
      reset();
      if ((isAsyncSetup || instance.sp) && !isAsyncWrapper(instance)) {
        markAsyncBoundary(instance);
      }
      if (isAsyncSetup) {
        setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
        if (isSSR) {
          return setupResult.then((resolvedResult) => {
            handleSetupResult(instance, resolvedResult, isSSR);
          }).catch((e) => {
            handleError(e, instance, 0);
          });
        } else {
          instance.asyncDep = setupResult;
          if (!instance.suspense) {
            const name = (_a = Component.name) != null ? _a : "Anonymous";
            warn$1(
              `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
            );
          }
        }
      } else {
        handleSetupResult(instance, setupResult, isSSR);
      }
    } else {
      finishComponentSetup(instance, isSSR);
    }
  }
  function handleSetupResult(instance, setupResult, isSSR) {
    if (isFunction(setupResult)) {
      if (instance.type.__ssrInlineRender) {
        instance.ssrRender = setupResult;
      } else {
        instance.render = setupResult;
      }
    } else if (isObject(setupResult)) {
      if (isVNode(setupResult)) {
        warn$1(
          `setup() should not return VNodes directly - return a render function instead.`
        );
      }
      if (true) {
        instance.devtoolsRawSetupState = setupResult;
      }
      instance.setupState = proxyRefs(setupResult);
      if (true) {
        exposeSetupStateOnRenderContext(instance);
      }
    } else if (setupResult !== void 0) {
      warn$1(
        `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
      );
    }
    finishComponentSetup(instance, isSSR);
  }
  var compile;
  var installWithProxy;
  var isRuntimeOnly = () => !compile;
  function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    if (!instance.render) {
      if (!isSSR && compile && !Component.render) {
        const template = Component.template || resolveMergedOptions(instance).template;
        if (template) {
          if (true) {
            startMeasure(instance, `compile`);
          }
          const { isCustomElement, compilerOptions } = instance.appContext.config;
          const { delimiters, compilerOptions: componentCompilerOptions } = Component;
          const finalCompilerOptions = extend(
            extend(
              {
                isCustomElement,
                delimiters
              },
              compilerOptions
            ),
            componentCompilerOptions
          );
          Component.render = compile(template, finalCompilerOptions);
          if (true) {
            endMeasure(instance, `compile`);
          }
        }
      }
      instance.render = Component.render || NOOP;
      if (installWithProxy) {
        installWithProxy(instance);
      }
    }
    if (true) {
      const reset = setCurrentInstance(instance);
      pauseTracking();
      try {
        applyOptions(instance);
      } finally {
        resetTracking();
        reset();
      }
    }
    if (!Component.render && instance.render === NOOP && !isSSR) {
      if (!compile && Component.template) {
        warn$1(
          `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
        );
      } else {
        warn$1(`Component is missing template or render function: `, Component);
      }
    }
  }
  var attrsProxyHandlers = true ? {
    get(target, key) {
      markAttrsAccessed();
      track(target, "get", "");
      return target[key];
    },
    set() {
      warn$1(`setupContext.attrs is readonly.`);
      return false;
    },
    deleteProperty() {
      warn$1(`setupContext.attrs is readonly.`);
      return false;
    }
  } : {
    get(target, key) {
      track(target, "get", "");
      return target[key];
    }
  };
  function getSlotsProxy(instance) {
    return new Proxy(instance.slots, {
      get(target, key) {
        track(instance, "get", "$slots");
        return target[key];
      }
    });
  }
  function createSetupContext(instance) {
    const expose = (exposed) => {
      if (true) {
        if (instance.exposed) {
          warn$1(`expose() should be called only once per setup().`);
        }
        if (exposed != null) {
          let exposedType = typeof exposed;
          if (exposedType === "object") {
            if (isArray(exposed)) {
              exposedType = "array";
            } else if (isRef2(exposed)) {
              exposedType = "ref";
            }
          }
          if (exposedType !== "object") {
            warn$1(
              `expose() should be passed a plain object, received ${exposedType}.`
            );
          }
        }
      }
      instance.exposed = exposed || {};
    };
    if (true) {
      let attrsProxy;
      let slotsProxy;
      return Object.freeze({
        get attrs() {
          return attrsProxy || (attrsProxy = new Proxy(instance.attrs, attrsProxyHandlers));
        },
        get slots() {
          return slotsProxy || (slotsProxy = getSlotsProxy(instance));
        },
        get emit() {
          return (event, ...args) => instance.emit(event, ...args);
        },
        expose
      });
    } else {
      return {
        attrs: new Proxy(instance.attrs, attrsProxyHandlers),
        slots: instance.slots,
        emit: instance.emit,
        expose
      };
    }
  }
  function getComponentPublicInstance(instance) {
    if (instance.exposed) {
      return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
        get(target, key) {
          if (key in target) {
            return target[key];
          } else if (key in publicPropertiesMap) {
            return publicPropertiesMap[key](instance);
          }
        },
        has(target, key) {
          return key in target || key in publicPropertiesMap;
        }
      }));
    } else {
      return instance.proxy;
    }
  }
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
  function getComponentName(Component, includeInferred = true) {
    return isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
  }
  function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
      const match = Component.__file.match(/([^/\\]+)\.\w+$/);
      if (match) {
        name = match[1];
      }
    }
    if (!name && instance && instance.parent) {
      const inferFromRegistry = (registry) => {
        for (const key in registry) {
          if (registry[key] === Component) {
            return key;
          }
        }
      };
      name = inferFromRegistry(
        instance.components || instance.parent.type.components
      ) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
  }
  function isClassComponent(value) {
    return isFunction(value) && "__vccOpts" in value;
  }
  var computed2 = (getterOrOptions, debugOptions) => {
    const c = computed(getterOrOptions, debugOptions, isInSSRComponentSetup);
    if (true) {
      const i = getCurrentInstance();
      if (i && i.appContext.config.warnRecursiveComputed) {
        c._warnRecursive = true;
      }
    }
    return c;
  };
  function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
      if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {
        if (isVNode(propsOrChildren)) {
          return createVNode(type, null, [propsOrChildren]);
        }
        return createVNode(type, propsOrChildren);
      } else {
        return createVNode(type, null, propsOrChildren);
      }
    } else {
      if (l > 3) {
        children = Array.prototype.slice.call(arguments, 2);
      } else if (l === 3 && isVNode(children)) {
        children = [children];
      }
      return createVNode(type, propsOrChildren, children);
    }
  }
  function initCustomFormatter() {
    if (typeof window === "undefined") {
      return;
    }
    const vueStyle = { style: "color:#3ba776" };
    const numberStyle = { style: "color:#1677ff" };
    const stringStyle = { style: "color:#f5222d" };
    const keywordStyle = { style: "color:#eb2f96" };
    const formatter = {
      __vue_custom_formatter: true,
      header(obj) {
        if (!isObject(obj)) {
          return null;
        }
        if (obj.__isVue) {
          return ["div", vueStyle, `VueInstance`];
        } else if (isRef2(obj)) {
          return [
            "div",
            {},
            ["span", vueStyle, genRefFlag(obj)],
            "<",
            // avoid debugger accessing value affecting behavior
            formatValue("_value" in obj ? obj._value : obj),
            `>`
          ];
        } else if (isReactive(obj)) {
          return [
            "div",
            {},
            ["span", vueStyle, isShallow(obj) ? "ShallowReactive" : "Reactive"],
            "<",
            formatValue(obj),
            `>${isReadonly(obj) ? ` (readonly)` : ``}`
          ];
        } else if (isReadonly(obj)) {
          return [
            "div",
            {},
            ["span", vueStyle, isShallow(obj) ? "ShallowReadonly" : "Readonly"],
            "<",
            formatValue(obj),
            ">"
          ];
        }
        return null;
      },
      hasBody(obj) {
        return obj && obj.__isVue;
      },
      body(obj) {
        if (obj && obj.__isVue) {
          return [
            "div",
            {},
            ...formatInstance(obj.$)
          ];
        }
      }
    };
    function formatInstance(instance) {
      const blocks = [];
      if (instance.type.props && instance.props) {
        blocks.push(createInstanceBlock("props", toRaw(instance.props)));
      }
      if (instance.setupState !== EMPTY_OBJ) {
        blocks.push(createInstanceBlock("setup", instance.setupState));
      }
      if (instance.data !== EMPTY_OBJ) {
        blocks.push(createInstanceBlock("data", toRaw(instance.data)));
      }
      const computed3 = extractKeys(instance, "computed");
      if (computed3) {
        blocks.push(createInstanceBlock("computed", computed3));
      }
      const injected = extractKeys(instance, "inject");
      if (injected) {
        blocks.push(createInstanceBlock("injected", injected));
      }
      blocks.push([
        "div",
        {},
        [
          "span",
          {
            style: keywordStyle.style + ";opacity:0.66"
          },
          "$ (internal): "
        ],
        ["object", { object: instance }]
      ]);
      return blocks;
    }
    function createInstanceBlock(type, target) {
      target = extend({}, target);
      if (!Object.keys(target).length) {
        return ["span", {}];
      }
      return [
        "div",
        { style: "line-height:1.25em;margin-bottom:0.6em" },
        [
          "div",
          {
            style: "color:#476582"
          },
          type
        ],
        [
          "div",
          {
            style: "padding-left:1.25em"
          },
          ...Object.keys(target).map((key) => {
            return [
              "div",
              {},
              ["span", keywordStyle, key + ": "],
              formatValue(target[key], false)
            ];
          })
        ]
      ];
    }
    function formatValue(v, asRaw = true) {
      if (typeof v === "number") {
        return ["span", numberStyle, v];
      } else if (typeof v === "string") {
        return ["span", stringStyle, JSON.stringify(v)];
      } else if (typeof v === "boolean") {
        return ["span", keywordStyle, v];
      } else if (isObject(v)) {
        return ["object", { object: asRaw ? toRaw(v) : v }];
      } else {
        return ["span", stringStyle, String(v)];
      }
    }
    function extractKeys(instance, type) {
      const Comp = instance.type;
      if (isFunction(Comp)) {
        return;
      }
      const extracted = {};
      for (const key in instance.ctx) {
        if (isKeyOfType(Comp, key, type)) {
          extracted[key] = instance.ctx[key];
        }
      }
      return extracted;
    }
    function isKeyOfType(Comp, key, type) {
      const opts = Comp[type];
      if (isArray(opts) && opts.includes(key) || isObject(opts) && key in opts) {
        return true;
      }
      if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
        return true;
      }
      if (Comp.mixins && Comp.mixins.some((m) => isKeyOfType(m, key, type))) {
        return true;
      }
    }
    function genRefFlag(v) {
      if (isShallow(v)) {
        return `ShallowRef`;
      }
      if (v.effect) {
        return `ComputedRef`;
      }
      return `Ref`;
    }
    if (window.devtoolsFormatters) {
      window.devtoolsFormatters.push(formatter);
    } else {
      window.devtoolsFormatters = [formatter];
    }
  }
  var version = "3.5.13";
  var warn2 = true ? warn$1 : NOOP;

  // node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
  var policy = void 0;
  var tt = typeof window !== "undefined" && window.trustedTypes;
  if (tt) {
    try {
      policy = /* @__PURE__ */ tt.createPolicy("vue", {
        createHTML: (val) => val
      });
    } catch (e) {
      warn2(`Error creating trusted types policy: ${e}`);
    }
  }
  var unsafeToTrustedHTML = policy ? (val) => policy.createHTML(val) : (val) => val;
  var svgNS = "http://www.w3.org/2000/svg";
  var mathmlNS = "http://www.w3.org/1998/Math/MathML";
  var doc = typeof document !== "undefined" ? document : null;
  var templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
  var nodeOps = {
    insert: (child, parent, anchor) => {
      parent.insertBefore(child, anchor || null);
    },
    remove: (child) => {
      const parent = child.parentNode;
      if (parent) {
        parent.removeChild(child);
      }
    },
    createElement: (tag, namespace, is, props) => {
      const el = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : is ? doc.createElement(tag, { is }) : doc.createElement(tag);
      if (tag === "select" && props && props.multiple != null) {
        el.setAttribute("multiple", props.multiple);
      }
      return el;
    },
    createText: (text) => doc.createTextNode(text),
    createComment: (text) => doc.createComment(text),
    setText: (node, text) => {
      node.nodeValue = text;
    },
    setElementText: (el, text) => {
      el.textContent = text;
    },
    parentNode: (node) => node.parentNode,
    nextSibling: (node) => node.nextSibling,
    querySelector: (selector) => doc.querySelector(selector),
    setScopeId(el, id) {
      el.setAttribute(id, "");
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent(content, parent, anchor, namespace, start, end) {
      const before = anchor ? anchor.previousSibling : parent.lastChild;
      if (start && (start === end || start.nextSibling)) {
        while (true) {
          parent.insertBefore(start.cloneNode(true), anchor);
          if (start === end || !(start = start.nextSibling))
            break;
        }
      } else {
        templateContainer.innerHTML = unsafeToTrustedHTML(
          namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content
        );
        const template = templateContainer.content;
        if (namespace === "svg" || namespace === "mathml") {
          const wrapper = template.firstChild;
          while (wrapper.firstChild) {
            template.appendChild(wrapper.firstChild);
          }
          template.removeChild(wrapper);
        }
        parent.insertBefore(template, anchor);
      }
      return [
        // first
        before ? before.nextSibling : parent.firstChild,
        // last
        anchor ? anchor.previousSibling : parent.lastChild
      ];
    }
  };
  var TRANSITION = "transition";
  var ANIMATION = "animation";
  var vtcKey = Symbol("_vtc");
  var DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
      type: Boolean,
      default: true
    },
    duration: [String, Number, Object],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
  };
  var TransitionPropsValidators = /* @__PURE__ */ extend(
    {},
    BaseTransitionPropsValidators,
    DOMTransitionPropsValidators
  );
  var decorate$1 = (t) => {
    t.displayName = "Transition";
    t.props = TransitionPropsValidators;
    return t;
  };
  var Transition = /* @__PURE__ */ decorate$1(
    (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots)
  );
  var callHook2 = (hook, args = []) => {
    if (isArray(hook)) {
      hook.forEach((h2) => h2(...args));
    } else if (hook) {
      hook(...args);
    }
  };
  var hasExplicitCallback = (hook) => {
    return hook ? isArray(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
  };
  function resolveTransitionProps(rawProps) {
    const baseProps = {};
    for (const key in rawProps) {
      if (!(key in DOMTransitionPropsValidators)) {
        baseProps[key] = rawProps[key];
      }
    }
    if (rawProps.css === false) {
      return baseProps;
    }
    const {
      name = "v",
      type,
      duration,
      enterFromClass = `${name}-enter-from`,
      enterActiveClass = `${name}-enter-active`,
      enterToClass = `${name}-enter-to`,
      appearFromClass = enterFromClass,
      appearActiveClass = enterActiveClass,
      appearToClass = enterToClass,
      leaveFromClass = `${name}-leave-from`,
      leaveActiveClass = `${name}-leave-active`,
      leaveToClass = `${name}-leave-to`
    } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const {
      onBeforeEnter,
      onEnter,
      onEnterCancelled,
      onLeave,
      onLeaveCancelled,
      onBeforeAppear = onBeforeEnter,
      onAppear = onEnter,
      onAppearCancelled = onEnterCancelled
    } = baseProps;
    const finishEnter = (el, isAppear, done, isCancelled) => {
      el._enterCancelled = isCancelled;
      removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
      removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
      done && done();
    };
    const finishLeave = (el, done) => {
      el._isLeaving = false;
      removeTransitionClass(el, leaveFromClass);
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
      done && done();
    };
    const makeEnterHook = (isAppear) => {
      return (el, done) => {
        const hook = isAppear ? onAppear : onEnter;
        const resolve2 = () => finishEnter(el, isAppear, done);
        callHook2(hook, [el, resolve2]);
        nextFrame(() => {
          removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
          addTransitionClass(el, isAppear ? appearToClass : enterToClass);
          if (!hasExplicitCallback(hook)) {
            whenTransitionEnds(el, type, enterDuration, resolve2);
          }
        });
      };
    };
    return extend(baseProps, {
      onBeforeEnter(el) {
        callHook2(onBeforeEnter, [el]);
        addTransitionClass(el, enterFromClass);
        addTransitionClass(el, enterActiveClass);
      },
      onBeforeAppear(el) {
        callHook2(onBeforeAppear, [el]);
        addTransitionClass(el, appearFromClass);
        addTransitionClass(el, appearActiveClass);
      },
      onEnter: makeEnterHook(false),
      onAppear: makeEnterHook(true),
      onLeave(el, done) {
        el._isLeaving = true;
        const resolve2 = () => finishLeave(el, done);
        addTransitionClass(el, leaveFromClass);
        if (!el._enterCancelled) {
          forceReflow();
          addTransitionClass(el, leaveActiveClass);
        } else {
          addTransitionClass(el, leaveActiveClass);
          forceReflow();
        }
        nextFrame(() => {
          if (!el._isLeaving) {
            return;
          }
          removeTransitionClass(el, leaveFromClass);
          addTransitionClass(el, leaveToClass);
          if (!hasExplicitCallback(onLeave)) {
            whenTransitionEnds(el, type, leaveDuration, resolve2);
          }
        });
        callHook2(onLeave, [el, resolve2]);
      },
      onEnterCancelled(el) {
        finishEnter(el, false, void 0, true);
        callHook2(onEnterCancelled, [el]);
      },
      onAppearCancelled(el) {
        finishEnter(el, true, void 0, true);
        callHook2(onAppearCancelled, [el]);
      },
      onLeaveCancelled(el) {
        finishLeave(el);
        callHook2(onLeaveCancelled, [el]);
      }
    });
  }
  function normalizeDuration(duration) {
    if (duration == null) {
      return null;
    } else if (isObject(duration)) {
      return [NumberOf(duration.enter), NumberOf(duration.leave)];
    } else {
      const n = NumberOf(duration);
      return [n, n];
    }
  }
  function NumberOf(val) {
    const res = toNumber(val);
    if (true) {
      assertNumber(res, "<transition> explicit duration");
    }
    return res;
  }
  function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
    (el[vtcKey] || (el[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
  }
  function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
    const _vtc = el[vtcKey];
    if (_vtc) {
      _vtc.delete(cls);
      if (!_vtc.size) {
        el[vtcKey] = void 0;
      }
    }
  }
  function nextFrame(cb) {
    requestAnimationFrame(() => {
      requestAnimationFrame(cb);
    });
  }
  var endId = 0;
  function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
    const id = el._endId = ++endId;
    const resolveIfNotStale = () => {
      if (id === el._endId) {
        resolve2();
      }
    };
    if (explicitTimeout != null) {
      return setTimeout(resolveIfNotStale, explicitTimeout);
    }
    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
    if (!type) {
      return resolve2();
    }
    const endEvent = type + "end";
    let ended = 0;
    const end = () => {
      el.removeEventListener(endEvent, onEnd);
      resolveIfNotStale();
    };
    const onEnd = (e) => {
      if (e.target === el && ++ended >= propCount) {
        end();
      }
    };
    setTimeout(() => {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
  }
  function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    const getStyleProperties = (key) => (styles[key] || "").split(", ");
    const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
    const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
    const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
      propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(
      getStyleProperties(`${TRANSITION}Property`).toString()
    );
    return {
      type,
      timeout,
      propCount,
      hasTransform
    };
  }
  function getTimeout(delays, durations) {
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }
    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
  }
  function toMs(s) {
    if (s === "auto")
      return 0;
    return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
  }
  function forceReflow() {
    return document.body.offsetHeight;
  }
  function patchClass(el, value, isSVG) {
    const transitionClasses = el[vtcKey];
    if (transitionClasses) {
      value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
    }
    if (value == null) {
      el.removeAttribute("class");
    } else if (isSVG) {
      el.setAttribute("class", value);
    } else {
      el.className = value;
    }
  }
  var vShowOriginalDisplay = Symbol("_vod");
  var vShowHidden = Symbol("_vsh");
  var vShow = {
    beforeMount(el, { value }, { transition }) {
      el[vShowOriginalDisplay] = el.style.display === "none" ? "" : el.style.display;
      if (transition && value) {
        transition.beforeEnter(el);
      } else {
        setDisplay(el, value);
      }
    },
    mounted(el, { value }, { transition }) {
      if (transition && value) {
        transition.enter(el);
      }
    },
    updated(el, { value, oldValue }, { transition }) {
      if (!value === !oldValue)
        return;
      if (transition) {
        if (value) {
          transition.beforeEnter(el);
          setDisplay(el, true);
          transition.enter(el);
        } else {
          transition.leave(el, () => {
            setDisplay(el, false);
          });
        }
      } else {
        setDisplay(el, value);
      }
    },
    beforeUnmount(el, { value }) {
      setDisplay(el, value);
    }
  };
  if (true) {
    vShow.name = "show";
  }
  function setDisplay(el, value) {
    el.style.display = value ? el[vShowOriginalDisplay] : "none";
    el[vShowHidden] = !value;
  }
  var CSS_VAR_TEXT = Symbol(true ? "CSS_VAR_TEXT" : "");
  var displayRE = /(^|;)\s*display\s*:/;
  function patchStyle(el, prev, next) {
    const style = el.style;
    const isCssString = isString(next);
    let hasControlledDisplay = false;
    if (next && !isCssString) {
      if (prev) {
        if (!isString(prev)) {
          for (const key in prev) {
            if (next[key] == null) {
              setStyle(style, key, "");
            }
          }
        } else {
          for (const prevStyle of prev.split(";")) {
            const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
            if (next[key] == null) {
              setStyle(style, key, "");
            }
          }
        }
      }
      for (const key in next) {
        if (key === "display") {
          hasControlledDisplay = true;
        }
        setStyle(style, key, next[key]);
      }
    } else {
      if (isCssString) {
        if (prev !== next) {
          const cssVarText = style[CSS_VAR_TEXT];
          if (cssVarText) {
            next += ";" + cssVarText;
          }
          style.cssText = next;
          hasControlledDisplay = displayRE.test(next);
        }
      } else if (prev) {
        el.removeAttribute("style");
      }
    }
    if (vShowOriginalDisplay in el) {
      el[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
      if (el[vShowHidden]) {
        style.display = "none";
      }
    }
  }
  var semicolonRE = /[^\\];\s*$/;
  var importantRE = /\s*!important$/;
  function setStyle(style, name, val) {
    if (isArray(val)) {
      val.forEach((v) => setStyle(style, name, v));
    } else {
      if (val == null)
        val = "";
      if (true) {
        if (semicolonRE.test(val)) {
          warn2(
            `Unexpected semicolon at the end of '${name}' style value: '${val}'`
          );
        }
      }
      if (name.startsWith("--")) {
        style.setProperty(name, val);
      } else {
        const prefixed = autoPrefix(style, name);
        if (importantRE.test(val)) {
          style.setProperty(
            hyphenate(prefixed),
            val.replace(importantRE, ""),
            "important"
          );
        } else {
          style[prefixed] = val;
        }
      }
    }
  }
  var prefixes = ["Webkit", "Moz", "ms"];
  var prefixCache = {};
  function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) {
      return cached;
    }
    let name = camelize(rawName);
    if (name !== "filter" && name in style) {
      return prefixCache[rawName] = name;
    }
    name = capitalize(name);
    for (let i = 0; i < prefixes.length; i++) {
      const prefixed = prefixes[i] + name;
      if (prefixed in style) {
        return prefixCache[rawName] = prefixed;
      }
    }
    return rawName;
  }
  var xlinkNS = "http://www.w3.org/1999/xlink";
  function patchAttr(el, key, value, isSVG, instance, isBoolean2 = isSpecialBooleanAttr(key)) {
    if (isSVG && key.startsWith("xlink:")) {
      if (value == null) {
        el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
        el.removeAttribute(key);
      } else {
        el.setAttribute(
          key,
          isBoolean2 ? "" : isSymbol(value) ? String(value) : value
        );
      }
    }
  }
  function patchDOMProp(el, key, value, parentComponent, attrName) {
    if (key === "innerHTML" || key === "textContent") {
      if (value != null) {
        el[key] = key === "innerHTML" ? unsafeToTrustedHTML(value) : value;
      }
      return;
    }
    const tag = el.tagName;
    if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
    !tag.includes("-")) {
      const oldValue = tag === "OPTION" ? el.getAttribute("value") || "" : el.value;
      const newValue = value == null ? (
        // #11647: value should be set as empty string for null and undefined,
        // but <input type="checkbox"> should be set as 'on'.
        el.type === "checkbox" ? "on" : ""
      ) : String(value);
      if (oldValue !== newValue || !("_value" in el)) {
        el.value = newValue;
      }
      if (value == null) {
        el.removeAttribute(key);
      }
      el._value = value;
      return;
    }
    let needRemove = false;
    if (value === "" || value == null) {
      const type = typeof el[key];
      if (type === "boolean") {
        value = includeBooleanAttr(value);
      } else if (value == null && type === "string") {
        value = "";
        needRemove = true;
      } else if (type === "number") {
        value = 0;
        needRemove = true;
      }
    }
    try {
      el[key] = value;
    } catch (e) {
      if (!needRemove) {
        warn2(
          `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
          e
        );
      }
    }
    needRemove && el.removeAttribute(attrName || key);
  }
  function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
  }
  function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
  }
  var veiKey = Symbol("_vei");
  function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    const invokers = el[veiKey] || (el[veiKey] = {});
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) {
      existingInvoker.value = true ? sanitizeEventValue(nextValue, rawName) : nextValue;
    } else {
      const [name, options] = parseName(rawName);
      if (nextValue) {
        const invoker = invokers[rawName] = createInvoker(
          true ? sanitizeEventValue(nextValue, rawName) : nextValue,
          instance
        );
        addEventListener(el, name, invoker, options);
      } else if (existingInvoker) {
        removeEventListener(el, name, existingInvoker, options);
        invokers[rawName] = void 0;
      }
    }
  }
  var optionsModifierRE = /(?:Once|Passive|Capture)$/;
  function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
      options = {};
      let m;
      while (m = name.match(optionsModifierRE)) {
        name = name.slice(0, name.length - m[0].length);
        options[m[0].toLowerCase()] = true;
      }
    }
    const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
    return [event, options];
  }
  var cachedNow = 0;
  var p = /* @__PURE__ */ Promise.resolve();
  var getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
  function createInvoker(initialValue, instance) {
    const invoker = (e) => {
      if (!e._vts) {
        e._vts = Date.now();
      } else if (e._vts <= invoker.attached) {
        return;
      }
      callWithAsyncErrorHandling(
        patchStopImmediatePropagation(e, invoker.value),
        instance,
        5,
        [e]
      );
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
  }
  function sanitizeEventValue(value, propName) {
    if (isFunction(value) || isArray(value)) {
      return value;
    }
    warn2(
      `Wrong type passed as event handler to ${propName} - did you forget @ or : in front of your prop?
Expected function or array of functions, received type ${typeof value}.`
    );
    return NOOP;
  }
  function patchStopImmediatePropagation(e, value) {
    if (isArray(value)) {
      const originalStop = e.stopImmediatePropagation;
      e.stopImmediatePropagation = () => {
        originalStop.call(e);
        e._stopped = true;
      };
      return value.map(
        (fn) => (e2) => !e2._stopped && fn && fn(e2)
      );
    } else {
      return value;
    }
  }
  var isNativeOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // lowercase letter
  key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
  var patchProp = (el, key, prevValue, nextValue, namespace, parentComponent) => {
    const isSVG = namespace === "svg";
    if (key === "class") {
      patchClass(el, nextValue, isSVG);
    } else if (key === "style") {
      patchStyle(el, prevValue, nextValue);
    } else if (isOn(key)) {
      if (!isModelListener(key)) {
        patchEvent(el, key, prevValue, nextValue, parentComponent);
      }
    } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
      patchDOMProp(el, key, nextValue);
      if (!el.tagName.includes("-") && (key === "value" || key === "checked" || key === "selected")) {
        patchAttr(el, key, nextValue, isSVG, parentComponent, key !== "value");
      }
    } else if (
      // #11081 force set props for possible async custom element
      el._isVueCE && (/[A-Z]/.test(key) || !isString(nextValue))
    ) {
      patchDOMProp(el, camelize(key), nextValue, parentComponent, key);
    } else {
      if (key === "true-value") {
        el._trueValue = nextValue;
      } else if (key === "false-value") {
        el._falseValue = nextValue;
      }
      patchAttr(el, key, nextValue, isSVG);
    }
  };
  function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
      if (key === "innerHTML" || key === "textContent") {
        return true;
      }
      if (key in el && isNativeOn(key) && isFunction(value)) {
        return true;
      }
      return false;
    }
    if (key === "spellcheck" || key === "draggable" || key === "translate") {
      return false;
    }
    if (key === "form") {
      return false;
    }
    if (key === "list" && el.tagName === "INPUT") {
      return false;
    }
    if (key === "type" && el.tagName === "TEXTAREA") {
      return false;
    }
    if (key === "width" || key === "height") {
      const tag = el.tagName;
      if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") {
        return false;
      }
    }
    if (isNativeOn(key) && isString(value)) {
      return false;
    }
    return key in el;
  }
  var positionMap = /* @__PURE__ */ new WeakMap();
  var newPositionMap = /* @__PURE__ */ new WeakMap();
  var moveCbKey = Symbol("_moveCb");
  var enterCbKey2 = Symbol("_enterCb");
  var decorate = (t) => {
    delete t.props.mode;
    return t;
  };
  var TransitionGroupImpl = /* @__PURE__ */ decorate({
    name: "TransitionGroup",
    props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
      tag: String,
      moveClass: String
    }),
    setup(props, { slots }) {
      const instance = getCurrentInstance();
      const state = useTransitionState();
      let prevChildren;
      let children;
      onUpdated(() => {
        if (!prevChildren.length) {
          return;
        }
        const moveClass = props.moveClass || `${props.name || "v"}-move`;
        if (!hasCSSTransform(
          prevChildren[0].el,
          instance.vnode.el,
          moveClass
        )) {
          return;
        }
        prevChildren.forEach(callPendingCbs);
        prevChildren.forEach(recordPosition);
        const movedChildren = prevChildren.filter(applyTranslation);
        forceReflow();
        movedChildren.forEach((c) => {
          const el = c.el;
          const style = el.style;
          addTransitionClass(el, moveClass);
          style.transform = style.webkitTransform = style.transitionDuration = "";
          const cb = el[moveCbKey] = (e) => {
            if (e && e.target !== el) {
              return;
            }
            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener("transitionend", cb);
              el[moveCbKey] = null;
              removeTransitionClass(el, moveClass);
            }
          };
          el.addEventListener("transitionend", cb);
        });
      });
      return () => {
        const rawProps = toRaw(props);
        const cssTransitionProps = resolveTransitionProps(rawProps);
        let tag = rawProps.tag || Fragment;
        prevChildren = [];
        if (children) {
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (child.el && child.el instanceof Element) {
              prevChildren.push(child);
              setTransitionHooks(
                child,
                resolveTransitionHooks(
                  child,
                  cssTransitionProps,
                  state,
                  instance
                )
              );
              positionMap.set(
                child,
                child.el.getBoundingClientRect()
              );
            }
          }
        }
        children = slots.default ? getTransitionRawChildren(slots.default()) : [];
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          if (child.key != null) {
            setTransitionHooks(
              child,
              resolveTransitionHooks(child, cssTransitionProps, state, instance)
            );
          } else if (child.type !== Text) {
            warn2(`<TransitionGroup> children must be keyed.`);
          }
        }
        return createVNode(tag, null, children);
      };
    }
  });
  var TransitionGroup = TransitionGroupImpl;
  function callPendingCbs(c) {
    const el = c.el;
    if (el[moveCbKey]) {
      el[moveCbKey]();
    }
    if (el[enterCbKey2]) {
      el[enterCbKey2]();
    }
  }
  function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
  }
  function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
      const s = c.el.style;
      s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
      s.transitionDuration = "0s";
      return c;
    }
  }
  function hasCSSTransform(el, root, moveClass) {
    const clone = el.cloneNode();
    const _vtc = el[vtcKey];
    if (_vtc) {
      _vtc.forEach((cls) => {
        cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
      });
    }
    moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
    clone.style.display = "none";
    const container = root.nodeType === 1 ? root : root.parentNode;
    container.appendChild(clone);
    const { hasTransform } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
  }
  var getModelAssigner = (vnode) => {
    const fn = vnode.props["onUpdate:modelValue"] || false;
    return isArray(fn) ? (value) => invokeArrayFns(fn, value) : fn;
  };
  function onCompositionStart(e) {
    e.target.composing = true;
  }
  function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
      target.composing = false;
      target.dispatchEvent(new Event("input"));
    }
  }
  var assignKey = Symbol("_assign");
  var vModelText = {
    created(el, { modifiers: { lazy, trim, number: number2 } }, vnode) {
      el[assignKey] = getModelAssigner(vnode);
      const castToNumber = number2 || vnode.props && vnode.props.type === "number";
      addEventListener(el, lazy ? "change" : "input", (e) => {
        if (e.target.composing)
          return;
        let domValue = el.value;
        if (trim) {
          domValue = domValue.trim();
        }
        if (castToNumber) {
          domValue = looseToNumber(domValue);
        }
        el[assignKey](domValue);
      });
      if (trim) {
        addEventListener(el, "change", () => {
          el.value = el.value.trim();
        });
      }
      if (!lazy) {
        addEventListener(el, "compositionstart", onCompositionStart);
        addEventListener(el, "compositionend", onCompositionEnd);
        addEventListener(el, "change", onCompositionEnd);
      }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted(el, { value }) {
      el.value = value == null ? "" : value;
    },
    beforeUpdate(el, { value, oldValue, modifiers: { lazy, trim, number: number2 } }, vnode) {
      el[assignKey] = getModelAssigner(vnode);
      if (el.composing)
        return;
      const elValue = (number2 || el.type === "number") && !/^0\d/.test(el.value) ? looseToNumber(el.value) : el.value;
      const newValue = value == null ? "" : value;
      if (elValue === newValue) {
        return;
      }
      if (document.activeElement === el && el.type !== "range") {
        if (lazy && value === oldValue) {
          return;
        }
        if (trim && el.value.trim() === newValue) {
          return;
        }
      }
      el.value = newValue;
    }
  };
  var vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created(el, _, vnode) {
      el[assignKey] = getModelAssigner(vnode);
      addEventListener(el, "change", () => {
        const modelValue = el._modelValue;
        const elementValue = getValue(el);
        const checked = el.checked;
        const assign = el[assignKey];
        if (isArray(modelValue)) {
          const index7 = looseIndexOf(modelValue, elementValue);
          const found = index7 !== -1;
          if (checked && !found) {
            assign(modelValue.concat(elementValue));
          } else if (!checked && found) {
            const filtered = [...modelValue];
            filtered.splice(index7, 1);
            assign(filtered);
          }
        } else if (isSet(modelValue)) {
          const cloned = new Set(modelValue);
          if (checked) {
            cloned.add(elementValue);
          } else {
            cloned.delete(elementValue);
          }
          assign(cloned);
        } else {
          assign(getCheckboxValue(el, checked));
        }
      });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate(el, binding, vnode) {
      el[assignKey] = getModelAssigner(vnode);
      setChecked(el, binding, vnode);
    }
  };
  function setChecked(el, { value, oldValue }, vnode) {
    el._modelValue = value;
    let checked;
    if (isArray(value)) {
      checked = looseIndexOf(value, vnode.props.value) > -1;
    } else if (isSet(value)) {
      checked = value.has(vnode.props.value);
    } else {
      if (value === oldValue)
        return;
      checked = looseEqual(value, getCheckboxValue(el, true));
    }
    if (el.checked !== checked) {
      el.checked = checked;
    }
  }
  var vModelRadio = {
    created(el, { value }, vnode) {
      el.checked = looseEqual(value, vnode.props.value);
      el[assignKey] = getModelAssigner(vnode);
      addEventListener(el, "change", () => {
        el[assignKey](getValue(el));
      });
    },
    beforeUpdate(el, { value, oldValue }, vnode) {
      el[assignKey] = getModelAssigner(vnode);
      if (value !== oldValue) {
        el.checked = looseEqual(value, vnode.props.value);
      }
    }
  };
  function getValue(el) {
    return "_value" in el ? el._value : el.value;
  }
  function getCheckboxValue(el, checked) {
    const key = checked ? "_trueValue" : "_falseValue";
    return key in el ? el[key] : checked;
  }
  var systemModifiers = ["ctrl", "shift", "alt", "meta"];
  var modifierGuards = {
    stop: (e) => e.stopPropagation(),
    prevent: (e) => e.preventDefault(),
    self: (e) => e.target !== e.currentTarget,
    ctrl: (e) => !e.ctrlKey,
    shift: (e) => !e.shiftKey,
    alt: (e) => !e.altKey,
    meta: (e) => !e.metaKey,
    left: (e) => "button" in e && e.button !== 0,
    middle: (e) => "button" in e && e.button !== 1,
    right: (e) => "button" in e && e.button !== 2,
    exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
  };
  var withModifiers = (fn, modifiers) => {
    const cache = fn._withMods || (fn._withMods = {});
    const cacheKey = modifiers.join(".");
    return cache[cacheKey] || (cache[cacheKey] = (event, ...args) => {
      for (let i = 0; i < modifiers.length; i++) {
        const guard = modifierGuards[modifiers[i]];
        if (guard && guard(event, modifiers))
          return;
      }
      return fn(event, ...args);
    });
  };
  var rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps);
  var renderer;
  function ensureRenderer() {
    return renderer || (renderer = createRenderer(rendererOptions));
  }
  var createApp = (...args) => {
    const app2 = ensureRenderer().createApp(...args);
    if (true) {
      injectNativeTagCheck(app2);
      injectCompilerOptionsCheck(app2);
    }
    const { mount } = app2;
    app2.mount = (containerOrSelector) => {
      const container = normalizeContainer(containerOrSelector);
      if (!container)
        return;
      const component = app2._component;
      if (!isFunction(component) && !component.render && !component.template) {
        component.template = container.innerHTML;
      }
      if (container.nodeType === 1) {
        container.textContent = "";
      }
      const proxy = mount(container, false, resolveRootNamespace(container));
      if (container instanceof Element) {
        container.removeAttribute("v-cloak");
        container.setAttribute("data-v-app", "");
      }
      return proxy;
    };
    return app2;
  };
  function resolveRootNamespace(container) {
    if (container instanceof SVGElement) {
      return "svg";
    }
    if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
      return "mathml";
    }
  }
  function injectNativeTagCheck(app2) {
    Object.defineProperty(app2.config, "isNativeTag", {
      value: (tag) => isHTMLTag(tag) || isSVGTag(tag) || isMathMLTag(tag),
      writable: false
    });
  }
  function injectCompilerOptionsCheck(app2) {
    if (isRuntimeOnly()) {
      const isCustomElement = app2.config.isCustomElement;
      Object.defineProperty(app2.config, "isCustomElement", {
        get() {
          return isCustomElement;
        },
        set() {
          warn2(
            `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
          );
        }
      });
      const compilerOptions = app2.config.compilerOptions;
      const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
      Object.defineProperty(app2.config, "compilerOptions", {
        get() {
          warn2(msg);
          return compilerOptions;
        },
        set() {
          warn2(msg);
        }
      });
    }
  }
  function normalizeContainer(container) {
    if (isString(container)) {
      const res = document.querySelector(container);
      if (!res) {
        warn2(
          `Failed to mount app: mount target selector "${container}" returned null.`
        );
      }
      return res;
    }
    if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
      warn2(
        `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
      );
    }
    return container;
  }

  // node_modules/vue/dist/vue.runtime.esm-bundler.js
  function initDev() {
    {
      initCustomFormatter();
    }
  }
  if (true) {
    initDev();
  }

  // node_modules/tabulator-tables/dist/js/tabulator_esm.mjs
  var CoreFeature = class {
    constructor(table) {
      this.table = table;
    }
    //////////////////////////////////////////
    /////////////// DataLoad /////////////////
    //////////////////////////////////////////
    reloadData(data, silent, columnsChanged) {
      return this.table.dataLoader.load(data, void 0, void 0, void 0, silent, columnsChanged);
    }
    //////////////////////////////////////////
    ///////////// Localization ///////////////
    //////////////////////////////////////////
    langText() {
      return this.table.modules.localize.getText(...arguments);
    }
    langBind() {
      return this.table.modules.localize.bind(...arguments);
    }
    langLocale() {
      return this.table.modules.localize.getLocale(...arguments);
    }
    //////////////////////////////////////////
    ////////// Inter Table Comms /////////////
    //////////////////////////////////////////
    commsConnections() {
      return this.table.modules.comms.getConnections(...arguments);
    }
    commsSend() {
      return this.table.modules.comms.send(...arguments);
    }
    //////////////////////////////////////////
    //////////////// Layout  /////////////////
    //////////////////////////////////////////
    layoutMode() {
      return this.table.modules.layout.getMode();
    }
    layoutRefresh(force) {
      return this.table.modules.layout.layout(force);
    }
    //////////////////////////////////////////
    /////////////// Event Bus ////////////////
    //////////////////////////////////////////
    subscribe() {
      return this.table.eventBus.subscribe(...arguments);
    }
    unsubscribe() {
      return this.table.eventBus.unsubscribe(...arguments);
    }
    subscribed(key) {
      return this.table.eventBus.subscribed(key);
    }
    subscriptionChange() {
      return this.table.eventBus.subscriptionChange(...arguments);
    }
    dispatch() {
      return this.table.eventBus.dispatch(...arguments);
    }
    chain() {
      return this.table.eventBus.chain(...arguments);
    }
    confirm() {
      return this.table.eventBus.confirm(...arguments);
    }
    dispatchExternal() {
      return this.table.externalEvents.dispatch(...arguments);
    }
    subscribedExternal(key) {
      return this.table.externalEvents.subscribed(key);
    }
    subscriptionChangeExternal() {
      return this.table.externalEvents.subscriptionChange(...arguments);
    }
    //////////////////////////////////////////
    //////////////// Options /////////////////
    //////////////////////////////////////////
    options(key) {
      return this.table.options[key];
    }
    setOption(key, value) {
      if (typeof value !== "undefined") {
        this.table.options[key] = value;
      }
      return this.table.options[key];
    }
    //////////////////////////////////////////
    /////////// Deprecation Checks ///////////
    //////////////////////////////////////////
    deprecationCheck(oldOption, newOption, convert) {
      return this.table.deprecationAdvisor.check(oldOption, newOption, convert);
    }
    deprecationCheckMsg(oldOption, msg) {
      return this.table.deprecationAdvisor.checkMsg(oldOption, msg);
    }
    deprecationMsg(msg) {
      return this.table.deprecationAdvisor.msg(msg);
    }
    //////////////////////////////////////////
    //////////////// Modules /////////////////
    //////////////////////////////////////////
    module(key) {
      return this.table.module(key);
    }
  };
  var Helpers = class {
    static elVisible(el) {
      return !(el.offsetWidth <= 0 && el.offsetHeight <= 0);
    }
    static elOffset(el) {
      var box = el.getBoundingClientRect();
      return {
        top: box.top + window.pageYOffset - document.documentElement.clientTop,
        left: box.left + window.pageXOffset - document.documentElement.clientLeft
      };
    }
    static retrieveNestedData(separator, field, data) {
      var structure = separator ? field.split(separator) : [field], length = structure.length, output;
      for (let i = 0; i < length; i++) {
        data = data[structure[i]];
        output = data;
        if (!data) {
          break;
        }
      }
      return output;
    }
    static deepClone(obj, clone, list2 = []) {
      var objectProto = {}.__proto__, arrayProto2 = [].__proto__;
      if (!clone) {
        clone = Object.assign(Array.isArray(obj) ? [] : {}, obj);
      }
      for (var i in obj) {
        let subject = obj[i], match, copy;
        if (subject != null && typeof subject === "object" && (subject.__proto__ === objectProto || subject.__proto__ === arrayProto2)) {
          match = list2.findIndex((item) => {
            return item.subject === subject;
          });
          if (match > -1) {
            clone[i] = list2[match].copy;
          } else {
            copy = Object.assign(Array.isArray(subject) ? [] : {}, subject);
            list2.unshift({ subject, copy });
            clone[i] = this.deepClone(subject, copy, list2);
          }
        }
      }
      return clone;
    }
  };
  var Popup$1 = class Popup extends CoreFeature {
    constructor(table, element, parent) {
      super(table);
      this.element = element;
      this.container = this._lookupContainer();
      this.parent = parent;
      this.reversedX = false;
      this.childPopup = null;
      this.blurable = false;
      this.blurCallback = null;
      this.blurEventsBound = false;
      this.renderedCallback = null;
      this.visible = false;
      this.hideable = true;
      this.element.classList.add("tabulator-popup-container");
      this.blurEvent = this.hide.bind(this, false);
      this.escEvent = this._escapeCheck.bind(this);
      this.destroyBinding = this.tableDestroyed.bind(this);
      this.destroyed = false;
    }
    tableDestroyed() {
      this.destroyed = true;
      this.hide(true);
    }
    _lookupContainer() {
      var container = this.table.options.popupContainer;
      if (typeof container === "string") {
        container = document.querySelector(container);
        if (!container) {
          console.warn("Menu Error - no container element found matching selector:", this.table.options.popupContainer, "(defaulting to document body)");
        }
      } else if (container === true) {
        container = this.table.element;
      }
      if (container && !this._checkContainerIsParent(container)) {
        container = false;
        console.warn("Menu Error - container element does not contain this table:", this.table.options.popupContainer, "(defaulting to document body)");
      }
      if (!container) {
        container = document.body;
      }
      return container;
    }
    _checkContainerIsParent(container, element = this.table.element) {
      if (container === element) {
        return true;
      } else {
        return element.parentNode ? this._checkContainerIsParent(container, element.parentNode) : false;
      }
    }
    renderCallback(callback) {
      this.renderedCallback = callback;
    }
    containerEventCoords(e) {
      var touch = !(e instanceof MouseEvent);
      var x = touch ? e.touches[0].pageX : e.pageX;
      var y = touch ? e.touches[0].pageY : e.pageY;
      if (this.container !== document.body) {
        let parentOffset = Helpers.elOffset(this.container);
        x -= parentOffset.left;
        y -= parentOffset.top;
      }
      return { x, y };
    }
    elementPositionCoords(element, position = "right") {
      var offset2 = Helpers.elOffset(element), containerOffset, x, y;
      if (this.container !== document.body) {
        containerOffset = Helpers.elOffset(this.container);
        offset2.left -= containerOffset.left;
        offset2.top -= containerOffset.top;
      }
      switch (position) {
        case "right":
          x = offset2.left + element.offsetWidth;
          y = offset2.top - 1;
          break;
        case "bottom":
          x = offset2.left;
          y = offset2.top + element.offsetHeight;
          break;
        case "left":
          x = offset2.left;
          y = offset2.top - 1;
          break;
        case "top":
          x = offset2.left;
          y = offset2.top;
          break;
        case "center":
          x = offset2.left + element.offsetWidth / 2;
          y = offset2.top + element.offsetHeight / 2;
          break;
      }
      return { x, y, offset: offset2 };
    }
    show(origin, position) {
      var x, y, parentEl, parentOffset, coords;
      if (this.destroyed || this.table.destroyed) {
        return this;
      }
      if (origin instanceof HTMLElement) {
        parentEl = origin;
        coords = this.elementPositionCoords(origin, position);
        parentOffset = coords.offset;
        x = coords.x;
        y = coords.y;
      } else if (typeof origin === "number") {
        parentOffset = { top: 0, left: 0 };
        x = origin;
        y = position;
      } else {
        coords = this.containerEventCoords(origin);
        x = coords.x;
        y = coords.y;
        this.reversedX = false;
      }
      this.element.style.top = y + "px";
      this.element.style.left = x + "px";
      this.container.appendChild(this.element);
      if (typeof this.renderedCallback === "function") {
        this.renderedCallback();
      }
      this._fitToScreen(x, y, parentEl, parentOffset, position);
      this.visible = true;
      this.subscribe("table-destroy", this.destroyBinding);
      this.element.addEventListener("mousedown", (e) => {
        e.stopPropagation();
      });
      return this;
    }
    _fitToScreen(x, y, parentEl, parentOffset, position) {
      var scrollTop = this.container === document.body ? document.documentElement.scrollTop : this.container.scrollTop;
      if (x + this.element.offsetWidth >= this.container.offsetWidth || this.reversedX) {
        this.element.style.left = "";
        if (parentEl) {
          this.element.style.right = this.container.offsetWidth - parentOffset.left + "px";
        } else {
          this.element.style.right = this.container.offsetWidth - x + "px";
        }
        this.reversedX = true;
      }
      let offsetHeight = Math.max(this.container.offsetHeight, scrollTop ? this.container.scrollHeight : 0);
      if (y + this.element.offsetHeight > offsetHeight) {
        if (parentEl) {
          switch (position) {
            case "bottom":
              this.element.style.top = parseInt(this.element.style.top) - this.element.offsetHeight - parentEl.offsetHeight - 1 + "px";
              break;
            default:
              this.element.style.top = parseInt(this.element.style.top) - this.element.offsetHeight + parentEl.offsetHeight + 1 + "px";
          }
        } else {
          this.element.style.height = offsetHeight + "px";
        }
      }
    }
    isVisible() {
      return this.visible;
    }
    hideOnBlur(callback) {
      this.blurable = true;
      if (this.visible) {
        setTimeout(() => {
          if (this.visible) {
            this.table.rowManager.element.addEventListener("scroll", this.blurEvent);
            this.subscribe("cell-editing", this.blurEvent);
            document.body.addEventListener("click", this.blurEvent);
            document.body.addEventListener("contextmenu", this.blurEvent);
            document.body.addEventListener("mousedown", this.blurEvent);
            window.addEventListener("resize", this.blurEvent);
            document.body.addEventListener("keydown", this.escEvent);
            this.blurEventsBound = true;
          }
        }, 100);
        this.blurCallback = callback;
      }
      return this;
    }
    _escapeCheck(e) {
      if (e.keyCode == 27) {
        this.hide();
      }
    }
    blockHide() {
      this.hideable = false;
    }
    restoreHide() {
      this.hideable = true;
    }
    hide(silent = false) {
      if (this.visible && this.hideable) {
        if (this.blurable && this.blurEventsBound) {
          document.body.removeEventListener("keydown", this.escEvent);
          document.body.removeEventListener("click", this.blurEvent);
          document.body.removeEventListener("contextmenu", this.blurEvent);
          document.body.removeEventListener("mousedown", this.blurEvent);
          window.removeEventListener("resize", this.blurEvent);
          this.table.rowManager.element.removeEventListener("scroll", this.blurEvent);
          this.unsubscribe("cell-editing", this.blurEvent);
          this.blurEventsBound = false;
        }
        if (this.childPopup) {
          this.childPopup.hide();
        }
        if (this.parent) {
          this.parent.childPopup = null;
        }
        if (this.element.parentNode) {
          this.element.parentNode.removeChild(this.element);
        }
        this.visible = false;
        if (this.blurCallback && !silent) {
          this.blurCallback();
        }
        this.unsubscribe("table-destroy", this.destroyBinding);
      }
      return this;
    }
    child(element) {
      if (this.childPopup) {
        this.childPopup.hide();
      }
      this.childPopup = new Popup(this.table, element, this);
      return this.childPopup;
    }
  };
  var Module = class extends CoreFeature {
    constructor(table, name) {
      super(table);
      this._handler = null;
    }
    initialize() {
    }
    ///////////////////////////////////
    ////// Options Registration ///////
    ///////////////////////////////////
    registerTableOption(key, value) {
      this.table.optionsList.register(key, value);
    }
    registerColumnOption(key, value) {
      this.table.columnManager.optionsList.register(key, value);
    }
    ///////////////////////////////////
    /// Public Function Registration ///
    ///////////////////////////////////
    registerTableFunction(name, func) {
      if (typeof this.table[name] === "undefined") {
        this.table[name] = (...args) => {
          this.table.initGuard(name);
          return func(...args);
        };
      } else {
        console.warn("Unable to bind table function, name already in use", name);
      }
    }
    registerComponentFunction(component, func, handler) {
      return this.table.componentFunctionBinder.bind(component, func, handler);
    }
    ///////////////////////////////////
    ////////// Data Pipeline //////////
    ///////////////////////////////////
    registerDataHandler(handler, priority) {
      this.table.rowManager.registerDataPipelineHandler(handler, priority);
      this._handler = handler;
    }
    registerDisplayHandler(handler, priority) {
      this.table.rowManager.registerDisplayPipelineHandler(handler, priority);
      this._handler = handler;
    }
    displayRows(adjust) {
      var index7 = this.table.rowManager.displayRows.length - 1, lookupIndex;
      if (this._handler) {
        lookupIndex = this.table.rowManager.displayPipeline.findIndex((item) => {
          return item.handler === this._handler;
        });
        if (lookupIndex > -1) {
          index7 = lookupIndex;
        }
      }
      if (adjust) {
        index7 = index7 + adjust;
      }
      if (this._handler) {
        if (index7 > -1) {
          return this.table.rowManager.getDisplayRows(index7);
        } else {
          return this.activeRows();
        }
      }
    }
    activeRows() {
      return this.table.rowManager.activeRows;
    }
    refreshData(renderInPosition, handler) {
      if (!handler) {
        handler = this._handler;
      }
      if (handler) {
        this.table.rowManager.refreshActiveData(handler, false, renderInPosition);
      }
    }
    ///////////////////////////////////
    //////// Footer Management ////////
    ///////////////////////////////////
    footerAppend(element) {
      return this.table.footerManager.append(element);
    }
    footerPrepend(element) {
      return this.table.footerManager.prepend(element);
    }
    footerRemove(element) {
      return this.table.footerManager.remove(element);
    }
    ///////////////////////////////////
    //////// Popups Management ////////
    ///////////////////////////////////
    popup(menuEl, menuContainer) {
      return new Popup$1(this.table, menuEl, menuContainer);
    }
    ///////////////////////////////////
    //////// Alert Management ////////
    ///////////////////////////////////
    alert(content, type) {
      return this.table.alertManager.alert(content, type);
    }
    clearAlert() {
      return this.table.alertManager.clear();
    }
  };
  var defaultAccessors = {
    rownum: function(value, data, type, params, column, row) {
      return row.getPosition();
    }
  };
  var Accessor = class _Accessor extends Module {
    static moduleName = "accessor";
    //load defaults
    static accessors = defaultAccessors;
    constructor(table) {
      super(table);
      this.allowedTypes = ["", "data", "download", "clipboard", "print", "htmlOutput"];
      this.registerColumnOption("accessor");
      this.registerColumnOption("accessorParams");
      this.registerColumnOption("accessorData");
      this.registerColumnOption("accessorDataParams");
      this.registerColumnOption("accessorDownload");
      this.registerColumnOption("accessorDownloadParams");
      this.registerColumnOption("accessorClipboard");
      this.registerColumnOption("accessorClipboardParams");
      this.registerColumnOption("accessorPrint");
      this.registerColumnOption("accessorPrintParams");
      this.registerColumnOption("accessorHtmlOutput");
      this.registerColumnOption("accessorHtmlOutputParams");
    }
    initialize() {
      this.subscribe("column-layout", this.initializeColumn.bind(this));
      this.subscribe("row-data-retrieve", this.transformRow.bind(this));
    }
    //initialize column accessor
    initializeColumn(column) {
      var match = false, config = {};
      this.allowedTypes.forEach((type) => {
        var key = "accessor" + (type.charAt(0).toUpperCase() + type.slice(1)), accessor;
        if (column.definition[key]) {
          accessor = this.lookupAccessor(column.definition[key]);
          if (accessor) {
            match = true;
            config[key] = {
              accessor,
              params: column.definition[key + "Params"] || {}
            };
          }
        }
      });
      if (match) {
        column.modules.accessor = config;
      }
    }
    lookupAccessor(value) {
      var accessor = false;
      switch (typeof value) {
        case "string":
          if (_Accessor.accessors[value]) {
            accessor = _Accessor.accessors[value];
          } else {
            console.warn("Accessor Error - No such accessor found, ignoring: ", value);
          }
          break;
        case "function":
          accessor = value;
          break;
      }
      return accessor;
    }
    //apply accessor to row
    transformRow(row, type) {
      var key = "accessor" + (type.charAt(0).toUpperCase() + type.slice(1)), rowComponent = row.getComponent();
      var data = Helpers.deepClone(row.data || {});
      this.table.columnManager.traverse(function(column) {
        var value, accessor, params, colComponent;
        if (column.modules.accessor) {
          accessor = column.modules.accessor[key] || column.modules.accessor.accessor || false;
          if (accessor) {
            value = column.getFieldValue(data);
            if (value != "undefined") {
              colComponent = column.getComponent();
              params = typeof accessor.params === "function" ? accessor.params(value, data, type, colComponent, rowComponent) : accessor.params;
              column.setFieldValue(data, accessor.accessor(value, data, type, params, colComponent, rowComponent));
            }
          }
        }
      });
      return data;
    }
  };
  var defaultConfig = {
    method: "GET"
  };
  function generateParamsList$1(data, prefix) {
    var output = [];
    prefix = prefix || "";
    if (Array.isArray(data)) {
      data.forEach((item, i) => {
        output = output.concat(generateParamsList$1(item, prefix ? prefix + "[" + i + "]" : i));
      });
    } else if (typeof data === "object") {
      for (var key in data) {
        output = output.concat(generateParamsList$1(data[key], prefix ? prefix + "[" + key + "]" : key));
      }
    } else {
      output.push({ key: prefix, value: data });
    }
    return output;
  }
  function serializeParams(params) {
    var output = generateParamsList$1(params), encoded = [];
    output.forEach(function(item) {
      encoded.push(encodeURIComponent(item.key) + "=" + encodeURIComponent(item.value));
    });
    return encoded.join("&");
  }
  function urlBuilder(url, config, params) {
    if (url) {
      if (params && Object.keys(params).length) {
        if (!config.method || config.method.toLowerCase() == "get") {
          config.method = "get";
          url += (url.includes("?") ? "&" : "?") + serializeParams(params);
        }
      }
    }
    return url;
  }
  function defaultLoaderPromise(url, config, params) {
    var contentType;
    return new Promise((resolve2, reject) => {
      url = this.urlGenerator.call(this.table, url, config, params);
      if (config.method.toUpperCase() != "GET") {
        contentType = typeof this.table.options.ajaxContentType === "object" ? this.table.options.ajaxContentType : this.contentTypeFormatters[this.table.options.ajaxContentType];
        if (contentType) {
          for (var key in contentType.headers) {
            if (!config.headers) {
              config.headers = {};
            }
            if (typeof config.headers[key] === "undefined") {
              config.headers[key] = contentType.headers[key];
            }
          }
          config.body = contentType.body.call(this, url, config, params);
        } else {
          console.warn("Ajax Error - Invalid ajaxContentType value:", this.table.options.ajaxContentType);
        }
      }
      if (url) {
        if (typeof config.headers === "undefined") {
          config.headers = {};
        }
        if (typeof config.headers.Accept === "undefined") {
          config.headers.Accept = "application/json";
        }
        if (typeof config.headers["X-Requested-With"] === "undefined") {
          config.headers["X-Requested-With"] = "XMLHttpRequest";
        }
        if (typeof config.mode === "undefined") {
          config.mode = "cors";
        }
        if (config.mode == "cors") {
          if (typeof config.headers["Origin"] === "undefined") {
            config.headers["Origin"] = window.location.origin;
          }
          if (typeof config.credentials === "undefined") {
            config.credentials = "same-origin";
          }
        } else {
          if (typeof config.credentials === "undefined") {
            config.credentials = "include";
          }
        }
        fetch(url, config).then((response) => {
          if (response.ok) {
            response.json().then((data) => {
              resolve2(data);
            }).catch((error) => {
              reject(error);
              console.warn("Ajax Load Error - Invalid JSON returned", error);
            });
          } else {
            console.error("Ajax Load Error - Connection Error: " + response.status, response.statusText);
            reject(response);
          }
        }).catch((error) => {
          console.error("Ajax Load Error - Connection Error: ", error);
          reject(error);
        });
      } else {
        console.warn("Ajax Load Error - No URL Set");
        resolve2([]);
      }
    });
  }
  function generateParamsList(data, prefix) {
    var output = [];
    prefix = prefix || "";
    if (Array.isArray(data)) {
      data.forEach((item, i) => {
        output = output.concat(generateParamsList(item, prefix ? prefix + "[" + i + "]" : i));
      });
    } else if (typeof data === "object") {
      for (var key in data) {
        output = output.concat(generateParamsList(data[key], prefix ? prefix + "[" + key + "]" : key));
      }
    } else {
      output.push({ key: prefix, value: data });
    }
    return output;
  }
  var defaultContentTypeFormatters = {
    "json": {
      headers: {
        "Content-Type": "application/json"
      },
      body: function(url, config, params) {
        return JSON.stringify(params);
      }
    },
    "form": {
      headers: {},
      body: function(url, config, params) {
        var output = generateParamsList(params), form = new FormData();
        output.forEach(function(item) {
          form.append(item.key, item.value);
        });
        return form;
      }
    }
  };
  var Ajax = class _Ajax extends Module {
    static moduleName = "ajax";
    //load defaults
    static defaultConfig = defaultConfig;
    static defaultURLGenerator = urlBuilder;
    static defaultLoaderPromise = defaultLoaderPromise;
    static contentTypeFormatters = defaultContentTypeFormatters;
    constructor(table) {
      super(table);
      this.config = {};
      this.url = "";
      this.urlGenerator = false;
      this.params = false;
      this.loaderPromise = false;
      this.registerTableOption("ajaxURL", false);
      this.registerTableOption("ajaxURLGenerator", false);
      this.registerTableOption("ajaxParams", {});
      this.registerTableOption("ajaxConfig", "get");
      this.registerTableOption("ajaxContentType", "form");
      this.registerTableOption("ajaxRequestFunc", false);
      this.registerTableOption("ajaxRequesting", function() {
      });
      this.registerTableOption("ajaxResponse", false);
      this.contentTypeFormatters = _Ajax.contentTypeFormatters;
    }
    //initialize setup options
    initialize() {
      this.loaderPromise = this.table.options.ajaxRequestFunc || _Ajax.defaultLoaderPromise;
      this.urlGenerator = this.table.options.ajaxURLGenerator || _Ajax.defaultURLGenerator;
      if (this.table.options.ajaxURL) {
        this.setUrl(this.table.options.ajaxURL);
      }
      this.setDefaultConfig(this.table.options.ajaxConfig);
      this.registerTableFunction("getAjaxUrl", this.getUrl.bind(this));
      this.subscribe("data-loading", this.requestDataCheck.bind(this));
      this.subscribe("data-params", this.requestParams.bind(this));
      this.subscribe("data-load", this.requestData.bind(this));
    }
    requestParams(data, config, silent, params) {
      var ajaxParams = this.table.options.ajaxParams;
      if (ajaxParams) {
        if (typeof ajaxParams === "function") {
          ajaxParams = ajaxParams.call(this.table);
        }
        params = Object.assign(Object.assign({}, ajaxParams), params);
      }
      return params;
    }
    requestDataCheck(data, params, config, silent) {
      return !!(!data && this.url || typeof data === "string");
    }
    requestData(url, params, config, silent, previousData) {
      var ajaxConfig;
      if (!previousData && this.requestDataCheck(url)) {
        if (url) {
          this.setUrl(url);
        }
        ajaxConfig = this.generateConfig(config);
        return this.sendRequest(this.url, params, ajaxConfig);
      } else {
        return previousData;
      }
    }
    setDefaultConfig(config = {}) {
      this.config = Object.assign({}, _Ajax.defaultConfig);
      if (typeof config == "string") {
        this.config.method = config;
      } else {
        Object.assign(this.config, config);
      }
    }
    //load config object
    generateConfig(config = {}) {
      var ajaxConfig = Object.assign({}, this.config);
      if (typeof config == "string") {
        ajaxConfig.method = config;
      } else {
        Object.assign(ajaxConfig, config);
      }
      return ajaxConfig;
    }
    //set request url
    setUrl(url) {
      this.url = url;
    }
    //get request url
    getUrl() {
      return this.url;
    }
    //send ajax request
    sendRequest(url, params, config) {
      if (this.table.options.ajaxRequesting.call(this.table, url, params) !== false) {
        return this.loaderPromise(url, config, params).then((data) => {
          if (this.table.options.ajaxResponse) {
            data = this.table.options.ajaxResponse.call(this.table, url, params, data);
          }
          return data;
        });
      } else {
        return Promise.reject();
      }
    }
  };
  var defaultPasteActions = {
    replace: function(data) {
      return this.table.setData(data);
    },
    update: function(data) {
      return this.table.updateOrAddData(data);
    },
    insert: function(data) {
      return this.table.addData(data);
    }
  };
  var defaultPasteParsers = {
    table: function(clipboard) {
      var data = [], headerFindSuccess = true, columns = this.table.columnManager.columns, columnMap = [], rows2 = [];
      clipboard = clipboard.split("\n");
      clipboard.forEach(function(row) {
        data.push(row.split("	"));
      });
      if (data.length && !(data.length === 1 && data[0].length < 2)) {
        data[0].forEach(function(value) {
          var column = columns.find(function(column2) {
            return value && column2.definition.title && value.trim() && column2.definition.title.trim() === value.trim();
          });
          if (column) {
            columnMap.push(column);
          } else {
            headerFindSuccess = false;
          }
        });
        if (!headerFindSuccess) {
          headerFindSuccess = true;
          columnMap = [];
          data[0].forEach(function(value) {
            var column = columns.find(function(column2) {
              return value && column2.field && value.trim() && column2.field.trim() === value.trim();
            });
            if (column) {
              columnMap.push(column);
            } else {
              headerFindSuccess = false;
            }
          });
          if (!headerFindSuccess) {
            columnMap = this.table.columnManager.columnsByIndex;
          }
        }
        if (headerFindSuccess) {
          data.shift();
        }
        data.forEach(function(item) {
          var row = {};
          item.forEach(function(value, i) {
            if (columnMap[i]) {
              row[columnMap[i].field] = value;
            }
          });
          rows2.push(row);
        });
        return rows2;
      } else {
        return false;
      }
    }
  };
  var bindings$2 = {
    copyToClipboard: ["ctrl + 67", "meta + 67"]
  };
  var actions$2 = {
    copyToClipboard: function(e) {
      if (!this.table.modules.edit.currentCell) {
        if (this.table.modExists("clipboard", true)) {
          this.table.modules.clipboard.copy(false, true);
        }
      }
    }
  };
  var extensions$4 = {
    keybindings: {
      bindings: bindings$2,
      actions: actions$2
    }
  };
  var Clipboard = class _Clipboard extends Module {
    static moduleName = "clipboard";
    static moduleExtensions = extensions$4;
    //load defaults
    static pasteActions = defaultPasteActions;
    static pasteParsers = defaultPasteParsers;
    constructor(table) {
      super(table);
      this.mode = true;
      this.pasteParser = function() {
      };
      this.pasteAction = function() {
      };
      this.customSelection = false;
      this.rowRange = false;
      this.blocked = true;
      this.registerTableOption("clipboard", false);
      this.registerTableOption("clipboardCopyStyled", true);
      this.registerTableOption("clipboardCopyConfig", false);
      this.registerTableOption("clipboardCopyFormatter", false);
      this.registerTableOption("clipboardCopyRowRange", "active");
      this.registerTableOption("clipboardPasteParser", "table");
      this.registerTableOption("clipboardPasteAction", "insert");
      this.registerColumnOption("clipboard");
      this.registerColumnOption("titleClipboard");
    }
    initialize() {
      this.mode = this.table.options.clipboard;
      this.rowRange = this.table.options.clipboardCopyRowRange;
      if (this.mode === true || this.mode === "copy") {
        this.table.element.addEventListener("copy", (e) => {
          var plain, html2, list2;
          if (!this.blocked) {
            e.preventDefault();
            if (this.customSelection) {
              plain = this.customSelection;
              if (this.table.options.clipboardCopyFormatter) {
                plain = this.table.options.clipboardCopyFormatter("plain", plain);
              }
            } else {
              list2 = this.table.modules.export.generateExportList(this.table.options.clipboardCopyConfig, this.table.options.clipboardCopyStyled, this.rowRange, "clipboard");
              html2 = this.table.modules.export.generateHTMLTable(list2);
              plain = html2 ? this.generatePlainContent(list2) : "";
              if (this.table.options.clipboardCopyFormatter) {
                plain = this.table.options.clipboardCopyFormatter("plain", plain);
                html2 = this.table.options.clipboardCopyFormatter("html", html2);
              }
            }
            if (window.clipboardData && window.clipboardData.setData) {
              window.clipboardData.setData("Text", plain);
            } else if (e.clipboardData && e.clipboardData.setData) {
              e.clipboardData.setData("text/plain", plain);
              if (html2) {
                e.clipboardData.setData("text/html", html2);
              }
            } else if (e.originalEvent && e.originalEvent.clipboardData.setData) {
              e.originalEvent.clipboardData.setData("text/plain", plain);
              if (html2) {
                e.originalEvent.clipboardData.setData("text/html", html2);
              }
            }
            this.dispatchExternal("clipboardCopied", plain, html2);
            this.reset();
          }
        });
      }
      if (this.mode === true || this.mode === "paste") {
        this.table.element.addEventListener("paste", (e) => {
          this.paste(e);
        });
      }
      this.setPasteParser(this.table.options.clipboardPasteParser);
      this.setPasteAction(this.table.options.clipboardPasteAction);
      this.registerTableFunction("copyToClipboard", this.copy.bind(this));
    }
    reset() {
      this.blocked = true;
      this.customSelection = false;
    }
    generatePlainContent(list2) {
      var output = [];
      list2.forEach((row) => {
        var rowData = [];
        row.columns.forEach((col) => {
          var value = "";
          if (col) {
            if (row.type === "group") {
              col.value = col.component.getKey();
            }
            if (col.value === null) {
              value = "";
            } else {
              switch (typeof col.value) {
                case "object":
                  value = JSON.stringify(col.value);
                  break;
                case "undefined":
                  value = "";
                  break;
                default:
                  value = col.value;
              }
            }
          }
          rowData.push(value);
        });
        output.push(rowData.join("	"));
      });
      return output.join("\n");
    }
    copy(range2, internal) {
      var sel, textRange;
      this.blocked = false;
      this.customSelection = false;
      if (this.mode === true || this.mode === "copy") {
        this.rowRange = range2 || this.table.options.clipboardCopyRowRange;
        if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") {
          range2 = document.createRange();
          range2.selectNodeContents(this.table.element);
          sel = window.getSelection();
          if (sel.toString() && internal) {
            this.customSelection = sel.toString();
          }
          sel.removeAllRanges();
          sel.addRange(range2);
        } else if (typeof document.selection != "undefined" && typeof document.body.createTextRange != "undefined") {
          textRange = document.body.createTextRange();
          textRange.moveToElementText(this.table.element);
          textRange.select();
        }
        document.execCommand("copy");
        if (sel) {
          sel.removeAllRanges();
        }
      }
    }
    //PASTE EVENT HANDLING
    setPasteAction(action) {
      switch (typeof action) {
        case "string":
          this.pasteAction = _Clipboard.pasteActions[action];
          if (!this.pasteAction) {
            console.warn("Clipboard Error - No such paste action found:", action);
          }
          break;
        case "function":
          this.pasteAction = action;
          break;
      }
    }
    setPasteParser(parser) {
      switch (typeof parser) {
        case "string":
          this.pasteParser = _Clipboard.pasteParsers[parser];
          if (!this.pasteParser) {
            console.warn("Clipboard Error - No such paste parser found:", parser);
          }
          break;
        case "function":
          this.pasteParser = parser;
          break;
      }
    }
    paste(e) {
      var data, rowData, rows2;
      if (this.checkPasteOrigin(e)) {
        data = this.getPasteData(e);
        rowData = this.pasteParser.call(this, data);
        if (rowData) {
          e.preventDefault();
          if (this.table.modExists("mutator")) {
            rowData = this.mutateData(rowData);
          }
          rows2 = this.pasteAction.call(this, rowData);
          this.dispatchExternal("clipboardPasted", data, rowData, rows2);
        } else {
          this.dispatchExternal("clipboardPasteError", data);
        }
      }
    }
    mutateData(data) {
      var output = [];
      if (Array.isArray(data)) {
        data.forEach((row) => {
          output.push(this.table.modules.mutator.transformRow(row, "clipboard"));
        });
      } else {
        output = data;
      }
      return output;
    }
    checkPasteOrigin(e) {
      var valid = true;
      var blocked = this.confirm("clipboard-paste", [e]);
      if (blocked || !["DIV", "SPAN"].includes(e.target.tagName)) {
        valid = false;
      }
      return valid;
    }
    getPasteData(e) {
      var data;
      if (window.clipboardData && window.clipboardData.getData) {
        data = window.clipboardData.getData("Text");
      } else if (e.clipboardData && e.clipboardData.getData) {
        data = e.clipboardData.getData("text/plain");
      } else if (e.originalEvent && e.originalEvent.clipboardData.getData) {
        data = e.originalEvent.clipboardData.getData("text/plain");
      }
      return data;
    }
  };
  var CalcComponent = class {
    constructor(row) {
      this._row = row;
      return new Proxy(this, {
        get: function(target, name, receiver) {
          if (typeof target[name] !== "undefined") {
            return target[name];
          } else {
            return target._row.table.componentFunctionBinder.handle("row", target._row, name);
          }
        }
      });
    }
    getData(transform) {
      return this._row.getData(transform);
    }
    getElement() {
      return this._row.getElement();
    }
    getTable() {
      return this._row.table;
    }
    getCells() {
      var cells = [];
      this._row.getCells().forEach(function(cell) {
        cells.push(cell.getComponent());
      });
      return cells;
    }
    getCell(column) {
      var cell = this._row.getCell(column);
      return cell ? cell.getComponent() : false;
    }
    _getSelf() {
      return this._row;
    }
  };
  var CellComponent = class {
    constructor(cell) {
      this._cell = cell;
      return new Proxy(this, {
        get: function(target, name, receiver) {
          if (typeof target[name] !== "undefined") {
            return target[name];
          } else {
            return target._cell.table.componentFunctionBinder.handle("cell", target._cell, name);
          }
        }
      });
    }
    getValue() {
      return this._cell.getValue();
    }
    getOldValue() {
      return this._cell.getOldValue();
    }
    getInitialValue() {
      return this._cell.initialValue;
    }
    getElement() {
      return this._cell.getElement();
    }
    getRow() {
      return this._cell.row.getComponent();
    }
    getData(transform) {
      return this._cell.row.getData(transform);
    }
    getType() {
      return "cell";
    }
    getField() {
      return this._cell.column.getField();
    }
    getColumn() {
      return this._cell.column.getComponent();
    }
    setValue(value, mutate) {
      if (typeof mutate == "undefined") {
        mutate = true;
      }
      this._cell.setValue(value, mutate);
    }
    restoreOldValue() {
      this._cell.setValueActual(this._cell.getOldValue());
    }
    restoreInitialValue() {
      this._cell.setValueActual(this._cell.initialValue);
    }
    checkHeight() {
      this._cell.checkHeight();
    }
    getTable() {
      return this._cell.table;
    }
    _getSelf() {
      return this._cell;
    }
  };
  var Cell = class extends CoreFeature {
    constructor(column, row) {
      super(column.table);
      this.table = column.table;
      this.column = column;
      this.row = row;
      this.element = null;
      this.value = null;
      this.initialValue;
      this.oldValue = null;
      this.modules = {};
      this.height = null;
      this.width = null;
      this.minWidth = null;
      this.component = null;
      this.loaded = false;
      this.build();
    }
    //////////////// Setup Functions /////////////////
    //generate element
    build() {
      this.generateElement();
      this.setWidth();
      this._configureCell();
      this.setValueActual(this.column.getFieldValue(this.row.data));
      this.initialValue = this.value;
    }
    generateElement() {
      this.element = document.createElement("div");
      this.element.className = "tabulator-cell";
      this.element.setAttribute("role", "gridcell");
      if (this.column.isRowHeader) {
        this.element.classList.add("tabulator-row-header");
      }
    }
    _configureCell() {
      var element = this.element, field = this.column.getField(), vertAligns = {
        top: "flex-start",
        bottom: "flex-end",
        middle: "center"
      }, hozAligns = {
        left: "flex-start",
        right: "flex-end",
        center: "center"
      };
      element.style.textAlign = this.column.hozAlign;
      if (this.column.vertAlign) {
        element.style.display = "inline-flex";
        element.style.alignItems = vertAligns[this.column.vertAlign] || "";
        if (this.column.hozAlign) {
          element.style.justifyContent = hozAligns[this.column.hozAlign] || "";
        }
      }
      if (field) {
        element.setAttribute("tabulator-field", field);
      }
      if (this.column.definition.cssClass) {
        var classNames = this.column.definition.cssClass.split(" ");
        classNames.forEach((className) => {
          element.classList.add(className);
        });
      }
      this.dispatch("cell-init", this);
      if (!this.column.visible) {
        this.hide();
      }
    }
    //generate cell contents
    _generateContents() {
      var val;
      val = this.chain("cell-format", this, null, () => {
        return this.element.innerHTML = this.value;
      });
      switch (typeof val) {
        case "object":
          if (val instanceof Node) {
            while (this.element.firstChild)
              this.element.removeChild(this.element.firstChild);
            this.element.appendChild(val);
          } else {
            this.element.innerHTML = "";
            if (val != null) {
              console.warn("Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", val);
            }
          }
          break;
        case "undefined":
          this.element.innerHTML = "";
          break;
        default:
          this.element.innerHTML = val;
      }
    }
    cellRendered() {
      this.dispatch("cell-rendered", this);
    }
    //////////////////// Getters ////////////////////
    getElement(containerOnly) {
      if (!this.loaded) {
        this.loaded = true;
        if (!containerOnly) {
          this.layoutElement();
        }
      }
      return this.element;
    }
    getValue() {
      return this.value;
    }
    getOldValue() {
      return this.oldValue;
    }
    //////////////////// Actions ////////////////////
    setValue(value, mutate, force) {
      var changed = this.setValueProcessData(value, mutate, force);
      if (changed) {
        this.dispatch("cell-value-updated", this);
        this.cellRendered();
        if (this.column.definition.cellEdited) {
          this.column.definition.cellEdited.call(this.table, this.getComponent());
        }
        this.dispatchExternal("cellEdited", this.getComponent());
        if (this.subscribedExternal("dataChanged")) {
          this.dispatchExternal("dataChanged", this.table.rowManager.getData());
        }
      }
    }
    setValueProcessData(value, mutate, force) {
      var changed = false;
      if (this.value !== value || force) {
        changed = true;
        if (mutate) {
          value = this.chain("cell-value-changing", [this, value], null, value);
        }
      }
      this.setValueActual(value);
      if (changed) {
        this.dispatch("cell-value-changed", this);
      }
      return changed;
    }
    setValueActual(value) {
      this.oldValue = this.value;
      this.value = value;
      this.dispatch("cell-value-save-before", this);
      this.column.setFieldValue(this.row.data, value);
      this.dispatch("cell-value-save-after", this);
      if (this.loaded) {
        this.layoutElement();
      }
    }
    layoutElement() {
      this._generateContents();
      this.dispatch("cell-layout", this);
    }
    setWidth() {
      this.width = this.column.width;
      this.element.style.width = this.column.widthStyled;
    }
    clearWidth() {
      this.width = "";
      this.element.style.width = "";
    }
    getWidth() {
      return this.width || this.element.offsetWidth;
    }
    setMinWidth() {
      this.minWidth = this.column.minWidth;
      this.element.style.minWidth = this.column.minWidthStyled;
    }
    setMaxWidth() {
      this.maxWidth = this.column.maxWidth;
      this.element.style.maxWidth = this.column.maxWidthStyled;
    }
    checkHeight() {
      this.row.reinitializeHeight();
    }
    clearHeight() {
      this.element.style.height = "";
      this.height = null;
      this.dispatch("cell-height", this, "");
    }
    setHeight() {
      this.height = this.row.height;
      this.element.style.height = this.row.heightStyled;
      this.dispatch("cell-height", this, this.row.heightStyled);
    }
    getHeight() {
      return this.height || this.element.offsetHeight;
    }
    show() {
      this.element.style.display = this.column.vertAlign ? "inline-flex" : "";
    }
    hide() {
      this.element.style.display = "none";
    }
    delete() {
      this.dispatch("cell-delete", this);
      if (!this.table.rowManager.redrawBlock && this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
      this.element = false;
      this.column.deleteCell(this);
      this.row.deleteCell(this);
      this.calcs = {};
    }
    getIndex() {
      return this.row.getCellIndex(this);
    }
    //////////////// Object Generation /////////////////
    getComponent() {
      if (!this.component) {
        this.component = new CellComponent(this);
      }
      return this.component;
    }
  };
  var ColumnComponent = class {
    constructor(column) {
      this._column = column;
      this.type = "ColumnComponent";
      return new Proxy(this, {
        get: function(target, name, receiver) {
          if (typeof target[name] !== "undefined") {
            return target[name];
          } else {
            return target._column.table.componentFunctionBinder.handle("column", target._column, name);
          }
        }
      });
    }
    getElement() {
      return this._column.getElement();
    }
    getDefinition() {
      return this._column.getDefinition();
    }
    getField() {
      return this._column.getField();
    }
    getTitleDownload() {
      return this._column.getTitleDownload();
    }
    getCells() {
      var cells = [];
      this._column.cells.forEach(function(cell) {
        cells.push(cell.getComponent());
      });
      return cells;
    }
    isVisible() {
      return this._column.visible;
    }
    show() {
      if (this._column.isGroup) {
        this._column.columns.forEach(function(column) {
          column.show();
        });
      } else {
        this._column.show();
      }
    }
    hide() {
      if (this._column.isGroup) {
        this._column.columns.forEach(function(column) {
          column.hide();
        });
      } else {
        this._column.hide();
      }
    }
    toggle() {
      if (this._column.visible) {
        this.hide();
      } else {
        this.show();
      }
    }
    delete() {
      return this._column.delete();
    }
    getSubColumns() {
      var output = [];
      if (this._column.columns.length) {
        this._column.columns.forEach(function(column) {
          output.push(column.getComponent());
        });
      }
      return output;
    }
    getParentColumn() {
      return this._column.getParentComponent();
    }
    _getSelf() {
      return this._column;
    }
    scrollTo(position, ifVisible) {
      return this._column.table.columnManager.scrollToColumn(this._column, position, ifVisible);
    }
    getTable() {
      return this._column.table;
    }
    move(to, after) {
      var toColumn = this._column.table.columnManager.findColumn(to);
      if (toColumn) {
        this._column.table.columnManager.moveColumn(this._column, toColumn, after);
      } else {
        console.warn("Move Error - No matching column found:", toColumn);
      }
    }
    getNextColumn() {
      var nextCol = this._column.nextColumn();
      return nextCol ? nextCol.getComponent() : false;
    }
    getPrevColumn() {
      var prevCol = this._column.prevColumn();
      return prevCol ? prevCol.getComponent() : false;
    }
    updateDefinition(updates) {
      return this._column.updateDefinition(updates);
    }
    getWidth() {
      return this._column.getWidth();
    }
    setWidth(width) {
      var result;
      if (width === true) {
        result = this._column.reinitializeWidth(true);
      } else {
        result = this._column.setWidth(width);
      }
      this._column.table.columnManager.rerenderColumns(true);
      return result;
    }
  };
  var defaultColumnOptions = {
    "title": void 0,
    "field": void 0,
    "columns": void 0,
    "visible": void 0,
    "hozAlign": void 0,
    "vertAlign": void 0,
    "width": void 0,
    "minWidth": 40,
    "maxWidth": void 0,
    "maxInitialWidth": void 0,
    "cssClass": void 0,
    "variableHeight": void 0,
    "headerVertical": void 0,
    "headerHozAlign": void 0,
    "headerWordWrap": false,
    "editableTitle": void 0
  };
  var Column = class _Column extends CoreFeature {
    static defaultOptionList = defaultColumnOptions;
    constructor(def2, parent, rowHeader) {
      super(parent.table);
      this.definition = def2;
      this.parent = parent;
      this.type = "column";
      this.columns = [];
      this.cells = [];
      this.isGroup = false;
      this.isRowHeader = rowHeader;
      this.element = this.createElement();
      this.contentElement = false;
      this.titleHolderElement = false;
      this.titleElement = false;
      this.groupElement = this.createGroupElement();
      this.hozAlign = "";
      this.vertAlign = "";
      this.field = "";
      this.fieldStructure = "";
      this.getFieldValue = "";
      this.setFieldValue = "";
      this.titleDownload = null;
      this.titleFormatterRendered = false;
      this.mapDefinitions();
      this.setField(this.definition.field);
      this.modules = {};
      this.width = null;
      this.widthStyled = "";
      this.maxWidth = null;
      this.maxWidthStyled = "";
      this.maxInitialWidth = null;
      this.minWidth = null;
      this.minWidthStyled = "";
      this.widthFixed = false;
      this.visible = true;
      this.component = null;
      if (this.definition.columns) {
        this.isGroup = true;
        this.definition.columns.forEach((def3, i) => {
          var newCol = new _Column(def3, this);
          this.attachColumn(newCol);
        });
        this.checkColumnVisibility();
      } else {
        parent.registerColumnField(this);
      }
      this._initialize();
    }
    createElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-col");
      el.setAttribute("role", "columnheader");
      el.setAttribute("aria-sort", "none");
      if (this.isRowHeader) {
        el.classList.add("tabulator-row-header");
      }
      switch (this.table.options.columnHeaderVertAlign) {
        case "middle":
          el.style.justifyContent = "center";
          break;
        case "bottom":
          el.style.justifyContent = "flex-end";
          break;
      }
      return el;
    }
    createGroupElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-col-group-cols");
      return el;
    }
    mapDefinitions() {
      var defaults = this.table.options.columnDefaults;
      if (defaults) {
        for (let key in defaults) {
          if (typeof this.definition[key] === "undefined") {
            this.definition[key] = defaults[key];
          }
        }
      }
      this.definition = this.table.columnManager.optionsList.generate(_Column.defaultOptionList, this.definition);
    }
    checkDefinition() {
      Object.keys(this.definition).forEach((key) => {
        if (_Column.defaultOptionList.indexOf(key) === -1) {
          console.warn("Invalid column definition option in '" + (this.field || this.definition.title) + "' column:", key);
        }
      });
    }
    setField(field) {
      this.field = field;
      this.fieldStructure = field ? this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator) : [field] : [];
      this.getFieldValue = this.fieldStructure.length > 1 ? this._getNestedData : this._getFlatData;
      this.setFieldValue = this.fieldStructure.length > 1 ? this._setNestedData : this._setFlatData;
    }
    //register column position with column manager
    registerColumnPosition(column) {
      this.parent.registerColumnPosition(column);
    }
    //register column position with column manager
    registerColumnField(column) {
      this.parent.registerColumnField(column);
    }
    //trigger position registration
    reRegisterPosition() {
      if (this.isGroup) {
        this.columns.forEach(function(column) {
          column.reRegisterPosition();
        });
      } else {
        this.registerColumnPosition(this);
      }
    }
    //build header element
    _initialize() {
      var def2 = this.definition;
      while (this.element.firstChild)
        this.element.removeChild(this.element.firstChild);
      if (def2.headerVertical) {
        this.element.classList.add("tabulator-col-vertical");
        if (def2.headerVertical === "flip") {
          this.element.classList.add("tabulator-col-vertical-flip");
        }
      }
      this.contentElement = this._buildColumnHeaderContent();
      this.element.appendChild(this.contentElement);
      if (this.isGroup) {
        this._buildGroupHeader();
      } else {
        this._buildColumnHeader();
      }
      this.dispatch("column-init", this);
    }
    //build header element for header
    _buildColumnHeader() {
      var def2 = this.definition;
      this.dispatch("column-layout", this);
      if (typeof def2.visible != "undefined") {
        if (def2.visible) {
          this.show(true);
        } else {
          this.hide(true);
        }
      }
      if (def2.cssClass) {
        var classNames = def2.cssClass.split(" ");
        classNames.forEach((className) => {
          this.element.classList.add(className);
        });
      }
      if (def2.field) {
        this.element.setAttribute("tabulator-field", def2.field);
      }
      this.setMinWidth(parseInt(def2.minWidth));
      if (def2.maxInitialWidth) {
        this.maxInitialWidth = parseInt(def2.maxInitialWidth);
      }
      if (def2.maxWidth) {
        this.setMaxWidth(parseInt(def2.maxWidth));
      }
      this.reinitializeWidth();
      this.hozAlign = this.definition.hozAlign;
      this.vertAlign = this.definition.vertAlign;
      this.titleElement.style.textAlign = this.definition.headerHozAlign;
    }
    _buildColumnHeaderContent() {
      var contentElement = document.createElement("div");
      contentElement.classList.add("tabulator-col-content");
      this.titleHolderElement = document.createElement("div");
      this.titleHolderElement.classList.add("tabulator-col-title-holder");
      contentElement.appendChild(this.titleHolderElement);
      this.titleElement = this._buildColumnHeaderTitle();
      this.titleHolderElement.appendChild(this.titleElement);
      return contentElement;
    }
    //build title element of column
    _buildColumnHeaderTitle() {
      var def2 = this.definition;
      var titleHolderElement = document.createElement("div");
      titleHolderElement.classList.add("tabulator-col-title");
      if (def2.headerWordWrap) {
        titleHolderElement.classList.add("tabulator-col-title-wrap");
      }
      if (def2.editableTitle) {
        var titleElement = document.createElement("input");
        titleElement.classList.add("tabulator-title-editor");
        titleElement.addEventListener("click", (e) => {
          e.stopPropagation();
          titleElement.focus();
        });
        titleElement.addEventListener("mousedown", (e) => {
          e.stopPropagation();
        });
        titleElement.addEventListener("change", () => {
          def2.title = titleElement.value;
          this.dispatchExternal("columnTitleChanged", this.getComponent());
        });
        titleHolderElement.appendChild(titleElement);
        if (def2.field) {
          this.langBind("columns|" + def2.field, (text) => {
            titleElement.value = text || (def2.title || "&nbsp;");
          });
        } else {
          titleElement.value = def2.title || "&nbsp;";
        }
      } else {
        if (def2.field) {
          this.langBind("columns|" + def2.field, (text) => {
            this._formatColumnHeaderTitle(titleHolderElement, text || (def2.title || "&nbsp;"));
          });
        } else {
          this._formatColumnHeaderTitle(titleHolderElement, def2.title || "&nbsp;");
        }
      }
      return titleHolderElement;
    }
    _formatColumnHeaderTitle(el, title) {
      var contents = this.chain("column-format", [this, title, el], null, () => {
        return title;
      });
      switch (typeof contents) {
        case "object":
          if (contents instanceof Node) {
            el.appendChild(contents);
          } else {
            el.innerHTML = "";
            console.warn("Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:", contents);
          }
          break;
        case "undefined":
          el.innerHTML = "";
          break;
        default:
          el.innerHTML = contents;
      }
    }
    //build header element for column group
    _buildGroupHeader() {
      this.element.classList.add("tabulator-col-group");
      this.element.setAttribute("role", "columngroup");
      this.element.setAttribute("aria-title", this.definition.title);
      if (this.definition.cssClass) {
        var classNames = this.definition.cssClass.split(" ");
        classNames.forEach((className) => {
          this.element.classList.add(className);
        });
      }
      this.titleElement.style.textAlign = this.definition.headerHozAlign;
      this.element.appendChild(this.groupElement);
    }
    //flat field lookup
    _getFlatData(data) {
      return data[this.field];
    }
    //nested field lookup
    _getNestedData(data) {
      var dataObj = data, structure = this.fieldStructure, length = structure.length, output;
      for (let i = 0; i < length; i++) {
        dataObj = dataObj[structure[i]];
        output = dataObj;
        if (!dataObj) {
          break;
        }
      }
      return output;
    }
    //flat field set
    _setFlatData(data, value) {
      if (this.field) {
        data[this.field] = value;
      }
    }
    //nested field set
    _setNestedData(data, value) {
      var dataObj = data, structure = this.fieldStructure, length = structure.length;
      for (let i = 0; i < length; i++) {
        if (i == length - 1) {
          dataObj[structure[i]] = value;
        } else {
          if (!dataObj[structure[i]]) {
            if (typeof value !== "undefined") {
              dataObj[structure[i]] = {};
            } else {
              break;
            }
          }
          dataObj = dataObj[structure[i]];
        }
      }
    }
    //attach column to this group
    attachColumn(column) {
      if (this.groupElement) {
        this.columns.push(column);
        this.groupElement.appendChild(column.getElement());
        column.columnRendered();
      } else {
        console.warn("Column Warning - Column being attached to another column instead of column group");
      }
    }
    //vertically align header in column
    verticalAlign(alignment, height) {
      var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : height || this.parent.getHeadersElement().clientHeight;
      this.element.style.height = parentHeight + "px";
      this.dispatch("column-height", this, this.element.style.height);
      if (this.isGroup) {
        this.groupElement.style.minHeight = parentHeight - this.contentElement.offsetHeight + "px";
      }
      this.columns.forEach(function(column) {
        column.verticalAlign(alignment);
      });
    }
    //clear vertical alignment
    clearVerticalAlign() {
      this.element.style.paddingTop = "";
      this.element.style.height = "";
      this.element.style.minHeight = "";
      this.groupElement.style.minHeight = "";
      this.columns.forEach(function(column) {
        column.clearVerticalAlign();
      });
      this.dispatch("column-height", this, "");
    }
    //// Retrieve Column Information ////
    //return column header element
    getElement() {
      return this.element;
    }
    //return column group element
    getGroupElement() {
      return this.groupElement;
    }
    //return field name
    getField() {
      return this.field;
    }
    getTitleDownload() {
      return this.titleDownload;
    }
    //return the first column in a group
    getFirstColumn() {
      if (!this.isGroup) {
        return this;
      } else {
        if (this.columns.length) {
          return this.columns[0].getFirstColumn();
        } else {
          return false;
        }
      }
    }
    //return the last column in a group
    getLastColumn() {
      if (!this.isGroup) {
        return this;
      } else {
        if (this.columns.length) {
          return this.columns[this.columns.length - 1].getLastColumn();
        } else {
          return false;
        }
      }
    }
    //return all columns in a group
    getColumns(traverse2) {
      var columns = [];
      if (traverse2) {
        this.columns.forEach((column) => {
          columns.push(column);
          columns = columns.concat(column.getColumns(true));
        });
      } else {
        columns = this.columns;
      }
      return columns;
    }
    //return all columns in a group
    getCells() {
      return this.cells;
    }
    //retrieve the top column in a group of columns
    getTopColumn() {
      if (this.parent.isGroup) {
        return this.parent.getTopColumn();
      } else {
        return this;
      }
    }
    //return column definition object
    getDefinition(updateBranches) {
      var colDefs = [];
      if (this.isGroup && updateBranches) {
        this.columns.forEach(function(column) {
          colDefs.push(column.getDefinition(true));
        });
        this.definition.columns = colDefs;
      }
      return this.definition;
    }
    //////////////////// Actions ////////////////////
    checkColumnVisibility() {
      var visible = false;
      this.columns.forEach(function(column) {
        if (column.visible) {
          visible = true;
        }
      });
      if (visible) {
        this.show();
        this.dispatchExternal("columnVisibilityChanged", this.getComponent(), false);
      } else {
        this.hide();
      }
    }
    //show column
    show(silent, responsiveToggle) {
      if (!this.visible) {
        this.visible = true;
        this.element.style.display = "";
        if (this.parent.isGroup) {
          this.parent.checkColumnVisibility();
        }
        this.cells.forEach(function(cell) {
          cell.show();
        });
        if (!this.isGroup && this.width === null) {
          this.reinitializeWidth();
        }
        this.table.columnManager.verticalAlignHeaders();
        this.dispatch("column-show", this, responsiveToggle);
        if (!silent) {
          this.dispatchExternal("columnVisibilityChanged", this.getComponent(), true);
        }
        if (this.parent.isGroup) {
          this.parent.matchChildWidths();
        }
        if (!this.silent) {
          this.table.columnManager.rerenderColumns();
        }
      }
    }
    //hide column
    hide(silent, responsiveToggle) {
      if (this.visible) {
        this.visible = false;
        this.element.style.display = "none";
        this.table.columnManager.verticalAlignHeaders();
        if (this.parent.isGroup) {
          this.parent.checkColumnVisibility();
        }
        this.cells.forEach(function(cell) {
          cell.hide();
        });
        this.dispatch("column-hide", this, responsiveToggle);
        if (!silent) {
          this.dispatchExternal("columnVisibilityChanged", this.getComponent(), false);
        }
        if (this.parent.isGroup) {
          this.parent.matchChildWidths();
        }
        if (!this.silent) {
          this.table.columnManager.rerenderColumns();
        }
      }
    }
    matchChildWidths() {
      var childWidth = 0;
      if (this.contentElement && this.columns.length) {
        this.columns.forEach(function(column) {
          if (column.visible) {
            childWidth += column.getWidth();
          }
        });
        this.contentElement.style.maxWidth = childWidth - 1 + "px";
        if (this.table.initialized) {
          this.element.style.width = childWidth + "px";
        }
        if (this.parent.isGroup) {
          this.parent.matchChildWidths();
        }
      }
    }
    removeChild(child) {
      var index7 = this.columns.indexOf(child);
      if (index7 > -1) {
        this.columns.splice(index7, 1);
      }
      if (!this.columns.length) {
        this.delete();
      }
    }
    setWidth(width) {
      this.widthFixed = true;
      this.setWidthActual(width);
    }
    setWidthActual(width) {
      if (isNaN(width)) {
        width = Math.floor(this.table.element.clientWidth / 100 * parseInt(width));
      }
      width = Math.max(this.minWidth, width);
      if (this.maxWidth) {
        width = Math.min(this.maxWidth, width);
      }
      this.width = width;
      this.widthStyled = width ? width + "px" : "";
      this.element.style.width = this.widthStyled;
      if (!this.isGroup) {
        this.cells.forEach(function(cell) {
          cell.setWidth();
        });
      }
      if (this.parent.isGroup) {
        this.parent.matchChildWidths();
      }
      this.dispatch("column-width", this);
      if (this.subscribedExternal("columnWidth")) {
        this.dispatchExternal("columnWidth", this.getComponent());
      }
    }
    checkCellHeights() {
      var rows2 = [];
      this.cells.forEach(function(cell) {
        if (cell.row.heightInitialized) {
          if (cell.row.getElement().offsetParent !== null) {
            rows2.push(cell.row);
            cell.row.clearCellHeight();
          } else {
            cell.row.heightInitialized = false;
          }
        }
      });
      rows2.forEach(function(row) {
        row.calcHeight();
      });
      rows2.forEach(function(row) {
        row.setCellHeight();
      });
    }
    getWidth() {
      var width = 0;
      if (this.isGroup) {
        this.columns.forEach(function(column) {
          if (column.visible) {
            width += column.getWidth();
          }
        });
      } else {
        width = this.width;
      }
      return width;
    }
    getLeftOffset() {
      var offset2 = this.element.offsetLeft;
      if (this.parent.isGroup) {
        offset2 += this.parent.getLeftOffset();
      }
      return offset2;
    }
    getHeight() {
      return Math.ceil(this.element.getBoundingClientRect().height);
    }
    setMinWidth(minWidth) {
      if (this.maxWidth && minWidth > this.maxWidth) {
        minWidth = this.maxWidth;
        console.warn("the minWidth (" + minWidth + "px) for column '" + this.field + "' cannot be bigger that its maxWidth (" + this.maxWidthStyled + ")");
      }
      this.minWidth = minWidth;
      this.minWidthStyled = minWidth ? minWidth + "px" : "";
      this.element.style.minWidth = this.minWidthStyled;
      this.cells.forEach(function(cell) {
        cell.setMinWidth();
      });
    }
    setMaxWidth(maxWidth) {
      if (this.minWidth && maxWidth < this.minWidth) {
        maxWidth = this.minWidth;
        console.warn("the maxWidth (" + maxWidth + "px) for column '" + this.field + "' cannot be smaller that its minWidth (" + this.minWidthStyled + ")");
      }
      this.maxWidth = maxWidth;
      this.maxWidthStyled = maxWidth ? maxWidth + "px" : "";
      this.element.style.maxWidth = this.maxWidthStyled;
      this.cells.forEach(function(cell) {
        cell.setMaxWidth();
      });
    }
    delete() {
      return new Promise((resolve2, reject) => {
        if (this.isGroup) {
          this.columns.forEach(function(column) {
            column.delete();
          });
        }
        this.dispatch("column-delete", this);
        var cellCount = this.cells.length;
        for (let i = 0; i < cellCount; i++) {
          this.cells[0].delete();
        }
        if (this.element.parentNode) {
          this.element.parentNode.removeChild(this.element);
        }
        this.element = false;
        this.contentElement = false;
        this.titleElement = false;
        this.groupElement = false;
        if (this.parent.isGroup) {
          this.parent.removeChild(this);
        }
        this.table.columnManager.deregisterColumn(this);
        this.table.columnManager.rerenderColumns(true);
        this.dispatch("column-deleted", this);
        resolve2();
      });
    }
    columnRendered() {
      if (this.titleFormatterRendered) {
        this.titleFormatterRendered();
      }
      this.dispatch("column-rendered", this);
    }
    //////////////// Cell Management /////////////////
    //generate cell for this column
    generateCell(row) {
      var cell = new Cell(this, row);
      this.cells.push(cell);
      return cell;
    }
    nextColumn() {
      var index7 = this.table.columnManager.findColumnIndex(this);
      return index7 > -1 ? this._nextVisibleColumn(index7 + 1) : false;
    }
    _nextVisibleColumn(index7) {
      var column = this.table.columnManager.getColumnByIndex(index7);
      return !column || column.visible ? column : this._nextVisibleColumn(index7 + 1);
    }
    prevColumn() {
      var index7 = this.table.columnManager.findColumnIndex(this);
      return index7 > -1 ? this._prevVisibleColumn(index7 - 1) : false;
    }
    _prevVisibleColumn(index7) {
      var column = this.table.columnManager.getColumnByIndex(index7);
      return !column || column.visible ? column : this._prevVisibleColumn(index7 - 1);
    }
    reinitializeWidth(force) {
      this.widthFixed = false;
      if (typeof this.definition.width !== "undefined" && !force) {
        this.setWidth(this.definition.width);
      }
      this.dispatch("column-width-fit-before", this);
      this.fitToData(force);
      this.dispatch("column-width-fit-after", this);
    }
    //set column width to maximum cell width for non group columns
    fitToData(force) {
      if (this.isGroup) {
        return;
      }
      if (!this.widthFixed) {
        this.element.style.width = "";
        this.cells.forEach((cell) => {
          cell.clearWidth();
        });
      }
      var maxWidth = this.element.offsetWidth;
      if (!this.width || !this.widthFixed) {
        this.cells.forEach((cell) => {
          var width = cell.getWidth();
          if (width > maxWidth) {
            maxWidth = width;
          }
        });
        if (maxWidth) {
          var setTo = maxWidth + 1;
          if (this.maxInitialWidth && !force) {
            setTo = Math.min(setTo, this.maxInitialWidth);
          }
          this.setWidthActual(setTo);
        }
      }
    }
    updateDefinition(updates) {
      var definition;
      if (!this.isGroup) {
        if (!this.parent.isGroup) {
          definition = Object.assign({}, this.getDefinition());
          definition = Object.assign(definition, updates);
          return this.table.columnManager.addColumn(definition, false, this).then((column) => {
            if (definition.field == this.field) {
              this.field = false;
            }
            return this.delete().then(() => {
              return column.getComponent();
            });
          });
        } else {
          console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns");
          return Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups");
        }
      } else {
        console.error("Column Update Error - The updateDefinition function is only available on ungrouped columns");
        return Promise.reject("Column Update Error - The updateDefinition function is only available on columns, not column groups");
      }
    }
    deleteCell(cell) {
      var index7 = this.cells.indexOf(cell);
      if (index7 > -1) {
        this.cells.splice(index7, 1);
      }
    }
    //////////////// Object Generation /////////////////
    getComponent() {
      if (!this.component) {
        this.component = new ColumnComponent(this);
      }
      return this.component;
    }
    getPosition() {
      return this.table.columnManager.getVisibleColumnsByIndex().indexOf(this) + 1;
    }
    getParentComponent() {
      return this.parent instanceof _Column ? this.parent.getComponent() : false;
    }
  };
  var RowComponent = class {
    constructor(row) {
      this._row = row;
      return new Proxy(this, {
        get: function(target, name, receiver) {
          if (typeof target[name] !== "undefined") {
            return target[name];
          } else {
            return target._row.table.componentFunctionBinder.handle("row", target._row, name);
          }
        }
      });
    }
    getData(transform) {
      return this._row.getData(transform);
    }
    getElement() {
      return this._row.getElement();
    }
    getCells() {
      var cells = [];
      this._row.getCells().forEach(function(cell) {
        cells.push(cell.getComponent());
      });
      return cells;
    }
    getCell(column) {
      var cell = this._row.getCell(column);
      return cell ? cell.getComponent() : false;
    }
    getIndex() {
      return this._row.getData("data")[this._row.table.options.index];
    }
    getPosition() {
      return this._row.getPosition();
    }
    watchPosition(callback) {
      return this._row.watchPosition(callback);
    }
    delete() {
      return this._row.delete();
    }
    scrollTo(position, ifVisible) {
      return this._row.table.rowManager.scrollToRow(this._row, position, ifVisible);
    }
    move(to, after) {
      this._row.moveToRow(to, after);
    }
    update(data) {
      return this._row.updateData(data);
    }
    normalizeHeight() {
      this._row.normalizeHeight(true);
    }
    _getSelf() {
      return this._row;
    }
    reformat() {
      return this._row.reinitialize();
    }
    getTable() {
      return this._row.table;
    }
    getNextRow() {
      var row = this._row.nextRow();
      return row ? row.getComponent() : row;
    }
    getPrevRow() {
      var row = this._row.prevRow();
      return row ? row.getComponent() : row;
    }
  };
  var Row = class extends CoreFeature {
    constructor(data, parent, type = "row") {
      super(parent.table);
      this.parent = parent;
      this.data = {};
      this.type = type;
      this.element = false;
      this.modules = {};
      this.cells = [];
      this.height = 0;
      this.heightStyled = "";
      this.manualHeight = false;
      this.outerHeight = 0;
      this.initialized = false;
      this.heightInitialized = false;
      this.position = 0;
      this.positionWatchers = [];
      this.component = null;
      this.created = false;
      this.setData(data);
    }
    create() {
      if (!this.created) {
        this.created = true;
        this.generateElement();
      }
    }
    createElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-row");
      el.setAttribute("role", "row");
      this.element = el;
    }
    getElement() {
      this.create();
      return this.element;
    }
    detachElement() {
      if (this.element && this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
    }
    generateElement() {
      this.createElement();
      this.dispatch("row-init", this);
    }
    generateCells() {
      this.cells = this.table.columnManager.generateCells(this);
    }
    //functions to setup on first render
    initialize(force, inFragment) {
      this.create();
      if (!this.initialized || force) {
        this.deleteCells();
        while (this.element.firstChild)
          this.element.removeChild(this.element.firstChild);
        this.dispatch("row-layout-before", this);
        this.generateCells();
        this.initialized = true;
        this.table.columnManager.renderer.renderRowCells(this, inFragment);
        if (force) {
          this.normalizeHeight();
        }
        this.dispatch("row-layout", this);
        if (this.table.options.rowFormatter) {
          this.table.options.rowFormatter(this.getComponent());
        }
        this.dispatch("row-layout-after", this);
      } else {
        this.table.columnManager.renderer.rerenderRowCells(this, inFragment);
      }
    }
    rendered() {
      this.cells.forEach((cell) => {
        cell.cellRendered();
      });
    }
    reinitializeHeight() {
      this.heightInitialized = false;
      if (this.element && this.element.offsetParent !== null) {
        this.normalizeHeight(true);
      }
    }
    deinitialize() {
      this.initialized = false;
    }
    deinitializeHeight() {
      this.heightInitialized = false;
    }
    reinitialize(children) {
      this.initialized = false;
      this.heightInitialized = false;
      if (!this.manualHeight) {
        this.height = 0;
        this.heightStyled = "";
      }
      if (this.element && this.element.offsetParent !== null) {
        this.initialize(true);
      }
      this.dispatch("row-relayout", this);
    }
    //get heights when doing bulk row style calcs in virtual DOM
    calcHeight(force) {
      var maxHeight = 0, minHeight = 0;
      if (this.table.options.rowHeight) {
        this.height = this.table.options.rowHeight;
      } else {
        minHeight = this.calcMinHeight();
        maxHeight = this.calcMaxHeight();
        if (force) {
          this.height = Math.max(maxHeight, minHeight);
        } else {
          this.height = this.manualHeight ? this.height : Math.max(maxHeight, minHeight);
        }
      }
      this.heightStyled = this.height ? this.height + "px" : "";
      this.outerHeight = this.element.offsetHeight;
    }
    calcMinHeight() {
      return this.table.options.resizableRows ? this.element.clientHeight : 0;
    }
    calcMaxHeight() {
      var maxHeight = 0;
      this.cells.forEach(function(cell) {
        var height = cell.getHeight();
        if (height > maxHeight) {
          maxHeight = height;
        }
      });
      return maxHeight;
    }
    //set of cells
    setCellHeight() {
      this.cells.forEach(function(cell) {
        cell.setHeight();
      });
      this.heightInitialized = true;
    }
    clearCellHeight() {
      this.cells.forEach(function(cell) {
        cell.clearHeight();
      });
    }
    //normalize the height of elements in the row
    normalizeHeight(force) {
      if (force && !this.table.options.rowHeight) {
        this.clearCellHeight();
      }
      this.calcHeight(force);
      this.setCellHeight();
    }
    //set height of rows
    setHeight(height, force) {
      if (this.height != height || force) {
        this.manualHeight = true;
        this.height = height;
        this.heightStyled = height ? height + "px" : "";
        this.setCellHeight();
        this.outerHeight = this.element.offsetHeight;
        if (this.subscribedExternal("rowHeight")) {
          this.dispatchExternal("rowHeight", this.getComponent());
        }
      }
    }
    //return rows outer height
    getHeight() {
      return this.outerHeight;
    }
    //return rows outer Width
    getWidth() {
      return this.element.offsetWidth;
    }
    //////////////// Cell Management /////////////////
    deleteCell(cell) {
      var index7 = this.cells.indexOf(cell);
      if (index7 > -1) {
        this.cells.splice(index7, 1);
      }
    }
    //////////////// Data Management /////////////////
    setData(data) {
      this.data = this.chain("row-data-init-before", [this, data], void 0, data);
      this.dispatch("row-data-init-after", this);
    }
    //update the rows data
    updateData(updatedData) {
      var visible = this.element && Helpers.elVisible(this.element), tempData = {}, newRowData;
      return new Promise((resolve2, reject) => {
        if (typeof updatedData === "string") {
          updatedData = JSON.parse(updatedData);
        }
        this.dispatch("row-data-save-before", this);
        if (this.subscribed("row-data-changing")) {
          tempData = Object.assign(tempData, this.data);
          tempData = Object.assign(tempData, updatedData);
        }
        newRowData = this.chain("row-data-changing", [this, tempData, updatedData], null, updatedData);
        for (let attrname in newRowData) {
          this.data[attrname] = newRowData[attrname];
        }
        this.dispatch("row-data-save-after", this);
        for (let attrname in updatedData) {
          let columns = this.table.columnManager.getColumnsByFieldRoot(attrname);
          columns.forEach((column) => {
            let cell = this.getCell(column.getField());
            if (cell) {
              let value = column.getFieldValue(newRowData);
              if (cell.getValue() !== value) {
                cell.setValueProcessData(value);
                if (visible) {
                  cell.cellRendered();
                }
              }
            }
          });
        }
        if (visible) {
          this.normalizeHeight(true);
          if (this.table.options.rowFormatter) {
            this.table.options.rowFormatter(this.getComponent());
          }
        } else {
          this.initialized = false;
          this.height = 0;
          this.heightStyled = "";
        }
        this.dispatch("row-data-changed", this, visible, updatedData);
        this.dispatchExternal("rowUpdated", this.getComponent());
        if (this.subscribedExternal("dataChanged")) {
          this.dispatchExternal("dataChanged", this.table.rowManager.getData());
        }
        resolve2();
      });
    }
    getData(transform) {
      if (transform) {
        return this.chain("row-data-retrieve", [this, transform], null, this.data);
      }
      return this.data;
    }
    getCell(column) {
      var match = false;
      column = this.table.columnManager.findColumn(column);
      if (!this.initialized && this.cells.length === 0) {
        this.generateCells();
      }
      match = this.cells.find(function(cell) {
        return cell.column === column;
      });
      return match;
    }
    getCellIndex(findCell) {
      return this.cells.findIndex(function(cell) {
        return cell === findCell;
      });
    }
    findCell(subject) {
      return this.cells.find((cell) => {
        return cell.element === subject;
      });
    }
    getCells() {
      if (!this.initialized && this.cells.length === 0) {
        this.generateCells();
      }
      return this.cells;
    }
    nextRow() {
      var row = this.table.rowManager.nextDisplayRow(this, true);
      return row || false;
    }
    prevRow() {
      var row = this.table.rowManager.prevDisplayRow(this, true);
      return row || false;
    }
    moveToRow(to, before) {
      var toRow = this.table.rowManager.findRow(to);
      if (toRow) {
        this.table.rowManager.moveRowActual(this, toRow, !before);
        this.table.rowManager.refreshActiveData("display", false, true);
      } else {
        console.warn("Move Error - No matching row found:", to);
      }
    }
    ///////////////////// Actions  /////////////////////
    delete() {
      this.dispatch("row-delete", this);
      this.deleteActual();
      return Promise.resolve();
    }
    deleteActual(blockRedraw) {
      this.detachModules();
      this.table.rowManager.deleteRow(this, blockRedraw);
      this.deleteCells();
      this.initialized = false;
      this.heightInitialized = false;
      this.element = false;
      this.dispatch("row-deleted", this);
    }
    detachModules() {
      this.dispatch("row-deleting", this);
    }
    deleteCells() {
      var cellCount = this.cells.length;
      for (let i = 0; i < cellCount; i++) {
        this.cells[0].delete();
      }
    }
    wipe() {
      this.detachModules();
      this.deleteCells();
      if (this.element) {
        while (this.element.firstChild)
          this.element.removeChild(this.element.firstChild);
        if (this.element.parentNode) {
          this.element.parentNode.removeChild(this.element);
        }
      }
      this.element = false;
      this.modules = {};
    }
    isDisplayed() {
      return this.table.rowManager.getDisplayRows().includes(this);
    }
    getPosition() {
      return this.isDisplayed() ? this.position : false;
    }
    setPosition(position) {
      if (position != this.position) {
        this.position = position;
        this.positionWatchers.forEach((callback) => {
          callback(this.position);
        });
      }
    }
    watchPosition(callback) {
      this.positionWatchers.push(callback);
      callback(this.position);
    }
    getGroup() {
      return this.modules.group || false;
    }
    //////////////// Object Generation /////////////////
    getComponent() {
      if (!this.component) {
        this.component = new RowComponent(this);
      }
      return this.component;
    }
  };
  var defaultCalculations = {
    "avg": function(values, data, calcParams) {
      var output = 0, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : 2;
      if (values.length) {
        output = values.reduce(function(sum, value) {
          return Number(sum) + Number(value);
        });
        output = output / values.length;
        output = precision !== false ? output.toFixed(precision) : output;
      }
      return parseFloat(output).toString();
    },
    "max": function(values, data, calcParams) {
      var output = null, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;
      values.forEach(function(value) {
        value = Number(value);
        if (value > output || output === null) {
          output = value;
        }
      });
      return output !== null ? precision !== false ? output.toFixed(precision) : output : "";
    },
    "min": function(values, data, calcParams) {
      var output = null, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;
      values.forEach(function(value) {
        value = Number(value);
        if (value < output || output === null) {
          output = value;
        }
      });
      return output !== null ? precision !== false ? output.toFixed(precision) : output : "";
    },
    "sum": function(values, data, calcParams) {
      var output = 0, precision = typeof calcParams.precision !== "undefined" ? calcParams.precision : false;
      if (values.length) {
        values.forEach(function(value) {
          value = Number(value);
          output += !isNaN(value) ? Number(value) : 0;
        });
      }
      return precision !== false ? output.toFixed(precision) : output;
    },
    "concat": function(values, data, calcParams) {
      var output = 0;
      if (values.length) {
        output = values.reduce(function(sum, value) {
          return String(sum) + String(value);
        });
      }
      return output;
    },
    "count": function(values, data, calcParams) {
      var output = 0;
      if (values.length) {
        values.forEach(function(value) {
          if (value) {
            output++;
          }
        });
      }
      return output;
    },
    "unique": function(values, data, calcParams) {
      var unique = values.filter((value, index7) => {
        return (values || value === 0) && values.indexOf(value) === index7;
      });
      return unique.length;
    }
  };
  var ColumnCalcs = class _ColumnCalcs extends Module {
    static moduleName = "columnCalcs";
    //load defaults
    static calculations = defaultCalculations;
    constructor(table) {
      super(table);
      this.topCalcs = [];
      this.botCalcs = [];
      this.genColumn = false;
      this.topElement = this.createElement();
      this.botElement = this.createElement();
      this.topRow = false;
      this.botRow = false;
      this.topInitialized = false;
      this.botInitialized = false;
      this.blocked = false;
      this.recalcAfterBlock = false;
      this.registerTableOption("columnCalcs", true);
      this.registerColumnOption("topCalc");
      this.registerColumnOption("topCalcParams");
      this.registerColumnOption("topCalcFormatter");
      this.registerColumnOption("topCalcFormatterParams");
      this.registerColumnOption("bottomCalc");
      this.registerColumnOption("bottomCalcParams");
      this.registerColumnOption("bottomCalcFormatter");
      this.registerColumnOption("bottomCalcFormatterParams");
    }
    createElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-calcs-holder");
      return el;
    }
    initialize() {
      this.genColumn = new Column({ field: "value" }, this);
      this.subscribe("cell-value-changed", this.cellValueChanged.bind(this));
      this.subscribe("column-init", this.initializeColumnCheck.bind(this));
      this.subscribe("row-deleted", this.rowsUpdated.bind(this));
      this.subscribe("scroll-horizontal", this.scrollHorizontal.bind(this));
      this.subscribe("row-added", this.rowsUpdated.bind(this));
      this.subscribe("column-moved", this.recalcActiveRows.bind(this));
      this.subscribe("column-add", this.recalcActiveRows.bind(this));
      this.subscribe("data-refreshed", this.recalcActiveRowsRefresh.bind(this));
      this.subscribe("table-redraw", this.tableRedraw.bind(this));
      this.subscribe("rows-visible", this.visibleRows.bind(this));
      this.subscribe("scrollbar-vertical", this.adjustForScrollbar.bind(this));
      this.subscribe("redraw-blocked", this.blockRedraw.bind(this));
      this.subscribe("redraw-restored", this.restoreRedraw.bind(this));
      this.subscribe("table-redrawing", this.resizeHolderWidth.bind(this));
      this.subscribe("column-resized", this.resizeHolderWidth.bind(this));
      this.subscribe("column-show", this.resizeHolderWidth.bind(this));
      this.subscribe("column-hide", this.resizeHolderWidth.bind(this));
      this.registerTableFunction("getCalcResults", this.getResults.bind(this));
      this.registerTableFunction("recalc", this.userRecalc.bind(this));
      this.resizeHolderWidth();
    }
    resizeHolderWidth() {
      this.topElement.style.minWidth = this.table.columnManager.headersElement.offsetWidth + "px";
    }
    tableRedraw(force) {
      this.recalc(this.table.rowManager.activeRows);
      if (force) {
        this.redraw();
      }
    }
    blockRedraw() {
      this.blocked = true;
      this.recalcAfterBlock = false;
    }
    restoreRedraw() {
      this.blocked = false;
      if (this.recalcAfterBlock) {
        this.recalcAfterBlock = false;
        this.recalcActiveRowsRefresh();
      }
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    userRecalc() {
      this.recalc(this.table.rowManager.activeRows);
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    blockCheck() {
      if (this.blocked) {
        this.recalcAfterBlock = true;
      }
      return this.blocked;
    }
    visibleRows(viewable, rows2) {
      if (this.topRow) {
        rows2.unshift(this.topRow);
      }
      if (this.botRow) {
        rows2.push(this.botRow);
      }
      return rows2;
    }
    rowsUpdated(row) {
      if (this.table.options.groupBy) {
        this.recalcRowGroup(row);
      } else {
        this.recalcActiveRows();
      }
    }
    recalcActiveRowsRefresh() {
      if (this.table.options.groupBy && this.table.options.dataTreeStartExpanded && this.table.options.dataTree) {
        this.recalcAll();
      } else {
        this.recalcActiveRows();
      }
    }
    recalcActiveRows() {
      this.recalc(this.table.rowManager.activeRows);
    }
    cellValueChanged(cell) {
      if (cell.column.definition.topCalc || cell.column.definition.bottomCalc) {
        if (this.table.options.groupBy) {
          if (this.table.options.columnCalcs == "table" || this.table.options.columnCalcs == "both") {
            this.recalcActiveRows();
          }
          if (this.table.options.columnCalcs != "table") {
            this.recalcRowGroup(cell.row);
          }
        } else {
          this.recalcActiveRows();
        }
      }
    }
    initializeColumnCheck(column) {
      if (column.definition.topCalc || column.definition.bottomCalc) {
        this.initializeColumn(column);
      }
    }
    //initialize column calcs
    initializeColumn(column) {
      var def2 = column.definition;
      var config = {
        topCalcParams: def2.topCalcParams || {},
        botCalcParams: def2.bottomCalcParams || {}
      };
      if (def2.topCalc) {
        switch (typeof def2.topCalc) {
          case "string":
            if (_ColumnCalcs.calculations[def2.topCalc]) {
              config.topCalc = _ColumnCalcs.calculations[def2.topCalc];
            } else {
              console.warn("Column Calc Error - No such calculation found, ignoring: ", def2.topCalc);
            }
            break;
          case "function":
            config.topCalc = def2.topCalc;
            break;
        }
        if (config.topCalc) {
          column.modules.columnCalcs = config;
          this.topCalcs.push(column);
          if (this.table.options.columnCalcs != "group") {
            this.initializeTopRow();
          }
        }
      }
      if (def2.bottomCalc) {
        switch (typeof def2.bottomCalc) {
          case "string":
            if (_ColumnCalcs.calculations[def2.bottomCalc]) {
              config.botCalc = _ColumnCalcs.calculations[def2.bottomCalc];
            } else {
              console.warn("Column Calc Error - No such calculation found, ignoring: ", def2.bottomCalc);
            }
            break;
          case "function":
            config.botCalc = def2.bottomCalc;
            break;
        }
        if (config.botCalc) {
          column.modules.columnCalcs = config;
          this.botCalcs.push(column);
          if (this.table.options.columnCalcs != "group") {
            this.initializeBottomRow();
          }
        }
      }
    }
    //dummy functions to handle being mock column manager
    registerColumnField() {
    }
    removeCalcs() {
      var changed = false;
      if (this.topInitialized) {
        this.topInitialized = false;
        this.topElement.parentNode.removeChild(this.topElement);
        changed = true;
      }
      if (this.botInitialized) {
        this.botInitialized = false;
        this.footerRemove(this.botElement);
        changed = true;
      }
      if (changed) {
        this.table.rowManager.adjustTableSize();
      }
    }
    reinitializeCalcs() {
      if (this.topCalcs.length) {
        this.initializeTopRow();
      }
      if (this.botCalcs.length) {
        this.initializeBottomRow();
      }
    }
    initializeTopRow() {
      var fragment = document.createDocumentFragment();
      if (!this.topInitialized) {
        fragment.appendChild(document.createElement("br"));
        fragment.appendChild(this.topElement);
        this.table.columnManager.getContentsElement().insertBefore(fragment, this.table.columnManager.headersElement.nextSibling);
        this.topInitialized = true;
      }
    }
    initializeBottomRow() {
      if (!this.botInitialized) {
        this.footerPrepend(this.botElement);
        this.botInitialized = true;
      }
    }
    scrollHorizontal(left) {
      if (this.botInitialized && this.botRow) {
        this.botElement.scrollLeft = left;
      }
    }
    recalc(rows2) {
      var data, row;
      if (!this.blockCheck()) {
        if (this.topInitialized || this.botInitialized) {
          data = this.rowsToData(rows2);
          if (this.topInitialized) {
            if (this.topRow) {
              this.topRow.deleteCells();
            }
            row = this.generateRow("top", data);
            this.topRow = row;
            while (this.topElement.firstChild)
              this.topElement.removeChild(this.topElement.firstChild);
            this.topElement.appendChild(row.getElement());
            row.initialize(true);
          }
          if (this.botInitialized) {
            if (this.botRow) {
              this.botRow.deleteCells();
            }
            row = this.generateRow("bottom", data);
            this.botRow = row;
            while (this.botElement.firstChild)
              this.botElement.removeChild(this.botElement.firstChild);
            this.botElement.appendChild(row.getElement());
            row.initialize(true);
          }
          this.table.rowManager.adjustTableSize();
          if (this.table.modExists("frozenColumns")) {
            this.table.modules.frozenColumns.layout();
          }
        }
      }
    }
    recalcRowGroup(row) {
      this.recalcGroup(this.table.modules.groupRows.getRowGroup(row));
    }
    recalcAll() {
      if (this.topCalcs.length || this.botCalcs.length) {
        if (this.table.options.columnCalcs !== "group") {
          this.recalcActiveRows();
        }
        if (this.table.options.groupBy && this.table.options.columnCalcs !== "table") {
          var groups = this.table.modules.groupRows.getChildGroups();
          groups.forEach((group) => {
            this.recalcGroup(group);
          });
        }
      }
    }
    recalcGroup(group) {
      var data, rowData;
      if (!this.blockCheck()) {
        if (group) {
          if (group.calcs) {
            if (group.calcs.bottom) {
              data = this.rowsToData(group.rows);
              rowData = this.generateRowData("bottom", data);
              group.calcs.bottom.updateData(rowData);
              group.calcs.bottom.reinitialize();
            }
            if (group.calcs.top) {
              data = this.rowsToData(group.rows);
              rowData = this.generateRowData("top", data);
              group.calcs.top.updateData(rowData);
              group.calcs.top.reinitialize();
            }
          }
        }
      }
    }
    //generate top stats row
    generateTopRow(rows2) {
      return this.generateRow("top", this.rowsToData(rows2));
    }
    //generate bottom stats row
    generateBottomRow(rows2) {
      return this.generateRow("bottom", this.rowsToData(rows2));
    }
    rowsToData(rows2) {
      var data = [], hasDataTreeColumnCalcs = this.table.options.dataTree && this.table.options.dataTreeChildColumnCalcs, dataTree = this.table.modules.dataTree;
      rows2.forEach((row) => {
        data.push(row.getData());
        if (hasDataTreeColumnCalcs && row.modules.dataTree?.open) {
          this.rowsToData(dataTree.getFilteredTreeChildren(row)).forEach((dataRow) => {
            data.push(row);
          });
        }
      });
      return data;
    }
    //generate stats row
    generateRow(pos, data) {
      var rowData = this.generateRowData(pos, data), row;
      if (this.table.modExists("mutator")) {
        this.table.modules.mutator.disable();
      }
      row = new Row(rowData, this, "calc");
      if (this.table.modExists("mutator")) {
        this.table.modules.mutator.enable();
      }
      row.getElement().classList.add("tabulator-calcs", "tabulator-calcs-" + pos);
      row.component = false;
      row.getComponent = () => {
        if (!row.component) {
          row.component = new CalcComponent(row);
        }
        return row.component;
      };
      row.generateCells = () => {
        var cells = [];
        this.table.columnManager.columnsByIndex.forEach((column) => {
          this.genColumn.setField(column.getField());
          this.genColumn.hozAlign = column.hozAlign;
          if (column.definition[pos + "CalcFormatter"] && this.table.modExists("format")) {
            this.genColumn.modules.format = {
              formatter: this.table.modules.format.lookupFormatter(column.definition[pos + "CalcFormatter"]),
              params: column.definition[pos + "CalcFormatterParams"] || {}
            };
          } else {
            this.genColumn.modules.format = {
              formatter: this.table.modules.format.lookupFormatter("plaintext"),
              params: {}
            };
          }
          this.genColumn.definition.cssClass = column.definition.cssClass;
          var cell = new Cell(this.genColumn, row);
          cell.getElement();
          cell.column = column;
          cell.setWidth();
          column.cells.push(cell);
          cells.push(cell);
          if (!column.visible) {
            cell.hide();
          }
        });
        row.cells = cells;
      };
      return row;
    }
    //generate stats row
    generateRowData(pos, data) {
      var rowData = {}, calcs = pos == "top" ? this.topCalcs : this.botCalcs, type = pos == "top" ? "topCalc" : "botCalc", params, paramKey;
      calcs.forEach(function(column) {
        var values = [];
        if (column.modules.columnCalcs && column.modules.columnCalcs[type]) {
          data.forEach(function(item) {
            values.push(column.getFieldValue(item));
          });
          paramKey = type + "Params";
          params = typeof column.modules.columnCalcs[paramKey] === "function" ? column.modules.columnCalcs[paramKey](values, data) : column.modules.columnCalcs[paramKey];
          column.setFieldValue(rowData, column.modules.columnCalcs[type](values, data, params));
        }
      });
      return rowData;
    }
    hasTopCalcs() {
      return !!this.topCalcs.length;
    }
    hasBottomCalcs() {
      return !!this.botCalcs.length;
    }
    //handle table redraw
    redraw() {
      if (this.topRow) {
        this.topRow.normalizeHeight(true);
      }
      if (this.botRow) {
        this.botRow.normalizeHeight(true);
      }
    }
    //return the calculated
    getResults() {
      var results = {}, groups;
      if (this.table.options.groupBy && this.table.modExists("groupRows")) {
        groups = this.table.modules.groupRows.getGroups(true);
        groups.forEach((group) => {
          results[group.getKey()] = this.getGroupResults(group);
        });
      } else {
        results = {
          top: this.topRow ? this.topRow.getData() : {},
          bottom: this.botRow ? this.botRow.getData() : {}
        };
      }
      return results;
    }
    //get results from a group
    getGroupResults(group) {
      var groupObj = group._getSelf(), subGroups = group.getSubGroups(), subGroupResults = {}, results = {};
      subGroups.forEach((subgroup) => {
        subGroupResults[subgroup.getKey()] = this.getGroupResults(subgroup);
      });
      results = {
        top: groupObj.calcs.top ? groupObj.calcs.top.getData() : {},
        bottom: groupObj.calcs.bottom ? groupObj.calcs.bottom.getData() : {},
        groups: subGroupResults
      };
      return results;
    }
    adjustForScrollbar(width) {
      if (this.botRow) {
        if (this.table.rtl) {
          this.botElement.style.paddingLeft = width + "px";
        } else {
          this.botElement.style.paddingRight = width + "px";
        }
      }
    }
  };
  var DataTree = class extends Module {
    static moduleName = "dataTree";
    constructor(table) {
      super(table);
      this.indent = 10;
      this.field = "";
      this.collapseEl = null;
      this.expandEl = null;
      this.branchEl = null;
      this.elementField = false;
      this.startOpen = function() {
      };
      this.registerTableOption("dataTree", false);
      this.registerTableOption("dataTreeFilter", true);
      this.registerTableOption("dataTreeSort", true);
      this.registerTableOption("dataTreeElementColumn", false);
      this.registerTableOption("dataTreeBranchElement", true);
      this.registerTableOption("dataTreeChildIndent", 9);
      this.registerTableOption("dataTreeChildField", "_children");
      this.registerTableOption("dataTreeCollapseElement", false);
      this.registerTableOption("dataTreeExpandElement", false);
      this.registerTableOption("dataTreeStartExpanded", false);
      this.registerTableOption("dataTreeChildColumnCalcs", false);
      this.registerTableOption("dataTreeSelectPropagate", false);
      this.registerComponentFunction("row", "treeCollapse", this.collapseRow.bind(this));
      this.registerComponentFunction("row", "treeExpand", this.expandRow.bind(this));
      this.registerComponentFunction("row", "treeToggle", this.toggleRow.bind(this));
      this.registerComponentFunction("row", "getTreeParent", this.getTreeParent.bind(this));
      this.registerComponentFunction("row", "getTreeChildren", this.getRowChildren.bind(this));
      this.registerComponentFunction("row", "addTreeChild", this.addTreeChildRow.bind(this));
      this.registerComponentFunction("row", "isTreeExpanded", this.isRowExpanded.bind(this));
    }
    initialize() {
      if (this.table.options.dataTree) {
        var dummyEl = null, options = this.table.options;
        this.field = options.dataTreeChildField;
        this.indent = options.dataTreeChildIndent;
        if (this.options("movableRows")) {
          console.warn("The movableRows option is not available with dataTree enabled, moving of child rows could result in unpredictable behavior");
        }
        if (options.dataTreeBranchElement) {
          if (options.dataTreeBranchElement === true) {
            this.branchEl = document.createElement("div");
            this.branchEl.classList.add("tabulator-data-tree-branch");
          } else {
            if (typeof options.dataTreeBranchElement === "string") {
              dummyEl = document.createElement("div");
              dummyEl.innerHTML = options.dataTreeBranchElement;
              this.branchEl = dummyEl.firstChild;
            } else {
              this.branchEl = options.dataTreeBranchElement;
            }
          }
        } else {
          this.branchEl = document.createElement("div");
          this.branchEl.classList.add("tabulator-data-tree-branch-empty");
        }
        if (options.dataTreeCollapseElement) {
          if (typeof options.dataTreeCollapseElement === "string") {
            dummyEl = document.createElement("div");
            dummyEl.innerHTML = options.dataTreeCollapseElement;
            this.collapseEl = dummyEl.firstChild;
          } else {
            this.collapseEl = options.dataTreeCollapseElement;
          }
        } else {
          this.collapseEl = document.createElement("div");
          this.collapseEl.classList.add("tabulator-data-tree-control");
          this.collapseEl.tabIndex = 0;
          this.collapseEl.innerHTML = "<div class='tabulator-data-tree-control-collapse'></div>";
        }
        if (options.dataTreeExpandElement) {
          if (typeof options.dataTreeExpandElement === "string") {
            dummyEl = document.createElement("div");
            dummyEl.innerHTML = options.dataTreeExpandElement;
            this.expandEl = dummyEl.firstChild;
          } else {
            this.expandEl = options.dataTreeExpandElement;
          }
        } else {
          this.expandEl = document.createElement("div");
          this.expandEl.classList.add("tabulator-data-tree-control");
          this.expandEl.tabIndex = 0;
          this.expandEl.innerHTML = "<div class='tabulator-data-tree-control-expand'></div>";
        }
        switch (typeof options.dataTreeStartExpanded) {
          case "boolean":
            this.startOpen = function(row, index7) {
              return options.dataTreeStartExpanded;
            };
            break;
          case "function":
            this.startOpen = options.dataTreeStartExpanded;
            break;
          default:
            this.startOpen = function(row, index7) {
              return options.dataTreeStartExpanded[index7];
            };
            break;
        }
        this.subscribe("row-init", this.initializeRow.bind(this));
        this.subscribe("row-layout-after", this.layoutRow.bind(this));
        this.subscribe("row-deleted", this.rowDelete.bind(this), 0);
        this.subscribe("row-data-changed", this.rowDataChanged.bind(this), 10);
        this.subscribe("cell-value-updated", this.cellValueChanged.bind(this));
        this.subscribe("edit-cancelled", this.cellValueChanged.bind(this));
        this.subscribe("column-moving-rows", this.columnMoving.bind(this));
        this.subscribe("table-built", this.initializeElementField.bind(this));
        this.subscribe("table-redrawing", this.tableRedrawing.bind(this));
        this.registerDisplayHandler(this.getRows.bind(this), 30);
      }
    }
    tableRedrawing(force) {
      var rows2;
      if (force) {
        rows2 = this.table.rowManager.getRows();
        rows2.forEach((row) => {
          this.reinitializeRowChildren(row);
        });
      }
    }
    initializeElementField() {
      var firstCol = this.table.columnManager.getFirstVisibleColumn();
      this.elementField = this.table.options.dataTreeElementColumn || (firstCol ? firstCol.field : false);
    }
    getRowChildren(row) {
      return this.getTreeChildren(row, true);
    }
    columnMoving() {
      var rows2 = [];
      this.table.rowManager.rows.forEach((row) => {
        rows2 = rows2.concat(this.getTreeChildren(row, false, true));
      });
      return rows2;
    }
    rowDataChanged(row, visible, updatedData) {
      if (this.redrawNeeded(updatedData)) {
        this.initializeRow(row);
        if (visible) {
          this.layoutRow(row);
          this.refreshData(true);
        }
      }
    }
    cellValueChanged(cell) {
      var field = cell.column.getField();
      if (field === this.elementField) {
        this.layoutRow(cell.row);
      }
    }
    initializeRow(row) {
      var childArray = row.getData()[this.field];
      var isArray2 = Array.isArray(childArray);
      var children = isArray2 || !isArray2 && typeof childArray === "object" && childArray !== null;
      if (!children && row.modules.dataTree && row.modules.dataTree.branchEl) {
        row.modules.dataTree.branchEl.parentNode.removeChild(row.modules.dataTree.branchEl);
      }
      if (!children && row.modules.dataTree && row.modules.dataTree.controlEl) {
        row.modules.dataTree.controlEl.parentNode.removeChild(row.modules.dataTree.controlEl);
      }
      row.modules.dataTree = {
        index: row.modules.dataTree ? row.modules.dataTree.index : 0,
        open: children ? row.modules.dataTree ? row.modules.dataTree.open : this.startOpen(row.getComponent(), 0) : false,
        controlEl: row.modules.dataTree && children ? row.modules.dataTree.controlEl : false,
        branchEl: row.modules.dataTree && children ? row.modules.dataTree.branchEl : false,
        parent: row.modules.dataTree ? row.modules.dataTree.parent : false,
        children
      };
    }
    reinitializeRowChildren(row) {
      var children = this.getTreeChildren(row, false, true);
      children.forEach(function(child) {
        child.reinitialize(true);
      });
    }
    layoutRow(row) {
      var cell = this.elementField ? row.getCell(this.elementField) : row.getCells()[0], el = cell.getElement(), config = row.modules.dataTree;
      if (config.branchEl) {
        if (config.branchEl.parentNode) {
          config.branchEl.parentNode.removeChild(config.branchEl);
        }
        config.branchEl = false;
      }
      if (config.controlEl) {
        if (config.controlEl.parentNode) {
          config.controlEl.parentNode.removeChild(config.controlEl);
        }
        config.controlEl = false;
      }
      this.generateControlElement(row, el);
      row.getElement().classList.add("tabulator-tree-level-" + config.index);
      if (config.index) {
        if (this.branchEl) {
          config.branchEl = this.branchEl.cloneNode(true);
          el.insertBefore(config.branchEl, el.firstChild);
          if (this.table.rtl) {
            config.branchEl.style.marginRight = (config.branchEl.offsetWidth + config.branchEl.style.marginLeft) * (config.index - 1) + config.index * this.indent + "px";
          } else {
            config.branchEl.style.marginLeft = (config.branchEl.offsetWidth + config.branchEl.style.marginRight) * (config.index - 1) + config.index * this.indent + "px";
          }
        } else {
          if (this.table.rtl) {
            el.style.paddingRight = parseInt(window.getComputedStyle(el, null).getPropertyValue("padding-right")) + config.index * this.indent + "px";
          } else {
            el.style.paddingLeft = parseInt(window.getComputedStyle(el, null).getPropertyValue("padding-left")) + config.index * this.indent + "px";
          }
        }
      }
    }
    generateControlElement(row, el) {
      var config = row.modules.dataTree, oldControl = config.controlEl;
      el = el || row.getCells()[0].getElement();
      if (config.children !== false) {
        if (config.open) {
          config.controlEl = this.collapseEl.cloneNode(true);
          config.controlEl.addEventListener("click", (e) => {
            e.stopPropagation();
            this.collapseRow(row);
          });
        } else {
          config.controlEl = this.expandEl.cloneNode(true);
          config.controlEl.addEventListener("click", (e) => {
            e.stopPropagation();
            this.expandRow(row);
          });
        }
        config.controlEl.addEventListener("mousedown", (e) => {
          e.stopPropagation();
        });
        if (oldControl && oldControl.parentNode === el) {
          oldControl.parentNode.replaceChild(config.controlEl, oldControl);
        } else {
          el.insertBefore(config.controlEl, el.firstChild);
        }
      }
    }
    getRows(rows2) {
      var output = [];
      rows2.forEach((row, i) => {
        var config, children;
        output.push(row);
        if (row instanceof Row) {
          row.create();
          config = row.modules.dataTree;
          if (!config.index && config.children !== false) {
            children = this.getChildren(row, false, true);
            children.forEach((child) => {
              child.create();
              output.push(child);
            });
          }
        }
      });
      return output;
    }
    getChildren(row, allChildren, sortOnly) {
      var config = row.modules.dataTree, children = [], output = [];
      if (config.children !== false && (config.open || allChildren)) {
        if (!Array.isArray(config.children)) {
          config.children = this.generateChildren(row);
        }
        if (this.table.modExists("filter") && this.table.options.dataTreeFilter) {
          children = this.table.modules.filter.filter(config.children);
        } else {
          children = config.children;
        }
        if (this.table.modExists("sort") && this.table.options.dataTreeSort) {
          this.table.modules.sort.sort(children, sortOnly);
        }
        children.forEach((child) => {
          output.push(child);
          var subChildren = this.getChildren(child, false, true);
          subChildren.forEach((sub) => {
            output.push(sub);
          });
        });
      }
      return output;
    }
    generateChildren(row) {
      var children = [];
      var childArray = row.getData()[this.field];
      if (!Array.isArray(childArray)) {
        childArray = [childArray];
      }
      childArray.forEach((childData) => {
        var childRow = new Row(childData || {}, this.table.rowManager);
        childRow.create();
        childRow.modules.dataTree.index = row.modules.dataTree.index + 1;
        childRow.modules.dataTree.parent = row;
        if (childRow.modules.dataTree.children) {
          childRow.modules.dataTree.open = this.startOpen(childRow.getComponent(), childRow.modules.dataTree.index);
        }
        children.push(childRow);
      });
      return children;
    }
    expandRow(row, silent) {
      var config = row.modules.dataTree;
      if (config.children !== false) {
        config.open = true;
        row.reinitialize();
        this.refreshData(true);
        this.dispatchExternal("dataTreeRowExpanded", row.getComponent(), row.modules.dataTree.index);
      }
    }
    collapseRow(row) {
      var config = row.modules.dataTree;
      if (config.children !== false) {
        config.open = false;
        row.reinitialize();
        this.refreshData(true);
        this.dispatchExternal("dataTreeRowCollapsed", row.getComponent(), row.modules.dataTree.index);
      }
    }
    toggleRow(row) {
      var config = row.modules.dataTree;
      if (config.children !== false) {
        if (config.open) {
          this.collapseRow(row);
        } else {
          this.expandRow(row);
        }
      }
    }
    isRowExpanded(row) {
      return row.modules.dataTree.open;
    }
    getTreeParent(row) {
      return row.modules.dataTree.parent ? row.modules.dataTree.parent.getComponent() : false;
    }
    getTreeParentRoot(row) {
      return row.modules.dataTree && row.modules.dataTree.parent ? this.getTreeParentRoot(row.modules.dataTree.parent) : row;
    }
    getFilteredTreeChildren(row) {
      var config = row.modules.dataTree, output = [], children;
      if (config.children) {
        if (!Array.isArray(config.children)) {
          config.children = this.generateChildren(row);
        }
        if (this.table.modExists("filter") && this.table.options.dataTreeFilter) {
          children = this.table.modules.filter.filter(config.children);
        } else {
          children = config.children;
        }
        children.forEach((childRow) => {
          if (childRow instanceof Row) {
            output.push(childRow);
          }
        });
      }
      return output;
    }
    rowDelete(row) {
      var parent = row.modules.dataTree.parent, childIndex;
      if (parent) {
        childIndex = this.findChildIndex(row, parent);
        if (childIndex !== false) {
          parent.data[this.field].splice(childIndex, 1);
        }
        if (!parent.data[this.field].length) {
          delete parent.data[this.field];
        }
        this.initializeRow(parent);
        this.layoutRow(parent);
      }
      this.refreshData(true);
    }
    addTreeChildRow(row, data, top, index7) {
      var childIndex = false;
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      if (!Array.isArray(row.data[this.field])) {
        row.data[this.field] = [];
        row.modules.dataTree.open = this.startOpen(row.getComponent(), row.modules.dataTree.index);
      }
      if (typeof index7 !== "undefined") {
        childIndex = this.findChildIndex(index7, row);
        if (childIndex !== false) {
          row.data[this.field].splice(top ? childIndex : childIndex + 1, 0, data);
        }
      }
      if (childIndex === false) {
        if (top) {
          row.data[this.field].unshift(data);
        } else {
          row.data[this.field].push(data);
        }
      }
      this.initializeRow(row);
      this.layoutRow(row);
      this.refreshData(true);
    }
    findChildIndex(subject, parent) {
      var match = false;
      if (typeof subject == "object") {
        if (subject instanceof Row) {
          match = subject.data;
        } else if (subject instanceof RowComponent) {
          match = subject._getSelf().data;
        } else if (typeof HTMLElement !== "undefined" && subject instanceof HTMLElement) {
          if (parent.modules.dataTree) {
            match = parent.modules.dataTree.children.find((childRow) => {
              return childRow instanceof Row ? childRow.element === subject : false;
            });
            if (match) {
              match = match.data;
            }
          }
        } else if (subject === null) {
          match = false;
        }
      } else if (typeof subject == "undefined") {
        match = false;
      } else {
        match = parent.data[this.field].find((row) => {
          return row.data[this.table.options.index] == subject;
        });
      }
      if (match) {
        if (Array.isArray(parent.data[this.field])) {
          match = parent.data[this.field].indexOf(match);
        }
        if (match == -1) {
          match = false;
        }
      }
      return match;
    }
    getTreeChildren(row, component, recurse) {
      var config = row.modules.dataTree, output = [];
      if (config && config.children) {
        if (!Array.isArray(config.children)) {
          config.children = this.generateChildren(row);
        }
        config.children.forEach((childRow) => {
          if (childRow instanceof Row) {
            output.push(component ? childRow.getComponent() : childRow);
            if (recurse) {
              this.getTreeChildren(childRow, component, recurse).forEach((child) => {
                output.push(child);
              });
            }
          }
        });
      }
      return output;
    }
    getChildField() {
      return this.field;
    }
    redrawNeeded(data) {
      return (this.field ? typeof data[this.field] !== "undefined" : false) || (this.elementField ? typeof data[this.elementField] !== "undefined" : false);
    }
  };
  function csv$1(list2, options = {}, setFileContents) {
    var delimiter = options.delimiter ? options.delimiter : ",", fileContents = [], headers = [];
    list2.forEach((row) => {
      var item = [];
      switch (row.type) {
        case "group":
          console.warn("Download Warning - CSV downloader cannot process row groups");
          break;
        case "calc":
          console.warn("Download Warning - CSV downloader cannot process column calculations");
          break;
        case "header":
          row.columns.forEach((col, i) => {
            if (col && col.depth === 1) {
              headers[i] = typeof col.value == "undefined" || col.value === null ? "" : '"' + String(col.value).split('"').join('""') + '"';
            }
          });
          break;
        case "row":
          row.columns.forEach((col) => {
            if (col) {
              switch (typeof col.value) {
                case "object":
                  col.value = col.value !== null ? JSON.stringify(col.value) : "";
                  break;
                case "undefined":
                  col.value = "";
                  break;
              }
              item.push('"' + String(col.value).split('"').join('""') + '"');
            }
          });
          fileContents.push(item.join(delimiter));
          break;
      }
    });
    if (headers.length) {
      fileContents.unshift(headers.join(delimiter));
    }
    fileContents = fileContents.join("\n");
    if (options.bom) {
      fileContents = "\uFEFF" + fileContents;
    }
    setFileContents(fileContents, "text/csv");
  }
  function json$2(list2, options, setFileContents) {
    var fileContents = [];
    list2.forEach((row) => {
      var item = {};
      switch (row.type) {
        case "header":
          break;
        case "group":
          console.warn("Download Warning - JSON downloader cannot process row groups");
          break;
        case "calc":
          console.warn("Download Warning - JSON downloader cannot process column calculations");
          break;
        case "row":
          row.columns.forEach((col) => {
            if (col) {
              item[col.component.getTitleDownload() || col.component.getField()] = col.value;
            }
          });
          fileContents.push(item);
          break;
      }
    });
    fileContents = JSON.stringify(fileContents, null, "	");
    setFileContents(fileContents, "application/json");
  }
  function pdf(list2, options = {}, setFileContents) {
    var header = [], body = [], autoTableParams = {}, rowGroupStyles = options.rowGroupStyles || {
      fontStyle: "bold",
      fontSize: 12,
      cellPadding: 6,
      fillColor: 220
    }, rowCalcStyles = options.rowCalcStyles || {
      fontStyle: "bold",
      fontSize: 10,
      cellPadding: 4,
      fillColor: 232
    }, jsPDFParams = options.jsPDF || {}, title = options.title ? options.title : "", jspdfLib, doc2;
    if (!jsPDFParams.orientation) {
      jsPDFParams.orientation = options.orientation || "landscape";
    }
    if (!jsPDFParams.unit) {
      jsPDFParams.unit = "pt";
    }
    list2.forEach((row) => {
      switch (row.type) {
        case "header":
          header.push(parseRow(row));
          break;
        case "group":
          body.push(parseRow(row, rowGroupStyles));
          break;
        case "calc":
          body.push(parseRow(row, rowCalcStyles));
          break;
        case "row":
          body.push(parseRow(row));
          break;
      }
    });
    function parseRow(row, styles) {
      var rowData = [];
      row.columns.forEach((col) => {
        var cell;
        if (col) {
          switch (typeof col.value) {
            case "object":
              col.value = col.value !== null ? JSON.stringify(col.value) : "";
              break;
            case "undefined":
              col.value = "";
              break;
          }
          cell = {
            content: col.value,
            colSpan: col.width,
            rowSpan: col.height
          };
          if (styles) {
            cell.styles = styles;
          }
          rowData.push(cell);
        }
      });
      return rowData;
    }
    jspdfLib = this.dependencyRegistry.lookup("jspdf", "jsPDF");
    doc2 = new jspdfLib(jsPDFParams);
    if (options.autoTable) {
      if (typeof options.autoTable === "function") {
        autoTableParams = options.autoTable(doc2) || {};
      } else {
        autoTableParams = options.autoTable;
      }
    }
    if (title) {
      autoTableParams.didDrawPage = function(data) {
        doc2.text(title, 40, 30);
      };
    }
    autoTableParams.head = header;
    autoTableParams.body = body;
    doc2.autoTable(autoTableParams);
    if (options.documentProcessing) {
      options.documentProcessing(doc2);
    }
    setFileContents(doc2.output("arraybuffer"), "application/pdf");
  }
  function xlsx$1(list2, options, setFileContents) {
    var self2 = this, sheetName = options.sheetName || "Sheet1", XLSXLib = this.dependencyRegistry.lookup("XLSX"), workbook = XLSXLib.utils.book_new(), tableFeatures = new CoreFeature(this), compression = "compress" in options ? options.compress : true, writeOptions = options.writeOptions || { bookType: "xlsx", bookSST: true, compression }, output;
    writeOptions.type = "binary";
    workbook.SheetNames = [];
    workbook.Sheets = {};
    function generateSheet() {
      var rows2 = [], merges = [], worksheet = {}, range2 = { s: { c: 0, r: 0 }, e: { c: list2[0] ? list2[0].columns.reduce((a, b) => a + (b && b.width ? b.width : 1), 0) : 0, r: list2.length } };
      list2.forEach((row, i) => {
        var rowData = [];
        row.columns.forEach(function(col, j) {
          if (col) {
            rowData.push(!(col.value instanceof Date) && typeof col.value === "object" ? JSON.stringify(col.value) : col.value);
            if (col.width > 1 || col.height > -1) {
              if (col.height > 1 || col.width > 1) {
                merges.push({ s: { r: i, c: j }, e: { r: i + col.height - 1, c: j + col.width - 1 } });
              }
            }
          } else {
            rowData.push("");
          }
        });
        rows2.push(rowData);
      });
      XLSXLib.utils.sheet_add_aoa(worksheet, rows2);
      worksheet["!ref"] = XLSXLib.utils.encode_range(range2);
      if (merges.length) {
        worksheet["!merges"] = merges;
      }
      return worksheet;
    }
    if (options.sheetOnly) {
      setFileContents(generateSheet());
      return;
    }
    if (options.sheets) {
      for (var sheet in options.sheets) {
        if (options.sheets[sheet] === true) {
          workbook.SheetNames.push(sheet);
          workbook.Sheets[sheet] = generateSheet();
        } else {
          workbook.SheetNames.push(sheet);
          tableFeatures.commsSend(options.sheets[sheet], "download", "intercept", {
            type: "xlsx",
            options: { sheetOnly: true },
            active: self2.active,
            intercept: function(data) {
              workbook.Sheets[sheet] = data;
            }
          });
        }
      }
    } else {
      workbook.SheetNames.push(sheetName);
      workbook.Sheets[sheetName] = generateSheet();
    }
    if (options.documentProcessing) {
      workbook = options.documentProcessing(workbook);
    }
    function s2ab(s) {
      var buf = new ArrayBuffer(s.length);
      var view = new Uint8Array(buf);
      for (var i = 0; i != s.length; ++i)
        view[i] = s.charCodeAt(i) & 255;
      return buf;
    }
    output = XLSXLib.write(workbook, writeOptions);
    setFileContents(s2ab(output), "application/octet-stream");
  }
  function html$1(list2, options, setFileContents) {
    if (this.modExists("export", true)) {
      setFileContents(this.modules.export.generateHTMLTable(list2), "text/html");
    }
  }
  function jsonLines(list2, options, setFileContents) {
    const fileContents = [];
    list2.forEach((row) => {
      const item = {};
      switch (row.type) {
        case "header":
          break;
        case "group":
          console.warn("Download Warning - JSON downloader cannot process row groups");
          break;
        case "calc":
          console.warn("Download Warning - JSON downloader cannot process column calculations");
          break;
        case "row":
          row.columns.forEach((col) => {
            if (col) {
              item[col.component.getTitleDownload() || col.component.getField()] = col.value;
            }
          });
          fileContents.push(JSON.stringify(item));
          break;
      }
    });
    setFileContents(fileContents.join("\n"), "application/x-ndjson");
  }
  var defaultDownloaders = {
    csv: csv$1,
    json: json$2,
    jsonLines,
    pdf,
    xlsx: xlsx$1,
    html: html$1
  };
  var Download = class _Download extends Module {
    static moduleName = "download";
    //load defaults
    static downloaders = defaultDownloaders;
    constructor(table) {
      super(table);
      this.registerTableOption("downloadEncoder", function(data, mimeType) {
        return new Blob([data], { type: mimeType });
      });
      this.registerTableOption("downloadConfig", {});
      this.registerTableOption("downloadRowRange", "active");
      this.registerColumnOption("download");
      this.registerColumnOption("titleDownload");
    }
    initialize() {
      this.deprecatedOptionsCheck();
      this.registerTableFunction("download", this.download.bind(this));
      this.registerTableFunction("downloadToTab", this.downloadToTab.bind(this));
    }
    deprecatedOptionsCheck() {
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    downloadToTab(type, filename, options, active) {
      this.download(type, filename, options, active, true);
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    //trigger file download
    download(type, filename, options, range2, interceptCallback) {
      var downloadFunc = false;
      function buildLink(data, mime) {
        if (interceptCallback) {
          if (interceptCallback === true) {
            this.triggerDownload(data, mime, type, filename, true);
          } else {
            interceptCallback(data);
          }
        } else {
          this.triggerDownload(data, mime, type, filename);
        }
      }
      if (typeof type == "function") {
        downloadFunc = type;
      } else {
        if (_Download.downloaders[type]) {
          downloadFunc = _Download.downloaders[type];
        } else {
          console.warn("Download Error - No such download type found: ", type);
        }
      }
      if (downloadFunc) {
        var list2 = this.generateExportList(range2);
        downloadFunc.call(this.table, list2, options || {}, buildLink.bind(this));
      }
    }
    generateExportList(range2) {
      var list2 = this.table.modules.export.generateExportList(this.table.options.downloadConfig, false, range2 || this.table.options.downloadRowRange, "download");
      var groupHeader = this.table.options.groupHeaderDownload;
      if (groupHeader && !Array.isArray(groupHeader)) {
        groupHeader = [groupHeader];
      }
      list2.forEach((row) => {
        var group;
        if (row.type === "group") {
          group = row.columns[0];
          if (groupHeader && groupHeader[row.indent]) {
            group.value = groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
          }
        }
      });
      return list2;
    }
    triggerDownload(data, mime, type, filename, newTab) {
      var element = document.createElement("a"), blob = this.table.options.downloadEncoder(data, mime);
      if (blob) {
        if (newTab) {
          window.open(window.URL.createObjectURL(blob));
        } else {
          filename = filename || "Tabulator." + (typeof type === "function" ? "txt" : type);
          if (navigator.msSaveOrOpenBlob) {
            navigator.msSaveOrOpenBlob(blob, filename);
          } else {
            element.setAttribute("href", window.URL.createObjectURL(blob));
            element.setAttribute("download", filename);
            element.style.display = "none";
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
          }
        }
        this.dispatchExternal("downloadComplete");
      }
    }
    commsReceived(table, action, data) {
      switch (action) {
        case "intercept":
          this.download(data.type, "", data.options, data.active, data.intercept);
          break;
      }
    }
  };
  function maskInput(el, options) {
    var mask = options.mask, maskLetter = typeof options.maskLetterChar !== "undefined" ? options.maskLetterChar : "A", maskNumber = typeof options.maskNumberChar !== "undefined" ? options.maskNumberChar : "9", maskWildcard = typeof options.maskWildcardChar !== "undefined" ? options.maskWildcardChar : "*";
    function fillSymbols(index7) {
      var symbol = mask[index7];
      if (typeof symbol !== "undefined" && symbol !== maskWildcard && symbol !== maskLetter && symbol !== maskNumber) {
        el.value = el.value + "" + symbol;
        fillSymbols(index7 + 1);
      }
    }
    el.addEventListener("keydown", (e) => {
      var index7 = el.value.length, char = e.key;
      if (e.keyCode > 46 && !e.ctrlKey && !e.metaKey) {
        if (index7 >= mask.length) {
          e.preventDefault();
          e.stopPropagation();
          return false;
        } else {
          switch (mask[index7]) {
            case maskLetter:
              if (char.toUpperCase() == char.toLowerCase()) {
                e.preventDefault();
                e.stopPropagation();
                return false;
              }
              break;
            case maskNumber:
              if (isNaN(char)) {
                e.preventDefault();
                e.stopPropagation();
                return false;
              }
              break;
            case maskWildcard:
              break;
            default:
              if (char !== mask[index7]) {
                e.preventDefault();
                e.stopPropagation();
                return false;
              }
          }
        }
      }
      return;
    });
    el.addEventListener("keyup", (e) => {
      if (e.keyCode > 46) {
        if (options.maskAutoFill) {
          fillSymbols(el.value.length);
        }
      }
    });
    if (!el.placeholder) {
      el.placeholder = mask;
    }
    if (options.maskAutoFill) {
      fillSymbols(el.value.length);
    }
  }
  function input(cell, onRendered, success, cancel, editorParams) {
    var cellValue = cell.getValue(), input2 = document.createElement("input");
    input2.setAttribute("type", editorParams.search ? "search" : "text");
    input2.style.padding = "4px";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    input2.value = typeof cellValue !== "undefined" ? cellValue : "";
    onRendered(function() {
      if (cell.getType() === "cell") {
        input2.focus({ preventScroll: true });
        input2.style.height = "100%";
        if (editorParams.selectContents) {
          input2.select();
        }
      }
    });
    function onChange(e) {
      if ((cellValue === null || typeof cellValue === "undefined") && input2.value !== "" || input2.value !== cellValue) {
        if (success(input2.value)) {
          cellValue = input2.value;
        }
      } else {
        cancel();
      }
    }
    input2.addEventListener("change", onChange);
    input2.addEventListener("blur", onChange);
    input2.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 13:
          onChange();
          break;
        case 27:
          cancel();
          break;
        case 35:
        case 36:
          e.stopPropagation();
          break;
      }
    });
    if (editorParams.mask) {
      maskInput(input2, editorParams);
    }
    return input2;
  }
  function textarea$1(cell, onRendered, success, cancel, editorParams) {
    var cellValue = cell.getValue(), vertNav = editorParams.verticalNavigation || "hybrid", value = String(cellValue !== null && typeof cellValue !== "undefined" ? cellValue : ""), input2 = document.createElement("textarea"), scrollHeight = 0;
    input2.style.display = "block";
    input2.style.padding = "2px";
    input2.style.height = "100%";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    input2.style.whiteSpace = "pre-wrap";
    input2.style.resize = "none";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    input2.value = value;
    onRendered(function() {
      if (cell.getType() === "cell") {
        input2.focus({ preventScroll: true });
        input2.style.height = "100%";
        input2.scrollHeight;
        input2.style.height = input2.scrollHeight + "px";
        cell.getRow().normalizeHeight();
        if (editorParams.selectContents) {
          input2.select();
        }
      }
    });
    function onChange(e) {
      if ((cellValue === null || typeof cellValue === "undefined") && input2.value !== "" || input2.value !== cellValue) {
        if (success(input2.value)) {
          cellValue = input2.value;
        }
        setTimeout(function() {
          cell.getRow().normalizeHeight();
        }, 300);
      } else {
        cancel();
      }
    }
    input2.addEventListener("change", onChange);
    input2.addEventListener("blur", onChange);
    input2.addEventListener("keyup", function() {
      input2.style.height = "";
      var heightNow = input2.scrollHeight;
      input2.style.height = heightNow + "px";
      if (heightNow != scrollHeight) {
        scrollHeight = heightNow;
        cell.getRow().normalizeHeight();
      }
    });
    input2.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 13:
          if (e.shiftKey && editorParams.shiftEnterSubmit) {
            onChange();
          }
          break;
        case 27:
          cancel();
          break;
        case 38:
          if (vertNav == "editor" || vertNav == "hybrid" && input2.selectionStart) {
            e.stopImmediatePropagation();
            e.stopPropagation();
          }
          break;
        case 40:
          if (vertNav == "editor" || vertNav == "hybrid" && input2.selectionStart !== input2.value.length) {
            e.stopImmediatePropagation();
            e.stopPropagation();
          }
          break;
        case 35:
        case 36:
          e.stopPropagation();
          break;
      }
    });
    if (editorParams.mask) {
      maskInput(input2, editorParams);
    }
    return input2;
  }
  function number$1(cell, onRendered, success, cancel, editorParams) {
    var cellValue = cell.getValue(), vertNav = editorParams.verticalNavigation || "editor", input2 = document.createElement("input");
    input2.setAttribute("type", "number");
    if (typeof editorParams.max != "undefined") {
      input2.setAttribute("max", editorParams.max);
    }
    if (typeof editorParams.min != "undefined") {
      input2.setAttribute("min", editorParams.min);
    }
    if (typeof editorParams.step != "undefined") {
      input2.setAttribute("step", editorParams.step);
    }
    input2.style.padding = "4px";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    input2.value = cellValue;
    var blurFunc = function(e) {
      onChange();
    };
    onRendered(function() {
      if (cell.getType() === "cell") {
        input2.removeEventListener("blur", blurFunc);
        input2.focus({ preventScroll: true });
        input2.style.height = "100%";
        input2.addEventListener("blur", blurFunc);
        if (editorParams.selectContents) {
          input2.select();
        }
      }
    });
    function onChange() {
      var value = input2.value;
      if (!isNaN(value) && value !== "") {
        value = Number(value);
      }
      if (value !== cellValue) {
        if (success(value)) {
          cellValue = value;
        }
      } else {
        cancel();
      }
    }
    input2.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 13:
          onChange();
          break;
        case 27:
          cancel();
          break;
        case 38:
        case 40:
          if (vertNav == "editor") {
            e.stopImmediatePropagation();
            e.stopPropagation();
          }
          break;
        case 35:
        case 36:
          e.stopPropagation();
          break;
      }
    });
    if (editorParams.mask) {
      maskInput(input2, editorParams);
    }
    return input2;
  }
  function range(cell, onRendered, success, cancel, editorParams) {
    var cellValue = cell.getValue(), input2 = document.createElement("input");
    input2.setAttribute("type", "range");
    if (typeof editorParams.max != "undefined") {
      input2.setAttribute("max", editorParams.max);
    }
    if (typeof editorParams.min != "undefined") {
      input2.setAttribute("min", editorParams.min);
    }
    if (typeof editorParams.step != "undefined") {
      input2.setAttribute("step", editorParams.step);
    }
    input2.style.padding = "4px";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    input2.value = cellValue;
    onRendered(function() {
      if (cell.getType() === "cell") {
        input2.focus({ preventScroll: true });
        input2.style.height = "100%";
      }
    });
    function onChange() {
      var value = input2.value;
      if (!isNaN(value) && value !== "") {
        value = Number(value);
      }
      if (value != cellValue) {
        if (success(value)) {
          cellValue = value;
        }
      } else {
        cancel();
      }
    }
    input2.addEventListener("blur", function(e) {
      onChange();
    });
    input2.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 13:
          onChange();
          break;
        case 27:
          cancel();
          break;
      }
    });
    return input2;
  }
  function date$1(cell, onRendered, success, cancel, editorParams) {
    var inputFormat = editorParams.format, vertNav = editorParams.verticalNavigation || "editor", DT = inputFormat ? window.DateTime || luxon.DateTime : null;
    var cellValue = cell.getValue(), input2 = document.createElement("input");
    function convertDate(value) {
      var newDatetime;
      if (DT.isDateTime(value)) {
        newDatetime = value;
      } else if (inputFormat === "iso") {
        newDatetime = DT.fromISO(String(value));
      } else {
        newDatetime = DT.fromFormat(String(value), inputFormat);
      }
      return newDatetime.toFormat("yyyy-MM-dd");
    }
    input2.type = "date";
    input2.style.padding = "4px";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    if (editorParams.max) {
      input2.setAttribute("max", inputFormat ? convertDate(editorParams.max) : editorParams.max);
    }
    if (editorParams.min) {
      input2.setAttribute("min", inputFormat ? convertDate(editorParams.min) : editorParams.min);
    }
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    cellValue = typeof cellValue !== "undefined" ? cellValue : "";
    if (inputFormat) {
      if (DT) {
        cellValue = convertDate(cellValue);
      } else {
        console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
      }
    }
    input2.value = cellValue;
    onRendered(function() {
      if (cell.getType() === "cell") {
        input2.focus({ preventScroll: true });
        input2.style.height = "100%";
        if (editorParams.selectContents) {
          input2.select();
        }
      }
    });
    function onChange() {
      var value = input2.value, luxDate;
      if ((cellValue === null || typeof cellValue === "undefined") && value !== "" || value !== cellValue) {
        if (value && inputFormat) {
          luxDate = DT.fromFormat(String(value), "yyyy-MM-dd");
          switch (inputFormat) {
            case true:
              value = luxDate;
              break;
            case "iso":
              value = luxDate.toISO();
              break;
            default:
              value = luxDate.toFormat(inputFormat);
          }
        }
        if (success(value)) {
          cellValue = input2.value;
        }
      } else {
        cancel();
      }
    }
    input2.addEventListener("blur", function(e) {
      if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input2) {
        onChange();
      }
    });
    input2.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 13:
          onChange();
          break;
        case 27:
          cancel();
          break;
        case 35:
        case 36:
          e.stopPropagation();
          break;
        case 38:
        case 40:
          if (vertNav == "editor") {
            e.stopImmediatePropagation();
            e.stopPropagation();
          }
          break;
      }
    });
    return input2;
  }
  function time$1(cell, onRendered, success, cancel, editorParams) {
    var inputFormat = editorParams.format, vertNav = editorParams.verticalNavigation || "editor", DT = inputFormat ? window.DateTime || luxon.DateTime : null, newDatetime;
    var cellValue = cell.getValue(), input2 = document.createElement("input");
    input2.type = "time";
    input2.style.padding = "4px";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    cellValue = typeof cellValue !== "undefined" ? cellValue : "";
    if (inputFormat) {
      if (DT) {
        if (DT.isDateTime(cellValue)) {
          newDatetime = cellValue;
        } else if (inputFormat === "iso") {
          newDatetime = DT.fromISO(String(cellValue));
        } else {
          newDatetime = DT.fromFormat(String(cellValue), inputFormat);
        }
        cellValue = newDatetime.toFormat("HH:mm");
      } else {
        console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
      }
    }
    input2.value = cellValue;
    onRendered(function() {
      if (cell.getType() == "cell") {
        input2.focus({ preventScroll: true });
        input2.style.height = "100%";
        if (editorParams.selectContents) {
          input2.select();
        }
      }
    });
    function onChange() {
      var value = input2.value, luxTime;
      if ((cellValue === null || typeof cellValue === "undefined") && value !== "" || value !== cellValue) {
        if (value && inputFormat) {
          luxTime = DT.fromFormat(String(value), "hh:mm");
          switch (inputFormat) {
            case true:
              value = luxTime;
              break;
            case "iso":
              value = luxTime.toISO();
              break;
            default:
              value = luxTime.toFormat(inputFormat);
          }
        }
        if (success(value)) {
          cellValue = input2.value;
        }
      } else {
        cancel();
      }
    }
    input2.addEventListener("blur", function(e) {
      if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input2) {
        onChange();
      }
    });
    input2.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 13:
          onChange();
          break;
        case 27:
          cancel();
          break;
        case 35:
        case 36:
          e.stopPropagation();
          break;
        case 38:
        case 40:
          if (vertNav == "editor") {
            e.stopImmediatePropagation();
            e.stopPropagation();
          }
          break;
      }
    });
    return input2;
  }
  function datetime$2(cell, onRendered, success, cancel, editorParams) {
    var inputFormat = editorParams.format, vertNav = editorParams.verticalNavigation || "editor", DT = inputFormat ? this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime") : null, newDatetime;
    var cellValue = cell.getValue(), input2 = document.createElement("input");
    input2.type = "datetime-local";
    input2.style.padding = "4px";
    input2.style.width = "100%";
    input2.style.boxSizing = "border-box";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    cellValue = typeof cellValue !== "undefined" ? cellValue : "";
    if (inputFormat) {
      if (DT) {
        if (DT.isDateTime(cellValue)) {
          newDatetime = cellValue;
        } else if (inputFormat === "iso") {
          newDatetime = DT.fromISO(String(cellValue));
        } else {
          newDatetime = DT.fromFormat(String(cellValue), inputFormat);
        }
        cellValue = newDatetime.toFormat("yyyy-MM-dd") + "T" + newDatetime.toFormat("HH:mm");
      } else {
        console.error("Editor Error - 'date' editor 'format' param is dependant on luxon.js");
      }
    }
    input2.value = cellValue;
    onRendered(function() {
      if (cell.getType() === "cell") {
        input2.focus({ preventScroll: true });
        input2.style.height = "100%";
        if (editorParams.selectContents) {
          input2.select();
        }
      }
    });
    function onChange() {
      var value = input2.value, luxDateTime;
      if ((cellValue === null || typeof cellValue === "undefined") && value !== "" || value !== cellValue) {
        if (value && inputFormat) {
          luxDateTime = DT.fromISO(String(value));
          switch (inputFormat) {
            case true:
              value = luxDateTime;
              break;
            case "iso":
              value = luxDateTime.toISO();
              break;
            default:
              value = luxDateTime.toFormat(inputFormat);
          }
        }
        if (success(value)) {
          cellValue = input2.value;
        }
      } else {
        cancel();
      }
    }
    input2.addEventListener("blur", function(e) {
      if (e.relatedTarget || e.rangeParent || e.explicitOriginalTarget !== input2) {
        onChange();
      }
    });
    input2.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 13:
          onChange();
          break;
        case 27:
          cancel();
          break;
        case 35:
        case 36:
          e.stopPropagation();
          break;
        case 38:
        case 40:
          if (vertNav == "editor") {
            e.stopImmediatePropagation();
            e.stopPropagation();
          }
          break;
      }
    });
    return input2;
  }
  var Edit$1 = class Edit {
    constructor(editor, cell, onRendered, success, cancel, editorParams) {
      this.edit = editor;
      this.table = editor.table;
      this.cell = cell;
      this.params = this._initializeParams(editorParams);
      this.data = [];
      this.displayItems = [];
      this.currentItems = [];
      this.focusedItem = null;
      this.input = this._createInputElement();
      this.listEl = this._createListElement();
      this.initialValues = null;
      this.isFilter = cell.getType() === "header";
      this.filterTimeout = null;
      this.filtered = false;
      this.typing = false;
      this.values = [];
      this.popup = null;
      this.listIteration = 0;
      this.lastAction = "";
      this.filterTerm = "";
      this.blurable = true;
      this.actions = {
        success,
        cancel
      };
      this._deprecatedOptionsCheck();
      this._initializeValue();
      onRendered(this._onRendered.bind(this));
    }
    _deprecatedOptionsCheck() {
    }
    _initializeValue() {
      var initialValue = this.cell.getValue();
      if (typeof initialValue === "undefined" && typeof this.params.defaultValue !== "undefined") {
        initialValue = this.params.defaultValue;
      }
      this.initialValues = this.params.multiselect ? initialValue : [initialValue];
      if (this.isFilter) {
        this.input.value = this.initialValues ? this.initialValues.join(",") : "";
        this.headerFilterInitialListGen();
      }
    }
    _onRendered() {
      var cellEl = this.cell.getElement();
      function clickStop(e) {
        e.stopPropagation();
      }
      if (!this.isFilter) {
        this.input.style.height = "100%";
        this.input.focus({ preventScroll: true });
      }
      cellEl.addEventListener("click", clickStop);
      setTimeout(() => {
        cellEl.removeEventListener("click", clickStop);
      }, 1e3);
      this.input.addEventListener("mousedown", this._preventPopupBlur.bind(this));
    }
    _createListElement() {
      var listEl = document.createElement("div");
      listEl.classList.add("tabulator-edit-list");
      listEl.addEventListener("mousedown", this._preventBlur.bind(this));
      listEl.addEventListener("keydown", this._inputKeyDown.bind(this));
      return listEl;
    }
    _setListWidth() {
      var element = this.isFilter ? this.input : this.cell.getElement();
      this.listEl.style.minWidth = element.offsetWidth + "px";
      if (this.params.maxWidth) {
        if (this.params.maxWidth === true) {
          this.listEl.style.maxWidth = element.offsetWidth + "px";
        } else if (typeof this.params.maxWidth === "number") {
          this.listEl.style.maxWidth = this.params.maxWidth + "px";
        } else {
          this.listEl.style.maxWidth = this.params.maxWidth;
        }
      }
    }
    _createInputElement() {
      var attribs = this.params.elementAttributes;
      var input2 = document.createElement("input");
      input2.setAttribute("type", this.params.clearable ? "search" : "text");
      input2.style.padding = "4px";
      input2.style.width = "100%";
      input2.style.boxSizing = "border-box";
      if (!this.params.autocomplete) {
        input2.style.cursor = "default";
        input2.style.caretColor = "transparent";
      }
      if (attribs && typeof attribs == "object") {
        for (let key in attribs) {
          if (key.charAt(0) == "+") {
            key = key.slice(1);
            input2.setAttribute(key, input2.getAttribute(key) + attribs["+" + key]);
          } else {
            input2.setAttribute(key, attribs[key]);
          }
        }
      }
      if (this.params.mask) {
        maskInput(input2, this.params);
      }
      this._bindInputEvents(input2);
      return input2;
    }
    _initializeParams(params) {
      var valueKeys = ["values", "valuesURL", "valuesLookup"], valueCheck;
      params = Object.assign({}, params);
      params.verticalNavigation = params.verticalNavigation || "editor";
      params.placeholderLoading = typeof params.placeholderLoading === "undefined" ? "Searching ..." : params.placeholderLoading;
      params.placeholderEmpty = typeof params.placeholderEmpty === "undefined" ? "No Results Found" : params.placeholderEmpty;
      params.filterDelay = typeof params.filterDelay === "undefined" ? 300 : params.filterDelay;
      params.emptyValue = Object.keys(params).includes("emptyValue") ? params.emptyValue : "";
      valueCheck = Object.keys(params).filter((key) => valueKeys.includes(key)).length;
      if (!valueCheck) {
        console.warn("list editor config error - either the values, valuesURL, or valuesLookup option must be set");
      } else if (valueCheck > 1) {
        console.warn("list editor config error - only one of the values, valuesURL, or valuesLookup options can be set on the same editor");
      }
      if (params.autocomplete) {
        if (params.multiselect) {
          params.multiselect = false;
          console.warn("list editor config error - multiselect option is not available when autocomplete is enabled");
        }
      } else {
        if (params.freetext) {
          params.freetext = false;
          console.warn("list editor config error - freetext option is only available when autocomplete is enabled");
        }
        if (params.filterFunc) {
          params.filterFunc = false;
          console.warn("list editor config error - filterFunc option is only available when autocomplete is enabled");
        }
        if (params.filterRemote) {
          params.filterRemote = false;
          console.warn("list editor config error - filterRemote option is only available when autocomplete is enabled");
        }
        if (params.mask) {
          params.mask = false;
          console.warn("list editor config error - mask option is only available when autocomplete is enabled");
        }
        if (params.allowEmpty) {
          params.allowEmpty = false;
          console.warn("list editor config error - allowEmpty option is only available when autocomplete is enabled");
        }
        if (params.listOnEmpty) {
          params.listOnEmpty = false;
          console.warn("list editor config error - listOnEmpty option is only available when autocomplete is enabled");
        }
      }
      if (params.filterRemote && !(typeof params.valuesLookup === "function" || params.valuesURL)) {
        params.filterRemote = false;
        console.warn("list editor config error - filterRemote option should only be used when values list is populated from a remote source");
      }
      return params;
    }
    //////////////////////////////////////
    ////////// Event Handling ////////////
    //////////////////////////////////////
    _bindInputEvents(input2) {
      input2.addEventListener("focus", this._inputFocus.bind(this));
      input2.addEventListener("click", this._inputClick.bind(this));
      input2.addEventListener("blur", this._inputBlur.bind(this));
      input2.addEventListener("keydown", this._inputKeyDown.bind(this));
      input2.addEventListener("search", this._inputSearch.bind(this));
      if (this.params.autocomplete) {
        input2.addEventListener("keyup", this._inputKeyUp.bind(this));
      }
    }
    _inputFocus(e) {
      this.rebuildOptionsList();
    }
    _filter() {
      if (this.params.filterRemote) {
        clearTimeout(this.filterTimeout);
        this.filterTimeout = setTimeout(() => {
          this.rebuildOptionsList();
        }, this.params.filterDelay);
      } else {
        this._filterList();
      }
    }
    _inputClick(e) {
      e.stopPropagation();
    }
    _inputBlur(e) {
      if (this.blurable) {
        if (this.popup) {
          this.popup.hide();
        } else {
          this._resolveValue(true);
        }
      }
    }
    _inputSearch() {
      this._clearChoices();
    }
    _inputKeyDown(e) {
      switch (e.keyCode) {
        case 38:
          this._keyUp(e);
          break;
        case 40:
          this._keyDown(e);
          break;
        case 37:
        case 39:
          this._keySide(e);
          break;
        case 13:
          this._keyEnter();
          break;
        case 27:
          this._keyEsc();
          break;
        case 36:
        case 35:
          this._keyHomeEnd(e);
          break;
        case 9:
          this._keyTab(e);
          break;
        default:
          this._keySelectLetter(e);
      }
    }
    _inputKeyUp(e) {
      switch (e.keyCode) {
        case 38:
        case 37:
        case 39:
        case 40:
        case 13:
        case 27:
          break;
        default:
          this._keyAutoCompLetter(e);
      }
    }
    _preventPopupBlur() {
      if (this.popup) {
        this.popup.blockHide();
      }
      setTimeout(() => {
        if (this.popup) {
          this.popup.restoreHide();
        }
      }, 10);
    }
    _preventBlur() {
      this.blurable = false;
      setTimeout(() => {
        this.blurable = true;
      }, 10);
    }
    //////////////////////////////////////
    //////// Keyboard Navigation /////////
    //////////////////////////////////////
    _keyTab(e) {
      if (this.params.autocomplete && this.lastAction === "typing") {
        this._resolveValue(true);
      } else {
        if (this.focusedItem) {
          this._chooseItem(this.focusedItem, true);
        }
      }
    }
    _keyUp(e) {
      var index7 = this.displayItems.indexOf(this.focusedItem);
      if (this.params.verticalNavigation == "editor" || this.params.verticalNavigation == "hybrid" && index7) {
        e.stopImmediatePropagation();
        e.stopPropagation();
        e.preventDefault();
        if (index7 > 0) {
          this._focusItem(this.displayItems[index7 - 1]);
        }
      }
    }
    _keyDown(e) {
      var index7 = this.displayItems.indexOf(this.focusedItem);
      if (this.params.verticalNavigation == "editor" || this.params.verticalNavigation == "hybrid" && index7 < this.displayItems.length - 1) {
        e.stopImmediatePropagation();
        e.stopPropagation();
        e.preventDefault();
        if (index7 < this.displayItems.length - 1) {
          if (index7 == -1) {
            this._focusItem(this.displayItems[0]);
          } else {
            this._focusItem(this.displayItems[index7 + 1]);
          }
        }
      }
    }
    _keySide(e) {
      if (!this.params.autocomplete) {
        e.stopImmediatePropagation();
        e.stopPropagation();
        e.preventDefault();
      }
    }
    _keyEnter(e) {
      if (this.params.autocomplete && this.lastAction === "typing") {
        this._resolveValue(true);
      } else {
        if (this.focusedItem) {
          this._chooseItem(this.focusedItem);
        }
      }
    }
    _keyEsc(e) {
      this._cancel();
    }
    _keyHomeEnd(e) {
      if (this.params.autocomplete) {
        e.stopImmediatePropagation();
      }
    }
    _keySelectLetter(e) {
      if (!this.params.autocomplete) {
        e.preventDefault();
        if (e.keyCode >= 38 && e.keyCode <= 90) {
          this._scrollToValue(e.keyCode);
        }
      }
    }
    _keyAutoCompLetter(e) {
      this._filter();
      this.lastAction = "typing";
      this.typing = true;
    }
    _scrollToValue(char) {
      clearTimeout(this.filterTimeout);
      var character = String.fromCharCode(char).toLowerCase();
      this.filterTerm += character.toLowerCase();
      var match = this.displayItems.find((item) => {
        return typeof item.label !== "undefined" && item.label.toLowerCase().startsWith(this.filterTerm);
      });
      if (match) {
        this._focusItem(match);
      }
      this.filterTimeout = setTimeout(() => {
        this.filterTerm = "";
      }, 800);
    }
    _focusItem(item) {
      this.lastAction = "focus";
      if (this.focusedItem && this.focusedItem.element) {
        this.focusedItem.element.classList.remove("focused");
      }
      this.focusedItem = item;
      if (item && item.element) {
        item.element.classList.add("focused");
        item.element.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "start" });
      }
    }
    //////////////////////////////////////
    /////// Data List Generation /////////
    //////////////////////////////////////
    headerFilterInitialListGen() {
      this._generateOptions(true);
    }
    rebuildOptionsList() {
      this._generateOptions().then(this._sortOptions.bind(this)).then(this._buildList.bind(this)).then(this._showList.bind(this)).catch((e) => {
        if (!Number.isInteger(e)) {
          console.error("List generation error", e);
        }
      });
    }
    _filterList() {
      this._buildList(this._filterOptions());
      this._showList();
    }
    _generateOptions(silent) {
      var values = [];
      var iteration = ++this.listIteration;
      this.filtered = false;
      if (this.params.values) {
        values = this.params.values;
      } else if (this.params.valuesURL) {
        values = this._ajaxRequest(this.params.valuesURL, this.input.value);
      } else {
        if (typeof this.params.valuesLookup === "function") {
          values = this.params.valuesLookup(this.cell, this.input.value);
        } else if (this.params.valuesLookup) {
          values = this._uniqueColumnValues(this.params.valuesLookupField);
        }
      }
      if (values instanceof Promise) {
        if (!silent) {
          this._addPlaceholder(this.params.placeholderLoading);
        }
        return values.then().then((responseValues) => {
          if (this.listIteration === iteration) {
            return this._parseList(responseValues);
          } else {
            return Promise.reject(iteration);
          }
        });
      } else {
        return Promise.resolve(this._parseList(values));
      }
    }
    _addPlaceholder(contents) {
      var placeholder = document.createElement("div");
      if (typeof contents === "function") {
        contents = contents(this.cell.getComponent(), this.listEl);
      }
      if (contents) {
        this._clearList();
        if (contents instanceof HTMLElement) {
          placeholder = contents;
        } else {
          placeholder.classList.add("tabulator-edit-list-placeholder");
          placeholder.innerHTML = contents;
        }
        this.listEl.appendChild(placeholder);
        this._showList();
      }
    }
    _ajaxRequest(url, term) {
      var params = this.params.filterRemote ? { term } : {};
      url = urlBuilder(url, {}, params);
      return fetch(url).then((response) => {
        if (response.ok) {
          return response.json().catch((error) => {
            console.warn("List Ajax Load Error - Invalid JSON returned", error);
            return Promise.reject(error);
          });
        } else {
          console.error("List Ajax Load Error - Connection Error: " + response.status, response.statusText);
          return Promise.reject(response);
        }
      }).catch((error) => {
        console.error("List Ajax Load Error - Connection Error: ", error);
        return Promise.reject(error);
      });
    }
    _uniqueColumnValues(field) {
      var output = {}, data = this.table.getData(this.params.valuesLookup), column;
      if (field) {
        column = this.table.columnManager.getColumnByField(field);
      } else {
        column = this.cell.getColumn()._getSelf();
      }
      if (column) {
        data.forEach((row) => {
          var val = column.getFieldValue(row);
          if (!this._emptyValueCheck(val)) {
            if (this.params.multiselect && Array.isArray(val)) {
              val.forEach((item) => {
                if (!this._emptyValueCheck(item)) {
                  output[item] = true;
                }
              });
            } else {
              output[val] = true;
            }
          }
        });
      } else {
        console.warn("unable to find matching column to create select lookup list:", field);
        output = [];
      }
      return Object.keys(output);
    }
    _emptyValueCheck(value) {
      return value === null || typeof value === "undefined" || value === "";
    }
    _parseList(inputValues) {
      var data = [];
      if (!Array.isArray(inputValues)) {
        inputValues = Object.entries(inputValues).map(([key, value]) => {
          return {
            label: value,
            value: key
          };
        });
      }
      inputValues.forEach((value) => {
        if (typeof value !== "object") {
          value = {
            label: value,
            value
          };
        }
        this._parseListItem(value, data, 0);
      });
      if (!this.currentItems.length && this.params.freetext) {
        this.input.value = this.initialValues;
        this.typing = true;
        this.lastAction = "typing";
      }
      this.data = data;
      return data;
    }
    _parseListItem(option, data, level) {
      var item = {};
      if (option.options) {
        item = this._parseListGroup(option, level + 1);
      } else {
        item = {
          label: option.label,
          value: option.value,
          itemParams: option.itemParams,
          elementAttributes: option.elementAttributes,
          element: false,
          selected: false,
          visible: true,
          level,
          original: option
        };
        if (this.initialValues && this.initialValues.indexOf(option.value) > -1) {
          this._chooseItem(item, true);
        }
      }
      data.push(item);
    }
    _parseListGroup(option, level) {
      var item = {
        label: option.label,
        group: true,
        itemParams: option.itemParams,
        elementAttributes: option.elementAttributes,
        element: false,
        visible: true,
        level,
        options: [],
        original: option
      };
      option.options.forEach((child) => {
        this._parseListItem(child, item.options, level);
      });
      return item;
    }
    _sortOptions(options) {
      var sorter;
      if (this.params.sort) {
        sorter = typeof this.params.sort === "function" ? this.params.sort : this._defaultSortFunction.bind(this);
        this._sortGroup(sorter, options);
      }
      return options;
    }
    _sortGroup(sorter, options) {
      options.sort((a, b) => {
        return sorter(a.label, b.label, a.value, b.value, a.original, b.original);
      });
      options.forEach((option) => {
        if (option.group) {
          this._sortGroup(sorter, option.options);
        }
      });
    }
    _defaultSortFunction(as, bs) {
      var a, b, a1, b1, i = 0, L, rx = /(\d+)|(\D+)/g, rd = /\d/;
      var emptyAlign = 0;
      if (this.params.sort === "desc") {
        [as, bs] = [bs, as];
      }
      if (!as && as !== 0) {
        emptyAlign = !bs && bs !== 0 ? 0 : -1;
      } else if (!bs && bs !== 0) {
        emptyAlign = 1;
      } else {
        if (isFinite(as) && isFinite(bs))
          return as - bs;
        a = String(as).toLowerCase();
        b = String(bs).toLowerCase();
        if (a === b)
          return 0;
        if (!(rd.test(a) && rd.test(b)))
          return a > b ? 1 : -1;
        a = a.match(rx);
        b = b.match(rx);
        L = a.length > b.length ? b.length : a.length;
        while (i < L) {
          a1 = a[i];
          b1 = b[i++];
          if (a1 !== b1) {
            if (isFinite(a1) && isFinite(b1)) {
              if (a1.charAt(0) === "0")
                a1 = "." + a1;
              if (b1.charAt(0) === "0")
                b1 = "." + b1;
              return a1 - b1;
            } else
              return a1 > b1 ? 1 : -1;
          }
        }
        return a.length > b.length;
      }
      return emptyAlign;
    }
    _filterOptions() {
      var filterFunc = this.params.filterFunc || this._defaultFilterFunc, term = this.input.value;
      if (term) {
        this.filtered = true;
        this.data.forEach((item) => {
          this._filterItem(filterFunc, term, item);
        });
      } else {
        this.filtered = false;
      }
      return this.data;
    }
    _filterItem(func, term, item) {
      var matches2 = false;
      if (!item.group) {
        item.visible = func(term, item.label, item.value, item.original);
      } else {
        item.options.forEach((option) => {
          if (this._filterItem(func, term, option)) {
            matches2 = true;
          }
        });
        item.visible = matches2;
      }
      return item.visible;
    }
    _defaultFilterFunc(term, label, value, item) {
      term = String(term).toLowerCase();
      if (label !== null && typeof label !== "undefined") {
        if (String(label).toLowerCase().indexOf(term) > -1 || String(value).toLowerCase().indexOf(term) > -1) {
          return true;
        }
      }
      return false;
    }
    //////////////////////////////////////
    /////////// Display List /////////////
    //////////////////////////////////////
    _clearList() {
      while (this.listEl.firstChild)
        this.listEl.removeChild(this.listEl.firstChild);
      this.displayItems = [];
    }
    _buildList(data) {
      this._clearList();
      data.forEach((option) => {
        this._buildItem(option);
      });
      if (!this.displayItems.length) {
        this._addPlaceholder(this.params.placeholderEmpty);
      }
    }
    _buildItem(item) {
      var el = item.element, contents;
      if (!this.filtered || item.visible) {
        if (!el) {
          el = document.createElement("div");
          el.tabIndex = 0;
          contents = this.params.itemFormatter ? this.params.itemFormatter(item.label, item.value, item.original, el) : item.label;
          if (contents instanceof HTMLElement) {
            el.appendChild(contents);
          } else {
            el.innerHTML = contents;
          }
          if (item.group) {
            el.classList.add("tabulator-edit-list-group");
          } else {
            el.classList.add("tabulator-edit-list-item");
          }
          el.classList.add("tabulator-edit-list-group-level-" + item.level);
          if (item.elementAttributes && typeof item.elementAttributes == "object") {
            for (let key in item.elementAttributes) {
              if (key.charAt(0) == "+") {
                key = key.slice(1);
                el.setAttribute(key, this.input.getAttribute(key) + item.elementAttributes["+" + key]);
              } else {
                el.setAttribute(key, item.elementAttributes[key]);
              }
            }
          }
          if (item.group) {
            el.addEventListener("click", this._groupClick.bind(this, item));
          } else {
            el.addEventListener("click", this._itemClick.bind(this, item));
          }
          el.addEventListener("mousedown", this._preventBlur.bind(this));
          item.element = el;
        }
        this._styleItem(item);
        this.listEl.appendChild(el);
        if (item.group) {
          item.options.forEach((option) => {
            this._buildItem(option);
          });
        } else {
          this.displayItems.push(item);
        }
      }
    }
    _showList() {
      var startVis = this.popup && this.popup.isVisible();
      if (this.input.parentNode) {
        if (this.params.autocomplete && this.input.value === "" && !this.params.listOnEmpty) {
          if (this.popup) {
            this.popup.hide(true);
          }
          return;
        }
        this._setListWidth();
        if (!this.popup) {
          this.popup = this.edit.popup(this.listEl);
        }
        this.popup.show(this.cell.getElement(), "bottom");
        if (!startVis) {
          setTimeout(() => {
            this.popup.hideOnBlur(this._resolveValue.bind(this, true));
          }, 10);
        }
      }
    }
    _styleItem(item) {
      if (item && item.element) {
        if (item.selected) {
          item.element.classList.add("active");
        } else {
          item.element.classList.remove("active");
        }
      }
    }
    //////////////////////////////////////
    ///////// User Interaction ///////////
    //////////////////////////////////////
    _itemClick(item, e) {
      e.stopPropagation();
      this._chooseItem(item);
    }
    _groupClick(item, e) {
      e.stopPropagation();
    }
    //////////////////////////////////////
    ////// Current Item Management ///////
    //////////////////////////////////////
    _cancel() {
      this.popup.hide(true);
      this.actions.cancel();
    }
    _clearChoices() {
      this.typing = true;
      this.currentItems.forEach((item) => {
        item.selected = false;
        this._styleItem(item);
      });
      this.currentItems = [];
      this.focusedItem = null;
    }
    _chooseItem(item, silent) {
      var index7;
      this.typing = false;
      if (this.params.multiselect) {
        index7 = this.currentItems.indexOf(item);
        if (index7 > -1) {
          this.currentItems.splice(index7, 1);
          item.selected = false;
        } else {
          this.currentItems.push(item);
          item.selected = true;
        }
        this.input.value = this.currentItems.map((item2) => item2.label).join(",");
        this._styleItem(item);
      } else {
        this.currentItems = [item];
        item.selected = true;
        this.input.value = item.label;
        this._styleItem(item);
        if (!silent) {
          this._resolveValue();
        }
      }
      this._focusItem(item);
    }
    _resolveValue(blur) {
      var output, initialValue;
      if (this.popup) {
        this.popup.hide(true);
      }
      if (this.params.multiselect) {
        output = this.currentItems.map((item) => item.value);
      } else {
        if (blur && this.params.autocomplete && this.typing) {
          if (this.params.freetext || this.params.allowEmpty && this.input.value === "") {
            output = this.input.value;
          } else {
            this.actions.cancel();
            return;
          }
        } else {
          if (this.currentItems[0]) {
            output = this.currentItems[0].value;
          } else {
            initialValue = Array.isArray(this.initialValues) ? this.initialValues[0] : this.initialValues;
            if (initialValue === null || typeof initialValue === "undefined" || initialValue === "") {
              output = initialValue;
            } else {
              output = this.params.emptyValue;
            }
          }
        }
      }
      if (output === "") {
        output = this.params.emptyValue;
      }
      this.actions.success(output);
      if (this.isFilter) {
        this.initialValues = output && !Array.isArray(output) ? [output] : output;
        this.currentItems = [];
      }
    }
  };
  function list(cell, onRendered, success, cancel, editorParams) {
    var list2 = new Edit$1(this, cell, onRendered, success, cancel, editorParams);
    return list2.input;
  }
  function star$1(cell, onRendered, success, cancel, editorParams) {
    var self2 = this, element = cell.getElement(), value = cell.getValue(), maxStars = element.getElementsByTagName("svg").length || 5, size2 = element.getElementsByTagName("svg")[0] ? element.getElementsByTagName("svg")[0].getAttribute("width") : 14, stars = [], starsHolder = document.createElement("div"), star2 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    function starChange(val) {
      stars.forEach(function(star3, i2) {
        if (i2 < val) {
          if (self2.table.browser == "ie") {
            star3.setAttribute("class", "tabulator-star-active");
          } else {
            star3.classList.replace("tabulator-star-inactive", "tabulator-star-active");
          }
          star3.innerHTML = '<polygon fill="#488CE9" stroke="#014AAE" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
        } else {
          if (self2.table.browser == "ie") {
            star3.setAttribute("class", "tabulator-star-inactive");
          } else {
            star3.classList.replace("tabulator-star-active", "tabulator-star-inactive");
          }
          star3.innerHTML = '<polygon fill="#010155" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
        }
      });
    }
    function buildStar(i2) {
      var starHolder = document.createElement("span");
      var nextStar = star2.cloneNode(true);
      stars.push(nextStar);
      starHolder.addEventListener("mouseenter", function(e) {
        e.stopPropagation();
        e.stopImmediatePropagation();
        starChange(i2);
      });
      starHolder.addEventListener("mousemove", function(e) {
        e.stopPropagation();
        e.stopImmediatePropagation();
      });
      starHolder.addEventListener("click", function(e) {
        e.stopPropagation();
        e.stopImmediatePropagation();
        success(i2);
        element.blur();
      });
      starHolder.appendChild(nextStar);
      starsHolder.appendChild(starHolder);
    }
    function changeValue(val) {
      value = val;
      starChange(val);
    }
    element.style.whiteSpace = "nowrap";
    element.style.overflow = "hidden";
    element.style.textOverflow = "ellipsis";
    starsHolder.style.verticalAlign = "middle";
    starsHolder.style.display = "inline-block";
    starsHolder.style.padding = "4px";
    star2.setAttribute("width", size2);
    star2.setAttribute("height", size2);
    star2.setAttribute("viewBox", "0 0 512 512");
    star2.setAttribute("xml:space", "preserve");
    star2.style.padding = "0 1px";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          starsHolder.setAttribute(key, starsHolder.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          starsHolder.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    for (var i = 1; i <= maxStars; i++) {
      buildStar(i);
    }
    value = Math.min(parseInt(value), maxStars);
    starChange(value);
    starsHolder.addEventListener("mousemove", function(e) {
      starChange(0);
    });
    starsHolder.addEventListener("click", function(e) {
      success(0);
    });
    element.addEventListener("blur", function(e) {
      cancel();
    });
    element.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 39:
          changeValue(value + 1);
          break;
        case 37:
          changeValue(value - 1);
          break;
        case 13:
          success(value);
          break;
        case 27:
          cancel();
          break;
      }
    });
    return starsHolder;
  }
  function progress$1(cell, onRendered, success, cancel, editorParams) {
    var element = cell.getElement(), max2 = typeof editorParams.max === "undefined" ? element.getElementsByTagName("div")[0] && element.getElementsByTagName("div")[0].getAttribute("max") || 100 : editorParams.max, min2 = typeof editorParams.min === "undefined" ? element.getElementsByTagName("div")[0] && element.getElementsByTagName("div")[0].getAttribute("min") || 0 : editorParams.min, percent = (max2 - min2) / 100, value = cell.getValue() || 0, handle2 = document.createElement("div"), bar = document.createElement("div"), mouseDrag, mouseDragWidth;
    function updateValue() {
      var style = window.getComputedStyle(element, null);
      var calcVal = percent * Math.round(bar.offsetWidth / ((element.clientWidth - parseInt(style.getPropertyValue("padding-left")) - parseInt(style.getPropertyValue("padding-right"))) / 100)) + min2;
      success(calcVal);
      element.setAttribute("aria-valuenow", calcVal);
      element.setAttribute("aria-label", value);
    }
    handle2.style.position = "absolute";
    handle2.style.right = "0";
    handle2.style.top = "0";
    handle2.style.bottom = "0";
    handle2.style.width = "5px";
    handle2.classList.add("tabulator-progress-handle");
    bar.style.display = "inline-block";
    bar.style.position = "relative";
    bar.style.height = "100%";
    bar.style.backgroundColor = "#488CE9";
    bar.style.maxWidth = "100%";
    bar.style.minWidth = "0%";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          bar.setAttribute(key, bar.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          bar.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    element.style.padding = "4px 4px";
    value = Math.min(parseFloat(value), max2);
    value = Math.max(parseFloat(value), min2);
    value = Math.round((value - min2) / percent);
    bar.style.width = value + "%";
    element.setAttribute("aria-valuemin", min2);
    element.setAttribute("aria-valuemax", max2);
    bar.appendChild(handle2);
    handle2.addEventListener("mousedown", function(e) {
      mouseDrag = e.screenX;
      mouseDragWidth = bar.offsetWidth;
    });
    handle2.addEventListener("mouseover", function() {
      handle2.style.cursor = "ew-resize";
    });
    element.addEventListener("mousemove", function(e) {
      if (mouseDrag) {
        bar.style.width = mouseDragWidth + e.screenX - mouseDrag + "px";
      }
    });
    element.addEventListener("mouseup", function(e) {
      if (mouseDrag) {
        e.stopPropagation();
        e.stopImmediatePropagation();
        mouseDrag = false;
        mouseDragWidth = false;
        updateValue();
      }
    });
    element.addEventListener("keydown", function(e) {
      switch (e.keyCode) {
        case 39:
          e.preventDefault();
          bar.style.width = bar.clientWidth + element.clientWidth / 100 + "px";
          break;
        case 37:
          e.preventDefault();
          bar.style.width = bar.clientWidth - element.clientWidth / 100 + "px";
          break;
        case 9:
        case 13:
          updateValue();
          break;
        case 27:
          cancel();
          break;
      }
    });
    element.addEventListener("blur", function() {
      cancel();
    });
    return bar;
  }
  function tickCross$1(cell, onRendered, success, cancel, editorParams) {
    var value = cell.getValue(), input2 = document.createElement("input"), tristate = editorParams.tristate, indetermValue = typeof editorParams.indeterminateValue === "undefined" ? null : editorParams.indeterminateValue, indetermState = false, trueValueSet = Object.keys(editorParams).includes("trueValue"), falseValueSet = Object.keys(editorParams).includes("falseValue");
    input2.setAttribute("type", "checkbox");
    input2.style.marginTop = "5px";
    input2.style.boxSizing = "border-box";
    if (editorParams.elementAttributes && typeof editorParams.elementAttributes == "object") {
      for (let key in editorParams.elementAttributes) {
        if (key.charAt(0) == "+") {
          key = key.slice(1);
          input2.setAttribute(key, input2.getAttribute(key) + editorParams.elementAttributes["+" + key]);
        } else {
          input2.setAttribute(key, editorParams.elementAttributes[key]);
        }
      }
    }
    input2.value = value;
    if (tristate && (typeof value === "undefined" || value === indetermValue || value === "")) {
      indetermState = true;
      input2.indeterminate = true;
    }
    if (this.table.browser != "firefox" && this.table.browser != "safari") {
      onRendered(function() {
        if (cell.getType() === "cell") {
          input2.focus({ preventScroll: true });
        }
      });
    }
    input2.checked = trueValueSet ? value === editorParams.trueValue : value === true || value === "true" || value === "True" || value === 1;
    function setValue(blur) {
      var checkedValue = input2.checked;
      if (trueValueSet && checkedValue) {
        checkedValue = editorParams.trueValue;
      } else if (falseValueSet && !checkedValue) {
        checkedValue = editorParams.falseValue;
      }
      if (tristate) {
        if (!blur) {
          if (input2.checked && !indetermState) {
            input2.checked = false;
            input2.indeterminate = true;
            indetermState = true;
            return indetermValue;
          } else {
            indetermState = false;
            return checkedValue;
          }
        } else {
          if (indetermState) {
            return indetermValue;
          } else {
            return checkedValue;
          }
        }
      } else {
        return checkedValue;
      }
    }
    input2.addEventListener("change", function(e) {
      success(setValue());
    });
    input2.addEventListener("blur", function(e) {
      success(setValue(true));
    });
    input2.addEventListener("keydown", function(e) {
      if (e.keyCode == 13) {
        success(setValue());
      }
      if (e.keyCode == 27) {
        cancel();
      }
    });
    return input2;
  }
  function adaptable$1(cell, onRendered, success, cancel, params) {
    var column = cell._getSelf().column, lookup2, editorFunc, editorParams;
    function defaultLookup(cell2) {
      var value = cell2.getValue(), editor = "input";
      switch (typeof value) {
        case "number":
          editor = "number";
          break;
        case "boolean":
          editor = "tickCross";
          break;
        case "string":
          if (value.includes("\n")) {
            editor = "textarea";
          }
          break;
      }
      return editor;
    }
    lookup2 = params.editorLookup ? params.editorLookup(cell) : defaultLookup(cell);
    if (params.paramsLookup) {
      editorParams = typeof params.paramsLookup === "function" ? params.paramsLookup(lookup2, cell) : params.paramsLookup[lookup2];
    }
    editorFunc = this.table.modules.edit.lookupEditor(lookup2, column);
    return editorFunc.call(this, cell, onRendered, success, cancel, editorParams || {});
  }
  var defaultEditors = {
    input,
    textarea: textarea$1,
    number: number$1,
    range,
    date: date$1,
    time: time$1,
    datetime: datetime$2,
    list,
    star: star$1,
    progress: progress$1,
    tickCross: tickCross$1,
    adaptable: adaptable$1
  };
  var Edit2 = class _Edit extends Module {
    static moduleName = "edit";
    //load defaults
    static editors = defaultEditors;
    constructor(table) {
      super(table);
      this.currentCell = false;
      this.mouseClick = false;
      this.recursionBlock = false;
      this.invalidEdit = false;
      this.editedCells = [];
      this.convertEmptyValues = false;
      this.editors = _Edit.editors;
      this.registerTableOption("editTriggerEvent", "focus");
      this.registerTableOption("editorEmptyValue");
      this.registerTableOption("editorEmptyValueFunc", this.emptyValueCheck.bind(this));
      this.registerColumnOption("editable");
      this.registerColumnOption("editor");
      this.registerColumnOption("editorParams");
      this.registerColumnOption("editorEmptyValue");
      this.registerColumnOption("editorEmptyValueFunc");
      this.registerColumnOption("cellEditing");
      this.registerColumnOption("cellEdited");
      this.registerColumnOption("cellEditCancelled");
      this.registerTableFunction("getEditedCells", this.getEditedCells.bind(this));
      this.registerTableFunction("clearCellEdited", this.clearCellEdited.bind(this));
      this.registerTableFunction("navigatePrev", this.navigatePrev.bind(this));
      this.registerTableFunction("navigateNext", this.navigateNext.bind(this));
      this.registerTableFunction("navigateLeft", this.navigateLeft.bind(this));
      this.registerTableFunction("navigateRight", this.navigateRight.bind(this));
      this.registerTableFunction("navigateUp", this.navigateUp.bind(this));
      this.registerTableFunction("navigateDown", this.navigateDown.bind(this));
      this.registerComponentFunction("cell", "isEdited", this.cellIsEdited.bind(this));
      this.registerComponentFunction("cell", "clearEdited", this.clearEdited.bind(this));
      this.registerComponentFunction("cell", "edit", this.editCell.bind(this));
      this.registerComponentFunction("cell", "cancelEdit", this.cellCancelEdit.bind(this));
      this.registerComponentFunction("cell", "navigatePrev", this.navigatePrev.bind(this));
      this.registerComponentFunction("cell", "navigateNext", this.navigateNext.bind(this));
      this.registerComponentFunction("cell", "navigateLeft", this.navigateLeft.bind(this));
      this.registerComponentFunction("cell", "navigateRight", this.navigateRight.bind(this));
      this.registerComponentFunction("cell", "navigateUp", this.navigateUp.bind(this));
      this.registerComponentFunction("cell", "navigateDown", this.navigateDown.bind(this));
    }
    initialize() {
      this.subscribe("cell-init", this.bindEditor.bind(this));
      this.subscribe("cell-delete", this.clearEdited.bind(this));
      this.subscribe("cell-value-changed", this.updateCellClass.bind(this));
      this.subscribe("column-layout", this.initializeColumnCheck.bind(this));
      this.subscribe("column-delete", this.columnDeleteCheck.bind(this));
      this.subscribe("row-deleting", this.rowDeleteCheck.bind(this));
      this.subscribe("row-layout", this.rowEditableCheck.bind(this));
      this.subscribe("data-refreshing", this.cancelEdit.bind(this));
      this.subscribe("clipboard-paste", this.pasteBlocker.bind(this));
      this.subscribe("keybinding-nav-prev", this.navigatePrev.bind(this, void 0));
      this.subscribe("keybinding-nav-next", this.keybindingNavigateNext.bind(this));
      this.subscribe("keybinding-nav-up", this.navigateUp.bind(this, void 0));
      this.subscribe("keybinding-nav-down", this.navigateDown.bind(this, void 0));
      if (Object.keys(this.table.options).includes("editorEmptyValue")) {
        this.convertEmptyValues = true;
      }
    }
    ///////////////////////////////////
    ///////// Paste Negation //////////
    ///////////////////////////////////
    pasteBlocker(e) {
      if (this.currentCell) {
        return true;
      }
    }
    ///////////////////////////////////
    ////// Keybinding Functions ///////
    ///////////////////////////////////
    keybindingNavigateNext(e) {
      var cell = this.currentCell, newRow = this.options("tabEndNewRow");
      if (cell) {
        if (!this.navigateNext(cell, e)) {
          if (newRow) {
            cell.getElement().firstChild.blur();
            if (!this.invalidEdit) {
              if (newRow === true) {
                newRow = this.table.addRow({});
              } else {
                if (typeof newRow == "function") {
                  newRow = this.table.addRow(newRow(cell.row.getComponent()));
                } else {
                  newRow = this.table.addRow(Object.assign({}, newRow));
                }
              }
              newRow.then(() => {
                setTimeout(() => {
                  cell.getComponent().navigateNext();
                });
              });
            }
          }
        }
      }
    }
    ///////////////////////////////////
    ///////// Cell Functions //////////
    ///////////////////////////////////
    cellIsEdited(cell) {
      return !!cell.modules.edit && cell.modules.edit.edited;
    }
    cellCancelEdit(cell) {
      if (cell === this.currentCell) {
        this.table.modules.edit.cancelEdit();
      } else {
        console.warn("Cancel Editor Error - This cell is not currently being edited ");
      }
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    updateCellClass(cell) {
      if (this.allowEdit(cell)) {
        cell.getElement().classList.add("tabulator-editable");
      } else {
        cell.getElement().classList.remove("tabulator-editable");
      }
    }
    clearCellEdited(cells) {
      if (!cells) {
        cells = this.table.modules.edit.getEditedCells();
      }
      if (!Array.isArray(cells)) {
        cells = [cells];
      }
      cells.forEach((cell) => {
        this.table.modules.edit.clearEdited(cell._getSelf());
      });
    }
    navigatePrev(cell = this.currentCell, e) {
      var nextCell, prevRow;
      if (cell) {
        if (e) {
          e.preventDefault();
        }
        nextCell = this.navigateLeft();
        if (nextCell) {
          return true;
        } else {
          prevRow = this.table.rowManager.prevDisplayRow(cell.row, true);
          if (prevRow) {
            nextCell = this.findPrevEditableCell(prevRow, prevRow.cells.length);
            if (nextCell) {
              nextCell.getComponent().edit();
              return true;
            }
          }
        }
      }
      return false;
    }
    navigateNext(cell = this.currentCell, e) {
      var nextCell, nextRow;
      if (cell) {
        if (e) {
          e.preventDefault();
        }
        nextCell = this.navigateRight();
        if (nextCell) {
          return true;
        } else {
          nextRow = this.table.rowManager.nextDisplayRow(cell.row, true);
          if (nextRow) {
            nextCell = this.findNextEditableCell(nextRow, -1);
            if (nextCell) {
              nextCell.getComponent().edit();
              return true;
            }
          }
        }
      }
      return false;
    }
    navigateLeft(cell = this.currentCell, e) {
      var index7, nextCell;
      if (cell) {
        if (e) {
          e.preventDefault();
        }
        index7 = cell.getIndex();
        nextCell = this.findPrevEditableCell(cell.row, index7);
        if (nextCell) {
          nextCell.getComponent().edit();
          return true;
        }
      }
      return false;
    }
    navigateRight(cell = this.currentCell, e) {
      var index7, nextCell;
      if (cell) {
        if (e) {
          e.preventDefault();
        }
        index7 = cell.getIndex();
        nextCell = this.findNextEditableCell(cell.row, index7);
        if (nextCell) {
          nextCell.getComponent().edit();
          return true;
        }
      }
      return false;
    }
    navigateUp(cell = this.currentCell, e) {
      var index7, nextRow;
      if (cell) {
        if (e) {
          e.preventDefault();
        }
        index7 = cell.getIndex();
        nextRow = this.table.rowManager.prevDisplayRow(cell.row, true);
        if (nextRow) {
          nextRow.cells[index7].getComponent().edit();
          return true;
        }
      }
      return false;
    }
    navigateDown(cell = this.currentCell, e) {
      var index7, nextRow;
      if (cell) {
        if (e) {
          e.preventDefault();
        }
        index7 = cell.getIndex();
        nextRow = this.table.rowManager.nextDisplayRow(cell.row, true);
        if (nextRow) {
          nextRow.cells[index7].getComponent().edit();
          return true;
        }
      }
      return false;
    }
    findNextEditableCell(row, index7) {
      var nextCell = false;
      if (index7 < row.cells.length - 1) {
        for (var i = index7 + 1; i < row.cells.length; i++) {
          let cell = row.cells[i];
          if (cell.column.modules.edit && Helpers.elVisible(cell.getElement())) {
            let allowEdit = this.allowEdit(cell);
            if (allowEdit) {
              nextCell = cell;
              break;
            }
          }
        }
      }
      return nextCell;
    }
    findPrevEditableCell(row, index7) {
      var prevCell = false;
      if (index7 > 0) {
        for (var i = index7 - 1; i >= 0; i--) {
          let cell = row.cells[i];
          if (cell.column.modules.edit && Helpers.elVisible(cell.getElement())) {
            let allowEdit = this.allowEdit(cell);
            if (allowEdit) {
              prevCell = cell;
              break;
            }
          }
        }
      }
      return prevCell;
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    initializeColumnCheck(column) {
      if (typeof column.definition.editor !== "undefined") {
        this.initializeColumn(column);
      }
    }
    columnDeleteCheck(column) {
      if (this.currentCell && this.currentCell.column === column) {
        this.cancelEdit();
      }
    }
    rowDeleteCheck(row) {
      if (this.currentCell && this.currentCell.row === row) {
        this.cancelEdit();
      }
    }
    rowEditableCheck(row) {
      row.getCells().forEach((cell) => {
        if (cell.column.modules.edit && typeof cell.column.modules.edit.check === "function") {
          this.updateCellClass(cell);
        }
      });
    }
    //initialize column editor
    initializeColumn(column) {
      var convertEmpty = Object.keys(column.definition).includes("editorEmptyValue");
      var config = {
        editor: false,
        blocked: false,
        check: column.definition.editable,
        params: column.definition.editorParams || {},
        convertEmptyValues: convertEmpty,
        editorEmptyValue: column.definition.editorEmptyValue,
        editorEmptyValueFunc: column.definition.editorEmptyValueFunc
      };
      config.editor = this.lookupEditor(column.definition.editor, column);
      if (config.editor) {
        column.modules.edit = config;
      }
    }
    lookupEditor(editor, column) {
      var editorFunc;
      switch (typeof editor) {
        case "string":
          if (this.editors[editor]) {
            editorFunc = this.editors[editor];
          } else {
            console.warn("Editor Error - No such editor found: ", editor);
          }
          break;
        case "function":
          editorFunc = editor;
          break;
        case "boolean":
          if (editor === true) {
            if (typeof column.definition.formatter !== "function") {
              if (this.editors[column.definition.formatter]) {
                editorFunc = this.editors[column.definition.formatter];
              } else {
                editorFunc = this.editors["input"];
              }
            } else {
              console.warn("Editor Error - Cannot auto lookup editor for a custom formatter: ", column.definition.formatter);
            }
          }
          break;
      }
      return editorFunc;
    }
    getCurrentCell() {
      return this.currentCell ? this.currentCell.getComponent() : false;
    }
    clearEditor(cancel) {
      var cell = this.currentCell, cellEl;
      this.invalidEdit = false;
      if (cell) {
        this.currentCell = false;
        cellEl = cell.getElement();
        this.dispatch("edit-editor-clear", cell, cancel);
        cellEl.classList.remove("tabulator-editing");
        while (cellEl.firstChild)
          cellEl.removeChild(cellEl.firstChild);
        cell.row.getElement().classList.remove("tabulator-editing");
        cell.table.element.classList.remove("tabulator-editing");
      }
    }
    cancelEdit() {
      if (this.currentCell) {
        var cell = this.currentCell;
        var component = this.currentCell.getComponent();
        this.clearEditor(true);
        cell.setValueActual(cell.getValue());
        cell.cellRendered();
        if (cell.column.definition.editor == "textarea" || cell.column.definition.variableHeight) {
          cell.row.normalizeHeight(true);
        }
        if (cell.column.definition.cellEditCancelled) {
          cell.column.definition.cellEditCancelled.call(this.table, component);
        }
        this.dispatch("edit-cancelled", cell);
        this.dispatchExternal("cellEditCancelled", component);
      }
    }
    //return a formatted value for a cell
    bindEditor(cell) {
      if (cell.column.modules.edit) {
        var self2 = this, element = cell.getElement(true);
        this.updateCellClass(cell);
        element.setAttribute("tabindex", 0);
        element.addEventListener("mousedown", function(e) {
          if (e.button === 2) {
            e.preventDefault();
          } else {
            self2.mouseClick = true;
          }
        });
        if (this.options("editTriggerEvent") === "dblclick") {
          element.addEventListener("dblclick", function(e) {
            if (!element.classList.contains("tabulator-editing")) {
              element.focus({ preventScroll: true });
              self2.edit(cell, e, false);
            }
          });
        }
        if (this.options("editTriggerEvent") === "focus" || this.options("editTriggerEvent") === "click") {
          element.addEventListener("click", function(e) {
            if (!element.classList.contains("tabulator-editing")) {
              element.focus({ preventScroll: true });
              self2.edit(cell, e, false);
            }
          });
        }
        if (this.options("editTriggerEvent") === "focus") {
          element.addEventListener("focus", function(e) {
            if (!self2.recursionBlock) {
              self2.edit(cell, e, false);
            }
          });
        }
      }
    }
    focusCellNoEvent(cell, block) {
      this.recursionBlock = true;
      if (!(block && this.table.browser === "ie")) {
        cell.getElement().focus({ preventScroll: true });
      }
      this.recursionBlock = false;
    }
    editCell(cell, forceEdit) {
      this.focusCellNoEvent(cell);
      this.edit(cell, false, forceEdit);
    }
    focusScrollAdjust(cell) {
      if (this.table.rowManager.getRenderMode() == "virtual") {
        var topEdge = this.table.rowManager.element.scrollTop, bottomEdge = this.table.rowManager.element.clientHeight + this.table.rowManager.element.scrollTop, rowEl = cell.row.getElement();
        if (rowEl.offsetTop < topEdge) {
          this.table.rowManager.element.scrollTop -= topEdge - rowEl.offsetTop;
        } else {
          if (rowEl.offsetTop + rowEl.offsetHeight > bottomEdge) {
            this.table.rowManager.element.scrollTop += rowEl.offsetTop + rowEl.offsetHeight - bottomEdge;
          }
        }
        var leftEdge = this.table.rowManager.element.scrollLeft, rightEdge = this.table.rowManager.element.clientWidth + this.table.rowManager.element.scrollLeft, cellEl = cell.getElement();
        if (this.table.modExists("frozenColumns")) {
          leftEdge += parseInt(this.table.modules.frozenColumns.leftMargin || 0);
          rightEdge -= parseInt(this.table.modules.frozenColumns.rightMargin || 0);
        }
        if (this.table.options.renderHorizontal === "virtual") {
          leftEdge -= parseInt(this.table.columnManager.renderer.vDomPadLeft);
          rightEdge -= parseInt(this.table.columnManager.renderer.vDomPadLeft);
        }
        if (cellEl.offsetLeft < leftEdge) {
          this.table.rowManager.element.scrollLeft -= leftEdge - cellEl.offsetLeft;
        } else {
          if (cellEl.offsetLeft + cellEl.offsetWidth > rightEdge) {
            this.table.rowManager.element.scrollLeft += cellEl.offsetLeft + cellEl.offsetWidth - rightEdge;
          }
        }
      }
    }
    allowEdit(cell) {
      var check = cell.column.modules.edit ? true : false;
      if (cell.column.modules.edit) {
        switch (typeof cell.column.modules.edit.check) {
          case "function":
            if (cell.row.initialized) {
              check = cell.column.modules.edit.check(cell.getComponent());
            }
            break;
          case "string":
            check = !!cell.row.data[cell.column.modules.edit.check];
            break;
          case "boolean":
            check = cell.column.modules.edit.check;
            break;
        }
      }
      return check;
    }
    edit(cell, e, forceEdit) {
      var self2 = this, allowEdit = true, rendered = function() {
      }, element = cell.getElement(), editFinished = false, cellEditor, component, params;
      if (this.currentCell) {
        if (!this.invalidEdit && this.currentCell !== cell) {
          this.cancelEdit();
        }
        return;
      }
      function success(value) {
        if (self2.currentCell === cell && !editFinished) {
          var valid = self2.chain("edit-success", [cell, value], true, true);
          if (valid === true || self2.table.options.validationMode === "highlight") {
            editFinished = true;
            self2.clearEditor();
            if (!cell.modules.edit) {
              cell.modules.edit = {};
            }
            cell.modules.edit.edited = true;
            if (self2.editedCells.indexOf(cell) == -1) {
              self2.editedCells.push(cell);
            }
            value = self2.transformEmptyValues(value, cell);
            cell.setValue(value, true);
            return valid === true;
          } else {
            editFinished = true;
            self2.invalidEdit = true;
            self2.focusCellNoEvent(cell, true);
            rendered();
            setTimeout(() => {
              editFinished = false;
            }, 10);
            return false;
          }
        }
      }
      function cancel() {
        if (self2.currentCell === cell && !editFinished) {
          self2.cancelEdit();
        }
      }
      function onRendered(callback) {
        rendered = callback;
      }
      if (!cell.column.modules.edit.blocked) {
        if (e) {
          e.stopPropagation();
        }
        allowEdit = this.allowEdit(cell);
        if (allowEdit || forceEdit) {
          self2.cancelEdit();
          self2.currentCell = cell;
          this.focusScrollAdjust(cell);
          component = cell.getComponent();
          if (this.mouseClick) {
            this.mouseClick = false;
            if (cell.column.definition.cellClick) {
              cell.column.definition.cellClick.call(this.table, e, component);
            }
          }
          if (cell.column.definition.cellEditing) {
            cell.column.definition.cellEditing.call(this.table, component);
          }
          this.dispatch("cell-editing", cell);
          this.dispatchExternal("cellEditing", component);
          params = typeof cell.column.modules.edit.params === "function" ? cell.column.modules.edit.params(component) : cell.column.modules.edit.params;
          cellEditor = cell.column.modules.edit.editor.call(self2, component, onRendered, success, cancel, params);
          if (this.currentCell && cellEditor !== false) {
            if (cellEditor instanceof Node) {
              element.classList.add("tabulator-editing");
              cell.row.getElement().classList.add("tabulator-editing");
              cell.table.element.classList.add("tabulator-editing");
              while (element.firstChild)
                element.removeChild(element.firstChild);
              element.appendChild(cellEditor);
              rendered();
              var children = element.children;
              for (var i = 0; i < children.length; i++) {
                children[i].addEventListener("click", function(e2) {
                  e2.stopPropagation();
                });
              }
            } else {
              console.warn("Edit Error - Editor should return an instance of Node, the editor returned:", cellEditor);
              this.blur(element);
              return false;
            }
          } else {
            this.blur(element);
            return false;
          }
          return true;
        } else {
          this.mouseClick = false;
          this.blur(element);
          return false;
        }
      } else {
        this.mouseClick = false;
        this.blur(element);
        return false;
      }
    }
    emptyValueCheck(value) {
      return value === "" || value === null || typeof value === "undefined";
    }
    transformEmptyValues(value, cell) {
      var mod = cell.column.modules.edit, convert = mod.convertEmptyValues || this.convertEmptyValues, checkFunc;
      if (convert) {
        checkFunc = mod.editorEmptyValueFunc || this.options("editorEmptyValueFunc");
        if (checkFunc && checkFunc(value)) {
          value = mod.convertEmptyValues ? mod.editorEmptyValue : this.options("editorEmptyValue");
        }
      }
      return value;
    }
    blur(element) {
      if (!this.confirm("edit-blur", [element])) {
        element.blur();
      }
    }
    getEditedCells() {
      var output = [];
      this.editedCells.forEach((cell) => {
        output.push(cell.getComponent());
      });
      return output;
    }
    clearEdited(cell) {
      var editIndex;
      if (cell.modules.edit && cell.modules.edit.edited) {
        cell.modules.edit.edited = false;
        this.dispatch("edit-edited-clear", cell);
      }
      editIndex = this.editedCells.indexOf(cell);
      if (editIndex > -1) {
        this.editedCells.splice(editIndex, 1);
      }
    }
  };
  var ExportRow = class {
    constructor(type, columns, component, indent) {
      this.type = type;
      this.columns = columns;
      this.component = component || false;
      this.indent = indent || 0;
    }
  };
  var ExportColumn = class {
    constructor(value, component, width, height, depth) {
      this.value = value;
      this.component = component || false;
      this.width = width;
      this.height = height;
      this.depth = depth;
    }
  };
  var columnLookups$1 = {};
  var rowLookups$1 = {
    visible: function() {
      return this.rowManager.getVisibleRows(false, true);
    },
    all: function() {
      return this.rowManager.rows;
    },
    selected: function() {
      return this.modules.selectRow.selectedRows;
    },
    active: function() {
      if (this.options.pagination) {
        return this.rowManager.getDisplayRows(this.rowManager.displayRows.length - 2);
      } else {
        return this.rowManager.getDisplayRows();
      }
    }
  };
  var Export = class _Export extends Module {
    static moduleName = "export";
    static columnLookups = columnLookups$1;
    static rowLookups = rowLookups$1;
    constructor(table) {
      super(table);
      this.config = {};
      this.cloneTableStyle = true;
      this.colVisProp = "";
      this.colVisPropAttach = "";
      this.registerTableOption("htmlOutputConfig", false);
      this.registerColumnOption("htmlOutput");
      this.registerColumnOption("titleHtmlOutput");
    }
    initialize() {
      this.registerTableFunction("getHtml", this.getHtml.bind(this));
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    generateExportList(config, style, range2, colVisProp) {
      var headers, body, columns, colLookup;
      this.cloneTableStyle = style;
      this.config = config || {};
      this.colVisProp = colVisProp;
      this.colVisPropAttach = this.colVisProp.charAt(0).toUpperCase() + this.colVisProp.slice(1);
      colLookup = _Export.columnLookups[range2];
      if (colLookup) {
        columns = colLookup.call(this.table);
        columns = columns.filter((col) => this.columnVisCheck(col));
      }
      headers = this.config.columnHeaders !== false ? this.headersToExportRows(this.generateColumnGroupHeaders(columns)) : [];
      if (columns) {
        columns = columns.map((col) => col.getComponent());
      }
      body = this.bodyToExportRows(this.rowLookup(range2), columns);
      return headers.concat(body);
    }
    generateTable(config, style, range2, colVisProp) {
      var list2 = this.generateExportList(config, style, range2, colVisProp);
      return this.generateTableElement(list2);
    }
    rowLookup(range2) {
      var rows2 = [], rowLookup;
      if (typeof range2 == "function") {
        range2.call(this.table).forEach((row) => {
          row = this.table.rowManager.findRow(row);
          if (row) {
            rows2.push(row);
          }
        });
      } else {
        rowLookup = _Export.rowLookups[range2] || _Export.rowLookups["active"];
        rows2 = rowLookup.call(this.table);
      }
      return Object.assign([], rows2);
    }
    generateColumnGroupHeaders(columns) {
      var output = [];
      if (!columns) {
        columns = this.config.columnGroups !== false ? this.table.columnManager.columns : this.table.columnManager.columnsByIndex;
      }
      columns.forEach((column) => {
        var colData = this.processColumnGroup(column);
        if (colData) {
          output.push(colData);
        }
      });
      return output;
    }
    processColumnGroup(column) {
      var subGroups = column.columns, maxDepth = 0, title = column.definition["title" + this.colVisPropAttach] || column.definition.title;
      var groupData = {
        title,
        column,
        depth: 1
      };
      if (subGroups.length) {
        groupData.subGroups = [];
        groupData.width = 0;
        subGroups.forEach((subGroup) => {
          var subGroupData = this.processColumnGroup(subGroup);
          if (subGroupData) {
            groupData.width += subGroupData.width;
            groupData.subGroups.push(subGroupData);
            if (subGroupData.depth > maxDepth) {
              maxDepth = subGroupData.depth;
            }
          }
        });
        groupData.depth += maxDepth;
        if (!groupData.width) {
          return false;
        }
      } else {
        if (this.columnVisCheck(column)) {
          groupData.width = 1;
        } else {
          return false;
        }
      }
      return groupData;
    }
    columnVisCheck(column) {
      var visProp = column.definition[this.colVisProp];
      if (this.config.rowHeaders === false && column.isRowHeader) {
        return false;
      }
      if (typeof visProp === "function") {
        visProp = visProp.call(this.table, column.getComponent());
      }
      if (visProp === false || visProp === true) {
        return visProp;
      }
      return column.visible && column.field;
    }
    headersToExportRows(columns) {
      var headers = [], headerDepth = 0, exportRows = [];
      function parseColumnGroup(column, level) {
        var depth = headerDepth - level;
        if (typeof headers[level] === "undefined") {
          headers[level] = [];
        }
        column.height = column.subGroups ? 1 : depth - column.depth + 1;
        headers[level].push(column);
        if (column.height > 1) {
          for (let i = 1; i < column.height; i++) {
            if (typeof headers[level + i] === "undefined") {
              headers[level + i] = [];
            }
            headers[level + i].push(false);
          }
        }
        if (column.width > 1) {
          for (let i = 1; i < column.width; i++) {
            headers[level].push(false);
          }
        }
        if (column.subGroups) {
          column.subGroups.forEach(function(subGroup) {
            parseColumnGroup(subGroup, level + 1);
          });
        }
      }
      columns.forEach(function(column) {
        if (column.depth > headerDepth) {
          headerDepth = column.depth;
        }
      });
      columns.forEach(function(column) {
        parseColumnGroup(column, 0);
      });
      headers.forEach((header) => {
        var columns2 = [];
        header.forEach((col) => {
          if (col) {
            let title = typeof col.title === "undefined" ? "" : col.title;
            columns2.push(new ExportColumn(title, col.column.getComponent(), col.width, col.height, col.depth));
          } else {
            columns2.push(null);
          }
        });
        exportRows.push(new ExportRow("header", columns2));
      });
      return exportRows;
    }
    bodyToExportRows(rows2, columns = []) {
      var exportRows = [];
      if (columns.length === 0) {
        this.table.columnManager.columnsByIndex.forEach((column) => {
          if (this.columnVisCheck(column)) {
            columns.push(column.getComponent());
          }
        });
      }
      if (this.config.columnCalcs !== false && this.table.modExists("columnCalcs")) {
        if (this.table.modules.columnCalcs.topInitialized) {
          rows2.unshift(this.table.modules.columnCalcs.topRow);
        }
        if (this.table.modules.columnCalcs.botInitialized) {
          rows2.push(this.table.modules.columnCalcs.botRow);
        }
      }
      rows2 = rows2.filter((row) => {
        switch (row.type) {
          case "group":
            return this.config.rowGroups !== false;
          case "calc":
            return this.config.columnCalcs !== false;
          case "row":
            return !(this.table.options.dataTree && this.config.dataTree === false && row.modules.dataTree.parent);
        }
        return true;
      });
      rows2.forEach((row, i) => {
        var rowData = row.getData(this.colVisProp);
        var exportCols = [];
        var indent = 0;
        switch (row.type) {
          case "group":
            indent = row.level;
            exportCols.push(new ExportColumn(row.key, row.getComponent(), columns.length, 1));
            break;
          case "calc":
          case "row":
            columns.forEach((col) => {
              exportCols.push(new ExportColumn(col._column.getFieldValue(rowData), col, 1, 1));
            });
            if (this.table.options.dataTree && this.config.dataTree !== false) {
              indent = row.modules.dataTree.index;
            }
            break;
        }
        exportRows.push(new ExportRow(row.type, exportCols, row.getComponent(), indent));
      });
      return exportRows;
    }
    generateTableElement(list2) {
      var table = document.createElement("table"), headerEl = document.createElement("thead"), bodyEl = document.createElement("tbody"), styles = this.lookupTableStyles(), rowFormatter = this.table.options["rowFormatter" + this.colVisPropAttach], setup = {};
      setup.rowFormatter = rowFormatter !== null ? rowFormatter : this.table.options.rowFormatter;
      if (this.table.options.dataTree && this.config.dataTree !== false && this.table.modExists("columnCalcs")) {
        setup.treeElementField = this.table.modules.dataTree.elementField;
      }
      setup.groupHeader = this.table.options["groupHeader" + this.colVisPropAttach];
      if (setup.groupHeader && !Array.isArray(setup.groupHeader)) {
        setup.groupHeader = [setup.groupHeader];
      }
      table.classList.add("tabulator-print-table");
      this.mapElementStyles(this.table.columnManager.getHeadersElement(), headerEl, ["border-top", "border-left", "border-right", "border-bottom", "background-color", "color", "font-weight", "font-family", "font-size"]);
      if (list2.length > 1e3) {
        console.warn("It may take a long time to render an HTML table with more than 1000 rows");
      }
      list2.forEach((row, i) => {
        let rowEl;
        switch (row.type) {
          case "header":
            headerEl.appendChild(this.generateHeaderElement(row, setup, styles));
            break;
          case "group":
            bodyEl.appendChild(this.generateGroupElement(row, setup, styles));
            break;
          case "calc":
            bodyEl.appendChild(this.generateCalcElement(row, setup, styles));
            break;
          case "row":
            rowEl = this.generateRowElement(row, setup, styles);
            this.mapElementStyles(i % 2 && styles.evenRow ? styles.evenRow : styles.oddRow, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
            bodyEl.appendChild(rowEl);
            break;
        }
      });
      if (headerEl.innerHTML) {
        table.appendChild(headerEl);
      }
      table.appendChild(bodyEl);
      this.mapElementStyles(this.table.element, table, ["border-top", "border-left", "border-right", "border-bottom"]);
      return table;
    }
    lookupTableStyles() {
      var styles = {};
      if (this.cloneTableStyle && window.getComputedStyle) {
        styles.oddRow = this.table.element.querySelector(".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)");
        styles.evenRow = this.table.element.querySelector(".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)");
        styles.calcRow = this.table.element.querySelector(".tabulator-row.tabulator-calcs");
        styles.firstRow = this.table.element.querySelector(".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)");
        styles.firstGroup = this.table.element.getElementsByClassName("tabulator-group")[0];
        if (styles.firstRow) {
          styles.styleCells = styles.firstRow.getElementsByClassName("tabulator-cell");
          styles.styleRowHeader = styles.firstRow.getElementsByClassName("tabulator-row-header")[0];
          styles.firstCell = styles.styleCells[0];
          styles.lastCell = styles.styleCells[styles.styleCells.length - 1];
        }
      }
      return styles;
    }
    generateHeaderElement(row, setup, styles) {
      var rowEl = document.createElement("tr");
      row.columns.forEach((column) => {
        if (column) {
          var cellEl = document.createElement("th");
          var classNames = column.component._column.definition.cssClass ? column.component._column.definition.cssClass.split(" ") : [];
          cellEl.colSpan = column.width;
          cellEl.rowSpan = column.height;
          cellEl.innerHTML = column.value;
          if (this.cloneTableStyle) {
            cellEl.style.boxSizing = "border-box";
          }
          classNames.forEach(function(className) {
            cellEl.classList.add(className);
          });
          this.mapElementStyles(column.component.getElement(), cellEl, ["text-align", "border-left", "border-right", "background-color", "color", "font-weight", "font-family", "font-size"]);
          this.mapElementStyles(column.component._column.contentElement, cellEl, ["padding-top", "padding-left", "padding-right", "padding-bottom"]);
          if (column.component._column.visible) {
            this.mapElementStyles(column.component.getElement(), cellEl, ["width"]);
          } else {
            if (column.component._column.definition.width) {
              cellEl.style.width = column.component._column.definition.width + "px";
            }
          }
          if (column.component._column.parent && column.component._column.parent.isGroup) {
            this.mapElementStyles(column.component._column.parent.groupElement, cellEl, ["border-top"]);
          } else {
            this.mapElementStyles(column.component.getElement(), cellEl, ["border-top"]);
          }
          if (column.component._column.isGroup) {
            this.mapElementStyles(column.component.getElement(), cellEl, ["border-bottom"]);
          } else {
            this.mapElementStyles(this.table.columnManager.getElement(), cellEl, ["border-bottom"]);
          }
          rowEl.appendChild(cellEl);
        }
      });
      return rowEl;
    }
    generateGroupElement(row, setup, styles) {
      var rowEl = document.createElement("tr"), cellEl = document.createElement("td"), group = row.columns[0];
      rowEl.classList.add("tabulator-print-table-row");
      if (setup.groupHeader && setup.groupHeader[row.indent]) {
        group.value = setup.groupHeader[row.indent](group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
      } else {
        if (setup.groupHeader !== false) {
          group.value = row.component._group.generator(group.value, row.component._group.getRowCount(), row.component._group.getData(), row.component);
        }
      }
      cellEl.colSpan = group.width;
      cellEl.innerHTML = group.value;
      rowEl.classList.add("tabulator-print-table-group");
      rowEl.classList.add("tabulator-group-level-" + row.indent);
      if (group.component.isVisible()) {
        rowEl.classList.add("tabulator-group-visible");
      }
      this.mapElementStyles(styles.firstGroup, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
      this.mapElementStyles(styles.firstGroup, cellEl, ["padding-top", "padding-left", "padding-right", "padding-bottom"]);
      rowEl.appendChild(cellEl);
      return rowEl;
    }
    generateCalcElement(row, setup, styles) {
      var rowEl = this.generateRowElement(row, setup, styles);
      rowEl.classList.add("tabulator-print-table-calcs");
      this.mapElementStyles(styles.calcRow, rowEl, ["border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "background-color"]);
      return rowEl;
    }
    generateRowElement(row, setup, styles) {
      var rowEl = document.createElement("tr");
      rowEl.classList.add("tabulator-print-table-row");
      row.columns.forEach((col, i) => {
        if (col) {
          var cellEl = document.createElement("td"), column = col.component._column, table = this.table, index7 = table.columnManager.findColumnIndex(column), value = col.value, cellStyle, styleProps;
          var cellWrapper = {
            modules: {},
            getValue: function() {
              return value;
            },
            getField: function() {
              return column.definition.field;
            },
            getElement: function() {
              return cellEl;
            },
            getType: function() {
              return "cell";
            },
            getColumn: function() {
              return column.getComponent();
            },
            getData: function() {
              return row.component.getData();
            },
            getRow: function() {
              return row.component;
            },
            getTable: function() {
              return table;
            },
            getComponent: function() {
              return cellWrapper;
            },
            column
          };
          var classNames = column.definition.cssClass ? column.definition.cssClass.split(" ") : [];
          classNames.forEach(function(className) {
            cellEl.classList.add(className);
          });
          if (this.table.modExists("format") && this.config.formatCells !== false) {
            value = this.table.modules.format.formatExportValue(cellWrapper, this.colVisProp);
          } else {
            switch (typeof value) {
              case "object":
                value = value !== null ? JSON.stringify(value) : "";
                break;
              case "undefined":
                value = "";
                break;
            }
          }
          if (value instanceof Node) {
            cellEl.appendChild(value);
          } else {
            cellEl.innerHTML = value;
          }
          styleProps = ["padding-top", "padding-left", "padding-right", "padding-bottom", "border-top", "border-left", "border-right", "border-bottom", "color", "font-weight", "font-family", "font-size", "text-align"];
          if (column.isRowHeader) {
            cellStyle = styles.styleRowHeader;
            styleProps.push("background-color");
          } else {
            cellStyle = styles.styleCells && styles.styleCells[index7] ? styles.styleCells[index7] : styles.firstCell;
          }
          if (cellStyle) {
            this.mapElementStyles(cellStyle, cellEl, styleProps);
            if (column.definition.align) {
              cellEl.style.textAlign = column.definition.align;
            }
          }
          if (this.table.options.dataTree && this.config.dataTree !== false) {
            if (setup.treeElementField && setup.treeElementField == column.field || !setup.treeElementField && i == 0) {
              if (row.component._row.modules.dataTree.controlEl) {
                cellEl.insertBefore(row.component._row.modules.dataTree.controlEl.cloneNode(true), cellEl.firstChild);
              }
              if (row.component._row.modules.dataTree.branchEl) {
                cellEl.insertBefore(row.component._row.modules.dataTree.branchEl.cloneNode(true), cellEl.firstChild);
              }
            }
          }
          rowEl.appendChild(cellEl);
          if (cellWrapper.modules.format && cellWrapper.modules.format.renderedCallback) {
            cellWrapper.modules.format.renderedCallback();
          }
        }
      });
      if (setup.rowFormatter && row.type === "row" && this.config.formatCells !== false) {
        let formatComponent = Object.assign(row.component);
        formatComponent.getElement = function() {
          return rowEl;
        };
        setup.rowFormatter(row.component);
      }
      return rowEl;
    }
    generateHTMLTable(list2) {
      var holder = document.createElement("div");
      holder.appendChild(this.generateTableElement(list2));
      return holder.innerHTML;
    }
    getHtml(visible, style, config, colVisProp) {
      var list2 = this.generateExportList(config || this.table.options.htmlOutputConfig, style, visible, colVisProp || "htmlOutput");
      return this.generateHTMLTable(list2);
    }
    mapElementStyles(from, to, props) {
      if (this.cloneTableStyle && from && to) {
        var lookup2 = {
          "background-color": "backgroundColor",
          "color": "fontColor",
          "width": "width",
          "font-weight": "fontWeight",
          "font-family": "fontFamily",
          "font-size": "fontSize",
          "text-align": "textAlign",
          "border-top": "borderTop",
          "border-left": "borderLeft",
          "border-right": "borderRight",
          "border-bottom": "borderBottom",
          "padding-top": "paddingTop",
          "padding-left": "paddingLeft",
          "padding-right": "paddingRight",
          "padding-bottom": "paddingBottom"
        };
        if (window.getComputedStyle) {
          var fromStyle = window.getComputedStyle(from);
          props.forEach(function(prop) {
            if (!to.style[lookup2[prop]]) {
              to.style[lookup2[prop]] = fromStyle.getPropertyValue(prop);
            }
          });
        }
      }
    }
  };
  var defaultFilters = {
    //equal to
    "=": function(filterVal, rowVal, rowData, filterParams) {
      return rowVal == filterVal ? true : false;
    },
    //less than
    "<": function(filterVal, rowVal, rowData, filterParams) {
      return rowVal < filterVal ? true : false;
    },
    //less than or equal to
    "<=": function(filterVal, rowVal, rowData, filterParams) {
      return rowVal <= filterVal ? true : false;
    },
    //greater than
    ">": function(filterVal, rowVal, rowData, filterParams) {
      return rowVal > filterVal ? true : false;
    },
    //greater than or equal to
    ">=": function(filterVal, rowVal, rowData, filterParams) {
      return rowVal >= filterVal ? true : false;
    },
    //not equal to
    "!=": function(filterVal, rowVal, rowData, filterParams) {
      return rowVal != filterVal ? true : false;
    },
    "regex": function(filterVal, rowVal, rowData, filterParams) {
      if (typeof filterVal == "string") {
        filterVal = new RegExp(filterVal);
      }
      return filterVal.test(rowVal);
    },
    //contains the string
    "like": function(filterVal, rowVal, rowData, filterParams) {
      if (filterVal === null || typeof filterVal === "undefined") {
        return rowVal === filterVal ? true : false;
      } else {
        if (typeof rowVal !== "undefined" && rowVal !== null) {
          return String(rowVal).toLowerCase().indexOf(filterVal.toLowerCase()) > -1;
        } else {
          return false;
        }
      }
    },
    //contains the keywords
    "keywords": function(filterVal, rowVal, rowData, filterParams) {
      var keywords = filterVal.toLowerCase().split(typeof filterParams.separator === "undefined" ? " " : filterParams.separator), value = String(rowVal === null || typeof rowVal === "undefined" ? "" : rowVal).toLowerCase(), matches2 = [];
      keywords.forEach((keyword) => {
        if (value.includes(keyword)) {
          matches2.push(true);
        }
      });
      return filterParams.matchAll ? matches2.length === keywords.length : !!matches2.length;
    },
    //starts with the string
    "starts": function(filterVal, rowVal, rowData, filterParams) {
      if (filterVal === null || typeof filterVal === "undefined") {
        return rowVal === filterVal ? true : false;
      } else {
        if (typeof rowVal !== "undefined" && rowVal !== null) {
          return String(rowVal).toLowerCase().startsWith(filterVal.toLowerCase());
        } else {
          return false;
        }
      }
    },
    //ends with the string
    "ends": function(filterVal, rowVal, rowData, filterParams) {
      if (filterVal === null || typeof filterVal === "undefined") {
        return rowVal === filterVal ? true : false;
      } else {
        if (typeof rowVal !== "undefined" && rowVal !== null) {
          return String(rowVal).toLowerCase().endsWith(filterVal.toLowerCase());
        } else {
          return false;
        }
      }
    },
    //in array
    "in": function(filterVal, rowVal, rowData, filterParams) {
      if (Array.isArray(filterVal)) {
        return filterVal.length ? filterVal.indexOf(rowVal) > -1 : true;
      } else {
        console.warn("Filter Error - filter value is not an array:", filterVal);
        return false;
      }
    }
  };
  var Filter = class _Filter extends Module {
    static moduleName = "filter";
    //load defaults
    static filters = defaultFilters;
    constructor(table) {
      super(table);
      this.filterList = [];
      this.headerFilters = {};
      this.headerFilterColumns = [];
      this.prevHeaderFilterChangeCheck = "";
      this.prevHeaderFilterChangeCheck = "{}";
      this.changed = false;
      this.tableInitialized = false;
      this.registerTableOption("filterMode", "local");
      this.registerTableOption("initialFilter", false);
      this.registerTableOption("initialHeaderFilter", false);
      this.registerTableOption("headerFilterLiveFilterDelay", 300);
      this.registerTableOption("placeholderHeaderFilter", false);
      this.registerColumnOption("headerFilter");
      this.registerColumnOption("headerFilterPlaceholder");
      this.registerColumnOption("headerFilterParams");
      this.registerColumnOption("headerFilterEmptyCheck");
      this.registerColumnOption("headerFilterFunc");
      this.registerColumnOption("headerFilterFuncParams");
      this.registerColumnOption("headerFilterLiveFilter");
      this.registerTableFunction("searchRows", this.searchRows.bind(this));
      this.registerTableFunction("searchData", this.searchData.bind(this));
      this.registerTableFunction("setFilter", this.userSetFilter.bind(this));
      this.registerTableFunction("refreshFilter", this.userRefreshFilter.bind(this));
      this.registerTableFunction("addFilter", this.userAddFilter.bind(this));
      this.registerTableFunction("getFilters", this.getFilters.bind(this));
      this.registerTableFunction("setHeaderFilterFocus", this.userSetHeaderFilterFocus.bind(this));
      this.registerTableFunction("getHeaderFilterValue", this.userGetHeaderFilterValue.bind(this));
      this.registerTableFunction("setHeaderFilterValue", this.userSetHeaderFilterValue.bind(this));
      this.registerTableFunction("getHeaderFilters", this.getHeaderFilters.bind(this));
      this.registerTableFunction("removeFilter", this.userRemoveFilter.bind(this));
      this.registerTableFunction("clearFilter", this.userClearFilter.bind(this));
      this.registerTableFunction("clearHeaderFilter", this.userClearHeaderFilter.bind(this));
      this.registerComponentFunction("column", "headerFilterFocus", this.setHeaderFilterFocus.bind(this));
      this.registerComponentFunction("column", "reloadHeaderFilter", this.reloadHeaderFilter.bind(this));
      this.registerComponentFunction("column", "getHeaderFilterValue", this.getHeaderFilterValue.bind(this));
      this.registerComponentFunction("column", "setHeaderFilterValue", this.setHeaderFilterValue.bind(this));
    }
    initialize() {
      this.subscribe("column-init", this.initializeColumnHeaderFilter.bind(this));
      this.subscribe("column-width-fit-before", this.hideHeaderFilterElements.bind(this));
      this.subscribe("column-width-fit-after", this.showHeaderFilterElements.bind(this));
      this.subscribe("table-built", this.tableBuilt.bind(this));
      this.subscribe("placeholder", this.generatePlaceholder.bind(this));
      if (this.table.options.filterMode === "remote") {
        this.subscribe("data-params", this.remoteFilterParams.bind(this));
      }
      this.registerDataHandler(this.filter.bind(this), 10);
    }
    tableBuilt() {
      if (this.table.options.initialFilter) {
        this.setFilter(this.table.options.initialFilter);
      }
      if (this.table.options.initialHeaderFilter) {
        this.table.options.initialHeaderFilter.forEach((item) => {
          var column = this.table.columnManager.findColumn(item.field);
          if (column) {
            this.setHeaderFilterValue(column, item.value);
          } else {
            console.warn("Column Filter Error - No matching column found:", item.field);
            return false;
          }
        });
      }
      this.tableInitialized = true;
    }
    remoteFilterParams(data, config, silent, params) {
      params.filter = this.getFilters(true, true);
      return params;
    }
    generatePlaceholder(text) {
      if (this.table.options.placeholderHeaderFilter && Object.keys(this.headerFilters).length) {
        return this.table.options.placeholderHeaderFilter;
      }
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    //set standard filters
    userSetFilter(field, type, value, params) {
      this.setFilter(field, type, value, params);
      this.refreshFilter();
    }
    //set standard filters
    userRefreshFilter() {
      this.refreshFilter();
    }
    //add filter to array
    userAddFilter(field, type, value, params) {
      this.addFilter(field, type, value, params);
      this.refreshFilter();
    }
    userSetHeaderFilterFocus(field) {
      var column = this.table.columnManager.findColumn(field);
      if (column) {
        this.setHeaderFilterFocus(column);
      } else {
        console.warn("Column Filter Focus Error - No matching column found:", field);
        return false;
      }
    }
    userGetHeaderFilterValue(field) {
      var column = this.table.columnManager.findColumn(field);
      if (column) {
        return this.getHeaderFilterValue(column);
      } else {
        console.warn("Column Filter Error - No matching column found:", field);
      }
    }
    userSetHeaderFilterValue(field, value) {
      var column = this.table.columnManager.findColumn(field);
      if (column) {
        this.setHeaderFilterValue(column, value);
      } else {
        console.warn("Column Filter Error - No matching column found:", field);
        return false;
      }
    }
    //remove filter from array
    userRemoveFilter(field, type, value) {
      this.removeFilter(field, type, value);
      this.refreshFilter();
    }
    //clear filters
    userClearFilter(all) {
      this.clearFilter(all);
      this.refreshFilter();
    }
    //clear header filters
    userClearHeaderFilter() {
      this.clearHeaderFilter();
      this.refreshFilter();
    }
    //search for specific row components
    searchRows(field, type, value) {
      return this.search("rows", field, type, value);
    }
    //search for specific data
    searchData(field, type, value) {
      return this.search("data", field, type, value);
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    initializeColumnHeaderFilter(column) {
      var def2 = column.definition;
      if (def2.headerFilter) {
        this.initializeColumn(column);
      }
    }
    //initialize column header filter
    initializeColumn(column, value) {
      var self2 = this, field = column.getField();
      function success(value2) {
        var filterType = column.modules.filter.tagType == "input" && column.modules.filter.attrType == "text" || column.modules.filter.tagType == "textarea" ? "partial" : "match", type = "", filterChangeCheck = "", filterFunc;
        if (typeof column.modules.filter.prevSuccess === "undefined" || column.modules.filter.prevSuccess !== value2) {
          column.modules.filter.prevSuccess = value2;
          if (!column.modules.filter.emptyFunc(value2)) {
            column.modules.filter.value = value2;
            switch (typeof column.definition.headerFilterFunc) {
              case "string":
                if (_Filter.filters[column.definition.headerFilterFunc]) {
                  type = column.definition.headerFilterFunc;
                  filterFunc = function(data) {
                    var params = column.definition.headerFilterFuncParams || {};
                    var fieldVal = column.getFieldValue(data);
                    params = typeof params === "function" ? params(value2, fieldVal, data) : params;
                    return _Filter.filters[column.definition.headerFilterFunc](value2, fieldVal, data, params);
                  };
                } else {
                  console.warn("Header Filter Error - Matching filter function not found: ", column.definition.headerFilterFunc);
                }
                break;
              case "function":
                filterFunc = function(data) {
                  var params = column.definition.headerFilterFuncParams || {};
                  var fieldVal = column.getFieldValue(data);
                  params = typeof params === "function" ? params(value2, fieldVal, data) : params;
                  return column.definition.headerFilterFunc(value2, fieldVal, data, params);
                };
                type = filterFunc;
                break;
            }
            if (!filterFunc) {
              switch (filterType) {
                case "partial":
                  filterFunc = function(data) {
                    var colVal = column.getFieldValue(data);
                    if (typeof colVal !== "undefined" && colVal !== null) {
                      return String(colVal).toLowerCase().indexOf(String(value2).toLowerCase()) > -1;
                    } else {
                      return false;
                    }
                  };
                  type = "like";
                  break;
                default:
                  filterFunc = function(data) {
                    return column.getFieldValue(data) == value2;
                  };
                  type = "=";
              }
            }
            self2.headerFilters[field] = { value: value2, func: filterFunc, type };
          } else {
            delete self2.headerFilters[field];
          }
          column.modules.filter.value = value2;
          filterChangeCheck = JSON.stringify(self2.headerFilters);
          if (self2.prevHeaderFilterChangeCheck !== filterChangeCheck) {
            self2.prevHeaderFilterChangeCheck = filterChangeCheck;
            self2.trackChanges();
            self2.refreshFilter();
          }
        }
        return true;
      }
      column.modules.filter = {
        success,
        attrType: false,
        tagType: false,
        emptyFunc: false
      };
      this.generateHeaderFilterElement(column);
    }
    generateHeaderFilterElement(column, initialValue, reinitialize) {
      var self2 = this, success = column.modules.filter.success, field = column.getField(), filterElement, editor, editorElement, cellWrapper, typingTimer, searchTrigger, params, onRenderedCallback;
      column.modules.filter.value = initialValue;
      function cancel() {
      }
      function onRendered(callback) {
        onRenderedCallback = callback;
      }
      if (column.modules.filter.headerElement && column.modules.filter.headerElement.parentNode) {
        column.contentElement.removeChild(column.modules.filter.headerElement.parentNode);
      }
      if (field) {
        column.modules.filter.emptyFunc = column.definition.headerFilterEmptyCheck || function(value) {
          return !value && value !== 0;
        };
        filterElement = document.createElement("div");
        filterElement.classList.add("tabulator-header-filter");
        switch (typeof column.definition.headerFilter) {
          case "string":
            if (self2.table.modules.edit.editors[column.definition.headerFilter]) {
              editor = self2.table.modules.edit.editors[column.definition.headerFilter];
              if ((column.definition.headerFilter === "tick" || column.definition.headerFilter === "tickCross") && !column.definition.headerFilterEmptyCheck) {
                column.modules.filter.emptyFunc = function(value) {
                  return value !== true && value !== false;
                };
              }
            } else {
              console.warn("Filter Error - Cannot build header filter, No such editor found: ", column.definition.editor);
            }
            break;
          case "function":
            editor = column.definition.headerFilter;
            break;
          case "boolean":
            if (column.modules.edit && column.modules.edit.editor) {
              editor = column.modules.edit.editor;
            } else {
              if (column.definition.formatter && self2.table.modules.edit.editors[column.definition.formatter]) {
                editor = self2.table.modules.edit.editors[column.definition.formatter];
                if ((column.definition.formatter === "tick" || column.definition.formatter === "tickCross") && !column.definition.headerFilterEmptyCheck) {
                  column.modules.filter.emptyFunc = function(value) {
                    return value !== true && value !== false;
                  };
                }
              } else {
                editor = self2.table.modules.edit.editors["input"];
              }
            }
            break;
        }
        if (editor) {
          cellWrapper = {
            getValue: function() {
              return typeof initialValue !== "undefined" ? initialValue : "";
            },
            getField: function() {
              return column.definition.field;
            },
            getElement: function() {
              return filterElement;
            },
            getColumn: function() {
              return column.getComponent();
            },
            getTable: () => {
              return this.table;
            },
            getType: () => {
              return "header";
            },
            getRow: function() {
              return {
                normalizeHeight: function() {
                }
              };
            }
          };
          params = column.definition.headerFilterParams || {};
          params = typeof params === "function" ? params.call(self2.table, cellWrapper) : params;
          editorElement = editor.call(this.table.modules.edit, cellWrapper, onRendered, success, cancel, params);
          if (!editorElement) {
            console.warn("Filter Error - Cannot add filter to " + field + " column, editor returned a value of false");
            return;
          }
          if (!(editorElement instanceof Node)) {
            console.warn("Filter Error - Cannot add filter to " + field + " column, editor should return an instance of Node, the editor returned:", editorElement);
            return;
          }
          self2.langBind("headerFilters|columns|" + column.definition.field, function(value) {
            editorElement.setAttribute("placeholder", typeof value !== "undefined" && value ? value : column.definition.headerFilterPlaceholder || self2.langText("headerFilters|default"));
          });
          editorElement.addEventListener("click", function(e) {
            e.stopPropagation();
            editorElement.focus();
          });
          editorElement.addEventListener("focus", (e) => {
            var left = this.table.columnManager.contentsElement.scrollLeft;
            var headerPos = this.table.rowManager.element.scrollLeft;
            if (left !== headerPos) {
              this.table.rowManager.scrollHorizontal(left);
              this.table.columnManager.scrollHorizontal(left);
            }
          });
          typingTimer = false;
          searchTrigger = function(e) {
            if (typingTimer) {
              clearTimeout(typingTimer);
            }
            typingTimer = setTimeout(function() {
              success(editorElement.value);
            }, self2.table.options.headerFilterLiveFilterDelay);
          };
          column.modules.filter.headerElement = editorElement;
          column.modules.filter.attrType = editorElement.hasAttribute("type") ? editorElement.getAttribute("type").toLowerCase() : "";
          column.modules.filter.tagType = editorElement.tagName.toLowerCase();
          if (column.definition.headerFilterLiveFilter !== false) {
            if (!(column.definition.headerFilter === "autocomplete" || column.definition.headerFilter === "tickCross" || (column.definition.editor === "autocomplete" || column.definition.editor === "tickCross") && column.definition.headerFilter === true)) {
              editorElement.addEventListener("keyup", searchTrigger);
              editorElement.addEventListener("search", searchTrigger);
              if (column.modules.filter.attrType == "number") {
                editorElement.addEventListener("change", function(e) {
                  success(editorElement.value);
                });
              }
              if (column.modules.filter.attrType == "text" && this.table.browser !== "ie") {
                editorElement.setAttribute("type", "search");
              }
            }
            if (column.modules.filter.tagType == "input" || column.modules.filter.tagType == "select" || column.modules.filter.tagType == "textarea") {
              editorElement.addEventListener("mousedown", function(e) {
                e.stopPropagation();
              });
            }
          }
          filterElement.appendChild(editorElement);
          column.contentElement.appendChild(filterElement);
          if (!reinitialize) {
            self2.headerFilterColumns.push(column);
          }
          if (onRenderedCallback) {
            onRenderedCallback();
          }
        }
      } else {
        console.warn("Filter Error - Cannot add header filter, column has no field set:", column.definition.title);
      }
    }
    //hide all header filter elements (used to ensure correct column widths in "fitData" layout mode)
    hideHeaderFilterElements() {
      this.headerFilterColumns.forEach(function(column) {
        if (column.modules.filter && column.modules.filter.headerElement) {
          column.modules.filter.headerElement.style.display = "none";
        }
      });
    }
    //show all header filter elements (used to ensure correct column widths in "fitData" layout mode)
    showHeaderFilterElements() {
      this.headerFilterColumns.forEach(function(column) {
        if (column.modules.filter && column.modules.filter.headerElement) {
          column.modules.filter.headerElement.style.display = "";
        }
      });
    }
    //programmatically set focus of header filter
    setHeaderFilterFocus(column) {
      if (column.modules.filter && column.modules.filter.headerElement) {
        column.modules.filter.headerElement.focus();
      } else {
        console.warn("Column Filter Focus Error - No header filter set on column:", column.getField());
      }
    }
    //programmatically get value of header filter
    getHeaderFilterValue(column) {
      if (column.modules.filter && column.modules.filter.headerElement) {
        return column.modules.filter.value;
      } else {
        console.warn("Column Filter Error - No header filter set on column:", column.getField());
      }
    }
    //programmatically set value of header filter
    setHeaderFilterValue(column, value) {
      if (column) {
        if (column.modules.filter && column.modules.filter.headerElement) {
          this.generateHeaderFilterElement(column, value, true);
          column.modules.filter.success(value);
        } else {
          console.warn("Column Filter Error - No header filter set on column:", column.getField());
        }
      }
    }
    reloadHeaderFilter(column) {
      if (column) {
        if (column.modules.filter && column.modules.filter.headerElement) {
          this.generateHeaderFilterElement(column, column.modules.filter.value, true);
        } else {
          console.warn("Column Filter Error - No header filter set on column:", column.getField());
        }
      }
    }
    refreshFilter() {
      if (this.tableInitialized) {
        if (this.table.options.filterMode === "remote") {
          this.reloadData(null, false, false);
        } else {
          this.refreshData(true);
        }
      }
    }
    //check if the filters has changed since last use
    trackChanges() {
      this.changed = true;
      this.dispatch("filter-changed");
    }
    //check if the filters has changed since last use
    hasChanged() {
      var changed = this.changed;
      this.changed = false;
      return changed;
    }
    //set standard filters
    setFilter(field, type, value, params) {
      this.filterList = [];
      if (!Array.isArray(field)) {
        field = [{ field, type, value, params }];
      }
      this.addFilter(field);
    }
    //add filter to array
    addFilter(field, type, value, params) {
      var changed = false;
      if (!Array.isArray(field)) {
        field = [{ field, type, value, params }];
      }
      field.forEach((filter) => {
        filter = this.findFilter(filter);
        if (filter) {
          this.filterList.push(filter);
          changed = true;
        }
      });
      if (changed) {
        this.trackChanges();
      }
    }
    findFilter(filter) {
      var column;
      if (Array.isArray(filter)) {
        return this.findSubFilters(filter);
      }
      var filterFunc = false;
      if (typeof filter.field == "function") {
        filterFunc = function(data) {
          return filter.field(data, filter.type || {});
        };
      } else {
        if (_Filter.filters[filter.type]) {
          column = this.table.columnManager.getColumnByField(filter.field);
          if (column) {
            filterFunc = function(data) {
              return _Filter.filters[filter.type](filter.value, column.getFieldValue(data), data, filter.params || {});
            };
          } else {
            filterFunc = function(data) {
              return _Filter.filters[filter.type](filter.value, data[filter.field], data, filter.params || {});
            };
          }
        } else {
          console.warn("Filter Error - No such filter type found, ignoring: ", filter.type);
        }
      }
      filter.func = filterFunc;
      return filter.func ? filter : false;
    }
    findSubFilters(filters) {
      var output = [];
      filters.forEach((filter) => {
        filter = this.findFilter(filter);
        if (filter) {
          output.push(filter);
        }
      });
      return output.length ? output : false;
    }
    //get all filters
    getFilters(all, ajax) {
      var output = [];
      if (all) {
        output = this.getHeaderFilters();
      }
      if (ajax) {
        output.forEach(function(item) {
          if (typeof item.type == "function") {
            item.type = "function";
          }
        });
      }
      output = output.concat(this.filtersToArray(this.filterList, ajax));
      return output;
    }
    //filter to Object
    filtersToArray(filterList, ajax) {
      var output = [];
      filterList.forEach((filter) => {
        var item;
        if (Array.isArray(filter)) {
          output.push(this.filtersToArray(filter, ajax));
        } else {
          item = { field: filter.field, type: filter.type, value: filter.value };
          if (ajax) {
            if (typeof item.type == "function") {
              item.type = "function";
            }
          }
          output.push(item);
        }
      });
      return output;
    }
    //get all filters
    getHeaderFilters() {
      var output = [];
      for (var key in this.headerFilters) {
        output.push({ field: key, type: this.headerFilters[key].type, value: this.headerFilters[key].value });
      }
      return output;
    }
    //remove filter from array
    removeFilter(field, type, value) {
      if (!Array.isArray(field)) {
        field = [{ field, type, value }];
      }
      field.forEach((filter) => {
        var index7 = -1;
        if (typeof filter.field == "object") {
          index7 = this.filterList.findIndex((element) => {
            return filter === element;
          });
        } else {
          index7 = this.filterList.findIndex((element) => {
            return filter.field === element.field && filter.type === element.type && filter.value === element.value;
          });
        }
        if (index7 > -1) {
          this.filterList.splice(index7, 1);
        } else {
          console.warn("Filter Error - No matching filter type found, ignoring: ", filter.type);
        }
      });
      this.trackChanges();
    }
    //clear filters
    clearFilter(all) {
      this.filterList = [];
      if (all) {
        this.clearHeaderFilter();
      }
      this.trackChanges();
    }
    //clear header filters
    clearHeaderFilter() {
      this.headerFilters = {};
      this.prevHeaderFilterChangeCheck = "{}";
      this.headerFilterColumns.forEach((column) => {
        if (typeof column.modules.filter.value !== "undefined") {
          delete column.modules.filter.value;
        }
        column.modules.filter.prevSuccess = void 0;
        this.reloadHeaderFilter(column);
      });
      this.trackChanges();
    }
    //search data and return matching rows
    search(searchType, field, type, value) {
      var activeRows = [], filterList = [];
      if (!Array.isArray(field)) {
        field = [{ field, type, value }];
      }
      field.forEach((filter) => {
        filter = this.findFilter(filter);
        if (filter) {
          filterList.push(filter);
        }
      });
      this.table.rowManager.rows.forEach((row) => {
        var match = true;
        filterList.forEach((filter) => {
          if (!this.filterRecurse(filter, row.getData())) {
            match = false;
          }
        });
        if (match) {
          activeRows.push(searchType === "data" ? row.getData("data") : row.getComponent());
        }
      });
      return activeRows;
    }
    //filter row array
    filter(rowList, filters) {
      var activeRows = [], activeRowComponents = [];
      if (this.subscribedExternal("dataFiltering")) {
        this.dispatchExternal("dataFiltering", this.getFilters(true));
      }
      if (this.table.options.filterMode !== "remote" && (this.filterList.length || Object.keys(this.headerFilters).length)) {
        rowList.forEach((row) => {
          if (this.filterRow(row)) {
            activeRows.push(row);
          }
        });
      } else {
        activeRows = rowList.slice(0);
      }
      if (this.subscribedExternal("dataFiltered")) {
        activeRows.forEach((row) => {
          activeRowComponents.push(row.getComponent());
        });
        this.dispatchExternal("dataFiltered", this.getFilters(true), activeRowComponents);
      }
      return activeRows;
    }
    //filter individual row
    filterRow(row, filters) {
      var match = true, data = row.getData();
      this.filterList.forEach((filter) => {
        if (!this.filterRecurse(filter, data)) {
          match = false;
        }
      });
      for (var field in this.headerFilters) {
        if (!this.headerFilters[field].func(data)) {
          match = false;
        }
      }
      return match;
    }
    filterRecurse(filter, data) {
      var match = false;
      if (Array.isArray(filter)) {
        filter.forEach((subFilter) => {
          if (this.filterRecurse(subFilter, data)) {
            match = true;
          }
        });
      } else {
        match = filter.func(data);
      }
      return match;
    }
  };
  function plaintext(cell, formatterParams, onRendered) {
    return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
  }
  function html(cell, formatterParams, onRendered) {
    return cell.getValue();
  }
  function textarea(cell, formatterParams, onRendered) {
    cell.getElement().style.whiteSpace = "pre-wrap";
    return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
  }
  function money(cell, formatterParams, onRendered) {
    var floatVal = parseFloat(cell.getValue()), sign = "", number2, integer, decimal, rgx, value;
    var decimalSym = formatterParams.decimal || ".";
    var thousandSym = formatterParams.thousand || ",";
    var negativeSign = formatterParams.negativeSign || "-";
    var symbol = formatterParams.symbol || "";
    var after = !!formatterParams.symbolAfter;
    var precision = typeof formatterParams.precision !== "undefined" ? formatterParams.precision : 2;
    if (isNaN(floatVal)) {
      return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));
    }
    if (floatVal < 0) {
      floatVal = Math.abs(floatVal);
      sign = negativeSign;
    }
    number2 = precision !== false ? floatVal.toFixed(precision) : floatVal;
    number2 = String(number2).split(".");
    integer = number2[0];
    decimal = number2.length > 1 ? decimalSym + number2[1] : "";
    if (formatterParams.thousand !== false) {
      rgx = /(\d+)(\d{3})/;
      while (rgx.test(integer)) {
        integer = integer.replace(rgx, "$1" + thousandSym + "$2");
      }
    }
    value = integer + decimal;
    if (sign === true) {
      value = "(" + value + ")";
      return after ? value + symbol : symbol + value;
    } else {
      return after ? sign + value + symbol : sign + symbol + value;
    }
  }
  function link(cell, formatterParams, onRendered) {
    var value = cell.getValue(), urlPrefix = formatterParams.urlPrefix || "", download = formatterParams.download, label = value, el = document.createElement("a"), data;
    function labelTraverse(path, data2) {
      var item = path.shift(), value2 = data2[item];
      if (path.length && typeof value2 === "object") {
        return labelTraverse(path, value2);
      }
      return value2;
    }
    if (formatterParams.labelField) {
      data = cell.getData();
      label = labelTraverse(formatterParams.labelField.split(this.table.options.nestedFieldSeparator), data);
    }
    if (formatterParams.label) {
      switch (typeof formatterParams.label) {
        case "string":
          label = formatterParams.label;
          break;
        case "function":
          label = formatterParams.label(cell);
          break;
      }
    }
    if (label) {
      if (formatterParams.urlField) {
        data = cell.getData();
        value = Helpers.retrieveNestedData(this.table.options.nestedFieldSeparator, formatterParams.urlField, data);
      }
      if (formatterParams.url) {
        switch (typeof formatterParams.url) {
          case "string":
            value = formatterParams.url;
            break;
          case "function":
            value = formatterParams.url(cell);
            break;
        }
      }
      el.setAttribute("href", urlPrefix + value);
      if (formatterParams.target) {
        el.setAttribute("target", formatterParams.target);
      }
      if (formatterParams.download) {
        if (typeof download == "function") {
          download = download(cell);
        } else {
          download = download === true ? "" : download;
        }
        el.setAttribute("download", download);
      }
      el.innerHTML = this.emptyToSpace(this.sanitizeHTML(label));
      return el;
    } else {
      return "&nbsp;";
    }
  }
  function image(cell, formatterParams, onRendered) {
    var el = document.createElement("img"), src = cell.getValue();
    if (formatterParams.urlPrefix) {
      src = formatterParams.urlPrefix + cell.getValue();
    }
    if (formatterParams.urlSuffix) {
      src = src + formatterParams.urlSuffix;
    }
    el.setAttribute("src", src);
    switch (typeof formatterParams.height) {
      case "number":
        el.style.height = formatterParams.height + "px";
        break;
      case "string":
        el.style.height = formatterParams.height;
        break;
    }
    switch (typeof formatterParams.width) {
      case "number":
        el.style.width = formatterParams.width + "px";
        break;
      case "string":
        el.style.width = formatterParams.width;
        break;
    }
    el.addEventListener("load", function() {
      cell.getRow().normalizeHeight();
    });
    return el;
  }
  function tickCross(cell, formatterParams, onRendered) {
    var value = cell.getValue(), element = cell.getElement(), empty = formatterParams.allowEmpty, truthy = formatterParams.allowTruthy, trueValueSet = Object.keys(formatterParams).includes("trueValue"), tick = typeof formatterParams.tickElement !== "undefined" ? formatterParams.tickElement : '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>', cross = typeof formatterParams.crossElement !== "undefined" ? formatterParams.crossElement : '<svg enable-background="new 0 0 24 24" height="14" width="14"  viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';
    if (trueValueSet && value === formatterParams.trueValue || !trueValueSet && (truthy && value || (value === true || value === "true" || value === "True" || value === 1 || value === "1"))) {
      element.setAttribute("aria-checked", true);
      return tick || "";
    } else {
      if (empty && (value === "null" || value === "" || value === null || typeof value === "undefined")) {
        element.setAttribute("aria-checked", "mixed");
        return "";
      } else {
        element.setAttribute("aria-checked", false);
        return cross || "";
      }
    }
  }
  function datetime$1(cell, formatterParams, onRendered) {
    var DT = this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime");
    var inputFormat = formatterParams.inputFormat || "yyyy-MM-dd HH:mm:ss";
    var outputFormat = formatterParams.outputFormat || "dd/MM/yyyy HH:mm:ss";
    var invalid = typeof formatterParams.invalidPlaceholder !== "undefined" ? formatterParams.invalidPlaceholder : "";
    var value = cell.getValue();
    if (typeof DT != "undefined") {
      var newDatetime;
      if (DT.isDateTime(value)) {
        newDatetime = value;
      } else if (inputFormat === "iso") {
        newDatetime = DT.fromISO(String(value));
      } else {
        newDatetime = DT.fromFormat(String(value), inputFormat);
      }
      if (newDatetime.isValid) {
        if (formatterParams.timezone) {
          newDatetime = newDatetime.setZone(formatterParams.timezone);
        }
        return newDatetime.toFormat(outputFormat);
      } else {
        if (invalid === true || !value) {
          return value;
        } else if (typeof invalid === "function") {
          return invalid(value);
        } else {
          return invalid;
        }
      }
    } else {
      console.error("Format Error - 'datetime' formatter is dependant on luxon.js");
    }
  }
  function datetimediff(cell, formatterParams, onRendered) {
    var DT = this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime");
    var inputFormat = formatterParams.inputFormat || "yyyy-MM-dd HH:mm:ss";
    var invalid = typeof formatterParams.invalidPlaceholder !== "undefined" ? formatterParams.invalidPlaceholder : "";
    var suffix = typeof formatterParams.suffix !== "undefined" ? formatterParams.suffix : false;
    var unit = typeof formatterParams.unit !== "undefined" ? formatterParams.unit : "days";
    var humanize = typeof formatterParams.humanize !== "undefined" ? formatterParams.humanize : false;
    var date2 = typeof formatterParams.date !== "undefined" ? formatterParams.date : DT.now();
    var value = cell.getValue();
    if (typeof DT != "undefined") {
      var newDatetime;
      if (DT.isDateTime(value)) {
        newDatetime = value;
      } else if (inputFormat === "iso") {
        newDatetime = DT.fromISO(String(value));
      } else {
        newDatetime = DT.fromFormat(String(value), inputFormat);
      }
      if (newDatetime.isValid) {
        if (humanize) {
          return newDatetime.diff(date2, unit).toHuman() + (suffix ? " " + suffix : "");
        } else {
          return parseInt(newDatetime.diff(date2, unit)[unit]) + (suffix ? " " + suffix : "");
        }
      } else {
        if (invalid === true) {
          return value;
        } else if (typeof invalid === "function") {
          return invalid(value);
        } else {
          return invalid;
        }
      }
    } else {
      console.error("Format Error - 'datetimediff' formatter is dependant on luxon.js");
    }
  }
  function lookup(cell, formatterParams, onRendered) {
    var value = cell.getValue();
    if (typeof formatterParams[value] === "undefined") {
      console.warn("Missing display value for " + value);
      return value;
    }
    return formatterParams[value];
  }
  function star(cell, formatterParams, onRendered) {
    var value = cell.getValue(), element = cell.getElement(), maxStars = formatterParams && formatterParams.stars ? formatterParams.stars : 5, stars = document.createElement("span"), star2 = document.createElementNS("http://www.w3.org/2000/svg", "svg"), starActive = '<polygon fill="#FFEA00" stroke="#C1AB60" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>', starInactive = '<polygon fill="#D2D2D2" stroke="#686868" stroke-width="37.6152" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 "/>';
    stars.style.verticalAlign = "middle";
    star2.setAttribute("width", "14");
    star2.setAttribute("height", "14");
    star2.setAttribute("viewBox", "0 0 512 512");
    star2.setAttribute("xml:space", "preserve");
    star2.style.padding = "0 1px";
    value = value && !isNaN(value) ? parseInt(value) : 0;
    value = Math.max(0, Math.min(value, maxStars));
    for (var i = 1; i <= maxStars; i++) {
      var nextStar = star2.cloneNode(true);
      nextStar.innerHTML = i <= value ? starActive : starInactive;
      stars.appendChild(nextStar);
    }
    element.style.whiteSpace = "nowrap";
    element.style.overflow = "hidden";
    element.style.textOverflow = "ellipsis";
    element.setAttribute("aria-label", value);
    return stars;
  }
  function traffic(cell, formatterParams, onRendered) {
    var value = this.sanitizeHTML(cell.getValue()) || 0, el = document.createElement("span"), max2 = formatterParams && formatterParams.max ? formatterParams.max : 100, min2 = formatterParams && formatterParams.min ? formatterParams.min : 0, colors = formatterParams && typeof formatterParams.color !== "undefined" ? formatterParams.color : ["red", "orange", "green"], color2 = "#666666", percent, percentValue;
    if (isNaN(value) || typeof cell.getValue() === "undefined") {
      return;
    }
    el.classList.add("tabulator-traffic-light");
    percentValue = parseFloat(value) <= max2 ? parseFloat(value) : max2;
    percentValue = parseFloat(percentValue) >= min2 ? parseFloat(percentValue) : min2;
    percent = (max2 - min2) / 100;
    percentValue = Math.round((percentValue - min2) / percent);
    switch (typeof colors) {
      case "string":
        color2 = colors;
        break;
      case "function":
        color2 = colors(value);
        break;
      case "object":
        if (Array.isArray(colors)) {
          var unit = 100 / colors.length;
          var index7 = Math.floor(percentValue / unit);
          index7 = Math.min(index7, colors.length - 1);
          index7 = Math.max(index7, 0);
          color2 = colors[index7];
          break;
        }
    }
    el.style.backgroundColor = color2;
    return el;
  }
  function progress(cell, formatterParams = {}, onRendered) {
    var value = this.sanitizeHTML(cell.getValue()) || 0, element = cell.getElement(), max2 = formatterParams.max ? formatterParams.max : 100, min2 = formatterParams.min ? formatterParams.min : 0, legendAlign = formatterParams.legendAlign ? formatterParams.legendAlign : "center", percent, percentValue, color2, legend, legendColor;
    percentValue = parseFloat(value) <= max2 ? parseFloat(value) : max2;
    percentValue = parseFloat(percentValue) >= min2 ? parseFloat(percentValue) : min2;
    percent = (max2 - min2) / 100;
    percentValue = Math.round((percentValue - min2) / percent);
    switch (typeof formatterParams.color) {
      case "string":
        color2 = formatterParams.color;
        break;
      case "function":
        color2 = formatterParams.color(value);
        break;
      case "object":
        if (Array.isArray(formatterParams.color)) {
          let unit = 100 / formatterParams.color.length;
          let index7 = Math.floor(percentValue / unit);
          index7 = Math.min(index7, formatterParams.color.length - 1);
          index7 = Math.max(index7, 0);
          color2 = formatterParams.color[index7];
          break;
        }
      default:
        color2 = "#2DC214";
    }
    switch (typeof formatterParams.legend) {
      case "string":
        legend = formatterParams.legend;
        break;
      case "function":
        legend = formatterParams.legend(value);
        break;
      case "boolean":
        legend = value;
        break;
      default:
        legend = false;
    }
    switch (typeof formatterParams.legendColor) {
      case "string":
        legendColor = formatterParams.legendColor;
        break;
      case "function":
        legendColor = formatterParams.legendColor(value);
        break;
      case "object":
        if (Array.isArray(formatterParams.legendColor)) {
          let unit = 100 / formatterParams.legendColor.length;
          let index7 = Math.floor(percentValue / unit);
          index7 = Math.min(index7, formatterParams.legendColor.length - 1);
          index7 = Math.max(index7, 0);
          legendColor = formatterParams.legendColor[index7];
        }
        break;
      default:
        legendColor = "#000";
    }
    element.style.minWidth = "30px";
    element.style.position = "relative";
    element.setAttribute("aria-label", percentValue);
    var barEl = document.createElement("div");
    barEl.style.display = "inline-block";
    barEl.style.width = percentValue + "%";
    barEl.style.backgroundColor = color2;
    barEl.style.height = "100%";
    barEl.setAttribute("data-max", max2);
    barEl.setAttribute("data-min", min2);
    var barContainer = document.createElement("div");
    barContainer.style.position = "relative";
    barContainer.style.width = "100%";
    barContainer.style.height = "100%";
    if (legend) {
      var legendEl = document.createElement("div");
      legendEl.style.position = "absolute";
      legendEl.style.top = 0;
      legendEl.style.left = 0;
      legendEl.style.textAlign = legendAlign;
      legendEl.style.width = "100%";
      legendEl.style.color = legendColor;
      legendEl.innerHTML = legend;
    }
    onRendered(function() {
      if (!(cell instanceof CellComponent)) {
        var holderEl = document.createElement("div");
        holderEl.style.position = "absolute";
        holderEl.style.top = "4px";
        holderEl.style.bottom = "4px";
        holderEl.style.left = "4px";
        holderEl.style.right = "4px";
        element.appendChild(holderEl);
        element = holderEl;
      }
      element.appendChild(barContainer);
      barContainer.appendChild(barEl);
      if (legend) {
        barContainer.appendChild(legendEl);
      }
    });
    return "";
  }
  function color(cell, formatterParams, onRendered) {
    cell.getElement().style.backgroundColor = this.sanitizeHTML(cell.getValue());
    return "";
  }
  function buttonTick(cell, formatterParams, onRendered) {
    return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#2DC214" clip-rule="evenodd" d="M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z" fill-rule="evenodd"/></svg>';
  }
  function buttonCross(cell, formatterParams, onRendered) {
    return '<svg enable-background="new 0 0 24 24" height="14" width="14" viewBox="0 0 24 24" xml:space="preserve" ><path fill="#CE1515" d="M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z"/></svg>';
  }
  function toggle(cell, formatterParams, onRendered) {
    var value = cell.getValue(), size2 = formatterParams.size || 15, sizePx = size2 + "px", containEl, switchEl, onValue = formatterParams.hasOwnProperty("onValue") ? formatterParams.onValue : true, offValue = formatterParams.hasOwnProperty("offValue") ? formatterParams.offValue : false, state = formatterParams.onTruthy ? value : value === onValue;
    containEl = document.createElement("div");
    containEl.classList.add("tabulator-toggle");
    if (state) {
      containEl.classList.add("tabulator-toggle-on");
      containEl.style.flexDirection = "row-reverse";
      if (formatterParams.onColor) {
        containEl.style.background = formatterParams.onColor;
      }
    } else {
      if (formatterParams.offColor) {
        containEl.style.background = formatterParams.offColor;
      }
    }
    containEl.style.width = 2.5 * size2 + "px";
    containEl.style.borderRadius = sizePx;
    if (formatterParams.clickable) {
      containEl.addEventListener("click", (e) => {
        cell.setValue(state ? offValue : onValue);
      });
    }
    switchEl = document.createElement("div");
    switchEl.classList.add("tabulator-toggle-switch");
    switchEl.style.height = sizePx;
    switchEl.style.width = sizePx;
    switchEl.style.borderRadius = sizePx;
    containEl.appendChild(switchEl);
    return containEl;
  }
  function rownum(cell, formatterParams, onRendered) {
    var content = document.createElement("span");
    var row = cell.getRow();
    var table = cell.getTable();
    row.watchPosition((position) => {
      if (formatterParams.relativeToPage) {
        position += table.modules.page.getPageSize() * (table.modules.page.getPage() - 1);
      }
      content.innerText = position;
    });
    return content;
  }
  function handle(cell, formatterParams, onRendered) {
    cell.getElement().classList.add("tabulator-row-handle");
    return "<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>";
  }
  function adaptable(cell, params, onRendered) {
    var lookup2, formatterFunc, formatterParams;
    function defaultLookup(cell2) {
      var value = cell2.getValue(), formatter = "plaintext";
      switch (typeof value) {
        case "boolean":
          formatter = "tickCross";
          break;
        case "string":
          if (value.includes("\n")) {
            formatter = "textarea";
          }
          break;
      }
      return formatter;
    }
    lookup2 = params.formatterLookup ? params.formatterLookup(cell) : defaultLookup(cell);
    if (params.paramsLookup) {
      formatterParams = typeof params.paramsLookup === "function" ? params.paramsLookup(lookup2, cell) : params.paramsLookup[lookup2];
    }
    formatterFunc = this.table.modules.format.lookupFormatter(lookup2);
    return formatterFunc.call(this, cell, formatterParams || {}, onRendered);
  }
  function array$2(cell, formatterParams, onRendered) {
    var delimiter = formatterParams.delimiter || ",", value = cell.getValue(), table = this.table, valueMap;
    if (formatterParams.valueMap) {
      if (typeof formatterParams.valueMap === "string") {
        valueMap = function(value2) {
          return value2.map((item) => {
            return Helpers.retrieveNestedData(table.options.nestedFieldSeparator, formatterParams.valueMap, item);
          });
        };
      } else {
        valueMap = formatterParams.valueMap;
      }
    }
    if (Array.isArray(value)) {
      if (valueMap) {
        value = valueMap(value);
      }
      return value.join(delimiter);
    } else {
      return value;
    }
  }
  function json$1(cell, formatterParams, onRendered) {
    var indent = formatterParams.indent || "	", multiline = typeof formatterParams.multiline === "undefined" ? true : formatterParams.multiline, replacer2 = formatterParams.replacer || null, value = cell.getValue();
    if (multiline) {
      cell.getElement().style.whiteSpace = "pre-wrap";
    }
    return JSON.stringify(value, replacer2, indent);
  }
  var defaultFormatters = {
    plaintext,
    html,
    textarea,
    money,
    link,
    image,
    tickCross,
    datetime: datetime$1,
    datetimediff,
    lookup,
    star,
    traffic,
    progress,
    color,
    buttonTick,
    buttonCross,
    toggle,
    rownum,
    handle,
    adaptable,
    array: array$2,
    json: json$1
  };
  var Format = class _Format extends Module {
    static moduleName = "format";
    //load defaults
    static formatters = defaultFormatters;
    constructor(table) {
      super(table);
      this.registerColumnOption("formatter");
      this.registerColumnOption("formatterParams");
      this.registerColumnOption("formatterPrint");
      this.registerColumnOption("formatterPrintParams");
      this.registerColumnOption("formatterClipboard");
      this.registerColumnOption("formatterClipboardParams");
      this.registerColumnOption("formatterHtmlOutput");
      this.registerColumnOption("formatterHtmlOutputParams");
      this.registerColumnOption("titleFormatter");
      this.registerColumnOption("titleFormatterParams");
    }
    initialize() {
      this.subscribe("cell-format", this.formatValue.bind(this));
      this.subscribe("cell-rendered", this.cellRendered.bind(this));
      this.subscribe("column-layout", this.initializeColumn.bind(this));
      this.subscribe("column-format", this.formatHeader.bind(this));
    }
    //initialize column formatter
    initializeColumn(column) {
      column.modules.format = this.lookupTypeFormatter(column, "");
      if (typeof column.definition.formatterPrint !== "undefined") {
        column.modules.format.print = this.lookupTypeFormatter(column, "Print");
      }
      if (typeof column.definition.formatterClipboard !== "undefined") {
        column.modules.format.clipboard = this.lookupTypeFormatter(column, "Clipboard");
      }
      if (typeof column.definition.formatterHtmlOutput !== "undefined") {
        column.modules.format.htmlOutput = this.lookupTypeFormatter(column, "HtmlOutput");
      }
    }
    lookupTypeFormatter(column, type) {
      var config = { params: column.definition["formatter" + type + "Params"] || {} }, formatter = column.definition["formatter" + type];
      config.formatter = this.lookupFormatter(formatter);
      return config;
    }
    lookupFormatter(formatter) {
      var formatterFunc;
      switch (typeof formatter) {
        case "string":
          if (_Format.formatters[formatter]) {
            formatterFunc = _Format.formatters[formatter];
          } else {
            console.warn("Formatter Error - No such formatter found: ", formatter);
            formatterFunc = _Format.formatters.plaintext;
          }
          break;
        case "function":
          formatterFunc = formatter;
          break;
        default:
          formatterFunc = _Format.formatters.plaintext;
          break;
      }
      return formatterFunc;
    }
    cellRendered(cell) {
      if (cell.modules.format && cell.modules.format.renderedCallback && !cell.modules.format.rendered) {
        cell.modules.format.renderedCallback();
        cell.modules.format.rendered = true;
      }
    }
    //return a formatted value for a column header
    formatHeader(column, title, el) {
      var formatter, params, onRendered, mockCell;
      if (column.definition.titleFormatter) {
        formatter = this.lookupFormatter(column.definition.titleFormatter);
        onRendered = (callback) => {
          column.titleFormatterRendered = callback;
        };
        mockCell = {
          getValue: function() {
            return title;
          },
          getElement: function() {
            return el;
          },
          getType: function() {
            return "header";
          },
          getColumn: function() {
            return column.getComponent();
          },
          getTable: () => {
            return this.table;
          }
        };
        params = column.definition.titleFormatterParams || {};
        params = typeof params === "function" ? params() : params;
        return formatter.call(this, mockCell, params, onRendered);
      } else {
        return title;
      }
    }
    //return a formatted value for a cell
    formatValue(cell) {
      var component = cell.getComponent(), params = typeof cell.column.modules.format.params === "function" ? cell.column.modules.format.params(component) : cell.column.modules.format.params;
      function onRendered(callback) {
        if (!cell.modules.format) {
          cell.modules.format = {};
        }
        cell.modules.format.renderedCallback = callback;
        cell.modules.format.rendered = false;
      }
      return cell.column.modules.format.formatter.call(this, component, params, onRendered);
    }
    formatExportValue(cell, type) {
      var formatter = cell.column.modules.format[type], params;
      if (formatter) {
        let onRendered = function(callback) {
          if (!cell.modules.format) {
            cell.modules.format = {};
          }
          cell.modules.format.renderedCallback = callback;
          cell.modules.format.rendered = false;
        };
        params = typeof formatter.params === "function" ? formatter.params(cell.getComponent()) : formatter.params;
        return formatter.formatter.call(this, cell.getComponent(), params, onRendered);
      } else {
        return this.formatValue(cell);
      }
    }
    sanitizeHTML(value) {
      if (value) {
        var entityMap = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;",
          "/": "&#x2F;",
          "`": "&#x60;",
          "=": "&#x3D;"
        };
        return String(value).replace(/[&<>"'`=/]/g, function(s) {
          return entityMap[s];
        });
      } else {
        return value;
      }
    }
    emptyToSpace(value) {
      return value === null || typeof value === "undefined" || value === "" ? "&nbsp;" : value;
    }
  };
  var FrozenColumns = class extends Module {
    static moduleName = "frozenColumns";
    constructor(table) {
      super(table);
      this.leftColumns = [];
      this.rightColumns = [];
      this.initializationMode = "left";
      this.active = false;
      this.blocked = true;
      this.registerColumnOption("frozen");
    }
    //reset initial state
    reset() {
      this.initializationMode = "left";
      this.leftColumns = [];
      this.rightColumns = [];
      this.active = false;
    }
    initialize() {
      this.subscribe("cell-layout", this.layoutCell.bind(this));
      this.subscribe("column-init", this.initializeColumn.bind(this));
      this.subscribe("column-width", this.layout.bind(this));
      this.subscribe("row-layout-after", this.layoutRow.bind(this));
      this.subscribe("table-layout", this.layout.bind(this));
      this.subscribe("columns-loading", this.reset.bind(this));
      this.subscribe("column-add", this.reinitializeColumns.bind(this));
      this.subscribe("column-deleted", this.reinitializeColumns.bind(this));
      this.subscribe("column-hide", this.reinitializeColumns.bind(this));
      this.subscribe("column-show", this.reinitializeColumns.bind(this));
      this.subscribe("columns-loaded", this.reinitializeColumns.bind(this));
      this.subscribe("table-redraw", this.layout.bind(this));
      this.subscribe("layout-refreshing", this.blockLayout.bind(this));
      this.subscribe("layout-refreshed", this.unblockLayout.bind(this));
      this.subscribe("scrollbar-vertical", this.adjustForScrollbar.bind(this));
    }
    blockLayout() {
      this.blocked = true;
    }
    unblockLayout() {
      this.blocked = false;
    }
    layoutCell(cell) {
      this.layoutElement(cell.element, cell.column);
    }
    reinitializeColumns() {
      this.reset();
      this.table.columnManager.columnsByIndex.forEach((column) => {
        this.initializeColumn(column);
      });
      this.layout();
    }
    //initialize specific column
    initializeColumn(column) {
      var config = { margin: 0, edge: false };
      if (!column.isGroup) {
        if (this.frozenCheck(column)) {
          config.position = this.initializationMode;
          if (this.initializationMode == "left") {
            this.leftColumns.push(column);
          } else {
            this.rightColumns.unshift(column);
          }
          this.active = true;
          column.modules.frozen = config;
        } else {
          this.initializationMode = "right";
        }
      }
    }
    frozenCheck(column) {
      if (column.parent.isGroup && column.definition.frozen) {
        console.warn("Frozen Column Error - Parent column group must be frozen, not individual columns or sub column groups");
      }
      if (column.parent.isGroup) {
        return this.frozenCheck(column.parent);
      } else {
        return column.definition.frozen;
      }
    }
    //layout calculation rows
    layoutCalcRows() {
      if (this.table.modExists("columnCalcs")) {
        if (this.table.modules.columnCalcs.topInitialized && this.table.modules.columnCalcs.topRow) {
          this.layoutRow(this.table.modules.columnCalcs.topRow);
        }
        if (this.table.modules.columnCalcs.botInitialized && this.table.modules.columnCalcs.botRow) {
          this.layoutRow(this.table.modules.columnCalcs.botRow);
        }
        if (this.table.modExists("groupRows")) {
          this.layoutGroupCalcs(this.table.modules.groupRows.getGroups());
        }
      }
    }
    layoutGroupCalcs(groups) {
      groups.forEach((group) => {
        if (group.calcs.top) {
          this.layoutRow(group.calcs.top);
        }
        if (group.calcs.bottom) {
          this.layoutRow(group.calcs.bottom);
        }
        if (group.groupList && group.groupList.length) {
          this.layoutGroupCalcs(group.groupList);
        }
      });
    }
    //calculate column positions and layout headers
    layoutColumnPosition(allCells) {
      var leftParents = [];
      var leftMargin = 0;
      var rightMargin = 0;
      this.leftColumns.forEach((column, i) => {
        column.modules.frozen.marginValue = leftMargin;
        column.modules.frozen.margin = column.modules.frozen.marginValue + "px";
        if (column.visible) {
          leftMargin += column.getWidth();
        }
        if (i == this.leftColumns.length - 1) {
          column.modules.frozen.edge = true;
        } else {
          column.modules.frozen.edge = false;
        }
        if (column.parent.isGroup) {
          var parentEl = this.getColGroupParentElement(column);
          if (!leftParents.includes(parentEl)) {
            this.layoutElement(parentEl, column);
            leftParents.push(parentEl);
          }
          parentEl.classList.toggle("tabulator-frozen-left", column.modules.frozen.edge && column.modules.frozen.position === "left");
          parentEl.classList.toggle("tabulator-frozen-right", column.modules.frozen.edge && column.modules.frozen.position === "right");
        } else {
          this.layoutElement(column.getElement(), column);
        }
        if (allCells) {
          column.cells.forEach((cell) => {
            this.layoutElement(cell.getElement(true), column);
          });
        }
      });
      this.rightColumns.forEach((column, i) => {
        column.modules.frozen.marginValue = rightMargin;
        column.modules.frozen.margin = column.modules.frozen.marginValue + "px";
        if (column.visible) {
          rightMargin += column.getWidth();
        }
        if (i == this.rightColumns.length - 1) {
          column.modules.frozen.edge = true;
        } else {
          column.modules.frozen.edge = false;
        }
        if (column.parent.isGroup) {
          this.layoutElement(this.getColGroupParentElement(column), column);
        } else {
          this.layoutElement(column.getElement(), column);
        }
        if (allCells) {
          column.cells.forEach((cell) => {
            this.layoutElement(cell.getElement(true), column);
          });
        }
      });
    }
    getColGroupParentElement(column) {
      return column.parent.isGroup ? this.getColGroupParentElement(column.parent) : column.getElement();
    }
    //layout columns appropriately
    layout() {
      if (this.active && !this.blocked) {
        this.layoutColumnPosition();
        this.reinitializeRows();
        this.layoutCalcRows();
      }
    }
    reinitializeRows() {
      var visibleRows = this.table.rowManager.getVisibleRows(true);
      var otherRows = this.table.rowManager.getRows().filter((row) => !visibleRows.includes(row));
      otherRows.forEach((row) => {
        row.deinitialize();
      });
      visibleRows.forEach((row) => {
        if (row.type === "row") {
          this.layoutRow(row);
        }
      });
    }
    layoutRow(row) {
      if (this.table.options.layout === "fitDataFill" && this.rightColumns.length) {
        this.table.rowManager.getTableElement().style.minWidth = "calc(100% - " + this.rightMargin + ")";
      }
      this.leftColumns.forEach((column) => {
        var cell = row.getCell(column);
        if (cell) {
          this.layoutElement(cell.getElement(true), column);
        }
      });
      this.rightColumns.forEach((column) => {
        var cell = row.getCell(column);
        if (cell) {
          this.layoutElement(cell.getElement(true), column);
        }
      });
    }
    layoutElement(element, column) {
      var position;
      if (column.modules.frozen && element) {
        element.style.position = "sticky";
        if (this.table.rtl) {
          position = column.modules.frozen.position === "left" ? "right" : "left";
        } else {
          position = column.modules.frozen.position;
        }
        element.style[position] = column.modules.frozen.margin;
        element.classList.add("tabulator-frozen");
        element.classList.toggle("tabulator-frozen-left", column.modules.frozen.edge && column.modules.frozen.position === "left");
        element.classList.toggle("tabulator-frozen-right", column.modules.frozen.edge && column.modules.frozen.position === "right");
      }
    }
    adjustForScrollbar(width) {
      if (this.rightColumns.length) {
        this.table.columnManager.getContentsElement().style.width = "calc(100% - " + width + "px)";
      }
    }
    getFrozenColumns() {
      return this.leftColumns.concat(this.rightColumns);
    }
    _calcSpace(columns, index7) {
      var width = 0;
      for (let i = 0; i < index7; i++) {
        if (columns[i].visible) {
          width += columns[i].getWidth();
        }
      }
      return width;
    }
  };
  var FrozenRows = class extends Module {
    static moduleName = "frozenRows";
    constructor(table) {
      super(table);
      this.topElement = document.createElement("div");
      this.rows = [];
      this.registerComponentFunction("row", "freeze", this.freezeRow.bind(this));
      this.registerComponentFunction("row", "unfreeze", this.unfreezeRow.bind(this));
      this.registerComponentFunction("row", "isFrozen", this.isRowFrozen.bind(this));
      this.registerTableOption("frozenRowsField", "id");
      this.registerTableOption("frozenRows", false);
    }
    initialize() {
      var fragment = document.createDocumentFragment();
      this.rows = [];
      this.topElement.classList.add("tabulator-frozen-rows-holder");
      fragment.appendChild(document.createElement("br"));
      fragment.appendChild(this.topElement);
      this.table.columnManager.getContentsElement().insertBefore(fragment, this.table.columnManager.headersElement.nextSibling);
      this.subscribe("row-deleting", this.detachRow.bind(this));
      this.subscribe("rows-visible", this.visibleRows.bind(this));
      this.registerDisplayHandler(this.getRows.bind(this), 10);
      if (this.table.options.frozenRows) {
        this.subscribe("data-processed", this.initializeRows.bind(this));
        this.subscribe("row-added", this.initializeRow.bind(this));
        this.subscribe("table-redrawing", this.resizeHolderWidth.bind(this));
        this.subscribe("column-resized", this.resizeHolderWidth.bind(this));
        this.subscribe("column-show", this.resizeHolderWidth.bind(this));
        this.subscribe("column-hide", this.resizeHolderWidth.bind(this));
      }
      this.resizeHolderWidth();
    }
    resizeHolderWidth() {
      this.topElement.style.minWidth = this.table.columnManager.headersElement.offsetWidth + "px";
    }
    initializeRows() {
      this.table.rowManager.getRows().forEach((row) => {
        this.initializeRow(row);
      });
    }
    initializeRow(row) {
      var frozenRows = this.table.options.frozenRows, rowType = typeof frozenRows;
      if (rowType === "number") {
        if (row.getPosition() && row.getPosition() + this.rows.length <= frozenRows) {
          this.freezeRow(row);
        }
      } else if (rowType === "function") {
        if (frozenRows.call(this.table, row.getComponent())) {
          this.freezeRow(row);
        }
      } else if (Array.isArray(frozenRows)) {
        if (frozenRows.includes(row.data[this.options("frozenRowsField")])) {
          this.freezeRow(row);
        }
      }
    }
    isRowFrozen(row) {
      var index7 = this.rows.indexOf(row);
      return index7 > -1;
    }
    isFrozen() {
      return !!this.rows.length;
    }
    visibleRows(viewable, rows2) {
      this.rows.forEach((row) => {
        rows2.push(row);
      });
      return rows2;
    }
    //filter frozen rows out of display data
    getRows(rows2) {
      var output = rows2.slice(0);
      this.rows.forEach(function(row) {
        var index7 = output.indexOf(row);
        if (index7 > -1) {
          output.splice(index7, 1);
        }
      });
      return output;
    }
    freezeRow(row) {
      if (!row.modules.frozen) {
        row.modules.frozen = true;
        this.topElement.appendChild(row.getElement());
        row.initialize();
        row.normalizeHeight();
        this.rows.push(row);
        this.refreshData(false, "display");
        this.table.rowManager.adjustTableSize();
        this.styleRows();
      } else {
        console.warn("Freeze Error - Row is already frozen");
      }
    }
    unfreezeRow(row) {
      if (row.modules.frozen) {
        row.modules.frozen = false;
        this.detachRow(row);
        this.table.rowManager.adjustTableSize();
        this.refreshData(false, "display");
        if (this.rows.length) {
          this.styleRows();
        }
      } else {
        console.warn("Freeze Error - Row is already unfrozen");
      }
    }
    detachRow(row) {
      var index7 = this.rows.indexOf(row);
      if (index7 > -1) {
        var rowEl = row.getElement();
        if (rowEl.parentNode) {
          rowEl.parentNode.removeChild(rowEl);
        }
        this.rows.splice(index7, 1);
      }
    }
    styleRows(row) {
      this.rows.forEach((row2, i) => {
        this.table.rowManager.styleRow(row2, i);
      });
    }
  };
  var GroupComponent = class {
    constructor(group) {
      this._group = group;
      this.type = "GroupComponent";
      return new Proxy(this, {
        get: function(target, name, receiver) {
          if (typeof target[name] !== "undefined") {
            return target[name];
          } else {
            return target._group.groupManager.table.componentFunctionBinder.handle("group", target._group, name);
          }
        }
      });
    }
    getKey() {
      return this._group.key;
    }
    getField() {
      return this._group.field;
    }
    getElement() {
      return this._group.element;
    }
    getRows() {
      return this._group.getRows(true);
    }
    getSubGroups() {
      return this._group.getSubGroups(true);
    }
    getParentGroup() {
      return this._group.parent ? this._group.parent.getComponent() : false;
    }
    isVisible() {
      return this._group.visible;
    }
    show() {
      this._group.show();
    }
    hide() {
      this._group.hide();
    }
    toggle() {
      this._group.toggleVisibility();
    }
    scrollTo(position, ifVisible) {
      return this._group.groupManager.table.rowManager.scrollToRow(this._group, position, ifVisible);
    }
    _getSelf() {
      return this._group;
    }
    getTable() {
      return this._group.groupManager.table;
    }
  };
  var Group = class _Group {
    constructor(groupManager, parent, level, key, field, generator, oldGroup) {
      this.groupManager = groupManager;
      this.parent = parent;
      this.key = key;
      this.level = level;
      this.field = field;
      this.hasSubGroups = level < groupManager.groupIDLookups.length - 1;
      this.addRow = this.hasSubGroups ? this._addRowToGroup : this._addRow;
      this.type = "group";
      this.old = oldGroup;
      this.rows = [];
      this.groups = [];
      this.groupList = [];
      this.generator = generator;
      this.element = false;
      this.elementContents = false;
      this.height = 0;
      this.outerHeight = 0;
      this.initialized = false;
      this.calcs = {};
      this.initialized = false;
      this.modules = {};
      this.arrowElement = false;
      this.visible = oldGroup ? oldGroup.visible : typeof groupManager.startOpen[level] !== "undefined" ? groupManager.startOpen[level] : groupManager.startOpen[0];
      this.component = null;
      this.createElements();
      this.addBindings();
      this.createValueGroups();
    }
    wipe(elementsOnly) {
      if (!elementsOnly) {
        if (this.groupList.length) {
          this.groupList.forEach(function(group) {
            group.wipe();
          });
        } else {
          this.rows.forEach((row) => {
            if (row.modules) {
              delete row.modules.group;
            }
          });
        }
      }
      this.element = false;
      this.arrowElement = false;
      this.elementContents = false;
    }
    createElements() {
      var arrow2 = document.createElement("div");
      arrow2.classList.add("tabulator-arrow");
      this.element = document.createElement("div");
      this.element.classList.add("tabulator-row");
      this.element.classList.add("tabulator-group");
      this.element.classList.add("tabulator-group-level-" + this.level);
      this.element.setAttribute("role", "rowgroup");
      this.arrowElement = document.createElement("div");
      this.arrowElement.classList.add("tabulator-group-toggle");
      this.arrowElement.appendChild(arrow2);
      if (this.groupManager.table.options.movableRows !== false && this.groupManager.table.modExists("moveRow")) {
        this.groupManager.table.modules.moveRow.initializeGroupHeader(this);
      }
    }
    createValueGroups() {
      var level = this.level + 1;
      if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {
        this.groupManager.allowedValues[level].forEach((value) => {
          this._createGroup(value, level);
        });
      }
    }
    addBindings() {
      var toggleElement;
      if (this.groupManager.table.options.groupToggleElement) {
        toggleElement = this.groupManager.table.options.groupToggleElement == "arrow" ? this.arrowElement : this.element;
        toggleElement.addEventListener("click", (e) => {
          if (this.groupManager.table.options.groupToggleElement === "arrow") {
            e.stopPropagation();
            e.stopImmediatePropagation();
          }
          setTimeout(() => {
            this.toggleVisibility();
          });
        });
      }
    }
    _createGroup(groupID, level) {
      var groupKey = level + "_" + groupID;
      var group = new _Group(this.groupManager, this, level, groupID, this.groupManager.groupIDLookups[level].field, this.groupManager.headerGenerator[level] || this.groupManager.headerGenerator[0], this.old ? this.old.groups[groupKey] : false);
      this.groups[groupKey] = group;
      this.groupList.push(group);
    }
    _addRowToGroup(row) {
      var level = this.level + 1;
      if (this.hasSubGroups) {
        var groupID = this.groupManager.groupIDLookups[level].func(row.getData()), groupKey = level + "_" + groupID;
        if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {
          if (this.groups[groupKey]) {
            this.groups[groupKey].addRow(row);
          }
        } else {
          if (!this.groups[groupKey]) {
            this._createGroup(groupID, level);
          }
          this.groups[groupKey].addRow(row);
        }
      }
    }
    _addRow(row) {
      this.rows.push(row);
      row.modules.group = this;
    }
    insertRow(row, to, after) {
      var data = this.conformRowData({});
      row.updateData(data);
      var toIndex = this.rows.indexOf(to);
      if (toIndex > -1) {
        if (after) {
          this.rows.splice(toIndex + 1, 0, row);
        } else {
          this.rows.splice(toIndex, 0, row);
        }
      } else {
        if (after) {
          this.rows.push(row);
        } else {
          this.rows.unshift(row);
        }
      }
      row.modules.group = this;
      if (this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.options.columnCalcs != "table") {
        this.groupManager.table.modules.columnCalcs.recalcGroup(this);
      }
      this.groupManager.updateGroupRows(true);
    }
    scrollHeader(left) {
      if (this.arrowElement) {
        this.arrowElement.style.marginLeft = left;
        this.groupList.forEach(function(child) {
          child.scrollHeader(left);
        });
      }
    }
    getRowIndex(row) {
    }
    //update row data to match grouping constraints
    conformRowData(data) {
      if (this.field) {
        data[this.field] = this.key;
      } else {
        console.warn("Data Conforming Error - Cannot conform row data to match new group as groupBy is a function");
      }
      if (this.parent) {
        data = this.parent.conformRowData(data);
      }
      return data;
    }
    removeRow(row) {
      var index7 = this.rows.indexOf(row);
      var el = row.getElement();
      if (index7 > -1) {
        this.rows.splice(index7, 1);
      }
      if (!this.groupManager.table.options.groupValues && !this.rows.length) {
        if (this.parent) {
          this.parent.removeGroup(this);
        } else {
          this.groupManager.removeGroup(this);
        }
        this.groupManager.updateGroupRows(true);
      } else {
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        }
        if (!this.groupManager.blockRedraw) {
          this.generateGroupHeaderContents();
          if (this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.options.columnCalcs != "table") {
            this.groupManager.table.modules.columnCalcs.recalcGroup(this);
          }
        }
      }
    }
    removeGroup(group) {
      var groupKey = group.level + "_" + group.key, index7;
      if (this.groups[groupKey]) {
        delete this.groups[groupKey];
        index7 = this.groupList.indexOf(group);
        if (index7 > -1) {
          this.groupList.splice(index7, 1);
        }
        if (!this.groupList.length) {
          if (this.parent) {
            this.parent.removeGroup(this);
          } else {
            this.groupManager.removeGroup(this);
          }
        }
      }
    }
    getHeadersAndRows() {
      var output = [];
      output.push(this);
      this._visSet();
      if (this.calcs.top) {
        this.calcs.top.detachElement();
        this.calcs.top.deleteCells();
      }
      if (this.calcs.bottom) {
        this.calcs.bottom.detachElement();
        this.calcs.bottom.deleteCells();
      }
      if (this.visible) {
        if (this.groupList.length) {
          this.groupList.forEach(function(group) {
            output = output.concat(group.getHeadersAndRows());
          });
        } else {
          if (this.groupManager.table.options.columnCalcs != "table" && this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {
            this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);
            output.push(this.calcs.top);
          }
          output = output.concat(this.rows);
          if (this.groupManager.table.options.columnCalcs != "table" && this.groupManager.table.modExists("columnCalcs") && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {
            this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);
            output.push(this.calcs.bottom);
          }
        }
      } else {
        if (!this.groupList.length && this.groupManager.table.options.columnCalcs != "table") {
          if (this.groupManager.table.modExists("columnCalcs")) {
            if (this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {
              if (this.groupManager.table.options.groupClosedShowCalcs) {
                this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);
                output.push(this.calcs.top);
              }
            }
            if (this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {
              if (this.groupManager.table.options.groupClosedShowCalcs) {
                this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);
                output.push(this.calcs.bottom);
              }
            }
          }
        }
      }
      return output;
    }
    getData(visible, transform) {
      var output = [];
      this._visSet();
      if (!visible || visible && this.visible) {
        this.rows.forEach((row) => {
          output.push(row.getData(transform || "data"));
        });
      }
      return output;
    }
    getRowCount() {
      var count = 0;
      if (this.groupList.length) {
        this.groupList.forEach((group) => {
          count += group.getRowCount();
        });
      } else {
        count = this.rows.length;
      }
      return count;
    }
    toggleVisibility() {
      if (this.visible) {
        this.hide();
      } else {
        this.show();
      }
    }
    hide() {
      this.visible = false;
      if (this.groupManager.table.rowManager.getRenderMode() == "basic" && !this.groupManager.table.options.pagination) {
        this.element.classList.remove("tabulator-group-visible");
        if (this.groupList.length) {
          this.groupList.forEach((group) => {
            var rows2 = group.getHeadersAndRows();
            rows2.forEach((row) => {
              row.detachElement();
            });
          });
        } else {
          this.rows.forEach((row) => {
            var rowEl = row.getElement();
            rowEl.parentNode.removeChild(rowEl);
          });
        }
        this.groupManager.updateGroupRows(true);
      } else {
        this.groupManager.updateGroupRows(true);
      }
      this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged", this.getComponent(), false);
    }
    show() {
      this.visible = true;
      if (this.groupManager.table.rowManager.getRenderMode() == "basic" && !this.groupManager.table.options.pagination) {
        this.element.classList.add("tabulator-group-visible");
        var prev = this.generateElement();
        if (this.groupList.length) {
          this.groupList.forEach((group) => {
            var rows2 = group.getHeadersAndRows();
            rows2.forEach((row) => {
              var rowEl = row.getElement();
              prev.parentNode.insertBefore(rowEl, prev.nextSibling);
              row.initialize();
              prev = rowEl;
            });
          });
        } else {
          this.rows.forEach((row) => {
            var rowEl = row.getElement();
            prev.parentNode.insertBefore(rowEl, prev.nextSibling);
            row.initialize();
            prev = rowEl;
          });
        }
        this.groupManager.updateGroupRows(true);
      } else {
        this.groupManager.updateGroupRows(true);
      }
      this.groupManager.table.externalEvents.dispatch("groupVisibilityChanged", this.getComponent(), true);
    }
    _visSet() {
      var data = [];
      if (typeof this.visible == "function") {
        this.rows.forEach(function(row) {
          data.push(row.getData());
        });
        this.visible = this.visible(this.key, this.getRowCount(), data, this.getComponent());
      }
    }
    getRowGroup(row) {
      var match = false;
      if (this.groupList.length) {
        this.groupList.forEach(function(group) {
          var result = group.getRowGroup(row);
          if (result) {
            match = result;
          }
        });
      } else {
        if (this.rows.find(function(item) {
          return item === row;
        })) {
          match = this;
        }
      }
      return match;
    }
    getSubGroups(component) {
      var output = [];
      this.groupList.forEach(function(child) {
        output.push(component ? child.getComponent() : child);
      });
      return output;
    }
    getRows(component, includeChildren) {
      var output = [];
      if (includeChildren && this.groupList.length) {
        this.groupList.forEach((group) => {
          output = output.concat(group.getRows(component, includeChildren));
        });
      } else {
        this.rows.forEach(function(row) {
          output.push(component ? row.getComponent() : row);
        });
      }
      return output;
    }
    generateGroupHeaderContents() {
      var data = [];
      var rows2 = this.getRows(false, true);
      rows2.forEach(function(row) {
        data.push(row.getData());
      });
      this.elementContents = this.generator(this.key, this.getRowCount(), data, this.getComponent());
      while (this.element.firstChild)
        this.element.removeChild(this.element.firstChild);
      if (typeof this.elementContents === "string") {
        this.element.innerHTML = this.elementContents;
      } else {
        this.element.appendChild(this.elementContents);
      }
      this.element.insertBefore(this.arrowElement, this.element.firstChild);
    }
    getPath(path = []) {
      path.unshift(this.key);
      if (this.parent) {
        this.parent.getPath(path);
      }
      return path;
    }
    ////////////// Standard Row Functions //////////////
    getElement() {
      return this.elementContents ? this.element : this.generateElement();
    }
    generateElement() {
      this.addBindings = false;
      this._visSet();
      if (this.visible) {
        this.element.classList.add("tabulator-group-visible");
      } else {
        this.element.classList.remove("tabulator-group-visible");
      }
      for (var i = 0; i < this.element.childNodes.length; ++i) {
        this.element.childNodes[i].parentNode.removeChild(this.element.childNodes[i]);
      }
      this.generateGroupHeaderContents();
      return this.element;
    }
    detachElement() {
      if (this.element && this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
    }
    //normalize the height of elements in the row
    normalizeHeight() {
      this.setHeight(this.element.clientHeight);
    }
    initialize(force) {
      if (!this.initialized || force) {
        this.normalizeHeight();
        this.initialized = true;
      }
    }
    reinitialize() {
      this.initialized = false;
      this.height = 0;
      if (Helpers.elVisible(this.element)) {
        this.initialize(true);
      }
    }
    setHeight(height) {
      if (this.height != height) {
        this.height = height;
        this.outerHeight = this.element.offsetHeight;
      }
    }
    //return rows outer height
    getHeight() {
      return this.outerHeight;
    }
    getGroup() {
      return this;
    }
    reinitializeHeight() {
    }
    calcHeight() {
    }
    setCellHeight() {
    }
    clearCellHeight() {
    }
    deinitializeHeight() {
    }
    rendered() {
    }
    //////////////// Object Generation /////////////////
    getComponent() {
      if (!this.component) {
        this.component = new GroupComponent(this);
      }
      return this.component;
    }
  };
  var GroupRows = class extends Module {
    static moduleName = "groupRows";
    constructor(table) {
      super(table);
      this.groupIDLookups = false;
      this.startOpen = [function() {
        return false;
      }];
      this.headerGenerator = [function() {
        return "";
      }];
      this.groupList = [];
      this.allowedValues = false;
      this.groups = {};
      this.displayHandler = this.getRows.bind(this);
      this.blockRedraw = false;
      this.registerTableOption("groupBy", false);
      this.registerTableOption("groupStartOpen", true);
      this.registerTableOption("groupValues", false);
      this.registerTableOption("groupUpdateOnCellEdit", false);
      this.registerTableOption("groupHeader", false);
      this.registerTableOption("groupHeaderPrint", null);
      this.registerTableOption("groupHeaderClipboard", null);
      this.registerTableOption("groupHeaderHtmlOutput", null);
      this.registerTableOption("groupHeaderDownload", null);
      this.registerTableOption("groupToggleElement", "arrow");
      this.registerTableOption("groupClosedShowCalcs", false);
      this.registerTableFunction("setGroupBy", this.setGroupBy.bind(this));
      this.registerTableFunction("setGroupValues", this.setGroupValues.bind(this));
      this.registerTableFunction("setGroupStartOpen", this.setGroupStartOpen.bind(this));
      this.registerTableFunction("setGroupHeader", this.setGroupHeader.bind(this));
      this.registerTableFunction("getGroups", this.userGetGroups.bind(this));
      this.registerTableFunction("getGroupedData", this.userGetGroupedData.bind(this));
      this.registerComponentFunction("row", "getGroup", this.rowGetGroup.bind(this));
    }
    //initialize group configuration
    initialize() {
      this.subscribe("table-destroy", this._blockRedrawing.bind(this));
      this.subscribe("rows-wipe", this._blockRedrawing.bind(this));
      this.subscribe("rows-wiped", this._restore_redrawing.bind(this));
      if (this.table.options.groupBy) {
        if (this.table.options.groupUpdateOnCellEdit) {
          this.subscribe("cell-value-updated", this.cellUpdated.bind(this));
          this.subscribe("row-data-changed", this.reassignRowToGroup.bind(this), 0);
        }
        this.subscribe("table-built", this.configureGroupSetup.bind(this));
        this.subscribe("row-deleting", this.rowDeleting.bind(this));
        this.subscribe("row-deleted", this.rowsUpdated.bind(this));
        this.subscribe("scroll-horizontal", this.scrollHeaders.bind(this));
        this.subscribe("rows-wipe", this.wipe.bind(this));
        this.subscribe("rows-added", this.rowsUpdated.bind(this));
        this.subscribe("row-moving", this.rowMoving.bind(this));
        this.subscribe("row-adding-index", this.rowAddingIndex.bind(this));
        this.subscribe("rows-sample", this.rowSample.bind(this));
        this.subscribe("render-virtual-fill", this.virtualRenderFill.bind(this));
        this.registerDisplayHandler(this.displayHandler, 20);
        this.initialized = true;
      }
    }
    _blockRedrawing() {
      this.blockRedraw = true;
    }
    _restore_redrawing() {
      this.blockRedraw = false;
    }
    configureGroupSetup() {
      if (this.table.options.groupBy) {
        var groupBy = this.table.options.groupBy, startOpen = this.table.options.groupStartOpen, groupHeader = this.table.options.groupHeader;
        this.allowedValues = this.table.options.groupValues;
        if (Array.isArray(groupBy) && Array.isArray(groupHeader) && groupBy.length > groupHeader.length) {
          console.warn("Error creating group headers, groupHeader array is shorter than groupBy array");
        }
        this.headerGenerator = [function() {
          return "";
        }];
        this.startOpen = [function() {
          return false;
        }];
        this.langBind("groups|item", (langValue, lang) => {
          this.headerGenerator[0] = (value, count, data) => {
            return (typeof value === "undefined" ? "" : value) + "<span>(" + count + " " + (count === 1 ? langValue : lang.groups.items) + ")</span>";
          };
        });
        this.groupIDLookups = [];
        if (groupBy) {
          if (this.table.modExists("columnCalcs") && this.table.options.columnCalcs != "table" && this.table.options.columnCalcs != "both") {
            this.table.modules.columnCalcs.removeCalcs();
          }
        } else {
          if (this.table.modExists("columnCalcs") && this.table.options.columnCalcs != "group") {
            var cols = this.table.columnManager.getRealColumns();
            cols.forEach((col) => {
              if (col.definition.topCalc) {
                this.table.modules.columnCalcs.initializeTopRow();
              }
              if (col.definition.bottomCalc) {
                this.table.modules.columnCalcs.initializeBottomRow();
              }
            });
          }
        }
        if (!Array.isArray(groupBy)) {
          groupBy = [groupBy];
        }
        groupBy.forEach((group, i) => {
          var lookupFunc, column;
          if (typeof group == "function") {
            lookupFunc = group;
          } else {
            column = this.table.columnManager.getColumnByField(group);
            if (column) {
              lookupFunc = function(data) {
                return column.getFieldValue(data);
              };
            } else {
              lookupFunc = function(data) {
                return data[group];
              };
            }
          }
          this.groupIDLookups.push({
            field: typeof group === "function" ? false : group,
            func: lookupFunc,
            values: this.allowedValues ? this.allowedValues[i] : false
          });
        });
        if (startOpen) {
          if (!Array.isArray(startOpen)) {
            startOpen = [startOpen];
          }
          startOpen.forEach((level) => {
          });
          this.startOpen = startOpen;
        }
        if (groupHeader) {
          this.headerGenerator = Array.isArray(groupHeader) ? groupHeader : [groupHeader];
        }
      } else {
        this.groupList = [];
        this.groups = {};
      }
    }
    rowSample(rows2, prevValue) {
      if (this.table.options.groupBy) {
        var group = this.getGroups(false)[0];
        prevValue.push(group.getRows(false)[0]);
      }
      return prevValue;
    }
    virtualRenderFill() {
      var el = this.table.rowManager.tableElement;
      var rows2 = this.table.rowManager.getVisibleRows();
      if (this.table.options.groupBy) {
        rows2 = rows2.filter((row) => {
          return row.type !== "group";
        });
        el.style.minWidth = !rows2.length ? this.table.columnManager.getWidth() + "px" : "";
      } else {
        return rows2;
      }
    }
    rowAddingIndex(row, index7, top) {
      if (this.table.options.groupBy) {
        this.assignRowToGroup(row);
        var groupRows = row.modules.group.rows;
        if (groupRows.length > 1) {
          if (!index7 || index7 && groupRows.indexOf(index7) == -1) {
            if (top) {
              if (groupRows[0] !== row) {
                index7 = groupRows[0];
                this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index7, !top);
              }
            } else {
              if (groupRows[groupRows.length - 1] !== row) {
                index7 = groupRows[groupRows.length - 1];
                this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index7, !top);
              }
            }
          } else {
            this.table.rowManager.moveRowInArray(row.modules.group.rows, row, index7, !top);
          }
        }
        return index7;
      }
    }
    trackChanges() {
      this.dispatch("group-changed");
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    setGroupBy(groups) {
      this.table.options.groupBy = groups;
      if (!this.initialized) {
        this.initialize();
      }
      this.configureGroupSetup();
      if (!groups && this.table.modExists("columnCalcs") && this.table.options.columnCalcs === true) {
        this.table.modules.columnCalcs.reinitializeCalcs();
      }
      this.refreshData();
      this.trackChanges();
    }
    setGroupValues(groupValues) {
      this.table.options.groupValues = groupValues;
      this.configureGroupSetup();
      this.refreshData();
      this.trackChanges();
    }
    setGroupStartOpen(values) {
      this.table.options.groupStartOpen = values;
      this.configureGroupSetup();
      if (this.table.options.groupBy) {
        this.refreshData();
        this.trackChanges();
      } else {
        console.warn("Grouping Update - cant refresh view, no groups have been set");
      }
    }
    setGroupHeader(values) {
      this.table.options.groupHeader = values;
      this.configureGroupSetup();
      if (this.table.options.groupBy) {
        this.refreshData();
        this.trackChanges();
      } else {
        console.warn("Grouping Update - cant refresh view, no groups have been set");
      }
    }
    userGetGroups(values) {
      return this.getGroups(true);
    }
    // get grouped table data in the same format as getData()
    userGetGroupedData() {
      return this.table.options.groupBy ? this.getGroupedData() : this.getData();
    }
    ///////////////////////////////////////
    ///////// Component Functions /////////
    ///////////////////////////////////////
    rowGetGroup(row) {
      return row.modules.group ? row.modules.group.getComponent() : false;
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    rowMoving(from, to, after) {
      if (this.table.options.groupBy) {
        if (!after && to instanceof Group) {
          to = this.table.rowManager.prevDisplayRow(from) || to;
        }
        var toGroup = to instanceof Group ? to : to.modules.group;
        var fromGroup = from instanceof Group ? from : from.modules.group;
        if (toGroup === fromGroup) {
          this.table.rowManager.moveRowInArray(toGroup.rows, from, to, after);
        } else {
          if (fromGroup) {
            fromGroup.removeRow(from);
          }
          toGroup.insertRow(from, to, after);
        }
      }
    }
    rowDeleting(row) {
      if (this.table.options.groupBy && row.modules.group) {
        row.modules.group.removeRow(row);
      }
    }
    rowsUpdated(row) {
      if (this.table.options.groupBy) {
        this.updateGroupRows(true);
      }
    }
    cellUpdated(cell) {
      if (this.table.options.groupBy) {
        this.reassignRowToGroup(cell.row);
      }
    }
    //return appropriate rows with group headers
    getRows(rows2) {
      if (this.table.options.groupBy && this.groupIDLookups.length) {
        this.dispatchExternal("dataGrouping");
        this.generateGroups(rows2);
        if (this.subscribedExternal("dataGrouped")) {
          this.dispatchExternal("dataGrouped", this.getGroups(true));
        }
        return this.updateGroupRows();
      } else {
        return rows2.slice(0);
      }
    }
    getGroups(component) {
      var groupComponents = [];
      this.groupList.forEach(function(group) {
        groupComponents.push(component ? group.getComponent() : group);
      });
      return groupComponents;
    }
    getChildGroups(group) {
      var groupComponents = [];
      if (!group) {
        group = this;
      }
      group.groupList.forEach((child) => {
        if (child.groupList.length) {
          groupComponents = groupComponents.concat(this.getChildGroups(child));
        } else {
          groupComponents.push(child);
        }
      });
      return groupComponents;
    }
    wipe() {
      if (this.table.options.groupBy) {
        this.groupList.forEach(function(group) {
          group.wipe();
        });
        this.groupList = [];
        this.groups = {};
      }
    }
    pullGroupListData(groupList) {
      var groupListData = [];
      groupList.forEach((group) => {
        var groupHeader = {};
        groupHeader.level = 0;
        groupHeader.rowCount = 0;
        groupHeader.headerContent = "";
        var childData = [];
        if (group.hasSubGroups) {
          childData = this.pullGroupListData(group.groupList);
          groupHeader.level = group.level;
          groupHeader.rowCount = childData.length - group.groupList.length;
          groupHeader.headerContent = group.generator(group.key, groupHeader.rowCount, group.rows, group);
          groupListData.push(groupHeader);
          groupListData = groupListData.concat(childData);
        } else {
          groupHeader.level = group.level;
          groupHeader.headerContent = group.generator(group.key, group.rows.length, group.rows, group);
          groupHeader.rowCount = group.getRows().length;
          groupListData.push(groupHeader);
          group.getRows().forEach((row) => {
            groupListData.push(row.getData("data"));
          });
        }
      });
      return groupListData;
    }
    getGroupedData() {
      return this.pullGroupListData(this.groupList);
    }
    getRowGroup(row) {
      var match = false;
      if (this.options("dataTree")) {
        row = this.table.modules.dataTree.getTreeParentRoot(row);
      }
      this.groupList.forEach((group) => {
        var result = group.getRowGroup(row);
        if (result) {
          match = result;
        }
      });
      return match;
    }
    countGroups() {
      return this.groupList.length;
    }
    generateGroups(rows2) {
      var oldGroups = this.groups;
      this.groups = {};
      this.groupList = [];
      if (this.allowedValues && this.allowedValues[0]) {
        this.allowedValues[0].forEach((value) => {
          this.createGroup(value, 0, oldGroups);
        });
        rows2.forEach((row) => {
          this.assignRowToExistingGroup(row, oldGroups);
        });
      } else {
        rows2.forEach((row) => {
          this.assignRowToGroup(row, oldGroups);
        });
      }
      Object.values(oldGroups).forEach((group) => {
        group.wipe(true);
      });
    }
    createGroup(groupID, level, oldGroups) {
      var groupKey = level + "_" + groupID, group;
      oldGroups = oldGroups || [];
      group = new Group(this, false, level, groupID, this.groupIDLookups[0].field, this.headerGenerator[0], oldGroups[groupKey]);
      this.groups[groupKey] = group;
      this.groupList.push(group);
    }
    assignRowToExistingGroup(row, oldGroups) {
      var groupID = this.groupIDLookups[0].func(row.getData()), groupKey = "0_" + groupID;
      if (this.groups[groupKey]) {
        this.groups[groupKey].addRow(row);
      }
    }
    assignRowToGroup(row, oldGroups) {
      var groupID = this.groupIDLookups[0].func(row.getData()), newGroupNeeded = !this.groups["0_" + groupID];
      if (newGroupNeeded) {
        this.createGroup(groupID, 0, oldGroups);
      }
      this.groups["0_" + groupID].addRow(row);
      return !newGroupNeeded;
    }
    reassignRowToGroup(row) {
      if (row.type === "row") {
        var oldRowGroup = row.modules.group, oldGroupPath = oldRowGroup.getPath(), newGroupPath = this.getExpectedPath(row), samePath;
        samePath = oldGroupPath.length == newGroupPath.length && oldGroupPath.every((element, index7) => {
          return element === newGroupPath[index7];
        });
        if (!samePath) {
          oldRowGroup.removeRow(row);
          this.assignRowToGroup(row, this.groups);
          this.refreshData(true);
        }
      }
    }
    getExpectedPath(row) {
      var groupPath = [], rowData = row.getData();
      this.groupIDLookups.forEach((groupId) => {
        groupPath.push(groupId.func(rowData));
      });
      return groupPath;
    }
    updateGroupRows(force) {
      var output = [];
      if (!this.blockRedraw) {
        this.groupList.forEach((group) => {
          output = output.concat(group.getHeadersAndRows());
        });
        if (force) {
          this.refreshData(true);
        }
      }
      return output;
    }
    scrollHeaders(left) {
      if (this.table.options.groupBy) {
        if (this.table.options.renderHorizontal === "virtual") {
          left -= this.table.columnManager.renderer.vDomPadLeft;
        }
        left = left + "px";
        this.groupList.forEach((group) => {
          group.scrollHeader(left);
        });
      }
    }
    removeGroup(group) {
      var groupKey = group.level + "_" + group.key, index7;
      if (this.groups[groupKey]) {
        delete this.groups[groupKey];
        index7 = this.groupList.indexOf(group);
        if (index7 > -1) {
          this.groupList.splice(index7, 1);
        }
      }
    }
    checkBasicModeGroupHeaderWidth() {
      var element = this.table.rowManager.tableElement, onlyGroupHeaders = true;
      this.table.rowManager.getDisplayRows().forEach((row, index7) => {
        this.table.rowManager.styleRow(row, index7);
        element.appendChild(row.getElement());
        row.initialize(true);
        if (row.type !== "group") {
          onlyGroupHeaders = false;
        }
      });
      if (onlyGroupHeaders) {
        element.style.minWidth = this.table.columnManager.getWidth() + "px";
      } else {
        element.style.minWidth = "";
      }
    }
  };
  var defaultUndoers = {
    cellEdit: function(action) {
      action.component.setValueProcessData(action.data.oldValue);
      action.component.cellRendered();
    },
    rowAdd: function(action) {
      action.component.deleteActual();
      this.table.rowManager.checkPlaceholder();
    },
    rowDelete: function(action) {
      var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);
      if (this.table.options.groupBy && this.table.modExists("groupRows")) {
        this.table.modules.groupRows.updateGroupRows(true);
      }
      this._rebindRow(action.component, newRow);
      this.table.rowManager.checkPlaceholder();
    },
    rowMove: function(action) {
      var after = action.data.posFrom - action.data.posTo > 0;
      this.table.rowManager.moveRowActual(action.component, this.table.rowManager.getRowFromPosition(action.data.posFrom), after);
      this.table.rowManager.regenerateRowPositions();
      this.table.rowManager.reRenderInPosition();
    }
  };
  var defaultRedoers = {
    cellEdit: function(action) {
      action.component.setValueProcessData(action.data.newValue);
      action.component.cellRendered();
    },
    rowAdd: function(action) {
      var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);
      if (this.table.options.groupBy && this.table.modExists("groupRows")) {
        this.table.modules.groupRows.updateGroupRows(true);
      }
      this._rebindRow(action.component, newRow);
      this.table.rowManager.checkPlaceholder();
    },
    rowDelete: function(action) {
      action.component.deleteActual();
      this.table.rowManager.checkPlaceholder();
    },
    rowMove: function(action) {
      this.table.rowManager.moveRowActual(action.component, this.table.rowManager.getRowFromPosition(action.data.posTo), action.data.after);
      this.table.rowManager.regenerateRowPositions();
      this.table.rowManager.reRenderInPosition();
    }
  };
  var bindings$1 = {
    undo: ["ctrl + 90", "meta + 90"],
    redo: ["ctrl + 89", "meta + 89"]
  };
  var actions$1 = {
    undo: function(e) {
      var cell = false;
      if (this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")) {
        cell = this.table.modules.edit.currentCell;
        if (!cell) {
          e.preventDefault();
          this.table.modules.history.undo();
        }
      }
    },
    redo: function(e) {
      var cell = false;
      if (this.table.options.history && this.table.modExists("history") && this.table.modExists("edit")) {
        cell = this.table.modules.edit.currentCell;
        if (!cell) {
          e.preventDefault();
          this.table.modules.history.redo();
        }
      }
    }
  };
  var extensions$3 = {
    keybindings: {
      bindings: bindings$1,
      actions: actions$1
    }
  };
  var History = class _History extends Module {
    static moduleName = "history";
    static moduleExtensions = extensions$3;
    //load defaults
    static undoers = defaultUndoers;
    static redoers = defaultRedoers;
    constructor(table) {
      super(table);
      this.history = [];
      this.index = -1;
      this.registerTableOption("history", false);
    }
    initialize() {
      if (this.table.options.history) {
        this.subscribe("cell-value-updated", this.cellUpdated.bind(this));
        this.subscribe("cell-delete", this.clearComponentHistory.bind(this));
        this.subscribe("row-delete", this.rowDeleted.bind(this));
        this.subscribe("rows-wipe", this.clear.bind(this));
        this.subscribe("row-added", this.rowAdded.bind(this));
        this.subscribe("row-move", this.rowMoved.bind(this));
      }
      this.registerTableFunction("undo", this.undo.bind(this));
      this.registerTableFunction("redo", this.redo.bind(this));
      this.registerTableFunction("getHistoryUndoSize", this.getHistoryUndoSize.bind(this));
      this.registerTableFunction("getHistoryRedoSize", this.getHistoryRedoSize.bind(this));
      this.registerTableFunction("clearHistory", this.clear.bind(this));
    }
    rowMoved(from, to, after) {
      this.action("rowMove", from, { posFrom: from.getPosition(), posTo: to.getPosition(), to, after });
    }
    rowAdded(row, data, pos, index7) {
      this.action("rowAdd", row, { data, pos, index: index7 });
    }
    rowDeleted(row) {
      var index7, rows2;
      if (this.table.options.groupBy) {
        rows2 = row.getComponent().getGroup()._getSelf().rows;
        index7 = rows2.indexOf(row);
        if (index7) {
          index7 = rows2[index7 - 1];
        }
      } else {
        index7 = row.table.rowManager.getRowIndex(row);
        if (index7) {
          index7 = row.table.rowManager.rows[index7 - 1];
        }
      }
      this.action("rowDelete", row, { data: row.getData(), pos: !index7, index: index7 });
    }
    cellUpdated(cell) {
      this.action("cellEdit", cell, { oldValue: cell.oldValue, newValue: cell.value });
    }
    clear() {
      this.history = [];
      this.index = -1;
    }
    action(type, component, data) {
      this.history = this.history.slice(0, this.index + 1);
      this.history.push({
        type,
        component,
        data
      });
      this.index++;
    }
    getHistoryUndoSize() {
      return this.index + 1;
    }
    getHistoryRedoSize() {
      return this.history.length - (this.index + 1);
    }
    clearComponentHistory(component) {
      var index7 = this.history.findIndex(function(item) {
        return item.component === component;
      });
      if (index7 > -1) {
        this.history.splice(index7, 1);
        if (index7 <= this.index) {
          this.index--;
        }
        this.clearComponentHistory(component);
      }
    }
    undo() {
      if (this.index > -1) {
        let action = this.history[this.index];
        _History.undoers[action.type].call(this, action);
        this.index--;
        this.dispatchExternal("historyUndo", action.type, action.component.getComponent(), action.data);
        return true;
      } else {
        console.warn(this.options("history") ? "History Undo Error - No more history to undo" : "History module not enabled");
        return false;
      }
    }
    redo() {
      if (this.history.length - 1 > this.index) {
        this.index++;
        let action = this.history[this.index];
        _History.redoers[action.type].call(this, action);
        this.dispatchExternal("historyRedo", action.type, action.component.getComponent(), action.data);
        return true;
      } else {
        console.warn(this.options("history") ? "History Redo Error - No more history to redo" : "History module not enabled");
        return false;
      }
    }
    //rebind rows to new element after deletion
    _rebindRow(oldRow, newRow) {
      this.history.forEach(function(action) {
        if (action.component instanceof Row) {
          if (action.component === oldRow) {
            action.component = newRow;
          }
        } else if (action.component instanceof Cell) {
          if (action.component.row === oldRow) {
            var field = action.component.column.getField();
            if (field) {
              action.component = newRow.getCell(field);
            }
          }
        }
      });
    }
  };
  var HtmlTableImport = class extends Module {
    static moduleName = "htmlTableImport";
    constructor(table) {
      super(table);
      this.fieldIndex = [];
      this.hasIndex = false;
    }
    initialize() {
      this.tableElementCheck();
    }
    tableElementCheck() {
      if (this.table.originalElement && this.table.originalElement.tagName === "TABLE") {
        if (this.table.originalElement.childNodes.length) {
          this.parseTable();
        } else {
          console.warn("Unable to parse data from empty table tag, Tabulator should be initialized on a div tag unless importing data from a table element.");
        }
      }
    }
    parseTable() {
      var element = this.table.originalElement, options = this.table.options, headers = element.getElementsByTagName("th"), rows2 = element.getElementsByTagName("tbody")[0], data = [];
      this.hasIndex = false;
      this.dispatchExternal("htmlImporting");
      rows2 = rows2 ? rows2.getElementsByTagName("tr") : [];
      this._extractOptions(element, options);
      if (headers.length) {
        this._extractHeaders(headers, rows2);
      } else {
        this._generateBlankHeaders(headers, rows2);
      }
      for (var index7 = 0; index7 < rows2.length; index7++) {
        var row = rows2[index7], cells = row.getElementsByTagName("td"), item = {};
        if (!this.hasIndex) {
          item[options.index] = index7;
        }
        for (var i = 0; i < cells.length; i++) {
          var cell = cells[i];
          if (typeof this.fieldIndex[i] !== "undefined") {
            item[this.fieldIndex[i]] = cell.innerHTML;
          }
        }
        data.push(item);
      }
      options.data = data;
      this.dispatchExternal("htmlImported");
    }
    //extract tabulator attribute options
    _extractOptions(element, options, defaultOptions2) {
      var attributes = element.attributes;
      var optionsArr = defaultOptions2 ? Object.keys(defaultOptions2) : Object.keys(options);
      var optionsList = {};
      optionsArr.forEach((item) => {
        optionsList[item.toLowerCase()] = item;
      });
      for (var index7 in attributes) {
        var attrib = attributes[index7];
        var name;
        if (attrib && typeof attrib == "object" && attrib.name && attrib.name.indexOf("tabulator-") === 0) {
          name = attrib.name.replace("tabulator-", "");
          if (typeof optionsList[name] !== "undefined") {
            options[optionsList[name]] = this._attribValue(attrib.value);
          }
        }
      }
    }
    //get value of attribute
    _attribValue(value) {
      if (value === "true") {
        return true;
      }
      if (value === "false") {
        return false;
      }
      return value;
    }
    //find column if it has already been defined
    _findCol(title) {
      var match = this.table.options.columns.find((column) => {
        return column.title === title;
      });
      return match || false;
    }
    //extract column from headers
    _extractHeaders(headers, rows2) {
      for (var index7 = 0; index7 < headers.length; index7++) {
        var header = headers[index7], exists2 = false, col = this._findCol(header.textContent), width;
        if (col) {
          exists2 = true;
        } else {
          col = { title: header.textContent.trim() };
        }
        if (!col.field) {
          col.field = header.textContent.trim().toLowerCase().replaceAll(" ", "_");
        }
        width = header.getAttribute("width");
        if (width && !col.width) {
          col.width = width;
        }
        this._extractOptions(header, col, this.table.columnManager.optionsList.registeredDefaults);
        this.fieldIndex[index7] = col.field;
        if (col.field == this.table.options.index) {
          this.hasIndex = true;
        }
        if (!exists2) {
          this.table.options.columns.push(col);
        }
      }
    }
    //generate blank headers
    _generateBlankHeaders(headers, rows2) {
      for (var index7 = 0; index7 < headers.length; index7++) {
        var header = headers[index7], col = { title: "", field: "col" + index7 };
        this.fieldIndex[index7] = col.field;
        var width = header.getAttribute("width");
        if (width) {
          col.width = width;
        }
        this.table.options.columns.push(col);
      }
    }
  };
  function csv(input2) {
    var data = [], row = 0, col = 0, inQuote = false;
    for (let index7 = 0; index7 < input2.length; index7++) {
      let char = input2[index7], nextChar = input2[index7 + 1];
      if (!data[row]) {
        data[row] = [];
      }
      if (!data[row][col]) {
        data[row][col] = "";
      }
      if (char == '"' && inQuote && nextChar == '"') {
        data[row][col] += char;
        index7++;
        continue;
      }
      if (char == '"') {
        inQuote = !inQuote;
        continue;
      }
      if (char == "," && !inQuote) {
        col++;
        continue;
      }
      if (char == "\r" && nextChar == "\n" && !inQuote) {
        col = 0;
        row++;
        index7++;
        continue;
      }
      if ((char == "\r" || char == "\n") && !inQuote) {
        col = 0;
        row++;
        continue;
      }
      data[row][col] += char;
    }
    return data;
  }
  function json(input2) {
    try {
      return JSON.parse(input2);
    } catch (e) {
      console.warn("JSON Import Error - File contents is invalid JSON", e);
      return Promise.reject();
    }
  }
  function array$1(input2) {
    return input2;
  }
  function xlsx(input2) {
    var XLSXLib = this.dependencyRegistry.lookup("XLSX"), workbook2 = XLSXLib.read(input2), sheet = workbook2.Sheets[workbook2.SheetNames[0]];
    return XLSXLib.utils.sheet_to_json(sheet, { header: 1 });
  }
  var defaultImporters = {
    csv,
    json,
    array: array$1,
    xlsx
  };
  var Import = class _Import extends Module {
    static moduleName = "import";
    //load defaults
    static importers = defaultImporters;
    constructor(table) {
      super(table);
      this.registerTableOption("importFormat");
      this.registerTableOption("importReader", "text");
      this.registerTableOption("importHeaderTransform");
      this.registerTableOption("importValueTransform");
      this.registerTableOption("importDataValidator");
      this.registerTableOption("importFileValidator");
    }
    initialize() {
      this.registerTableFunction("import", this.importFromFile.bind(this));
      if (this.table.options.importFormat) {
        this.subscribe("data-loading", this.loadDataCheck.bind(this), 10);
        this.subscribe("data-load", this.loadData.bind(this), 10);
      }
    }
    loadDataCheck(data) {
      return this.table.options.importFormat && (typeof data === "string" || Array.isArray(data) && data.length && Array.isArray(data));
    }
    loadData(data, params, config, silent, previousData) {
      return this.importData(this.lookupImporter(), data).then(this.structureData.bind(this)).catch((err) => {
        console.error("Import Error:", err || "Unable to import data");
        return Promise.reject(err);
      });
    }
    lookupImporter(importFormat) {
      var importer;
      if (!importFormat) {
        importFormat = this.table.options.importFormat;
      }
      if (typeof importFormat === "string") {
        importer = _Import.importers[importFormat];
      } else {
        importer = importFormat;
      }
      if (!importer) {
        console.error("Import Error - Importer not found:", importFormat);
      }
      return importer;
    }
    importFromFile(importFormat, extension, importReader) {
      var importer = this.lookupImporter(importFormat);
      if (importer) {
        return this.pickFile(extension, importReader).then(this.importData.bind(this, importer)).then(this.structureData.bind(this)).then(this.mutateData.bind(this)).then(this.validateData.bind(this)).then(this.setData.bind(this)).catch((err) => {
          this.dispatch("import-error", err);
          this.dispatchExternal("importError", err);
          console.error("Import Error:", err || "Unable to import file");
          this.table.dataLoader.alertError();
          setTimeout(() => {
            this.table.dataLoader.clearAlert();
          }, 3e3);
          return Promise.reject(err);
        });
      }
    }
    pickFile(extensions2, importReader) {
      return new Promise((resolve2, reject) => {
        var input2 = document.createElement("input");
        input2.type = "file";
        input2.accept = extensions2;
        input2.addEventListener("change", (e) => {
          var file = input2.files[0], reader = new FileReader(), valid = this.validateFile(file);
          if (valid === true) {
            this.dispatch("import-importing", input2.files);
            this.dispatchExternal("importImporting", input2.files);
            switch (importReader || this.table.options.importReader) {
              case "buffer":
                reader.readAsArrayBuffer(file);
                break;
              case "binary":
                reader.readAsBinaryString(file);
                break;
              case "url":
                reader.readAsDataURL(file);
                break;
              case "text":
              default:
                reader.readAsText(file);
            }
            reader.onload = (e2) => {
              resolve2(reader.result);
            };
            reader.onerror = (e2) => {
              console.warn("File Load Error - Unable to read file");
              reject(e2);
            };
          } else {
            reject(valid);
          }
        });
        this.dispatch("import-choose");
        this.dispatchExternal("importChoose");
        input2.click();
      });
    }
    importData(importer, fileContents) {
      var data;
      this.table.dataLoader.alertLoader();
      return new Promise((resolve2, reject) => {
        setTimeout(() => {
          data = importer.call(this.table, fileContents);
          if (data instanceof Promise) {
            resolve2(data);
          } else {
            data ? resolve2(data) : reject();
          }
        }, 10);
      });
    }
    structureData(parsedData) {
      var data = [];
      if (Array.isArray(parsedData) && parsedData.length && Array.isArray(parsedData[0])) {
        if (this.table.options.autoColumns) {
          data = this.structureArrayToObject(parsedData);
        } else {
          data = this.structureArrayToColumns(parsedData);
        }
        return data;
      } else {
        return parsedData;
      }
    }
    mutateData(data) {
      var output = [];
      if (Array.isArray(data)) {
        data.forEach((row) => {
          output.push(this.table.modules.mutator.transformRow(row, "import"));
        });
      } else {
        output = data;
      }
      return output;
    }
    transformHeader(headers) {
      var output = [];
      if (this.table.options.importHeaderTransform) {
        headers.forEach((item) => {
          output.push(this.table.options.importHeaderTransform.call(this.table, item, headers));
        });
      } else {
        return headers;
      }
      return output;
    }
    transformData(row) {
      var output = [];
      if (this.table.options.importValueTransform) {
        row.forEach((item) => {
          output.push(this.table.options.importValueTransform.call(this.table, item, row));
        });
      } else {
        return row;
      }
      return output;
    }
    structureArrayToObject(parsedData) {
      var columns = this.transformHeader(parsedData.shift());
      var data = parsedData.map((values) => {
        var row = {};
        values = this.transformData(values);
        columns.forEach((key, i) => {
          row[key] = values[i];
        });
        return row;
      });
      return data;
    }
    structureArrayToColumns(parsedData) {
      var data = [], firstRow = this.transformHeader(parsedData[0]), columns = this.table.getColumns();
      if (columns[0] && firstRow[0]) {
        if (columns[0].getDefinition().title === firstRow[0]) {
          parsedData.shift();
        }
      }
      parsedData.forEach((rowData) => {
        var row = {};
        rowData = this.transformData(rowData);
        rowData.forEach((value, index7) => {
          var column = columns[index7];
          if (column) {
            row[column.getField()] = value;
          }
        });
        data.push(row);
      });
      return data;
    }
    validateFile(file) {
      if (this.table.options.importFileValidator) {
        return this.table.options.importFileValidator.call(this.table, file);
      }
      return true;
    }
    validateData(data) {
      var result;
      if (this.table.options.importDataValidator) {
        result = this.table.options.importDataValidator.call(this.table, data);
        if (result === true) {
          return data;
        } else {
          return Promise.reject(result);
        }
      }
      return data;
    }
    setData(data) {
      this.dispatch("import-imported", data);
      this.dispatchExternal("importImported", data);
      this.table.dataLoader.clearAlert();
      return this.table.setData(data);
    }
  };
  var Interaction = class extends Module {
    static moduleName = "interaction";
    constructor(table) {
      super(table);
      this.eventMap = {
        //row events
        rowClick: "row-click",
        rowDblClick: "row-dblclick",
        rowContext: "row-contextmenu",
        rowMouseEnter: "row-mouseenter",
        rowMouseLeave: "row-mouseleave",
        rowMouseOver: "row-mouseover",
        rowMouseOut: "row-mouseout",
        rowMouseMove: "row-mousemove",
        rowMouseDown: "row-mousedown",
        rowMouseUp: "row-mouseup",
        rowTap: "row",
        rowDblTap: "row",
        rowTapHold: "row",
        //cell events
        cellClick: "cell-click",
        cellDblClick: "cell-dblclick",
        cellContext: "cell-contextmenu",
        cellMouseEnter: "cell-mouseenter",
        cellMouseLeave: "cell-mouseleave",
        cellMouseOver: "cell-mouseover",
        cellMouseOut: "cell-mouseout",
        cellMouseMove: "cell-mousemove",
        cellMouseDown: "cell-mousedown",
        cellMouseUp: "cell-mouseup",
        cellTap: "cell",
        cellDblTap: "cell",
        cellTapHold: "cell",
        //column header events
        headerClick: "column-click",
        headerDblClick: "column-dblclick",
        headerContext: "column-contextmenu",
        headerMouseEnter: "column-mouseenter",
        headerMouseLeave: "column-mouseleave",
        headerMouseOver: "column-mouseover",
        headerMouseOut: "column-mouseout",
        headerMouseMove: "column-mousemove",
        headerMouseDown: "column-mousedown",
        headerMouseUp: "column-mouseup",
        headerTap: "column",
        headerDblTap: "column",
        headerTapHold: "column",
        //group header
        groupClick: "group-click",
        groupDblClick: "group-dblclick",
        groupContext: "group-contextmenu",
        groupMouseEnter: "group-mouseenter",
        groupMouseLeave: "group-mouseleave",
        groupMouseOver: "group-mouseover",
        groupMouseOut: "group-mouseout",
        groupMouseMove: "group-mousemove",
        groupMouseDown: "group-mousedown",
        groupMouseUp: "group-mouseup",
        groupTap: "group",
        groupDblTap: "group",
        groupTapHold: "group"
      };
      this.subscribers = {};
      this.touchSubscribers = {};
      this.columnSubscribers = {};
      this.touchWatchers = {
        row: {
          tap: null,
          tapDbl: null,
          tapHold: null
        },
        cell: {
          tap: null,
          tapDbl: null,
          tapHold: null
        },
        column: {
          tap: null,
          tapDbl: null,
          tapHold: null
        },
        group: {
          tap: null,
          tapDbl: null,
          tapHold: null
        }
      };
      this.registerColumnOption("headerClick");
      this.registerColumnOption("headerDblClick");
      this.registerColumnOption("headerContext");
      this.registerColumnOption("headerMouseEnter");
      this.registerColumnOption("headerMouseLeave");
      this.registerColumnOption("headerMouseOver");
      this.registerColumnOption("headerMouseOut");
      this.registerColumnOption("headerMouseMove");
      this.registerColumnOption("headerMouseDown");
      this.registerColumnOption("headerMouseUp");
      this.registerColumnOption("headerTap");
      this.registerColumnOption("headerDblTap");
      this.registerColumnOption("headerTapHold");
      this.registerColumnOption("cellClick");
      this.registerColumnOption("cellDblClick");
      this.registerColumnOption("cellContext");
      this.registerColumnOption("cellMouseEnter");
      this.registerColumnOption("cellMouseLeave");
      this.registerColumnOption("cellMouseOver");
      this.registerColumnOption("cellMouseOut");
      this.registerColumnOption("cellMouseMove");
      this.registerColumnOption("cellMouseDown");
      this.registerColumnOption("cellMouseUp");
      this.registerColumnOption("cellTap");
      this.registerColumnOption("cellDblTap");
      this.registerColumnOption("cellTapHold");
    }
    initialize() {
      this.initializeExternalEvents();
      this.subscribe("column-init", this.initializeColumn.bind(this));
      this.subscribe("cell-dblclick", this.cellContentsSelectionFixer.bind(this));
      this.subscribe("scroll-horizontal", this.clearTouchWatchers.bind(this));
      this.subscribe("scroll-vertical", this.clearTouchWatchers.bind(this));
    }
    clearTouchWatchers() {
      var types = Object.values(this.touchWatchers);
      types.forEach((type) => {
        for (let key in type) {
          type[key] = null;
        }
      });
    }
    cellContentsSelectionFixer(e, cell) {
      var range2;
      if (this.table.modExists("edit")) {
        if (this.table.modules.edit.currentCell === cell) {
          return;
        }
      }
      e.preventDefault();
      try {
        if (document.selection) {
          range2 = document.body.createTextRange();
          range2.moveToElementText(cell.getElement());
          range2.select();
        } else if (window.getSelection) {
          range2 = document.createRange();
          range2.selectNode(cell.getElement());
          window.getSelection().removeAllRanges();
          window.getSelection().addRange(range2);
        }
      } catch (e2) {
      }
    }
    initializeExternalEvents() {
      for (let key in this.eventMap) {
        this.subscriptionChangeExternal(key, this.subscriptionChanged.bind(this, key));
      }
    }
    subscriptionChanged(key, added) {
      if (added) {
        if (!this.subscribers[key]) {
          if (this.eventMap[key].includes("-")) {
            this.subscribers[key] = this.handle.bind(this, key);
            this.subscribe(this.eventMap[key], this.subscribers[key]);
          } else {
            this.subscribeTouchEvents(key);
          }
        }
      } else {
        if (this.eventMap[key].includes("-")) {
          if (this.subscribers[key] && !this.columnSubscribers[key] && !this.subscribedExternal(key)) {
            this.unsubscribe(this.eventMap[key], this.subscribers[key]);
            delete this.subscribers[key];
          }
        } else {
          this.unsubscribeTouchEvents(key);
        }
      }
    }
    subscribeTouchEvents(key) {
      var type = this.eventMap[key];
      if (!this.touchSubscribers[type + "-touchstart"]) {
        this.touchSubscribers[type + "-touchstart"] = this.handleTouch.bind(this, type, "start");
        this.touchSubscribers[type + "-touchend"] = this.handleTouch.bind(this, type, "end");
        this.subscribe(type + "-touchstart", this.touchSubscribers[type + "-touchstart"]);
        this.subscribe(type + "-touchend", this.touchSubscribers[type + "-touchend"]);
      }
      this.subscribers[key] = true;
    }
    unsubscribeTouchEvents(key) {
      var noTouch = true, type = this.eventMap[key];
      if (this.subscribers[key] && !this.subscribedExternal(key)) {
        delete this.subscribers[key];
        for (let i in this.eventMap) {
          if (this.eventMap[i] === type) {
            if (this.subscribers[i]) {
              noTouch = false;
            }
          }
        }
        if (noTouch) {
          this.unsubscribe(type + "-touchstart", this.touchSubscribers[type + "-touchstart"]);
          this.unsubscribe(type + "-touchend", this.touchSubscribers[type + "-touchend"]);
          delete this.touchSubscribers[type + "-touchstart"];
          delete this.touchSubscribers[type + "-touchend"];
        }
      }
    }
    initializeColumn(column) {
      var def2 = column.definition;
      for (let key in this.eventMap) {
        if (def2[key]) {
          this.subscriptionChanged(key, true);
          if (!this.columnSubscribers[key]) {
            this.columnSubscribers[key] = [];
          }
          this.columnSubscribers[key].push(column);
        }
      }
    }
    handle(action, e, component) {
      this.dispatchEvent(action, e, component);
    }
    handleTouch(type, action, e, component) {
      var watchers = this.touchWatchers[type];
      if (type === "column") {
        type = "header";
      }
      switch (action) {
        case "start":
          watchers.tap = true;
          clearTimeout(watchers.tapHold);
          watchers.tapHold = setTimeout(() => {
            clearTimeout(watchers.tapHold);
            watchers.tapHold = null;
            watchers.tap = null;
            clearTimeout(watchers.tapDbl);
            watchers.tapDbl = null;
            this.dispatchEvent(type + "TapHold", e, component);
          }, 1e3);
          break;
        case "end":
          if (watchers.tap) {
            watchers.tap = null;
            this.dispatchEvent(type + "Tap", e, component);
          }
          if (watchers.tapDbl) {
            clearTimeout(watchers.tapDbl);
            watchers.tapDbl = null;
            this.dispatchEvent(type + "DblTap", e, component);
          } else {
            watchers.tapDbl = setTimeout(() => {
              clearTimeout(watchers.tapDbl);
              watchers.tapDbl = null;
            }, 300);
          }
          clearTimeout(watchers.tapHold);
          watchers.tapHold = null;
          break;
      }
    }
    dispatchEvent(action, e, component) {
      var componentObj = component.getComponent(), callback;
      if (this.columnSubscribers[action]) {
        if (component instanceof Cell) {
          callback = component.column.definition[action];
        } else if (component instanceof Column) {
          callback = component.definition[action];
        }
        if (callback) {
          callback(e, componentObj);
        }
      }
      this.dispatchExternal(action, e, componentObj);
    }
  };
  var defaultBindings = {
    navPrev: "shift + 9",
    navNext: 9,
    navUp: 38,
    navDown: 40,
    navLeft: 37,
    navRight: 39,
    scrollPageUp: 33,
    scrollPageDown: 34,
    scrollToStart: 36,
    scrollToEnd: 35
  };
  var defaultActions = {
    keyBlock: function(e) {
      e.stopPropagation();
      e.preventDefault();
    },
    scrollPageUp: function(e) {
      var rowManager = this.table.rowManager, newPos = rowManager.scrollTop - rowManager.element.clientHeight;
      e.preventDefault();
      if (rowManager.displayRowsCount) {
        if (newPos >= 0) {
          rowManager.element.scrollTop = newPos;
        } else {
          rowManager.scrollToRow(rowManager.getDisplayRows()[0]);
        }
      }
      this.table.element.focus();
    },
    scrollPageDown: function(e) {
      var rowManager = this.table.rowManager, newPos = rowManager.scrollTop + rowManager.element.clientHeight, scrollMax = rowManager.element.scrollHeight;
      e.preventDefault();
      if (rowManager.displayRowsCount) {
        if (newPos <= scrollMax) {
          rowManager.element.scrollTop = newPos;
        } else {
          rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);
        }
      }
      this.table.element.focus();
    },
    scrollToStart: function(e) {
      var rowManager = this.table.rowManager;
      e.preventDefault();
      if (rowManager.displayRowsCount) {
        rowManager.scrollToRow(rowManager.getDisplayRows()[0]);
      }
      this.table.element.focus();
    },
    scrollToEnd: function(e) {
      var rowManager = this.table.rowManager;
      e.preventDefault();
      if (rowManager.displayRowsCount) {
        rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);
      }
      this.table.element.focus();
    },
    navPrev: function(e) {
      this.dispatch("keybinding-nav-prev", e);
    },
    navNext: function(e) {
      this.dispatch("keybinding-nav-next", e);
    },
    navLeft: function(e) {
      this.dispatch("keybinding-nav-left", e);
    },
    navRight: function(e) {
      this.dispatch("keybinding-nav-right", e);
    },
    navUp: function(e) {
      this.dispatch("keybinding-nav-up", e);
    },
    navDown: function(e) {
      this.dispatch("keybinding-nav-down", e);
    }
  };
  var Keybindings = class _Keybindings extends Module {
    static moduleName = "keybindings";
    //load defaults
    static bindings = defaultBindings;
    static actions = defaultActions;
    constructor(table) {
      super(table);
      this.watchKeys = null;
      this.pressedKeys = null;
      this.keyupBinding = false;
      this.keydownBinding = false;
      this.registerTableOption("keybindings", {});
      this.registerTableOption("tabEndNewRow", false);
    }
    initialize() {
      var bindings2 = this.table.options.keybindings, mergedBindings = {};
      this.watchKeys = {};
      this.pressedKeys = [];
      if (bindings2 !== false) {
        Object.assign(mergedBindings, _Keybindings.bindings);
        Object.assign(mergedBindings, bindings2);
        this.mapBindings(mergedBindings);
        this.bindEvents();
      }
      this.subscribe("table-destroy", this.clearBindings.bind(this));
    }
    mapBindings(bindings2) {
      for (let key in bindings2) {
        if (_Keybindings.actions[key]) {
          if (bindings2[key]) {
            if (typeof bindings2[key] !== "object") {
              bindings2[key] = [bindings2[key]];
            }
            bindings2[key].forEach((binding) => {
              var bindingList = Array.isArray(binding) ? binding : [binding];
              bindingList.forEach((item) => {
                this.mapBinding(key, item);
              });
            });
          }
        } else {
          console.warn("Key Binding Error - no such action:", key);
        }
      }
    }
    mapBinding(action, symbolsList) {
      var binding = {
        action: _Keybindings.actions[action],
        keys: [],
        ctrl: false,
        shift: false,
        meta: false
      };
      var symbols = symbolsList.toString().toLowerCase().split(" ").join("").split("+");
      symbols.forEach((symbol) => {
        switch (symbol) {
          case "ctrl":
            binding.ctrl = true;
            break;
          case "shift":
            binding.shift = true;
            break;
          case "meta":
            binding.meta = true;
            break;
          default:
            symbol = isNaN(symbol) ? symbol.toUpperCase().charCodeAt(0) : parseInt(symbol);
            binding.keys.push(symbol);
            if (!this.watchKeys[symbol]) {
              this.watchKeys[symbol] = [];
            }
            this.watchKeys[symbol].push(binding);
        }
      });
    }
    bindEvents() {
      var self2 = this;
      this.keyupBinding = function(e) {
        var code = e.keyCode;
        var bindings2 = self2.watchKeys[code];
        if (bindings2) {
          self2.pressedKeys.push(code);
          bindings2.forEach(function(binding) {
            self2.checkBinding(e, binding);
          });
        }
      };
      this.keydownBinding = function(e) {
        var code = e.keyCode;
        var bindings2 = self2.watchKeys[code];
        if (bindings2) {
          var index7 = self2.pressedKeys.indexOf(code);
          if (index7 > -1) {
            self2.pressedKeys.splice(index7, 1);
          }
        }
      };
      this.table.element.addEventListener("keydown", this.keyupBinding);
      this.table.element.addEventListener("keyup", this.keydownBinding);
    }
    clearBindings() {
      if (this.keyupBinding) {
        this.table.element.removeEventListener("keydown", this.keyupBinding);
      }
      if (this.keydownBinding) {
        this.table.element.removeEventListener("keyup", this.keydownBinding);
      }
    }
    checkBinding(e, binding) {
      var match = true;
      if (e.ctrlKey == binding.ctrl && e.shiftKey == binding.shift && e.metaKey == binding.meta) {
        binding.keys.forEach((key) => {
          var index7 = this.pressedKeys.indexOf(key);
          if (index7 == -1) {
            match = false;
          }
        });
        if (match) {
          binding.action.call(this, e);
        }
        return true;
      }
      return false;
    }
  };
  var Menu = class extends Module {
    static moduleName = "menu";
    constructor(table) {
      super(table);
      this.menuContainer = null;
      this.nestedMenuBlock = false;
      this.currentComponent = null;
      this.rootPopup = null;
      this.columnSubscribers = {};
      this.registerTableOption("rowContextMenu", false);
      this.registerTableOption("rowClickMenu", false);
      this.registerTableOption("rowDblClickMenu", false);
      this.registerTableOption("groupContextMenu", false);
      this.registerTableOption("groupClickMenu", false);
      this.registerTableOption("groupDblClickMenu", false);
      this.registerColumnOption("headerContextMenu");
      this.registerColumnOption("headerClickMenu");
      this.registerColumnOption("headerDblClickMenu");
      this.registerColumnOption("headerMenu");
      this.registerColumnOption("headerMenuIcon");
      this.registerColumnOption("contextMenu");
      this.registerColumnOption("clickMenu");
      this.registerColumnOption("dblClickMenu");
    }
    initialize() {
      this.deprecatedOptionsCheck();
      this.initializeRowWatchers();
      this.initializeGroupWatchers();
      this.subscribe("column-init", this.initializeColumn.bind(this));
    }
    deprecatedOptionsCheck() {
    }
    initializeRowWatchers() {
      if (this.table.options.rowContextMenu) {
        this.subscribe("row-contextmenu", this.loadMenuEvent.bind(this, this.table.options.rowContextMenu));
        this.table.on("rowTapHold", this.loadMenuEvent.bind(this, this.table.options.rowContextMenu));
      }
      if (this.table.options.rowClickMenu) {
        this.subscribe("row-click", this.loadMenuEvent.bind(this, this.table.options.rowClickMenu));
      }
      if (this.table.options.rowDblClickMenu) {
        this.subscribe("row-dblclick", this.loadMenuEvent.bind(this, this.table.options.rowDblClickMenu));
      }
    }
    initializeGroupWatchers() {
      if (this.table.options.groupContextMenu) {
        this.subscribe("group-contextmenu", this.loadMenuEvent.bind(this, this.table.options.groupContextMenu));
        this.table.on("groupTapHold", this.loadMenuEvent.bind(this, this.table.options.groupContextMenu));
      }
      if (this.table.options.groupClickMenu) {
        this.subscribe("group-click", this.loadMenuEvent.bind(this, this.table.options.groupClickMenu));
      }
      if (this.table.options.groupDblClickMenu) {
        this.subscribe("group-dblclick", this.loadMenuEvent.bind(this, this.table.options.groupDblClickMenu));
      }
    }
    initializeColumn(column) {
      var def2 = column.definition;
      if (def2.headerContextMenu && !this.columnSubscribers.headerContextMenu) {
        this.columnSubscribers.headerContextMenu = this.loadMenuTableColumnEvent.bind(this, "headerContextMenu");
        this.subscribe("column-contextmenu", this.columnSubscribers.headerContextMenu);
        this.table.on("headerTapHold", this.loadMenuTableColumnEvent.bind(this, "headerContextMenu"));
      }
      if (def2.headerClickMenu && !this.columnSubscribers.headerClickMenu) {
        this.columnSubscribers.headerClickMenu = this.loadMenuTableColumnEvent.bind(this, "headerClickMenu");
        this.subscribe("column-click", this.columnSubscribers.headerClickMenu);
      }
      if (def2.headerDblClickMenu && !this.columnSubscribers.headerDblClickMenu) {
        this.columnSubscribers.headerDblClickMenu = this.loadMenuTableColumnEvent.bind(this, "headerDblClickMenu");
        this.subscribe("column-dblclick", this.columnSubscribers.headerDblClickMenu);
      }
      if (def2.headerMenu) {
        this.initializeColumnHeaderMenu(column);
      }
      if (def2.contextMenu && !this.columnSubscribers.contextMenu) {
        this.columnSubscribers.contextMenu = this.loadMenuTableCellEvent.bind(this, "contextMenu");
        this.subscribe("cell-contextmenu", this.columnSubscribers.contextMenu);
        this.table.on("cellTapHold", this.loadMenuTableCellEvent.bind(this, "contextMenu"));
      }
      if (def2.clickMenu && !this.columnSubscribers.clickMenu) {
        this.columnSubscribers.clickMenu = this.loadMenuTableCellEvent.bind(this, "clickMenu");
        this.subscribe("cell-click", this.columnSubscribers.clickMenu);
      }
      if (def2.dblClickMenu && !this.columnSubscribers.dblClickMenu) {
        this.columnSubscribers.dblClickMenu = this.loadMenuTableCellEvent.bind(this, "dblClickMenu");
        this.subscribe("cell-dblclick", this.columnSubscribers.dblClickMenu);
      }
    }
    initializeColumnHeaderMenu(column) {
      var icon = column.definition.headerMenuIcon, headerMenuEl;
      headerMenuEl = document.createElement("span");
      headerMenuEl.classList.add("tabulator-header-popup-button");
      if (icon) {
        if (typeof icon === "function") {
          icon = icon(column.getComponent());
        }
        if (icon instanceof HTMLElement) {
          headerMenuEl.appendChild(icon);
        } else {
          headerMenuEl.innerHTML = icon;
        }
      } else {
        headerMenuEl.innerHTML = "&vellip;";
      }
      headerMenuEl.addEventListener("click", (e) => {
        e.stopPropagation();
        e.preventDefault();
        this.loadMenuEvent(column.definition.headerMenu, e, column);
      });
      column.titleElement.insertBefore(headerMenuEl, column.titleElement.firstChild);
    }
    loadMenuTableCellEvent(option, e, cell) {
      if (cell._cell) {
        cell = cell._cell;
      }
      if (cell.column.definition[option]) {
        this.loadMenuEvent(cell.column.definition[option], e, cell);
      }
    }
    loadMenuTableColumnEvent(option, e, column) {
      if (column._column) {
        column = column._column;
      }
      if (column.definition[option]) {
        this.loadMenuEvent(column.definition[option], e, column);
      }
    }
    loadMenuEvent(menu, e, component) {
      if (component._group) {
        component = component._group;
      } else if (component._row) {
        component = component._row;
      }
      menu = typeof menu == "function" ? menu.call(this.table, e, component.getComponent()) : menu;
      this.loadMenu(e, component, menu);
    }
    loadMenu(e, component, menu, parentEl, parentPopup) {
      var touch = !(e instanceof MouseEvent), menuEl = document.createElement("div"), popup;
      menuEl.classList.add("tabulator-menu");
      if (!touch) {
        e.preventDefault();
      }
      if (!menu || !menu.length) {
        return;
      }
      if (!parentEl) {
        if (this.nestedMenuBlock) {
          if (this.rootPopup) {
            return;
          }
        } else {
          this.nestedMenuBlock = setTimeout(() => {
            this.nestedMenuBlock = false;
          }, 100);
        }
        if (this.rootPopup) {
          this.rootPopup.hide();
        }
        this.rootPopup = popup = this.popup(menuEl);
      } else {
        popup = parentPopup.child(menuEl);
      }
      menu.forEach((item) => {
        var itemEl = document.createElement("div"), label = item.label, disabled = item.disabled;
        if (item.separator) {
          itemEl.classList.add("tabulator-menu-separator");
        } else {
          itemEl.classList.add("tabulator-menu-item");
          if (typeof label == "function") {
            label = label.call(this.table, component.getComponent());
          }
          if (label instanceof Node) {
            itemEl.appendChild(label);
          } else {
            itemEl.innerHTML = label;
          }
          if (typeof disabled == "function") {
            disabled = disabled.call(this.table, component.getComponent());
          }
          if (disabled) {
            itemEl.classList.add("tabulator-menu-item-disabled");
            itemEl.addEventListener("click", (e2) => {
              e2.stopPropagation();
            });
          } else {
            if (item.menu && item.menu.length) {
              itemEl.addEventListener("click", (e2) => {
                e2.stopPropagation();
                this.loadMenu(e2, component, item.menu, itemEl, popup);
              });
            } else {
              if (item.action) {
                itemEl.addEventListener("click", (e2) => {
                  item.action(e2, component.getComponent());
                });
              }
            }
          }
          if (item.menu && item.menu.length) {
            itemEl.classList.add("tabulator-menu-item-submenu");
          }
        }
        menuEl.appendChild(itemEl);
      });
      menuEl.addEventListener("click", (e2) => {
        if (this.rootPopup) {
          this.rootPopup.hide();
        }
      });
      popup.show(parentEl || e);
      if (popup === this.rootPopup) {
        this.rootPopup.hideOnBlur(() => {
          this.rootPopup = null;
          if (this.currentComponent) {
            this.dispatch("menu-closed", menu, popup);
            this.dispatchExternal("menuClosed", this.currentComponent.getComponent());
            this.currentComponent = null;
          }
        });
        this.currentComponent = component;
        this.dispatch("menu-opened", menu, popup);
        this.dispatchExternal("menuOpened", component.getComponent());
      }
    }
  };
  var MoveColumns = class extends Module {
    static moduleName = "moveColumn";
    constructor(table) {
      super(table);
      this.placeholderElement = this.createPlaceholderElement();
      this.hoverElement = false;
      this.checkTimeout = false;
      this.checkPeriod = 250;
      this.moving = false;
      this.toCol = false;
      this.toColAfter = false;
      this.startX = 0;
      this.autoScrollMargin = 40;
      this.autoScrollStep = 5;
      this.autoScrollTimeout = false;
      this.touchMove = false;
      this.moveHover = this.moveHover.bind(this);
      this.endMove = this.endMove.bind(this);
      this.registerTableOption("movableColumns", false);
    }
    createPlaceholderElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-col");
      el.classList.add("tabulator-col-placeholder");
      return el;
    }
    initialize() {
      if (this.table.options.movableColumns) {
        this.subscribe("column-init", this.initializeColumn.bind(this));
        this.subscribe("alert-show", this.abortMove.bind(this));
      }
    }
    abortMove() {
      clearTimeout(this.checkTimeout);
    }
    initializeColumn(column) {
      var self2 = this, config = {}, colEl;
      if (!column.modules.frozen && !column.isGroup && !column.isRowHeader) {
        colEl = column.getElement();
        config.mousemove = function(e) {
          if (column.parent === self2.moving.parent) {
            if ((self2.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(colEl).left + self2.table.columnManager.contentsElement.scrollLeft > column.getWidth() / 2) {
              if (self2.toCol !== column || !self2.toColAfter) {
                colEl.parentNode.insertBefore(self2.placeholderElement, colEl.nextSibling);
                self2.moveColumn(column, true);
              }
            } else {
              if (self2.toCol !== column || self2.toColAfter) {
                colEl.parentNode.insertBefore(self2.placeholderElement, colEl);
                self2.moveColumn(column, false);
              }
            }
          }
        }.bind(self2);
        colEl.addEventListener("mousedown", function(e) {
          self2.touchMove = false;
          if (e.which === 1) {
            self2.checkTimeout = setTimeout(function() {
              self2.startMove(e, column);
            }, self2.checkPeriod);
          }
        });
        colEl.addEventListener("mouseup", function(e) {
          if (e.which === 1) {
            if (self2.checkTimeout) {
              clearTimeout(self2.checkTimeout);
            }
          }
        });
        self2.bindTouchEvents(column);
      }
      column.modules.moveColumn = config;
    }
    bindTouchEvents(column) {
      var colEl = column.getElement(), startXMove = false, nextCol, prevCol, nextColWidth, prevColWidth, nextColWidthLast, prevColWidthLast;
      colEl.addEventListener("touchstart", (e) => {
        this.checkTimeout = setTimeout(() => {
          this.touchMove = true;
          nextCol = column.nextColumn();
          nextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;
          prevCol = column.prevColumn();
          prevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;
          nextColWidthLast = 0;
          prevColWidthLast = 0;
          startXMove = false;
          this.startMove(e, column);
        }, this.checkPeriod);
      }, { passive: true });
      colEl.addEventListener("touchmove", (e) => {
        var diff, moveToCol;
        if (this.moving) {
          this.moveHover(e);
          if (!startXMove) {
            startXMove = e.touches[0].pageX;
          }
          diff = e.touches[0].pageX - startXMove;
          if (diff > 0) {
            if (nextCol && diff - nextColWidthLast > nextColWidth) {
              moveToCol = nextCol;
              if (moveToCol !== column) {
                startXMove = e.touches[0].pageX;
                moveToCol.getElement().parentNode.insertBefore(this.placeholderElement, moveToCol.getElement().nextSibling);
                this.moveColumn(moveToCol, true);
              }
            }
          } else {
            if (prevCol && -diff - prevColWidthLast > prevColWidth) {
              moveToCol = prevCol;
              if (moveToCol !== column) {
                startXMove = e.touches[0].pageX;
                moveToCol.getElement().parentNode.insertBefore(this.placeholderElement, moveToCol.getElement());
                this.moveColumn(moveToCol, false);
              }
            }
          }
          if (moveToCol) {
            nextCol = moveToCol.nextColumn();
            nextColWidthLast = nextColWidth;
            nextColWidth = nextCol ? nextCol.getWidth() / 2 : 0;
            prevCol = moveToCol.prevColumn();
            prevColWidthLast = prevColWidth;
            prevColWidth = prevCol ? prevCol.getWidth() / 2 : 0;
          }
        }
      }, { passive: true });
      colEl.addEventListener("touchend", (e) => {
        if (this.checkTimeout) {
          clearTimeout(this.checkTimeout);
        }
        if (this.moving) {
          this.endMove(e);
        }
      });
    }
    startMove(e, column) {
      var element = column.getElement(), headerElement = this.table.columnManager.getContentsElement(), headersElement = this.table.columnManager.getHeadersElement();
      if (this.table.modules.selectRange && this.table.modules.selectRange.columnSelection) {
        if (this.table.modules.selectRange.mousedown && this.table.modules.selectRange.selecting === "column") {
          return;
        }
      }
      this.moving = column;
      this.startX = (this.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(element).left;
      this.table.element.classList.add("tabulator-block-select");
      this.placeholderElement.style.width = column.getWidth() + "px";
      this.placeholderElement.style.height = column.getHeight() + "px";
      element.parentNode.insertBefore(this.placeholderElement, element);
      element.parentNode.removeChild(element);
      this.hoverElement = element.cloneNode(true);
      this.hoverElement.classList.add("tabulator-moving");
      headerElement.appendChild(this.hoverElement);
      this.hoverElement.style.left = "0";
      this.hoverElement.style.bottom = headerElement.clientHeight - headersElement.offsetHeight + "px";
      if (!this.touchMove) {
        this._bindMouseMove();
        document.body.addEventListener("mousemove", this.moveHover);
        document.body.addEventListener("mouseup", this.endMove);
      }
      this.moveHover(e);
      this.dispatch("column-moving", e, this.moving);
    }
    _bindMouseMove() {
      this.table.columnManager.columnsByIndex.forEach(function(column) {
        if (column.modules.moveColumn.mousemove) {
          column.getElement().addEventListener("mousemove", column.modules.moveColumn.mousemove);
        }
      });
    }
    _unbindMouseMove() {
      this.table.columnManager.columnsByIndex.forEach(function(column) {
        if (column.modules.moveColumn.mousemove) {
          column.getElement().removeEventListener("mousemove", column.modules.moveColumn.mousemove);
        }
      });
    }
    moveColumn(column, after) {
      var movingCells = this.moving.getCells();
      this.toCol = column;
      this.toColAfter = after;
      if (after) {
        column.getCells().forEach(function(cell, i) {
          var cellEl = cell.getElement(true);
          if (cellEl.parentNode && movingCells[i]) {
            cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl.nextSibling);
          }
        });
      } else {
        column.getCells().forEach(function(cell, i) {
          var cellEl = cell.getElement(true);
          if (cellEl.parentNode && movingCells[i]) {
            cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl);
          }
        });
      }
    }
    endMove(e) {
      if (e.which === 1 || this.touchMove) {
        this._unbindMouseMove();
        this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);
        this.placeholderElement.parentNode.removeChild(this.placeholderElement);
        this.hoverElement.parentNode.removeChild(this.hoverElement);
        this.table.element.classList.remove("tabulator-block-select");
        if (this.toCol) {
          this.table.columnManager.moveColumnActual(this.moving, this.toCol, this.toColAfter);
        }
        this.moving = false;
        this.toCol = false;
        this.toColAfter = false;
        if (!this.touchMove) {
          document.body.removeEventListener("mousemove", this.moveHover);
          document.body.removeEventListener("mouseup", this.endMove);
        }
      }
    }
    moveHover(e) {
      var columnHolder = this.table.columnManager.getContentsElement(), scrollLeft = columnHolder.scrollLeft, xPos = (this.touchMove ? e.touches[0].pageX : e.pageX) - Helpers.elOffset(columnHolder).left + scrollLeft, scrollPos;
      this.hoverElement.style.left = xPos - this.startX + "px";
      if (xPos - scrollLeft < this.autoScrollMargin) {
        if (!this.autoScrollTimeout) {
          this.autoScrollTimeout = setTimeout(() => {
            scrollPos = Math.max(0, scrollLeft - 5);
            this.table.rowManager.getElement().scrollLeft = scrollPos;
            this.autoScrollTimeout = false;
          }, 1);
        }
      }
      if (scrollLeft + columnHolder.clientWidth - xPos < this.autoScrollMargin) {
        if (!this.autoScrollTimeout) {
          this.autoScrollTimeout = setTimeout(() => {
            scrollPos = Math.min(columnHolder.clientWidth, scrollLeft + 5);
            this.table.rowManager.getElement().scrollLeft = scrollPos;
            this.autoScrollTimeout = false;
          }, 1);
        }
      }
    }
  };
  var defaultSenders = {
    delete: function(fromRow, toRow, toTable) {
      fromRow.delete();
    }
  };
  var defaultReceivers = {
    insert: function(fromRow, toRow, fromTable) {
      this.table.addRow(fromRow.getData(), void 0, toRow);
      return true;
    },
    add: function(fromRow, toRow, fromTable) {
      this.table.addRow(fromRow.getData());
      return true;
    },
    update: function(fromRow, toRow, fromTable) {
      if (toRow) {
        toRow.update(fromRow.getData());
        return true;
      }
      return false;
    },
    replace: function(fromRow, toRow, fromTable) {
      if (toRow) {
        this.table.addRow(fromRow.getData(), void 0, toRow);
        toRow.delete();
        return true;
      }
      return false;
    }
  };
  var MoveRows = class _MoveRows extends Module {
    static moduleName = "moveRow";
    //load defaults
    static senders = defaultSenders;
    static receivers = defaultReceivers;
    constructor(table) {
      super(table);
      this.placeholderElement = this.createPlaceholderElement();
      this.hoverElement = false;
      this.checkTimeout = false;
      this.checkPeriod = 150;
      this.moving = false;
      this.toRow = false;
      this.toRowAfter = false;
      this.hasHandle = false;
      this.startY = 0;
      this.startX = 0;
      this.moveHover = this.moveHover.bind(this);
      this.endMove = this.endMove.bind(this);
      this.tableRowDropEvent = false;
      this.touchMove = false;
      this.connection = false;
      this.connectionSelectorsTables = false;
      this.connectionSelectorsElements = false;
      this.connectionElements = [];
      this.connections = [];
      this.connectedTable = false;
      this.connectedRow = false;
      this.registerTableOption("movableRows", false);
      this.registerTableOption("movableRowsConnectedTables", false);
      this.registerTableOption("movableRowsConnectedElements", false);
      this.registerTableOption("movableRowsSender", false);
      this.registerTableOption("movableRowsReceiver", "insert");
      this.registerColumnOption("rowHandle");
    }
    createPlaceholderElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-row");
      el.classList.add("tabulator-row-placeholder");
      return el;
    }
    initialize() {
      if (this.table.options.movableRows) {
        this.connectionSelectorsTables = this.table.options.movableRowsConnectedTables;
        this.connectionSelectorsElements = this.table.options.movableRowsConnectedElements;
        this.connection = this.connectionSelectorsTables || this.connectionSelectorsElements;
        this.subscribe("cell-init", this.initializeCell.bind(this));
        this.subscribe("column-init", this.initializeColumn.bind(this));
        this.subscribe("row-init", this.initializeRow.bind(this));
      }
    }
    initializeGroupHeader(group) {
      var self2 = this, config = {};
      config.mouseup = function(e) {
        self2.tableRowDrop(e, group);
      }.bind(self2);
      config.mousemove = function(e) {
        var rowEl;
        if (e.pageY - Helpers.elOffset(group.element).top + self2.table.rowManager.element.scrollTop > group.getHeight() / 2) {
          if (self2.toRow !== group || !self2.toRowAfter) {
            rowEl = group.getElement();
            rowEl.parentNode.insertBefore(self2.placeholderElement, rowEl.nextSibling);
            self2.moveRow(group, true);
          }
        } else {
          if (self2.toRow !== group || self2.toRowAfter) {
            rowEl = group.getElement();
            if (rowEl.previousSibling) {
              rowEl.parentNode.insertBefore(self2.placeholderElement, rowEl);
              self2.moveRow(group, false);
            }
          }
        }
      }.bind(self2);
      group.modules.moveRow = config;
    }
    initializeRow(row) {
      var self2 = this, config = {}, rowEl;
      config.mouseup = function(e) {
        self2.tableRowDrop(e, row);
      }.bind(self2);
      config.mousemove = function(e) {
        var rowEl2 = row.getElement();
        if (e.pageY - Helpers.elOffset(rowEl2).top + self2.table.rowManager.element.scrollTop > row.getHeight() / 2) {
          if (self2.toRow !== row || !self2.toRowAfter) {
            rowEl2.parentNode.insertBefore(self2.placeholderElement, rowEl2.nextSibling);
            self2.moveRow(row, true);
          }
        } else {
          if (self2.toRow !== row || self2.toRowAfter) {
            rowEl2.parentNode.insertBefore(self2.placeholderElement, rowEl2);
            self2.moveRow(row, false);
          }
        }
      }.bind(self2);
      if (!this.hasHandle) {
        rowEl = row.getElement();
        rowEl.addEventListener("mousedown", function(e) {
          if (e.which === 1) {
            self2.checkTimeout = setTimeout(function() {
              self2.startMove(e, row);
            }, self2.checkPeriod);
          }
        });
        rowEl.addEventListener("mouseup", function(e) {
          if (e.which === 1) {
            if (self2.checkTimeout) {
              clearTimeout(self2.checkTimeout);
            }
          }
        });
        this.bindTouchEvents(row, row.getElement());
      }
      row.modules.moveRow = config;
    }
    initializeColumn(column) {
      if (column.definition.rowHandle && this.table.options.movableRows !== false) {
        this.hasHandle = true;
      }
    }
    initializeCell(cell) {
      if (cell.column.definition.rowHandle && this.table.options.movableRows !== false) {
        var self2 = this, cellEl = cell.getElement(true);
        cellEl.addEventListener("mousedown", function(e) {
          if (e.which === 1) {
            self2.checkTimeout = setTimeout(function() {
              self2.startMove(e, cell.row);
            }, self2.checkPeriod);
          }
        });
        cellEl.addEventListener("mouseup", function(e) {
          if (e.which === 1) {
            if (self2.checkTimeout) {
              clearTimeout(self2.checkTimeout);
            }
          }
        });
        this.bindTouchEvents(cell.row, cellEl);
      }
    }
    bindTouchEvents(row, element) {
      var startYMove = false, nextRow, prevRow, nextRowHeight, prevRowHeight, nextRowHeightLast, prevRowHeightLast;
      element.addEventListener("touchstart", (e) => {
        this.checkTimeout = setTimeout(() => {
          this.touchMove = true;
          nextRow = row.nextRow();
          nextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;
          prevRow = row.prevRow();
          prevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;
          nextRowHeightLast = 0;
          prevRowHeightLast = 0;
          startYMove = false;
          this.startMove(e, row);
        }, this.checkPeriod);
      }, { passive: true });
      this.moving, this.toRow, this.toRowAfter;
      element.addEventListener("touchmove", (e) => {
        var diff, moveToRow;
        if (this.moving) {
          e.preventDefault();
          this.moveHover(e);
          if (!startYMove) {
            startYMove = e.touches[0].pageY;
          }
          diff = e.touches[0].pageY - startYMove;
          if (diff > 0) {
            if (nextRow && diff - nextRowHeightLast > nextRowHeight) {
              moveToRow = nextRow;
              if (moveToRow !== row) {
                startYMove = e.touches[0].pageY;
                moveToRow.getElement().parentNode.insertBefore(this.placeholderElement, moveToRow.getElement().nextSibling);
                this.moveRow(moveToRow, true);
              }
            }
          } else {
            if (prevRow && -diff - prevRowHeightLast > prevRowHeight) {
              moveToRow = prevRow;
              if (moveToRow !== row) {
                startYMove = e.touches[0].pageY;
                moveToRow.getElement().parentNode.insertBefore(this.placeholderElement, moveToRow.getElement());
                this.moveRow(moveToRow, false);
              }
            }
          }
          if (moveToRow) {
            nextRow = moveToRow.nextRow();
            nextRowHeightLast = nextRowHeight;
            nextRowHeight = nextRow ? nextRow.getHeight() / 2 : 0;
            prevRow = moveToRow.prevRow();
            prevRowHeightLast = prevRowHeight;
            prevRowHeight = prevRow ? prevRow.getHeight() / 2 : 0;
          }
        }
      });
      element.addEventListener("touchend", (e) => {
        if (this.checkTimeout) {
          clearTimeout(this.checkTimeout);
        }
        if (this.moving) {
          this.endMove(e);
          this.touchMove = false;
        }
      });
    }
    _bindMouseMove() {
      this.table.rowManager.getDisplayRows().forEach((row) => {
        if ((row.type === "row" || row.type === "group") && row.modules.moveRow && row.modules.moveRow.mousemove) {
          row.getElement().addEventListener("mousemove", row.modules.moveRow.mousemove);
        }
      });
    }
    _unbindMouseMove() {
      this.table.rowManager.getDisplayRows().forEach((row) => {
        if ((row.type === "row" || row.type === "group") && row.modules.moveRow && row.modules.moveRow.mousemove) {
          row.getElement().removeEventListener("mousemove", row.modules.moveRow.mousemove);
        }
      });
    }
    startMove(e, row) {
      var element = row.getElement();
      this.setStartPosition(e, row);
      this.moving = row;
      this.table.element.classList.add("tabulator-block-select");
      this.placeholderElement.style.width = row.getWidth() + "px";
      this.placeholderElement.style.height = row.getHeight() + "px";
      if (!this.connection) {
        element.parentNode.insertBefore(this.placeholderElement, element);
        element.parentNode.removeChild(element);
      } else {
        this.table.element.classList.add("tabulator-movingrow-sending");
        this.connectToTables(row);
      }
      this.hoverElement = element.cloneNode(true);
      this.hoverElement.classList.add("tabulator-moving");
      if (this.connection) {
        document.body.appendChild(this.hoverElement);
        this.hoverElement.style.left = "0";
        this.hoverElement.style.top = "0";
        this.hoverElement.style.width = this.table.element.clientWidth + "px";
        this.hoverElement.style.whiteSpace = "nowrap";
        this.hoverElement.style.overflow = "hidden";
        this.hoverElement.style.pointerEvents = "none";
      } else {
        this.table.rowManager.getTableElement().appendChild(this.hoverElement);
        this.hoverElement.style.left = "0";
        this.hoverElement.style.top = "0";
        this._bindMouseMove();
      }
      document.body.addEventListener("mousemove", this.moveHover);
      document.body.addEventListener("mouseup", this.endMove);
      this.dispatchExternal("rowMoving", row.getComponent());
      this.moveHover(e);
    }
    setStartPosition(e, row) {
      var pageX = this.touchMove ? e.touches[0].pageX : e.pageX, pageY = this.touchMove ? e.touches[0].pageY : e.pageY, element, position;
      element = row.getElement();
      if (this.connection) {
        position = element.getBoundingClientRect();
        this.startX = position.left - pageX + window.pageXOffset;
        this.startY = position.top - pageY + window.pageYOffset;
      } else {
        this.startY = pageY - element.getBoundingClientRect().top;
      }
    }
    endMove(e) {
      if (!e || e.which === 1 || this.touchMove) {
        this._unbindMouseMove();
        if (!this.connection) {
          this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);
          this.placeholderElement.parentNode.removeChild(this.placeholderElement);
        }
        this.hoverElement.parentNode.removeChild(this.hoverElement);
        this.table.element.classList.remove("tabulator-block-select");
        if (this.toRow) {
          this.table.rowManager.moveRow(this.moving, this.toRow, this.toRowAfter);
        } else {
          this.dispatchExternal("rowMoveCancelled", this.moving.getComponent());
        }
        this.moving = false;
        this.toRow = false;
        this.toRowAfter = false;
        document.body.removeEventListener("mousemove", this.moveHover);
        document.body.removeEventListener("mouseup", this.endMove);
        if (this.connection) {
          this.table.element.classList.remove("tabulator-movingrow-sending");
          this.disconnectFromTables();
        }
      }
    }
    moveRow(row, after) {
      this.toRow = row;
      this.toRowAfter = after;
    }
    moveHover(e) {
      if (this.connection) {
        this.moveHoverConnections.call(this, e);
      } else {
        this.moveHoverTable.call(this, e);
      }
    }
    moveHoverTable(e) {
      var rowHolder = this.table.rowManager.getElement(), scrollTop = rowHolder.scrollTop, yPos = (this.touchMove ? e.touches[0].pageY : e.pageY) - rowHolder.getBoundingClientRect().top + scrollTop;
      this.hoverElement.style.top = Math.min(yPos - this.startY, this.table.rowManager.element.scrollHeight - this.hoverElement.offsetHeight) + "px";
    }
    moveHoverConnections(e) {
      this.hoverElement.style.left = this.startX + (this.touchMove ? e.touches[0].pageX : e.pageX) + "px";
      this.hoverElement.style.top = this.startY + (this.touchMove ? e.touches[0].pageY : e.pageY) + "px";
    }
    elementRowDrop(e, element, row) {
      this.dispatchExternal("movableRowsElementDrop", e, element, row ? row.getComponent() : false);
    }
    //establish connection with other tables
    connectToTables(row) {
      var connectionTables;
      if (this.connectionSelectorsTables) {
        connectionTables = this.commsConnections(this.connectionSelectorsTables);
        this.dispatchExternal("movableRowsSendingStart", connectionTables);
        this.commsSend(this.connectionSelectorsTables, "moveRow", "connect", {
          row
        });
      }
      if (this.connectionSelectorsElements) {
        this.connectionElements = [];
        if (!Array.isArray(this.connectionSelectorsElements)) {
          this.connectionSelectorsElements = [this.connectionSelectorsElements];
        }
        this.connectionSelectorsElements.forEach((query) => {
          if (typeof query === "string") {
            this.connectionElements = this.connectionElements.concat(Array.prototype.slice.call(document.querySelectorAll(query)));
          } else {
            this.connectionElements.push(query);
          }
        });
        this.connectionElements.forEach((element) => {
          var dropEvent = (e) => {
            this.elementRowDrop(e, element, this.moving);
          };
          element.addEventListener("mouseup", dropEvent);
          element.tabulatorElementDropEvent = dropEvent;
          element.classList.add("tabulator-movingrow-receiving");
        });
      }
    }
    //disconnect from other tables
    disconnectFromTables() {
      var connectionTables;
      if (this.connectionSelectorsTables) {
        connectionTables = this.commsConnections(this.connectionSelectorsTables);
        this.dispatchExternal("movableRowsSendingStop", connectionTables);
        this.commsSend(this.connectionSelectorsTables, "moveRow", "disconnect");
      }
      this.connectionElements.forEach((element) => {
        element.classList.remove("tabulator-movingrow-receiving");
        element.removeEventListener("mouseup", element.tabulatorElementDropEvent);
        delete element.tabulatorElementDropEvent;
      });
    }
    //accept incomming connection
    connect(table, row) {
      if (!this.connectedTable) {
        this.connectedTable = table;
        this.connectedRow = row;
        this.table.element.classList.add("tabulator-movingrow-receiving");
        this.table.rowManager.getDisplayRows().forEach((row2) => {
          if (row2.type === "row" && row2.modules.moveRow && row2.modules.moveRow.mouseup) {
            row2.getElement().addEventListener("mouseup", row2.modules.moveRow.mouseup);
          }
        });
        this.tableRowDropEvent = this.tableRowDrop.bind(this);
        this.table.element.addEventListener("mouseup", this.tableRowDropEvent);
        this.dispatchExternal("movableRowsReceivingStart", row, table);
        return true;
      } else {
        console.warn("Move Row Error - Table cannot accept connection, already connected to table:", this.connectedTable);
        return false;
      }
    }
    //close incoming connection
    disconnect(table) {
      if (table === this.connectedTable) {
        this.connectedTable = false;
        this.connectedRow = false;
        this.table.element.classList.remove("tabulator-movingrow-receiving");
        this.table.rowManager.getDisplayRows().forEach((row) => {
          if (row.type === "row" && row.modules.moveRow && row.modules.moveRow.mouseup) {
            row.getElement().removeEventListener("mouseup", row.modules.moveRow.mouseup);
          }
        });
        this.table.element.removeEventListener("mouseup", this.tableRowDropEvent);
        this.dispatchExternal("movableRowsReceivingStop", table);
      } else {
        console.warn("Move Row Error - trying to disconnect from non connected table");
      }
    }
    dropComplete(table, row, success) {
      var sender = false;
      if (success) {
        switch (typeof this.table.options.movableRowsSender) {
          case "string":
            sender = _MoveRows.senders[this.table.options.movableRowsSender];
            break;
          case "function":
            sender = this.table.options.movableRowsSender;
            break;
        }
        if (sender) {
          sender.call(this, this.moving ? this.moving.getComponent() : void 0, row ? row.getComponent() : void 0, table);
        } else {
          if (this.table.options.movableRowsSender) {
            console.warn("Mover Row Error - no matching sender found:", this.table.options.movableRowsSender);
          }
        }
        this.dispatchExternal("movableRowsSent", this.moving.getComponent(), row ? row.getComponent() : void 0, table);
      } else {
        this.dispatchExternal("movableRowsSentFailed", this.moving.getComponent(), row ? row.getComponent() : void 0, table);
      }
      this.endMove();
    }
    tableRowDrop(e, row) {
      var receiver = false, success = false;
      e.stopImmediatePropagation();
      switch (typeof this.table.options.movableRowsReceiver) {
        case "string":
          receiver = _MoveRows.receivers[this.table.options.movableRowsReceiver];
          break;
        case "function":
          receiver = this.table.options.movableRowsReceiver;
          break;
      }
      if (receiver) {
        success = receiver.call(this, this.connectedRow.getComponent(), row ? row.getComponent() : void 0, this.connectedTable);
      } else {
        console.warn("Mover Row Error - no matching receiver found:", this.table.options.movableRowsReceiver);
      }
      if (success) {
        this.dispatchExternal("movableRowsReceived", this.connectedRow.getComponent(), row ? row.getComponent() : void 0, this.connectedTable);
      } else {
        this.dispatchExternal("movableRowsReceivedFailed", this.connectedRow.getComponent(), row ? row.getComponent() : void 0, this.connectedTable);
      }
      this.commsSend(this.connectedTable, "moveRow", "dropcomplete", {
        row,
        success
      });
    }
    commsReceived(table, action, data) {
      switch (action) {
        case "connect":
          return this.connect(table, data.row);
        case "disconnect":
          return this.disconnect(table);
        case "dropcomplete":
          return this.dropComplete(table, data.row, data.success);
      }
    }
  };
  var defaultMutators = {};
  var Mutator = class _Mutator extends Module {
    static moduleName = "mutator";
    //load defaults
    static mutators = defaultMutators;
    constructor(table) {
      super(table);
      this.allowedTypes = ["", "data", "edit", "clipboard", "import"];
      this.enabled = true;
      this.registerColumnOption("mutator");
      this.registerColumnOption("mutatorParams");
      this.registerColumnOption("mutatorData");
      this.registerColumnOption("mutatorDataParams");
      this.registerColumnOption("mutatorEdit");
      this.registerColumnOption("mutatorEditParams");
      this.registerColumnOption("mutatorClipboard");
      this.registerColumnOption("mutatorClipboardParams");
      this.registerColumnOption("mutatorImport");
      this.registerColumnOption("mutatorImportParams");
      this.registerColumnOption("mutateLink");
    }
    initialize() {
      this.subscribe("cell-value-changing", this.transformCell.bind(this));
      this.subscribe("cell-value-changed", this.mutateLink.bind(this));
      this.subscribe("column-layout", this.initializeColumn.bind(this));
      this.subscribe("row-data-init-before", this.rowDataChanged.bind(this));
      this.subscribe("row-data-changing", this.rowDataChanged.bind(this));
    }
    rowDataChanged(row, tempData, updatedData) {
      return this.transformRow(tempData, "data", updatedData);
    }
    //initialize column mutator
    initializeColumn(column) {
      var match = false, config = {};
      this.allowedTypes.forEach((type) => {
        var key = "mutator" + (type.charAt(0).toUpperCase() + type.slice(1)), mutator;
        if (column.definition[key]) {
          mutator = this.lookupMutator(column.definition[key]);
          if (mutator) {
            match = true;
            config[key] = {
              mutator,
              params: column.definition[key + "Params"] || {}
            };
          }
        }
      });
      if (match) {
        column.modules.mutate = config;
      }
    }
    lookupMutator(value) {
      var mutator = false;
      switch (typeof value) {
        case "string":
          if (_Mutator.mutators[value]) {
            mutator = _Mutator.mutators[value];
          } else {
            console.warn("Mutator Error - No such mutator found, ignoring: ", value);
          }
          break;
        case "function":
          mutator = value;
          break;
      }
      return mutator;
    }
    //apply mutator to row
    transformRow(data, type, updatedData) {
      var key = "mutator" + (type.charAt(0).toUpperCase() + type.slice(1)), value;
      if (this.enabled) {
        this.table.columnManager.traverse((column) => {
          var mutator, params, component;
          if (column.modules.mutate) {
            mutator = column.modules.mutate[key] || column.modules.mutate.mutator || false;
            if (mutator) {
              value = column.getFieldValue(typeof updatedData !== "undefined" ? updatedData : data);
              if (type == "data" && !updatedData || typeof value !== "undefined") {
                component = column.getComponent();
                params = typeof mutator.params === "function" ? mutator.params(value, data, type, component) : mutator.params;
                column.setFieldValue(data, mutator.mutator(value, data, type, params, component));
              }
            }
          }
        });
      }
      return data;
    }
    //apply mutator to new cell value
    transformCell(cell, value) {
      if (cell.column.modules.mutate) {
        var mutator = cell.column.modules.mutate.mutatorEdit || cell.column.modules.mutate.mutator || false, tempData = {};
        if (mutator) {
          tempData = Object.assign(tempData, cell.row.getData());
          cell.column.setFieldValue(tempData, value);
          return mutator.mutator(value, tempData, "edit", mutator.params, cell.getComponent());
        }
      }
      return value;
    }
    mutateLink(cell) {
      var links = cell.column.definition.mutateLink;
      if (links) {
        if (!Array.isArray(links)) {
          links = [links];
        }
        links.forEach((link2) => {
          var linkCell = cell.row.getCell(link2);
          if (linkCell) {
            linkCell.setValue(linkCell.getValue(), true, true);
          }
        });
      }
    }
    enable() {
      this.enabled = true;
    }
    disable() {
      this.enabled = false;
    }
  };
  function rows(pageSize, currentRow, currentPage, totalRows, totalPages) {
    var el = document.createElement("span"), showingEl = document.createElement("span"), valueEl = document.createElement("span"), ofEl = document.createElement("span"), totalEl = document.createElement("span"), rowsEl = document.createElement("span");
    this.table.modules.localize.langBind("pagination|counter|showing", (value) => {
      showingEl.innerHTML = value;
    });
    this.table.modules.localize.langBind("pagination|counter|of", (value) => {
      ofEl.innerHTML = value;
    });
    this.table.modules.localize.langBind("pagination|counter|rows", (value) => {
      rowsEl.innerHTML = value;
    });
    if (totalRows) {
      valueEl.innerHTML = " " + currentRow + "-" + Math.min(currentRow + pageSize - 1, totalRows) + " ";
      totalEl.innerHTML = " " + totalRows + " ";
      el.appendChild(showingEl);
      el.appendChild(valueEl);
      el.appendChild(ofEl);
      el.appendChild(totalEl);
      el.appendChild(rowsEl);
    } else {
      valueEl.innerHTML = " 0 ";
      el.appendChild(showingEl);
      el.appendChild(valueEl);
      el.appendChild(rowsEl);
    }
    return el;
  }
  function pages(pageSize, currentRow, currentPage, totalRows, totalPages) {
    var el = document.createElement("span"), showingEl = document.createElement("span"), valueEl = document.createElement("span"), ofEl = document.createElement("span"), totalEl = document.createElement("span"), rowsEl = document.createElement("span");
    this.table.modules.localize.langBind("pagination|counter|showing", (value) => {
      showingEl.innerHTML = value;
    });
    valueEl.innerHTML = " " + currentPage + " ";
    this.table.modules.localize.langBind("pagination|counter|of", (value) => {
      ofEl.innerHTML = value;
    });
    totalEl.innerHTML = " " + totalPages + " ";
    this.table.modules.localize.langBind("pagination|counter|pages", (value) => {
      rowsEl.innerHTML = value;
    });
    el.appendChild(showingEl);
    el.appendChild(valueEl);
    el.appendChild(ofEl);
    el.appendChild(totalEl);
    el.appendChild(rowsEl);
    return el;
  }
  var defaultPageCounters = {
    rows,
    pages
  };
  var Page = class _Page extends Module {
    static moduleName = "page";
    //load defaults
    static pageCounters = defaultPageCounters;
    constructor(table) {
      super(table);
      this.mode = "local";
      this.progressiveLoad = false;
      this.element = null;
      this.pageCounterElement = null;
      this.pageCounter = null;
      this.size = 0;
      this.page = 1;
      this.count = 5;
      this.max = 1;
      this.remoteRowCountEstimate = null;
      this.initialLoad = true;
      this.dataChanging = false;
      this.pageSizes = [];
      this.registerTableOption("pagination", false);
      this.registerTableOption("paginationMode", "local");
      this.registerTableOption("paginationSize", false);
      this.registerTableOption("paginationInitialPage", 1);
      this.registerTableOption("paginationCounter", false);
      this.registerTableOption("paginationCounterElement", false);
      this.registerTableOption("paginationButtonCount", 5);
      this.registerTableOption("paginationSizeSelector", false);
      this.registerTableOption("paginationElement", false);
      this.registerTableOption("paginationAddRow", "page");
      this.registerTableOption("paginationOutOfRange", false);
      this.registerTableOption("progressiveLoad", false);
      this.registerTableOption("progressiveLoadDelay", 0);
      this.registerTableOption("progressiveLoadScrollMargin", 0);
      this.registerTableFunction("setMaxPage", this.setMaxPage.bind(this));
      this.registerTableFunction("setPage", this.setPage.bind(this));
      this.registerTableFunction("setPageToRow", this.userSetPageToRow.bind(this));
      this.registerTableFunction("setPageSize", this.userSetPageSize.bind(this));
      this.registerTableFunction("getPageSize", this.getPageSize.bind(this));
      this.registerTableFunction("previousPage", this.previousPage.bind(this));
      this.registerTableFunction("nextPage", this.nextPage.bind(this));
      this.registerTableFunction("getPage", this.getPage.bind(this));
      this.registerTableFunction("getPageMax", this.getPageMax.bind(this));
      this.registerComponentFunction("row", "pageTo", this.setPageToRow.bind(this));
    }
    initialize() {
      if (this.table.options.pagination) {
        this.subscribe("row-deleted", this.rowsUpdated.bind(this));
        this.subscribe("row-added", this.rowsUpdated.bind(this));
        this.subscribe("data-processed", this.initialLoadComplete.bind(this));
        this.subscribe("table-built", this.calculatePageSizes.bind(this));
        this.subscribe("footer-redraw", this.footerRedraw.bind(this));
        if (this.table.options.paginationAddRow == "page") {
          this.subscribe("row-adding-position", this.rowAddingPosition.bind(this));
        }
        if (this.table.options.paginationMode === "remote") {
          this.subscribe("data-params", this.remotePageParams.bind(this));
          this.subscribe("data-loaded", this._parseRemoteData.bind(this));
        }
        if (this.table.options.progressiveLoad) {
          console.error("Progressive Load Error - Pagination and progressive load cannot be used at the same time");
        }
        this.registerDisplayHandler(this.restOnRenderBefore.bind(this), 40);
        this.registerDisplayHandler(this.getRows.bind(this), 50);
        this.createElements();
        this.initializePageCounter();
        this.initializePaginator();
      } else if (this.table.options.progressiveLoad) {
        this.subscribe("data-params", this.remotePageParams.bind(this));
        this.subscribe("data-loaded", this._parseRemoteData.bind(this));
        this.subscribe("table-built", this.calculatePageSizes.bind(this));
        this.subscribe("data-processed", this.initialLoadComplete.bind(this));
        this.initializeProgressive(this.table.options.progressiveLoad);
        if (this.table.options.progressiveLoad === "scroll") {
          this.subscribe("scroll-vertical", this.scrollVertical.bind(this));
        }
      }
    }
    rowAddingPosition(row, top) {
      var rowManager = this.table.rowManager, displayRows = rowManager.getDisplayRows(), index7;
      if (top) {
        if (displayRows.length) {
          index7 = displayRows[0];
        } else {
          if (rowManager.activeRows.length) {
            index7 = rowManager.activeRows[rowManager.activeRows.length - 1];
            top = false;
          }
        }
      } else {
        if (displayRows.length) {
          index7 = displayRows[displayRows.length - 1];
          top = displayRows.length < this.size ? false : true;
        }
      }
      return { index: index7, top };
    }
    calculatePageSizes() {
      var testElRow, testElCell;
      if (this.table.options.paginationSize) {
        this.size = this.table.options.paginationSize;
      } else {
        testElRow = document.createElement("div");
        testElRow.classList.add("tabulator-row");
        testElRow.style.visibility = "hidden";
        testElCell = document.createElement("div");
        testElCell.classList.add("tabulator-cell");
        testElCell.innerHTML = "Page Row Test";
        testElRow.appendChild(testElCell);
        this.table.rowManager.getTableElement().appendChild(testElRow);
        this.size = Math.floor(this.table.rowManager.getElement().clientHeight / testElRow.offsetHeight);
        this.table.rowManager.getTableElement().removeChild(testElRow);
      }
      this.dispatchExternal("pageSizeChanged", this.size);
      this.generatePageSizeSelectList();
    }
    initialLoadComplete() {
      this.initialLoad = false;
    }
    remotePageParams(data, config, silent, params) {
      if (!this.initialLoad) {
        if (this.progressiveLoad && !silent || !this.progressiveLoad && !this.dataChanging) {
          this.reset(true);
        }
      }
      params.page = this.page;
      if (this.size) {
        params.size = this.size;
      }
      return params;
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    userSetPageToRow(row) {
      if (this.table.options.pagination) {
        row = this.table.rowManager.findRow(row);
        if (row) {
          return this.setPageToRow(row);
        }
      }
      return Promise.reject();
    }
    userSetPageSize(size2) {
      if (this.table.options.pagination) {
        this.setPageSize(size2);
        return this.setPage(1);
      } else {
        return false;
      }
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    scrollVertical(top, dir) {
      var element, diff, margin;
      if (!dir && !this.table.dataLoader.loading) {
        element = this.table.rowManager.getElement();
        diff = element.scrollHeight - element.clientHeight - top;
        margin = this.table.options.progressiveLoadScrollMargin || element.clientHeight * 2;
        if (diff < margin) {
          this.nextPage().catch(() => {
          });
        }
      }
    }
    restOnRenderBefore(rows2, renderInPosition) {
      if (!renderInPosition) {
        if (this.mode === "local") {
          this.reset();
        }
      }
      return rows2;
    }
    rowsUpdated() {
      this.refreshData(true, "all");
    }
    createElements() {
      var button;
      this.element = document.createElement("span");
      this.element.classList.add("tabulator-paginator");
      this.pagesElement = document.createElement("span");
      this.pagesElement.classList.add("tabulator-pages");
      button = document.createElement("button");
      button.classList.add("tabulator-page");
      button.setAttribute("type", "button");
      button.setAttribute("role", "button");
      button.setAttribute("aria-label", "");
      button.setAttribute("title", "");
      this.firstBut = button.cloneNode(true);
      this.firstBut.setAttribute("data-page", "first");
      this.prevBut = button.cloneNode(true);
      this.prevBut.setAttribute("data-page", "prev");
      this.nextBut = button.cloneNode(true);
      this.nextBut.setAttribute("data-page", "next");
      this.lastBut = button.cloneNode(true);
      this.lastBut.setAttribute("data-page", "last");
      if (this.table.options.paginationSizeSelector) {
        this.pageSizeSelect = document.createElement("select");
        this.pageSizeSelect.classList.add("tabulator-page-size");
      }
    }
    generatePageSizeSelectList() {
      var pageSizes = [];
      if (this.pageSizeSelect) {
        if (Array.isArray(this.table.options.paginationSizeSelector)) {
          pageSizes = this.table.options.paginationSizeSelector;
          this.pageSizes = pageSizes;
          if (this.pageSizes.indexOf(this.size) == -1) {
            pageSizes.unshift(this.size);
          }
        } else {
          if (this.pageSizes.indexOf(this.size) == -1) {
            pageSizes = [];
            for (let i = 1; i < 5; i++) {
              pageSizes.push(this.size * i);
            }
            this.pageSizes = pageSizes;
          } else {
            pageSizes = this.pageSizes;
          }
        }
        while (this.pageSizeSelect.firstChild)
          this.pageSizeSelect.removeChild(this.pageSizeSelect.firstChild);
        pageSizes.forEach((item) => {
          var itemEl = document.createElement("option");
          itemEl.value = item;
          if (item === true) {
            this.langBind("pagination|all", function(value) {
              itemEl.innerHTML = value;
            });
          } else {
            itemEl.innerHTML = item;
          }
          this.pageSizeSelect.appendChild(itemEl);
        });
        this.pageSizeSelect.value = this.size;
      }
    }
    initializePageCounter() {
      var counter = this.table.options.paginationCounter, pageCounter = null;
      if (counter) {
        if (typeof counter === "function") {
          pageCounter = counter;
        } else {
          pageCounter = _Page.pageCounters[counter];
        }
        if (pageCounter) {
          this.pageCounter = pageCounter;
          this.pageCounterElement = document.createElement("span");
          this.pageCounterElement.classList.add("tabulator-page-counter");
        } else {
          console.warn("Pagination Error - No such page counter found: ", counter);
        }
      }
    }
    //setup pagination
    initializePaginator(hidden) {
      var pageSelectLabel, paginationCounterHolder;
      if (!hidden) {
        this.langBind("pagination|first", (value) => {
          this.firstBut.innerHTML = value;
        });
        this.langBind("pagination|first_title", (value) => {
          this.firstBut.setAttribute("aria-label", value);
          this.firstBut.setAttribute("title", value);
        });
        this.langBind("pagination|prev", (value) => {
          this.prevBut.innerHTML = value;
        });
        this.langBind("pagination|prev_title", (value) => {
          this.prevBut.setAttribute("aria-label", value);
          this.prevBut.setAttribute("title", value);
        });
        this.langBind("pagination|next", (value) => {
          this.nextBut.innerHTML = value;
        });
        this.langBind("pagination|next_title", (value) => {
          this.nextBut.setAttribute("aria-label", value);
          this.nextBut.setAttribute("title", value);
        });
        this.langBind("pagination|last", (value) => {
          this.lastBut.innerHTML = value;
        });
        this.langBind("pagination|last_title", (value) => {
          this.lastBut.setAttribute("aria-label", value);
          this.lastBut.setAttribute("title", value);
        });
        this.firstBut.addEventListener("click", () => {
          this.setPage(1);
        });
        this.prevBut.addEventListener("click", () => {
          this.previousPage();
        });
        this.nextBut.addEventListener("click", () => {
          this.nextPage();
        });
        this.lastBut.addEventListener("click", () => {
          this.setPage(this.max);
        });
        if (this.table.options.paginationElement) {
          this.element = this.table.options.paginationElement;
        }
        if (this.pageSizeSelect) {
          pageSelectLabel = document.createElement("label");
          this.langBind("pagination|page_size", (value) => {
            this.pageSizeSelect.setAttribute("aria-label", value);
            this.pageSizeSelect.setAttribute("title", value);
            pageSelectLabel.innerHTML = value;
          });
          this.element.appendChild(pageSelectLabel);
          this.element.appendChild(this.pageSizeSelect);
          this.pageSizeSelect.addEventListener("change", (e) => {
            this.setPageSize(this.pageSizeSelect.value == "true" ? true : this.pageSizeSelect.value);
            this.setPage(1);
          });
        }
        this.element.appendChild(this.firstBut);
        this.element.appendChild(this.prevBut);
        this.element.appendChild(this.pagesElement);
        this.element.appendChild(this.nextBut);
        this.element.appendChild(this.lastBut);
        if (!this.table.options.paginationElement) {
          if (this.table.options.paginationCounter) {
            if (this.table.options.paginationCounterElement) {
              if (this.table.options.paginationCounterElement instanceof HTMLElement) {
                this.table.options.paginationCounterElement.appendChild(this.pageCounterElement);
              } else if (typeof this.table.options.paginationCounterElement === "string") {
                paginationCounterHolder = document.querySelector(this.table.options.paginationCounterElement);
                if (paginationCounterHolder) {
                  paginationCounterHolder.appendChild(this.pageCounterElement);
                } else {
                  console.warn("Pagination Error - Unable to find element matching paginationCounterElement selector:", this.table.options.paginationCounterElement);
                }
              }
            } else {
              this.footerAppend(this.pageCounterElement);
            }
          }
          this.footerAppend(this.element);
        }
        this.page = this.table.options.paginationInitialPage;
        this.count = this.table.options.paginationButtonCount;
      }
      this.mode = this.table.options.paginationMode;
    }
    initializeProgressive(mode) {
      this.initializePaginator(true);
      this.mode = "progressive_" + mode;
      this.progressiveLoad = true;
    }
    trackChanges() {
      this.dispatch("page-changed");
    }
    //calculate maximum page from number of rows
    setMaxRows(rowCount) {
      if (!rowCount) {
        this.max = 1;
      } else {
        this.max = this.size === true ? 1 : Math.ceil(rowCount / this.size);
      }
      if (this.page > this.max) {
        this.page = this.max;
      }
    }
    //reset to first page without triggering action
    reset(force) {
      if (!this.initialLoad) {
        if (this.mode == "local" || force) {
          this.page = 1;
          this.trackChanges();
        }
      }
    }
    //set the maximum page
    setMaxPage(max2) {
      max2 = parseInt(max2);
      this.max = max2 || 1;
      if (this.page > this.max) {
        this.page = this.max;
        this.trigger();
      }
    }
    //set current page number
    setPage(page) {
      switch (page) {
        case "first":
          return this.setPage(1);
        case "prev":
          return this.previousPage();
        case "next":
          return this.nextPage();
        case "last":
          return this.setPage(this.max);
      }
      page = parseInt(page);
      if (page > 0 && page <= this.max || this.mode !== "local") {
        this.page = page;
        this.trackChanges();
        return this.trigger();
      } else {
        console.warn("Pagination Error - Requested page is out of range of 1 - " + this.max + ":", page);
        return Promise.reject();
      }
    }
    setPageToRow(row) {
      var rows2 = this.displayRows(-1);
      var index7 = rows2.indexOf(row);
      if (index7 > -1) {
        var page = this.size === true ? 1 : Math.ceil((index7 + 1) / this.size);
        return this.setPage(page);
      } else {
        console.warn("Pagination Error - Requested row is not visible");
        return Promise.reject();
      }
    }
    setPageSize(size2) {
      if (size2 !== true) {
        size2 = parseInt(size2);
      }
      if (size2 > 0) {
        this.size = size2;
        this.dispatchExternal("pageSizeChanged", size2);
      }
      if (this.pageSizeSelect) {
        this.generatePageSizeSelectList();
      }
      this.trackChanges();
    }
    _setPageCounter(totalRows, size2, currentRow) {
      var content;
      if (this.pageCounter) {
        if (this.mode === "remote") {
          size2 = this.size;
          currentRow = (this.page - 1) * this.size + 1;
          totalRows = this.remoteRowCountEstimate;
        }
        content = this.pageCounter.call(this, size2, currentRow, this.page, totalRows, this.max);
        switch (typeof content) {
          case "object":
            if (content instanceof Node) {
              while (this.pageCounterElement.firstChild)
                this.pageCounterElement.removeChild(this.pageCounterElement.firstChild);
              this.pageCounterElement.appendChild(content);
            } else {
              this.pageCounterElement.innerHTML = "";
              if (content != null) {
                console.warn("Page Counter Error - Page Counter has returned a type of object, the only valid page counter object return is an instance of Node, the page counter returned:", content);
              }
            }
            break;
          case "undefined":
            this.pageCounterElement.innerHTML = "";
            break;
          default:
            this.pageCounterElement.innerHTML = content;
        }
      }
    }
    //setup the pagination buttons
    _setPageButtons() {
      let leftSize = Math.floor((this.count - 1) / 2);
      let rightSize = Math.ceil((this.count - 1) / 2);
      let min2 = this.max - this.page + leftSize + 1 < this.count ? this.max - this.count + 1 : Math.max(this.page - leftSize, 1);
      let max2 = this.page <= rightSize ? Math.min(this.count, this.max) : Math.min(this.page + rightSize, this.max);
      while (this.pagesElement.firstChild)
        this.pagesElement.removeChild(this.pagesElement.firstChild);
      if (this.page == 1) {
        this.firstBut.disabled = true;
        this.prevBut.disabled = true;
      } else {
        this.firstBut.disabled = false;
        this.prevBut.disabled = false;
      }
      if (this.page == this.max) {
        this.lastBut.disabled = true;
        this.nextBut.disabled = true;
      } else {
        this.lastBut.disabled = false;
        this.nextBut.disabled = false;
      }
      for (let i = min2; i <= max2; i++) {
        if (i > 0 && i <= this.max) {
          this.pagesElement.appendChild(this._generatePageButton(i));
        }
      }
      this.footerRedraw();
    }
    _generatePageButton(page) {
      var button = document.createElement("button");
      button.classList.add("tabulator-page");
      if (page == this.page) {
        button.classList.add("active");
      }
      button.setAttribute("type", "button");
      button.setAttribute("role", "button");
      this.langBind("pagination|page_title", (value) => {
        button.setAttribute("aria-label", value + " " + page);
        button.setAttribute("title", value + " " + page);
      });
      button.setAttribute("data-page", page);
      button.textContent = page;
      button.addEventListener("click", (e) => {
        this.setPage(page);
      });
      return button;
    }
    //previous page
    previousPage() {
      if (this.page > 1) {
        this.page--;
        this.trackChanges();
        return this.trigger();
      } else {
        console.warn("Pagination Error - Previous page would be less than page 1:", 0);
        return Promise.reject();
      }
    }
    //next page
    nextPage() {
      if (this.page < this.max) {
        this.page++;
        this.trackChanges();
        return this.trigger();
      } else {
        if (!this.progressiveLoad) {
          console.warn("Pagination Error - Next page would be greater than maximum page of " + this.max + ":", this.max + 1);
        }
        return Promise.reject();
      }
    }
    //return current page number
    getPage() {
      return this.page;
    }
    //return max page number
    getPageMax() {
      return this.max;
    }
    getPageSize(size2) {
      return this.size;
    }
    getMode() {
      return this.mode;
    }
    //return appropriate rows for current page
    getRows(data) {
      var actualRowPageSize = 0, output, start, end, actualStartRow;
      var actualRows = data.filter((row) => {
        return row.type === "row";
      });
      if (this.mode == "local") {
        output = [];
        this.setMaxRows(data.length);
        if (this.size === true) {
          start = 0;
          end = data.length;
        } else {
          start = this.size * (this.page - 1);
          end = start + parseInt(this.size);
        }
        this._setPageButtons();
        for (let i = start; i < end; i++) {
          let row = data[i];
          if (row) {
            output.push(row);
            if (row.type === "row") {
              if (!actualStartRow) {
                actualStartRow = row;
              }
              actualRowPageSize++;
            }
          }
        }
        this._setPageCounter(actualRows.length, actualRowPageSize, actualStartRow ? actualRows.indexOf(actualStartRow) + 1 : 0);
        return output;
      } else {
        this._setPageButtons();
        this._setPageCounter(actualRows.length);
        return data.slice(0);
      }
    }
    trigger() {
      var left;
      switch (this.mode) {
        case "local":
          left = this.table.rowManager.scrollLeft;
          this.refreshData();
          this.table.rowManager.scrollHorizontal(left);
          this.dispatchExternal("pageLoaded", this.getPage());
          return Promise.resolve();
        case "remote":
          this.dataChanging = true;
          return this.reloadData(null).finally(() => {
            this.dataChanging = false;
          });
        case "progressive_load":
        case "progressive_scroll":
          return this.reloadData(null, true);
        default:
          console.warn("Pagination Error - no such pagination mode:", this.mode);
          return Promise.reject();
      }
    }
    _parseRemoteData(data) {
      var margin, paginationOutOfRange;
      if (typeof data.last_page === "undefined") {
        console.warn("Remote Pagination Error - Server response missing '" + (this.options("dataReceiveParams").last_page || "last_page") + "' property");
      }
      if (data.data) {
        this.max = parseInt(data.last_page) || 1;
        this.remoteRowCountEstimate = typeof data.last_row !== "undefined" ? data.last_row : data.last_page * this.size - (this.page == data.last_page ? this.size - data.data.length : 0);
        if (this.progressiveLoad) {
          switch (this.mode) {
            case "progressive_load":
              if (this.page == 1) {
                this.table.rowManager.setData(data.data, false, this.page == 1);
              } else {
                this.table.rowManager.addRows(data.data);
              }
              if (this.page < this.max) {
                setTimeout(() => {
                  this.nextPage();
                }, this.table.options.progressiveLoadDelay);
              }
              break;
            case "progressive_scroll":
              data = this.page === 1 ? data.data : this.table.rowManager.getData().concat(data.data);
              this.table.rowManager.setData(data, this.page !== 1, this.page == 1);
              margin = this.table.options.progressiveLoadScrollMargin || this.table.rowManager.element.clientHeight * 2;
              if (this.table.rowManager.element.scrollHeight <= this.table.rowManager.element.clientHeight + margin) {
                if (this.page < this.max) {
                  setTimeout(() => {
                    this.nextPage();
                  });
                }
              }
              break;
          }
          return false;
        } else {
          if (this.page > this.max) {
            console.warn("Remote Pagination Error - Server returned last page value lower than the current page");
            paginationOutOfRange = this.options("paginationOutOfRange");
            if (paginationOutOfRange) {
              return this.setPage(typeof paginationOutOfRange === "function" ? paginationOutOfRange.call(this, this.page, this.max) : paginationOutOfRange);
            }
          }
          this.dispatchExternal("pageLoaded", this.getPage());
        }
      } else {
        console.warn("Remote Pagination Error - Server response missing '" + (this.options("dataReceiveParams").data || "data") + "' property");
      }
      return data.data;
    }
    //handle the footer element being redrawn
    footerRedraw() {
      var footer = this.table.footerManager.containerElement;
      if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {
        this.pagesElement.style.display = "none";
      } else {
        this.pagesElement.style.display = "";
        if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {
          this.pagesElement.style.display = "none";
        }
      }
    }
  };
  var defaultReaders = {
    local: function(id, type) {
      var data = localStorage.getItem(id + "-" + type);
      return data ? JSON.parse(data) : false;
    },
    cookie: function(id, type) {
      var cookie = document.cookie, key = id + "-" + type, cookiePos = cookie.indexOf(key + "="), end, data;
      if (cookiePos > -1) {
        cookie = cookie.slice(cookiePos);
        end = cookie.indexOf(";");
        if (end > -1) {
          cookie = cookie.slice(0, end);
        }
        data = cookie.replace(key + "=", "");
      }
      return data ? JSON.parse(data) : false;
    }
  };
  var defaultWriters = {
    local: function(id, type, data) {
      localStorage.setItem(id + "-" + type, JSON.stringify(data));
    },
    cookie: function(id, type, data) {
      var expireDate = /* @__PURE__ */ new Date();
      expireDate.setDate(expireDate.getDate() + 1e4);
      document.cookie = id + "-" + type + "=" + JSON.stringify(data) + "; expires=" + expireDate.toUTCString();
    }
  };
  var Persistence = class _Persistence extends Module {
    static moduleName = "persistence";
    static moduleInitOrder = -10;
    //load defaults
    static readers = defaultReaders;
    static writers = defaultWriters;
    constructor(table) {
      super(table);
      this.mode = "";
      this.id = "";
      this.defWatcherBlock = false;
      this.config = {};
      this.readFunc = false;
      this.writeFunc = false;
      this.registerTableOption("persistence", false);
      this.registerTableOption("persistenceID", "");
      this.registerTableOption("persistenceMode", true);
      this.registerTableOption("persistenceReaderFunc", false);
      this.registerTableOption("persistenceWriterFunc", false);
    }
    // Test for whether localStorage is available for use.
    localStorageTest() {
      var testKey = "_tabulator_test";
      try {
        window.localStorage.setItem(testKey, testKey);
        window.localStorage.removeItem(testKey);
        return true;
      } catch (e) {
        return false;
      }
    }
    //setup parameters
    initialize() {
      if (this.table.options.persistence) {
        var mode = this.table.options.persistenceMode, id = this.table.options.persistenceID, retrievedData;
        this.mode = mode !== true ? mode : this.localStorageTest() ? "local" : "cookie";
        if (this.table.options.persistenceReaderFunc) {
          if (typeof this.table.options.persistenceReaderFunc === "function") {
            this.readFunc = this.table.options.persistenceReaderFunc;
          } else {
            if (_Persistence.readers[this.table.options.persistenceReaderFunc]) {
              this.readFunc = _Persistence.readers[this.table.options.persistenceReaderFunc];
            } else {
              console.warn("Persistence Read Error - invalid reader set", this.table.options.persistenceReaderFunc);
            }
          }
        } else {
          if (_Persistence.readers[this.mode]) {
            this.readFunc = _Persistence.readers[this.mode];
          } else {
            console.warn("Persistence Read Error - invalid reader set", this.mode);
          }
        }
        if (this.table.options.persistenceWriterFunc) {
          if (typeof this.table.options.persistenceWriterFunc === "function") {
            this.writeFunc = this.table.options.persistenceWriterFunc;
          } else {
            if (_Persistence.writers[this.table.options.persistenceWriterFunc]) {
              this.writeFunc = _Persistence.writers[this.table.options.persistenceWriterFunc];
            } else {
              console.warn("Persistence Write Error - invalid reader set", this.table.options.persistenceWriterFunc);
            }
          }
        } else {
          if (_Persistence.writers[this.mode]) {
            this.writeFunc = _Persistence.writers[this.mode];
          } else {
            console.warn("Persistence Write Error - invalid writer set", this.mode);
          }
        }
        this.id = "tabulator-" + (id || (this.table.element.getAttribute("id") || ""));
        this.config = {
          sort: this.table.options.persistence === true || this.table.options.persistence.sort,
          filter: this.table.options.persistence === true || this.table.options.persistence.filter,
          headerFilter: this.table.options.persistence === true || this.table.options.persistence.headerFilter,
          group: this.table.options.persistence === true || this.table.options.persistence.group,
          page: this.table.options.persistence === true || this.table.options.persistence.page,
          columns: this.table.options.persistence === true ? ["title", "width", "visible"] : this.table.options.persistence.columns
        };
        if (this.config.page) {
          retrievedData = this.retrieveData("page");
          if (retrievedData) {
            if (typeof retrievedData.paginationSize !== "undefined" && (this.config.page === true || this.config.page.size)) {
              this.table.options.paginationSize = retrievedData.paginationSize;
            }
            if (typeof retrievedData.paginationInitialPage !== "undefined" && (this.config.page === true || this.config.page.page)) {
              this.table.options.paginationInitialPage = retrievedData.paginationInitialPage;
            }
          }
        }
        if (this.config.group) {
          retrievedData = this.retrieveData("group");
          if (retrievedData) {
            if (typeof retrievedData.groupBy !== "undefined" && (this.config.group === true || this.config.group.groupBy)) {
              this.table.options.groupBy = retrievedData.groupBy;
            }
            if (typeof retrievedData.groupStartOpen !== "undefined" && (this.config.group === true || this.config.group.groupStartOpen)) {
              this.table.options.groupStartOpen = retrievedData.groupStartOpen;
            }
            if (typeof retrievedData.groupHeader !== "undefined" && (this.config.group === true || this.config.group.groupHeader)) {
              this.table.options.groupHeader = retrievedData.groupHeader;
            }
          }
        }
        if (this.config.columns) {
          this.table.options.columns = this.load("columns", this.table.options.columns);
          this.subscribe("column-init", this.initializeColumn.bind(this));
          this.subscribe("column-show", this.save.bind(this, "columns"));
          this.subscribe("column-hide", this.save.bind(this, "columns"));
          this.subscribe("column-moved", this.save.bind(this, "columns"));
        }
        this.subscribe("table-built", this.tableBuilt.bind(this), 0);
        this.subscribe("table-redraw", this.tableRedraw.bind(this));
        this.subscribe("filter-changed", this.eventSave.bind(this, "filter"));
        this.subscribe("filter-changed", this.eventSave.bind(this, "headerFilter"));
        this.subscribe("sort-changed", this.eventSave.bind(this, "sort"));
        this.subscribe("group-changed", this.eventSave.bind(this, "group"));
        this.subscribe("page-changed", this.eventSave.bind(this, "page"));
        this.subscribe("column-resized", this.eventSave.bind(this, "columns"));
        this.subscribe("column-width", this.eventSave.bind(this, "columns"));
        this.subscribe("layout-refreshed", this.eventSave.bind(this, "columns"));
      }
      this.registerTableFunction("getColumnLayout", this.getColumnLayout.bind(this));
      this.registerTableFunction("setColumnLayout", this.setColumnLayout.bind(this));
    }
    eventSave(type) {
      if (this.config[type]) {
        this.save(type);
      }
    }
    tableBuilt() {
      var sorters, filters, headerFilters;
      if (this.config.sort) {
        sorters = this.load("sort");
        if (!sorters === false) {
          this.table.options.initialSort = sorters;
        }
      }
      if (this.config.filter) {
        filters = this.load("filter");
        if (!filters === false) {
          this.table.options.initialFilter = filters;
        }
      }
      if (this.config.headerFilter) {
        headerFilters = this.load("headerFilter");
        if (!headerFilters === false) {
          this.table.options.initialHeaderFilter = headerFilters;
        }
      }
    }
    tableRedraw(force) {
      if (force && this.config.columns) {
        this.save("columns");
      }
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    getColumnLayout() {
      return this.parseColumns(this.table.columnManager.getColumns());
    }
    setColumnLayout(layout) {
      this.table.columnManager.setColumns(this.mergeDefinition(this.table.options.columns, layout, true));
      return true;
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    initializeColumn(column) {
      var def2, keys;
      if (this.config.columns) {
        this.defWatcherBlock = true;
        def2 = column.getDefinition();
        keys = this.config.columns === true ? Object.keys(def2) : this.config.columns;
        keys.forEach((key) => {
          var props = Object.getOwnPropertyDescriptor(def2, key);
          var value = def2[key];
          if (props) {
            Object.defineProperty(def2, key, {
              set: (newValue) => {
                value = newValue;
                if (!this.defWatcherBlock) {
                  this.save("columns");
                }
                if (props.set) {
                  props.set(newValue);
                }
              },
              get: () => {
                if (props.get) {
                  props.get();
                }
                return value;
              }
            });
          }
        });
        this.defWatcherBlock = false;
      }
    }
    //load saved definitions
    load(type, current) {
      var data = this.retrieveData(type);
      if (current) {
        data = data ? this.mergeDefinition(current, data) : current;
      }
      return data;
    }
    //retrieve data from memory
    retrieveData(type) {
      return this.readFunc ? this.readFunc(this.id, type) : false;
    }
    //merge old and new column definitions
    mergeDefinition(oldCols, newCols, mergeAllNew) {
      var output = [];
      newCols = newCols || [];
      newCols.forEach((column, to) => {
        var from = this._findColumn(oldCols, column), keys;
        if (from) {
          if (mergeAllNew) {
            keys = Object.keys(column);
          } else if (this.config.columns === true || this.config.columns == void 0) {
            keys = Object.keys(from);
            keys.push("width");
          } else {
            keys = this.config.columns;
          }
          keys.forEach((key) => {
            if (key !== "columns" && typeof column[key] !== "undefined") {
              from[key] = column[key];
            }
          });
          if (from.columns) {
            from.columns = this.mergeDefinition(from.columns, column.columns);
          }
          output.push(from);
        }
      });
      oldCols.forEach((column, i) => {
        var from = this._findColumn(newCols, column);
        if (!from) {
          if (output.length > i) {
            output.splice(i, 0, column);
          } else {
            output.push(column);
          }
        }
      });
      return output;
    }
    //find matching columns
    _findColumn(columns, subject) {
      var type = subject.columns ? "group" : subject.field ? "field" : "object";
      return columns.find(function(col) {
        switch (type) {
          case "group":
            return col.title === subject.title && col.columns.length === subject.columns.length;
          case "field":
            return col.field === subject.field;
          case "object":
            return col === subject;
        }
      });
    }
    //save data
    save(type) {
      var data = {};
      switch (type) {
        case "columns":
          data = this.parseColumns(this.table.columnManager.getColumns());
          break;
        case "filter":
          data = this.table.modules.filter.getFilters();
          break;
        case "headerFilter":
          data = this.table.modules.filter.getHeaderFilters();
          break;
        case "sort":
          data = this.validateSorters(this.table.modules.sort.getSort());
          break;
        case "group":
          data = this.getGroupConfig();
          break;
        case "page":
          data = this.getPageConfig();
          break;
      }
      if (this.writeFunc) {
        this.writeFunc(this.id, type, data);
      }
    }
    //ensure sorters contain no function data
    validateSorters(data) {
      data.forEach(function(item) {
        item.column = item.field;
        delete item.field;
      });
      return data;
    }
    getGroupConfig() {
      var data = {};
      if (this.config.group) {
        if (this.config.group === true || this.config.group.groupBy) {
          data.groupBy = this.table.options.groupBy;
        }
        if (this.config.group === true || this.config.group.groupStartOpen) {
          data.groupStartOpen = this.table.options.groupStartOpen;
        }
        if (this.config.group === true || this.config.group.groupHeader) {
          data.groupHeader = this.table.options.groupHeader;
        }
      }
      return data;
    }
    getPageConfig() {
      var data = {};
      if (this.config.page) {
        if (this.config.page === true || this.config.page.size) {
          data.paginationSize = this.table.modules.page.getPageSize();
        }
        if (this.config.page === true || this.config.page.page) {
          data.paginationInitialPage = this.table.modules.page.getPage();
        }
      }
      return data;
    }
    //parse columns for data to store
    parseColumns(columns) {
      var definitions = [], excludedKeys = ["headerContextMenu", "headerMenu", "contextMenu", "clickMenu"];
      columns.forEach((column) => {
        var defStore = {}, colDef = column.getDefinition(), keys;
        if (column.isGroup) {
          defStore.title = colDef.title;
          defStore.columns = this.parseColumns(column.getColumns());
        } else {
          defStore.field = column.getField();
          if (this.config.columns === true || this.config.columns == void 0) {
            keys = Object.keys(colDef);
            keys.push("width");
            keys.push("visible");
          } else {
            keys = this.config.columns;
          }
          keys.forEach((key) => {
            switch (key) {
              case "width":
                defStore.width = column.getWidth();
                break;
              case "visible":
                defStore.visible = column.visible;
                break;
              default:
                if (typeof colDef[key] !== "function" && excludedKeys.indexOf(key) === -1) {
                  defStore[key] = colDef[key];
                }
            }
          });
        }
        definitions.push(defStore);
      });
      return definitions;
    }
  };
  var Popup2 = class extends Module {
    static moduleName = "popup";
    constructor(table) {
      super(table);
      this.columnSubscribers = {};
      this.registerTableOption("rowContextPopup", false);
      this.registerTableOption("rowClickPopup", false);
      this.registerTableOption("rowDblClickPopup", false);
      this.registerTableOption("groupContextPopup", false);
      this.registerTableOption("groupClickPopup", false);
      this.registerTableOption("groupDblClickPopup", false);
      this.registerColumnOption("headerContextPopup");
      this.registerColumnOption("headerClickPopup");
      this.registerColumnOption("headerDblClickPopup");
      this.registerColumnOption("headerPopup");
      this.registerColumnOption("headerPopupIcon");
      this.registerColumnOption("contextPopup");
      this.registerColumnOption("clickPopup");
      this.registerColumnOption("dblClickPopup");
      this.registerComponentFunction("cell", "popup", this._componentPopupCall.bind(this));
      this.registerComponentFunction("column", "popup", this._componentPopupCall.bind(this));
      this.registerComponentFunction("row", "popup", this._componentPopupCall.bind(this));
      this.registerComponentFunction("group", "popup", this._componentPopupCall.bind(this));
    }
    initialize() {
      this.initializeRowWatchers();
      this.initializeGroupWatchers();
      this.subscribe("column-init", this.initializeColumn.bind(this));
    }
    _componentPopupCall(component, contents, position) {
      this.loadPopupEvent(contents, null, component, position);
    }
    initializeRowWatchers() {
      if (this.table.options.rowContextPopup) {
        this.subscribe("row-contextmenu", this.loadPopupEvent.bind(this, this.table.options.rowContextPopup));
        this.table.on("rowTapHold", this.loadPopupEvent.bind(this, this.table.options.rowContextPopup));
      }
      if (this.table.options.rowClickPopup) {
        this.subscribe("row-click", this.loadPopupEvent.bind(this, this.table.options.rowClickPopup));
      }
      if (this.table.options.rowDblClickPopup) {
        this.subscribe("row-dblclick", this.loadPopupEvent.bind(this, this.table.options.rowDblClickPopup));
      }
    }
    initializeGroupWatchers() {
      if (this.table.options.groupContextPopup) {
        this.subscribe("group-contextmenu", this.loadPopupEvent.bind(this, this.table.options.groupContextPopup));
        this.table.on("groupTapHold", this.loadPopupEvent.bind(this, this.table.options.groupContextPopup));
      }
      if (this.table.options.groupClickPopup) {
        this.subscribe("group-click", this.loadPopupEvent.bind(this, this.table.options.groupClickPopup));
      }
      if (this.table.options.groupDblClickPopup) {
        this.subscribe("group-dblclick", this.loadPopupEvent.bind(this, this.table.options.groupDblClickPopup));
      }
    }
    initializeColumn(column) {
      var def2 = column.definition;
      if (def2.headerContextPopup && !this.columnSubscribers.headerContextPopup) {
        this.columnSubscribers.headerContextPopup = this.loadPopupTableColumnEvent.bind(this, "headerContextPopup");
        this.subscribe("column-contextmenu", this.columnSubscribers.headerContextPopup);
        this.table.on("headerTapHold", this.loadPopupTableColumnEvent.bind(this, "headerContextPopup"));
      }
      if (def2.headerClickPopup && !this.columnSubscribers.headerClickPopup) {
        this.columnSubscribers.headerClickPopup = this.loadPopupTableColumnEvent.bind(this, "headerClickPopup");
        this.subscribe("column-click", this.columnSubscribers.headerClickPopup);
      }
      if (def2.headerDblClickPopup && !this.columnSubscribers.headerDblClickPopup) {
        this.columnSubscribers.headerDblClickPopup = this.loadPopupTableColumnEvent.bind(this, "headerDblClickPopup");
        this.subscribe("column-dblclick", this.columnSubscribers.headerDblClickPopup);
      }
      if (def2.headerPopup) {
        this.initializeColumnHeaderPopup(column);
      }
      if (def2.contextPopup && !this.columnSubscribers.contextPopup) {
        this.columnSubscribers.contextPopup = this.loadPopupTableCellEvent.bind(this, "contextPopup");
        this.subscribe("cell-contextmenu", this.columnSubscribers.contextPopup);
        this.table.on("cellTapHold", this.loadPopupTableCellEvent.bind(this, "contextPopup"));
      }
      if (def2.clickPopup && !this.columnSubscribers.clickPopup) {
        this.columnSubscribers.clickPopup = this.loadPopupTableCellEvent.bind(this, "clickPopup");
        this.subscribe("cell-click", this.columnSubscribers.clickPopup);
      }
      if (def2.dblClickPopup && !this.columnSubscribers.dblClickPopup) {
        this.columnSubscribers.dblClickPopup = this.loadPopupTableCellEvent.bind(this, "dblClickPopup");
        this.subscribe("cell-click", this.columnSubscribers.dblClickPopup);
      }
    }
    initializeColumnHeaderPopup(column) {
      var icon = column.definition.headerPopupIcon, headerPopupEl;
      headerPopupEl = document.createElement("span");
      headerPopupEl.classList.add("tabulator-header-popup-button");
      if (icon) {
        if (typeof icon === "function") {
          icon = icon(column.getComponent());
        }
        if (icon instanceof HTMLElement) {
          headerPopupEl.appendChild(icon);
        } else {
          headerPopupEl.innerHTML = icon;
        }
      } else {
        headerPopupEl.innerHTML = "&vellip;";
      }
      headerPopupEl.addEventListener("click", (e) => {
        e.stopPropagation();
        e.preventDefault();
        this.loadPopupEvent(column.definition.headerPopup, e, column);
      });
      column.titleElement.insertBefore(headerPopupEl, column.titleElement.firstChild);
    }
    loadPopupTableCellEvent(option, e, cell) {
      if (cell._cell) {
        cell = cell._cell;
      }
      if (cell.column.definition[option]) {
        this.loadPopupEvent(cell.column.definition[option], e, cell);
      }
    }
    loadPopupTableColumnEvent(option, e, column) {
      if (column._column) {
        column = column._column;
      }
      if (column.definition[option]) {
        this.loadPopupEvent(column.definition[option], e, column);
      }
    }
    loadPopupEvent(contents, e, component, position) {
      var renderedCallback;
      function onRendered(callback) {
        renderedCallback = callback;
      }
      if (component._group) {
        component = component._group;
      } else if (component._row) {
        component = component._row;
      }
      contents = typeof contents == "function" ? contents.call(this.table, e, component.getComponent(), onRendered) : contents;
      this.loadPopup(e, component, contents, renderedCallback, position);
    }
    loadPopup(e, component, contents, renderedCallback, position) {
      var touch = !(e instanceof MouseEvent), contentsEl, popup;
      if (contents instanceof HTMLElement) {
        contentsEl = contents;
      } else {
        contentsEl = document.createElement("div");
        contentsEl.innerHTML = contents;
      }
      contentsEl.classList.add("tabulator-popup");
      contentsEl.addEventListener("click", (e2) => {
        e2.stopPropagation();
      });
      if (!touch) {
        e.preventDefault();
      }
      popup = this.popup(contentsEl);
      if (typeof renderedCallback === "function") {
        popup.renderCallback(renderedCallback);
      }
      if (e) {
        popup.show(e);
      } else {
        popup.show(component.getElement(), position || "center");
      }
      popup.hideOnBlur(() => {
        this.dispatchExternal("popupClosed", component.getComponent());
      });
      this.dispatchExternal("popupOpened", component.getComponent());
    }
  };
  var Print = class extends Module {
    static moduleName = "print";
    constructor(table) {
      super(table);
      this.element = false;
      this.manualBlock = false;
      this.beforeprintEventHandler = null;
      this.afterprintEventHandler = null;
      this.registerTableOption("printAsHtml", false);
      this.registerTableOption("printFormatter", false);
      this.registerTableOption("printHeader", false);
      this.registerTableOption("printFooter", false);
      this.registerTableOption("printStyled", true);
      this.registerTableOption("printRowRange", "visible");
      this.registerTableOption("printConfig", {});
      this.registerColumnOption("print");
      this.registerColumnOption("titlePrint");
    }
    initialize() {
      if (this.table.options.printAsHtml) {
        this.beforeprintEventHandler = this.replaceTable.bind(this);
        this.afterprintEventHandler = this.cleanup.bind(this);
        window.addEventListener("beforeprint", this.beforeprintEventHandler);
        window.addEventListener("afterprint", this.afterprintEventHandler);
        this.subscribe("table-destroy", this.destroy.bind(this));
      }
      this.registerTableFunction("print", this.printFullscreen.bind(this));
    }
    destroy() {
      if (this.table.options.printAsHtml) {
        window.removeEventListener("beforeprint", this.beforeprintEventHandler);
        window.removeEventListener("afterprint", this.afterprintEventHandler);
      }
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    replaceTable() {
      if (!this.manualBlock) {
        this.element = document.createElement("div");
        this.element.classList.add("tabulator-print-table");
        this.element.appendChild(this.table.modules.export.generateTable(this.table.options.printConfig, this.table.options.printStyled, this.table.options.printRowRange, "print"));
        this.table.element.style.display = "none";
        this.table.element.parentNode.insertBefore(this.element, this.table.element);
      }
    }
    cleanup() {
      document.body.classList.remove("tabulator-print-fullscreen-hide");
      if (this.element && this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
        this.table.element.style.display = "";
      }
    }
    printFullscreen(visible, style, config) {
      var scrollX = window.scrollX, scrollY = window.scrollY, headerEl = document.createElement("div"), footerEl = document.createElement("div"), tableEl = this.table.modules.export.generateTable(typeof config != "undefined" ? config : this.table.options.printConfig, typeof style != "undefined" ? style : this.table.options.printStyled, visible || this.table.options.printRowRange, "print"), headerContent, footerContent;
      this.manualBlock = true;
      this.element = document.createElement("div");
      this.element.classList.add("tabulator-print-fullscreen");
      if (this.table.options.printHeader) {
        headerEl.classList.add("tabulator-print-header");
        headerContent = typeof this.table.options.printHeader == "function" ? this.table.options.printHeader.call(this.table) : this.table.options.printHeader;
        if (typeof headerContent == "string") {
          headerEl.innerHTML = headerContent;
        } else {
          headerEl.appendChild(headerContent);
        }
        this.element.appendChild(headerEl);
      }
      this.element.appendChild(tableEl);
      if (this.table.options.printFooter) {
        footerEl.classList.add("tabulator-print-footer");
        footerContent = typeof this.table.options.printFooter == "function" ? this.table.options.printFooter.call(this.table) : this.table.options.printFooter;
        if (typeof footerContent == "string") {
          footerEl.innerHTML = footerContent;
        } else {
          footerEl.appendChild(footerContent);
        }
        this.element.appendChild(footerEl);
      }
      document.body.classList.add("tabulator-print-fullscreen-hide");
      document.body.appendChild(this.element);
      if (this.table.options.printFormatter) {
        this.table.options.printFormatter(this.element, tableEl);
      }
      window.print();
      this.cleanup();
      window.scrollTo(scrollX, scrollY);
      this.manualBlock = false;
    }
  };
  var ReactiveData = class extends Module {
    static moduleName = "reactiveData";
    constructor(table) {
      super(table);
      this.data = false;
      this.blocked = false;
      this.origFuncs = {};
      this.currentVersion = 0;
      this.registerTableOption("reactiveData", false);
    }
    initialize() {
      if (this.table.options.reactiveData) {
        this.subscribe("cell-value-save-before", this.block.bind(this, "cellsave"));
        this.subscribe("cell-value-save-after", this.unblock.bind(this, "cellsave"));
        this.subscribe("row-data-save-before", this.block.bind(this, "rowsave"));
        this.subscribe("row-data-save-after", this.unblock.bind(this, "rowsave"));
        this.subscribe("row-data-init-after", this.watchRow.bind(this));
        this.subscribe("data-processing", this.watchData.bind(this));
        this.subscribe("table-destroy", this.unwatchData.bind(this));
      }
    }
    watchData(data) {
      var self2 = this, version2;
      this.currentVersion++;
      version2 = this.currentVersion;
      this.unwatchData();
      this.data = data;
      this.origFuncs.push = data.push;
      Object.defineProperty(this.data, "push", {
        enumerable: false,
        configurable: true,
        value: function() {
          var args = Array.from(arguments), result;
          if (!self2.blocked && version2 === self2.currentVersion) {
            self2.block("data-push");
            args.forEach((arg) => {
              self2.table.rowManager.addRowActual(arg, false);
            });
            result = self2.origFuncs.push.apply(data, arguments);
            self2.unblock("data-push");
          }
          return result;
        }
      });
      this.origFuncs.unshift = data.unshift;
      Object.defineProperty(this.data, "unshift", {
        enumerable: false,
        configurable: true,
        value: function() {
          var args = Array.from(arguments), result;
          if (!self2.blocked && version2 === self2.currentVersion) {
            self2.block("data-unshift");
            args.forEach((arg) => {
              self2.table.rowManager.addRowActual(arg, true);
            });
            result = self2.origFuncs.unshift.apply(data, arguments);
            self2.unblock("data-unshift");
          }
          return result;
        }
      });
      this.origFuncs.shift = data.shift;
      Object.defineProperty(this.data, "shift", {
        enumerable: false,
        configurable: true,
        value: function() {
          var row, result;
          if (!self2.blocked && version2 === self2.currentVersion) {
            self2.block("data-shift");
            if (self2.data.length) {
              row = self2.table.rowManager.getRowFromDataObject(self2.data[0]);
              if (row) {
                row.deleteActual();
              }
            }
            result = self2.origFuncs.shift.call(data);
            self2.unblock("data-shift");
          }
          return result;
        }
      });
      this.origFuncs.pop = data.pop;
      Object.defineProperty(this.data, "pop", {
        enumerable: false,
        configurable: true,
        value: function() {
          var row, result;
          if (!self2.blocked && version2 === self2.currentVersion) {
            self2.block("data-pop");
            if (self2.data.length) {
              row = self2.table.rowManager.getRowFromDataObject(self2.data[self2.data.length - 1]);
              if (row) {
                row.deleteActual();
              }
            }
            result = self2.origFuncs.pop.call(data);
            self2.unblock("data-pop");
          }
          return result;
        }
      });
      this.origFuncs.splice = data.splice;
      Object.defineProperty(this.data, "splice", {
        enumerable: false,
        configurable: true,
        value: function() {
          var args = Array.from(arguments), start = args[0] < 0 ? data.length + args[0] : args[0], end = args[1], newRows = args[2] ? args.slice(2) : false, startRow, result;
          if (!self2.blocked && version2 === self2.currentVersion) {
            self2.block("data-splice");
            if (newRows) {
              startRow = data[start] ? self2.table.rowManager.getRowFromDataObject(data[start]) : false;
              if (startRow) {
                newRows.forEach((rowData) => {
                  self2.table.rowManager.addRowActual(rowData, true, startRow, true);
                });
              } else {
                newRows = newRows.slice().reverse();
                newRows.forEach((rowData) => {
                  self2.table.rowManager.addRowActual(rowData, true, false, true);
                });
              }
            }
            if (end !== 0) {
              var oldRows = data.slice(start, typeof args[1] === "undefined" ? args[1] : start + end);
              oldRows.forEach((rowData, i) => {
                var row = self2.table.rowManager.getRowFromDataObject(rowData);
                if (row) {
                  row.deleteActual(i !== oldRows.length - 1);
                }
              });
            }
            if (newRows || end !== 0) {
              self2.table.rowManager.reRenderInPosition();
            }
            result = self2.origFuncs.splice.apply(data, arguments);
            self2.unblock("data-splice");
          }
          return result;
        }
      });
    }
    unwatchData() {
      if (this.data !== false) {
        for (var key in this.origFuncs) {
          Object.defineProperty(this.data, key, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.origFuncs.key
          });
        }
      }
    }
    watchRow(row) {
      var data = row.getData();
      for (var key in data) {
        this.watchKey(row, data, key);
      }
      if (this.table.options.dataTree) {
        this.watchTreeChildren(row);
      }
    }
    watchTreeChildren(row) {
      var self2 = this, childField = row.getData()[this.table.options.dataTreeChildField], origFuncs = {};
      if (childField) {
        origFuncs.push = childField.push;
        Object.defineProperty(childField, "push", {
          enumerable: false,
          configurable: true,
          value: () => {
            if (!self2.blocked) {
              self2.block("tree-push");
              var result = origFuncs.push.apply(childField, arguments);
              this.rebuildTree(row);
              self2.unblock("tree-push");
            }
            return result;
          }
        });
        origFuncs.unshift = childField.unshift;
        Object.defineProperty(childField, "unshift", {
          enumerable: false,
          configurable: true,
          value: () => {
            if (!self2.blocked) {
              self2.block("tree-unshift");
              var result = origFuncs.unshift.apply(childField, arguments);
              this.rebuildTree(row);
              self2.unblock("tree-unshift");
            }
            return result;
          }
        });
        origFuncs.shift = childField.shift;
        Object.defineProperty(childField, "shift", {
          enumerable: false,
          configurable: true,
          value: () => {
            if (!self2.blocked) {
              self2.block("tree-shift");
              var result = origFuncs.shift.call(childField);
              this.rebuildTree(row);
              self2.unblock("tree-shift");
            }
            return result;
          }
        });
        origFuncs.pop = childField.pop;
        Object.defineProperty(childField, "pop", {
          enumerable: false,
          configurable: true,
          value: () => {
            if (!self2.blocked) {
              self2.block("tree-pop");
              var result = origFuncs.pop.call(childField);
              this.rebuildTree(row);
              self2.unblock("tree-pop");
            }
            return result;
          }
        });
        origFuncs.splice = childField.splice;
        Object.defineProperty(childField, "splice", {
          enumerable: false,
          configurable: true,
          value: () => {
            if (!self2.blocked) {
              self2.block("tree-splice");
              var result = origFuncs.splice.apply(childField, arguments);
              this.rebuildTree(row);
              self2.unblock("tree-splice");
            }
            return result;
          }
        });
      }
    }
    rebuildTree(row) {
      this.table.modules.dataTree.initializeRow(row);
      this.table.modules.dataTree.layoutRow(row);
      this.table.rowManager.refreshActiveData("tree", false, true);
    }
    watchKey(row, data, key) {
      var self2 = this, props = Object.getOwnPropertyDescriptor(data, key), value = data[key], version2 = this.currentVersion;
      Object.defineProperty(data, key, {
        set: (newValue) => {
          value = newValue;
          if (!self2.blocked && version2 === self2.currentVersion) {
            self2.block("key");
            var update = {};
            update[key] = newValue;
            row.updateData(update);
            self2.unblock("key");
          }
          if (props.set) {
            props.set(newValue);
          }
        },
        get: () => {
          if (props.get) {
            props.get();
          }
          return value;
        }
      });
    }
    unwatchRow(row) {
      var data = row.getData();
      for (var key in data) {
        Object.defineProperty(data, key, {
          value: data[key]
        });
      }
    }
    block(key) {
      if (!this.blocked) {
        this.blocked = key;
      }
    }
    unblock(key) {
      if (this.blocked === key) {
        this.blocked = false;
      }
    }
  };
  var ResizeColumns = class extends Module {
    static moduleName = "resizeColumns";
    constructor(table) {
      super(table);
      this.startColumn = false;
      this.startX = false;
      this.startWidth = false;
      this.latestX = false;
      this.handle = null;
      this.initialNextColumn = null;
      this.nextColumn = null;
      this.initialized = false;
      this.registerColumnOption("resizable", true);
      this.registerTableOption("resizableColumnFit", false);
      this.registerTableOption("resizableColumnGuide", false);
    }
    initialize() {
      this.subscribe("column-rendered", this.layoutColumnHeader.bind(this));
    }
    initializeEventWatchers() {
      if (!this.initialized) {
        this.subscribe("cell-rendered", this.layoutCellHandles.bind(this));
        this.subscribe("cell-delete", this.deInitializeComponent.bind(this));
        this.subscribe("cell-height", this.resizeHandle.bind(this));
        this.subscribe("column-moved", this.columnLayoutUpdated.bind(this));
        this.subscribe("column-hide", this.deInitializeColumn.bind(this));
        this.subscribe("column-show", this.columnLayoutUpdated.bind(this));
        this.subscribe("column-width", this.columnWidthUpdated.bind(this));
        this.subscribe("column-delete", this.deInitializeComponent.bind(this));
        this.subscribe("column-height", this.resizeHandle.bind(this));
        this.initialized = true;
      }
    }
    layoutCellHandles(cell) {
      if (cell.row.type === "row") {
        this.deInitializeComponent(cell);
        this.initializeColumn("cell", cell, cell.column, cell.element);
      }
    }
    layoutColumnHeader(column) {
      if (column.definition.resizable) {
        this.initializeEventWatchers();
        this.deInitializeComponent(column);
        this.initializeColumn("header", column, column, column.element);
      }
    }
    columnLayoutUpdated(column) {
      var prev = column.prevColumn();
      this.reinitializeColumn(column);
      if (prev) {
        this.reinitializeColumn(prev);
      }
    }
    columnWidthUpdated(column) {
      if (column.modules.frozen) {
        if (this.table.modules.frozenColumns.leftColumns.includes(column)) {
          this.table.modules.frozenColumns.leftColumns.forEach((col) => {
            this.reinitializeColumn(col);
          });
        } else if (this.table.modules.frozenColumns.rightColumns.includes(column)) {
          this.table.modules.frozenColumns.rightColumns.forEach((col) => {
            this.reinitializeColumn(col);
          });
        }
      }
    }
    frozenColumnOffset(column) {
      var offset2 = false;
      if (column.modules.frozen) {
        offset2 = column.modules.frozen.marginValue;
        if (column.modules.frozen.position === "left") {
          offset2 += column.getWidth() - 3;
        } else {
          if (offset2) {
            offset2 -= 3;
          }
        }
      }
      return offset2 !== false ? offset2 + "px" : false;
    }
    reinitializeColumn(column) {
      var frozenOffset = this.frozenColumnOffset(column);
      column.cells.forEach((cell) => {
        if (cell.modules.resize && cell.modules.resize.handleEl) {
          if (frozenOffset) {
            cell.modules.resize.handleEl.style[column.modules.frozen.position] = frozenOffset;
            cell.modules.resize.handleEl.style["z-index"] = 11;
          }
          cell.element.after(cell.modules.resize.handleEl);
        }
      });
      if (column.modules.resize && column.modules.resize.handleEl) {
        if (frozenOffset) {
          column.modules.resize.handleEl.style[column.modules.frozen.position] = frozenOffset;
        }
        column.element.after(column.modules.resize.handleEl);
      }
    }
    initializeColumn(type, component, column, element) {
      var self2 = this, variableHeight = false, mode = column.definition.resizable, config = {}, nearestColumn = column.getLastColumn();
      if (type === "header") {
        variableHeight = column.definition.formatter == "textarea" || column.definition.variableHeight;
        config = { variableHeight };
      }
      if ((mode === true || mode == type) && this._checkResizability(nearestColumn)) {
        var handle2 = document.createElement("span");
        handle2.className = "tabulator-col-resize-handle";
        handle2.addEventListener("click", function(e) {
          e.stopPropagation();
        });
        var handleDown = function(e) {
          self2.startColumn = column;
          self2.initialNextColumn = self2.nextColumn = nearestColumn.nextColumn();
          self2._mouseDown(e, nearestColumn, handle2);
        };
        handle2.addEventListener("mousedown", handleDown);
        handle2.addEventListener("touchstart", handleDown, { passive: true });
        handle2.addEventListener("dblclick", (e) => {
          var oldWidth = nearestColumn.getWidth();
          e.stopPropagation();
          nearestColumn.reinitializeWidth(true);
          if (oldWidth !== nearestColumn.getWidth()) {
            self2.dispatch("column-resized", nearestColumn);
            self2.dispatchExternal("columnResized", nearestColumn.getComponent());
          }
        });
        if (column.modules.frozen) {
          handle2.style.position = "sticky";
          handle2.style[column.modules.frozen.position] = this.frozenColumnOffset(column);
        }
        config.handleEl = handle2;
        if (element.parentNode && column.visible) {
          element.after(handle2);
        }
      }
      component.modules.resize = config;
    }
    deInitializeColumn(column) {
      this.deInitializeComponent(column);
      column.cells.forEach((cell) => {
        this.deInitializeComponent(cell);
      });
    }
    deInitializeComponent(component) {
      var handleEl;
      if (component.modules.resize) {
        handleEl = component.modules.resize.handleEl;
        if (handleEl && handleEl.parentElement) {
          handleEl.parentElement.removeChild(handleEl);
        }
      }
    }
    resizeHandle(component, height) {
      if (component.modules.resize && component.modules.resize.handleEl) {
        component.modules.resize.handleEl.style.height = height;
      }
    }
    resize(e, column) {
      var x = typeof e.clientX === "undefined" ? e.touches[0].clientX : e.clientX, startDiff = x - this.startX, moveDiff = x - this.latestX, blockedBefore, blockedAfter;
      this.latestX = x;
      if (this.table.rtl) {
        startDiff = -startDiff;
        moveDiff = -moveDiff;
      }
      blockedBefore = column.width == column.minWidth || column.width == column.maxWidth;
      column.setWidth(this.startWidth + startDiff);
      blockedAfter = column.width == column.minWidth || column.width == column.maxWidth;
      if (moveDiff < 0) {
        this.nextColumn = this.initialNextColumn;
      }
      if (this.table.options.resizableColumnFit && this.nextColumn && !(blockedBefore && blockedAfter)) {
        let colWidth = this.nextColumn.getWidth();
        if (moveDiff > 0) {
          if (colWidth <= this.nextColumn.minWidth) {
            this.nextColumn = this.nextColumn.nextColumn();
          }
        }
        if (this.nextColumn) {
          this.nextColumn.setWidth(this.nextColumn.getWidth() - moveDiff);
        }
      }
      this.table.columnManager.rerenderColumns(true);
      if (!this.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {
        column.checkCellHeights();
      }
    }
    calcGuidePosition(e, column, handle2) {
      var mouseX = typeof e.clientX === "undefined" ? e.touches[0].clientX : e.clientX, handleX = handle2.getBoundingClientRect().x - this.table.element.getBoundingClientRect().x, tableX = this.table.element.getBoundingClientRect().x, columnX = column.element.getBoundingClientRect().left - tableX, mouseDiff = mouseX - this.startX, pos = Math.max(handleX + mouseDiff, columnX + column.minWidth);
      if (column.maxWidth) {
        pos = Math.min(pos, columnX + column.maxWidth);
      }
      return pos;
    }
    _checkResizability(column) {
      return column.definition.resizable;
    }
    _mouseDown(e, column, handle2) {
      var self2 = this, guideEl;
      this.dispatchExternal("columnResizing", column.getComponent());
      if (self2.table.options.resizableColumnGuide) {
        guideEl = document.createElement("span");
        guideEl.classList.add("tabulator-col-resize-guide");
        self2.table.element.appendChild(guideEl);
        setTimeout(() => {
          guideEl.style.left = self2.calcGuidePosition(e, column, handle2) + "px";
        });
      }
      self2.table.element.classList.add("tabulator-block-select");
      function mouseMove(e2) {
        if (self2.table.options.resizableColumnGuide) {
          guideEl.style.left = self2.calcGuidePosition(e2, column, handle2) + "px";
        } else {
          self2.resize(e2, column);
        }
      }
      function mouseUp(e2) {
        if (self2.table.options.resizableColumnGuide) {
          self2.resize(e2, column);
          guideEl.remove();
        }
        if (self2.startColumn.modules.edit) {
          self2.startColumn.modules.edit.blocked = false;
        }
        if (self2.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {
          column.checkCellHeights();
        }
        document.body.removeEventListener("mouseup", mouseUp);
        document.body.removeEventListener("mousemove", mouseMove);
        handle2.removeEventListener("touchmove", mouseMove);
        handle2.removeEventListener("touchend", mouseUp);
        self2.table.element.classList.remove("tabulator-block-select");
        if (self2.startWidth !== column.getWidth()) {
          self2.table.columnManager.verticalAlignHeaders();
          self2.dispatch("column-resized", column);
          self2.dispatchExternal("columnResized", column.getComponent());
        }
      }
      e.stopPropagation();
      if (self2.startColumn.modules.edit) {
        self2.startColumn.modules.edit.blocked = true;
      }
      self2.startX = typeof e.clientX === "undefined" ? e.touches[0].clientX : e.clientX;
      self2.latestX = self2.startX;
      self2.startWidth = column.getWidth();
      document.body.addEventListener("mousemove", mouseMove);
      document.body.addEventListener("mouseup", mouseUp);
      handle2.addEventListener("touchmove", mouseMove, { passive: true });
      handle2.addEventListener("touchend", mouseUp);
    }
  };
  var ResizeRows = class extends Module {
    static moduleName = "resizeRows";
    constructor(table) {
      super(table);
      this.startColumn = false;
      this.startY = false;
      this.startHeight = false;
      this.handle = null;
      this.prevHandle = null;
      this.registerTableOption("resizableRows", false);
      this.registerTableOption("resizableRowGuide", false);
    }
    initialize() {
      if (this.table.options.resizableRows) {
        this.subscribe("row-layout-after", this.initializeRow.bind(this));
      }
    }
    initializeRow(row) {
      var self2 = this, rowEl = row.getElement();
      var handle2 = document.createElement("div");
      handle2.className = "tabulator-row-resize-handle";
      var prevHandle = document.createElement("div");
      prevHandle.className = "tabulator-row-resize-handle prev";
      handle2.addEventListener("click", function(e) {
        e.stopPropagation();
      });
      var handleDown = function(e) {
        self2.startRow = row;
        self2._mouseDown(e, row, handle2);
      };
      handle2.addEventListener("mousedown", handleDown);
      handle2.addEventListener("touchstart", handleDown, { passive: true });
      prevHandle.addEventListener("click", function(e) {
        e.stopPropagation();
      });
      var prevHandleDown = function(e) {
        var prevRow = self2.table.rowManager.prevDisplayRow(row);
        if (prevRow) {
          self2.startRow = prevRow;
          self2._mouseDown(e, prevRow, prevHandle);
        }
      };
      prevHandle.addEventListener("mousedown", prevHandleDown);
      prevHandle.addEventListener("touchstart", prevHandleDown, { passive: true });
      rowEl.appendChild(handle2);
      rowEl.appendChild(prevHandle);
    }
    resize(e, row) {
      row.setHeight(this.startHeight + ((typeof e.screenY === "undefined" ? e.touches[0].screenY : e.screenY) - this.startY));
    }
    calcGuidePosition(e, row, handle2) {
      var mouseY = typeof e.screenY === "undefined" ? e.touches[0].screenY : e.screenY, handleY = handle2.getBoundingClientRect().y - this.table.element.getBoundingClientRect().y, tableY = this.table.element.getBoundingClientRect().y, rowY = row.element.getBoundingClientRect().top - tableY, mouseDiff = mouseY - this.startY;
      return Math.max(handleY + mouseDiff, rowY);
    }
    _mouseDown(e, row, handle2) {
      var self2 = this, guideEl;
      self2.dispatchExternal("rowResizing", row.getComponent());
      if (self2.table.options.resizableRowGuide) {
        guideEl = document.createElement("span");
        guideEl.classList.add("tabulator-row-resize-guide");
        self2.table.element.appendChild(guideEl);
        setTimeout(() => {
          guideEl.style.top = self2.calcGuidePosition(e, row, handle2) + "px";
        });
      }
      self2.table.element.classList.add("tabulator-block-select");
      function mouseMove(e2) {
        if (self2.table.options.resizableRowGuide) {
          guideEl.style.top = self2.calcGuidePosition(e2, row, handle2) + "px";
        } else {
          self2.resize(e2, row);
        }
      }
      function mouseUp(e2) {
        if (self2.table.options.resizableRowGuide) {
          self2.resize(e2, row);
          guideEl.remove();
        }
        document.body.removeEventListener("mouseup", mouseMove);
        document.body.removeEventListener("mousemove", mouseMove);
        handle2.removeEventListener("touchmove", mouseMove);
        handle2.removeEventListener("touchend", mouseUp);
        self2.table.element.classList.remove("tabulator-block-select");
        self2.dispatchExternal("rowResized", row.getComponent());
      }
      e.stopPropagation();
      self2.startY = typeof e.screenY === "undefined" ? e.touches[0].screenY : e.screenY;
      self2.startHeight = row.getHeight();
      document.body.addEventListener("mousemove", mouseMove);
      document.body.addEventListener("mouseup", mouseUp);
      handle2.addEventListener("touchmove", mouseMove, { passive: true });
      handle2.addEventListener("touchend", mouseUp);
    }
  };
  var ResizeTable = class extends Module {
    static moduleName = "resizeTable";
    constructor(table) {
      super(table);
      this.binding = false;
      this.visibilityObserver = false;
      this.resizeObserver = false;
      this.containerObserver = false;
      this.tableHeight = 0;
      this.tableWidth = 0;
      this.containerHeight = 0;
      this.containerWidth = 0;
      this.autoResize = false;
      this.visible = false;
      this.initialized = false;
      this.initialRedraw = false;
      this.registerTableOption("autoResize", true);
    }
    initialize() {
      if (this.table.options.autoResize) {
        var table = this.table, tableStyle;
        this.tableHeight = table.element.clientHeight;
        this.tableWidth = table.element.clientWidth;
        if (table.element.parentNode) {
          this.containerHeight = table.element.parentNode.clientHeight;
          this.containerWidth = table.element.parentNode.clientWidth;
        }
        if (typeof IntersectionObserver !== "undefined" && typeof ResizeObserver !== "undefined" && table.rowManager.getRenderMode() === "virtual") {
          this.initializeVisibilityObserver();
          this.autoResize = true;
          this.resizeObserver = new ResizeObserver((entry) => {
            if (!table.browserMobile || table.browserMobile && (!table.modules.edit || table.modules.edit && !table.modules.edit.currentCell)) {
              var nodeHeight = Math.floor(entry[0].contentRect.height);
              var nodeWidth = Math.floor(entry[0].contentRect.width);
              if (this.tableHeight != nodeHeight || this.tableWidth != nodeWidth) {
                this.tableHeight = nodeHeight;
                this.tableWidth = nodeWidth;
                if (table.element.parentNode) {
                  this.containerHeight = table.element.parentNode.clientHeight;
                  this.containerWidth = table.element.parentNode.clientWidth;
                }
                this.redrawTable();
              }
            }
          });
          this.resizeObserver.observe(table.element);
          tableStyle = window.getComputedStyle(table.element);
          if (this.table.element.parentNode && !this.table.rowManager.fixedHeight && (tableStyle.getPropertyValue("max-height") || tableStyle.getPropertyValue("min-height"))) {
            this.containerObserver = new ResizeObserver((entry) => {
              if (!table.browserMobile || table.browserMobile && (!table.modules.edit || table.modules.edit && !table.modules.edit.currentCell)) {
                var nodeHeight = Math.floor(entry[0].contentRect.height);
                var nodeWidth = Math.floor(entry[0].contentRect.width);
                if (this.containerHeight != nodeHeight || this.containerWidth != nodeWidth) {
                  this.containerHeight = nodeHeight;
                  this.containerWidth = nodeWidth;
                  this.tableHeight = table.element.clientHeight;
                  this.tableWidth = table.element.clientWidth;
                }
                this.redrawTable();
              }
            });
            this.containerObserver.observe(this.table.element.parentNode);
          }
          this.subscribe("table-resize", this.tableResized.bind(this));
        } else {
          this.binding = function() {
            if (!table.browserMobile || table.browserMobile && (!table.modules.edit || table.modules.edit && !table.modules.edit.currentCell)) {
              table.columnManager.rerenderColumns(true);
              table.redraw();
            }
          };
          window.addEventListener("resize", this.binding);
        }
        this.subscribe("table-destroy", this.clearBindings.bind(this));
      }
    }
    initializeVisibilityObserver() {
      this.visibilityObserver = new IntersectionObserver((entries) => {
        this.visible = entries[0].isIntersecting;
        if (!this.initialized) {
          this.initialized = true;
          this.initialRedraw = !this.visible;
        } else {
          if (this.visible) {
            this.redrawTable(this.initialRedraw);
            this.initialRedraw = false;
          }
        }
      });
      this.visibilityObserver.observe(this.table.element);
    }
    redrawTable(force) {
      if (this.initialized && this.visible) {
        this.table.columnManager.rerenderColumns(true);
        this.table.redraw(force);
      }
    }
    tableResized() {
      this.table.rowManager.redraw();
    }
    clearBindings() {
      if (this.binding) {
        window.removeEventListener("resize", this.binding);
      }
      if (this.resizeObserver) {
        this.resizeObserver.unobserve(this.table.element);
      }
      if (this.visibilityObserver) {
        this.visibilityObserver.unobserve(this.table.element);
      }
      if (this.containerObserver) {
        this.containerObserver.unobserve(this.table.element.parentNode);
      }
    }
  };
  function responsiveCollapse(cell, formatterParams, onRendered) {
    var el = document.createElement("div"), config = cell.getRow()._row.modules.responsiveLayout;
    el.classList.add("tabulator-responsive-collapse-toggle");
    el.innerHTML = `<svg class='tabulator-responsive-collapse-toggle-open' viewbox="0 0 24 24">
  <line x1="7" y1="12" x2="17" y2="12" fill="none" stroke-width="3" stroke-linecap="round" />
  <line y1="7" x1="12" y2="17" x2="12" fill="none" stroke-width="3" stroke-linecap="round" />
</svg>

<svg class='tabulator-responsive-collapse-toggle-close' viewbox="0 0 24 24">
  <line x1="7" y1="12" x2="17" y2="12"  fill="none" stroke-width="3" stroke-linecap="round" />
</svg>`;
    cell.getElement().classList.add("tabulator-row-handle");
    function toggleList(isOpen) {
      var collapseEl = config.element;
      config.open = isOpen;
      if (collapseEl) {
        if (config.open) {
          el.classList.add("open");
          collapseEl.style.display = "";
        } else {
          el.classList.remove("open");
          collapseEl.style.display = "none";
        }
      }
    }
    el.addEventListener("click", function(e) {
      e.stopImmediatePropagation();
      toggleList(!config.open);
      cell.getTable().rowManager.adjustTableSize();
    });
    toggleList(config.open);
    return el;
  }
  var extensions$2 = {
    format: {
      formatters: {
        responsiveCollapse
      }
    }
  };
  var ResponsiveLayout = class extends Module {
    static moduleName = "responsiveLayout";
    static moduleExtensions = extensions$2;
    constructor(table) {
      super(table);
      this.columns = [];
      this.hiddenColumns = [];
      this.mode = "";
      this.index = 0;
      this.collapseFormatter = [];
      this.collapseStartOpen = true;
      this.collapseHandleColumn = false;
      this.registerTableOption("responsiveLayout", false);
      this.registerTableOption("responsiveLayoutCollapseStartOpen", true);
      this.registerTableOption("responsiveLayoutCollapseUseFormatters", true);
      this.registerTableOption("responsiveLayoutCollapseFormatter", false);
      this.registerColumnOption("responsive");
    }
    //generate responsive columns list
    initialize() {
      if (this.table.options.responsiveLayout) {
        this.subscribe("column-layout", this.initializeColumn.bind(this));
        this.subscribe("column-show", this.updateColumnVisibility.bind(this));
        this.subscribe("column-hide", this.updateColumnVisibility.bind(this));
        this.subscribe("columns-loaded", this.initializeResponsivity.bind(this));
        this.subscribe("column-moved", this.initializeResponsivity.bind(this));
        this.subscribe("column-add", this.initializeResponsivity.bind(this));
        this.subscribe("column-delete", this.initializeResponsivity.bind(this));
        this.subscribe("table-redrawing", this.tableRedraw.bind(this));
        if (this.table.options.responsiveLayout === "collapse") {
          this.subscribe("row-data-changed", this.generateCollapsedRowContent.bind(this));
          this.subscribe("row-init", this.initializeRow.bind(this));
          this.subscribe("row-layout", this.layoutRow.bind(this));
        }
      }
    }
    tableRedraw(force) {
      if (["fitColumns", "fitDataStretch"].indexOf(this.layoutMode()) === -1) {
        if (!force) {
          this.update();
        }
      }
    }
    initializeResponsivity() {
      var columns = [];
      this.mode = this.table.options.responsiveLayout;
      this.collapseFormatter = this.table.options.responsiveLayoutCollapseFormatter || this.formatCollapsedData;
      this.collapseStartOpen = this.table.options.responsiveLayoutCollapseStartOpen;
      this.hiddenColumns = [];
      if (this.collapseFormatter) {
        this.collapseFormatter = this.collapseFormatter.bind(this.table);
      }
      this.table.columnManager.columnsByIndex.forEach((column, i) => {
        if (column.modules.responsive) {
          if (column.modules.responsive.order && column.modules.responsive.visible) {
            column.modules.responsive.index = i;
            columns.push(column);
            if (!column.visible && this.mode === "collapse") {
              this.hiddenColumns.push(column);
            }
          }
        }
      });
      columns = columns.reverse();
      columns = columns.sort((a, b) => {
        var diff = b.modules.responsive.order - a.modules.responsive.order;
        return diff || b.modules.responsive.index - a.modules.responsive.index;
      });
      this.columns = columns;
      if (this.mode === "collapse") {
        this.generateCollapsedContent();
      }
      for (let col of this.table.columnManager.columnsByIndex) {
        if (col.definition.formatter == "responsiveCollapse") {
          this.collapseHandleColumn = col;
          break;
        }
      }
      if (this.collapseHandleColumn) {
        if (this.hiddenColumns.length) {
          this.collapseHandleColumn.show();
        } else {
          this.collapseHandleColumn.hide();
        }
      }
    }
    //define layout information
    initializeColumn(column) {
      var def2 = column.getDefinition();
      column.modules.responsive = { order: typeof def2.responsive === "undefined" ? 1 : def2.responsive, visible: def2.visible === false ? false : true };
    }
    initializeRow(row) {
      var el;
      if (row.type !== "calc") {
        el = document.createElement("div");
        el.classList.add("tabulator-responsive-collapse");
        row.modules.responsiveLayout = {
          element: el,
          open: this.collapseStartOpen
        };
        if (!this.collapseStartOpen) {
          el.style.display = "none";
        }
      }
    }
    layoutRow(row) {
      var rowEl = row.getElement();
      if (row.modules.responsiveLayout) {
        rowEl.appendChild(row.modules.responsiveLayout.element);
        this.generateCollapsedRowContent(row);
      }
    }
    //update column visibility
    updateColumnVisibility(column, responsiveToggle) {
      if (!responsiveToggle && column.modules.responsive) {
        column.modules.responsive.visible = column.visible;
        this.initializeResponsivity();
      }
    }
    hideColumn(column) {
      var colCount = this.hiddenColumns.length;
      column.hide(false, true);
      if (this.mode === "collapse") {
        this.hiddenColumns.unshift(column);
        this.generateCollapsedContent();
        if (this.collapseHandleColumn && !colCount) {
          this.collapseHandleColumn.show();
        }
      }
    }
    showColumn(column) {
      var index7;
      column.show(false, true);
      column.setWidth(column.getWidth());
      if (this.mode === "collapse") {
        index7 = this.hiddenColumns.indexOf(column);
        if (index7 > -1) {
          this.hiddenColumns.splice(index7, 1);
        }
        this.generateCollapsedContent();
        if (this.collapseHandleColumn && !this.hiddenColumns.length) {
          this.collapseHandleColumn.hide();
        }
      }
    }
    //redraw columns to fit space
    update() {
      var working = true;
      while (working) {
        let width = this.table.modules.layout.getMode() == "fitColumns" ? this.table.columnManager.getFlexBaseWidth() : this.table.columnManager.getWidth();
        let diff = (this.table.options.headerVisible ? this.table.columnManager.element.clientWidth : this.table.element.clientWidth) - width;
        if (diff < 0) {
          let column = this.columns[this.index];
          if (column) {
            this.hideColumn(column);
            this.index++;
          } else {
            working = false;
          }
        } else {
          let column = this.columns[this.index - 1];
          if (column) {
            if (diff > 0) {
              if (diff >= column.getWidth()) {
                this.showColumn(column);
                this.index--;
              } else {
                working = false;
              }
            } else {
              working = false;
            }
          } else {
            working = false;
          }
        }
        if (!this.table.rowManager.activeRowsCount) {
          this.table.rowManager.renderEmptyScroll();
        }
      }
    }
    generateCollapsedContent() {
      var rows2 = this.table.rowManager.getDisplayRows();
      rows2.forEach((row) => {
        this.generateCollapsedRowContent(row);
      });
    }
    generateCollapsedRowContent(row) {
      var el, contents;
      if (row.modules.responsiveLayout) {
        el = row.modules.responsiveLayout.element;
        while (el.firstChild)
          el.removeChild(el.firstChild);
        contents = this.collapseFormatter(this.generateCollapsedRowData(row));
        if (contents) {
          el.appendChild(contents);
        }
        row.calcHeight(true);
      }
    }
    generateCollapsedRowData(row) {
      var data = row.getData(), output = [], mockCellComponent;
      this.hiddenColumns.forEach((column) => {
        var value = column.getFieldValue(data);
        if (column.definition.title && column.field) {
          if (column.modules.format && this.table.options.responsiveLayoutCollapseUseFormatters) {
            let onRendered = function(callback) {
              callback();
            };
            mockCellComponent = {
              value: false,
              data: {},
              getValue: function() {
                return value;
              },
              getData: function() {
                return data;
              },
              getType: function() {
                return "cell";
              },
              getElement: function() {
                return document.createElement("div");
              },
              getRow: function() {
                return row.getComponent();
              },
              getColumn: function() {
                return column.getComponent();
              },
              getTable: () => {
                return this.table;
              }
            };
            output.push({
              field: column.field,
              title: column.definition.title,
              value: column.modules.format.formatter.call(this.table.modules.format, mockCellComponent, column.modules.format.params, onRendered)
            });
          } else {
            output.push({
              field: column.field,
              title: column.definition.title,
              value
            });
          }
        }
      });
      return output;
    }
    formatCollapsedData(data) {
      var list2 = document.createElement("table");
      data.forEach((item) => {
        var row = document.createElement("tr");
        var titleData = document.createElement("td");
        var valueData = document.createElement("td");
        var node_content;
        var titleHighlight = document.createElement("strong");
        titleData.appendChild(titleHighlight);
        this.modules.localize.bind("columns|" + item.field, function(text) {
          titleHighlight.innerHTML = text || item.title;
        });
        if (item.value instanceof Node) {
          node_content = document.createElement("div");
          node_content.appendChild(item.value);
          valueData.appendChild(node_content);
        } else {
          valueData.innerHTML = item.value;
        }
        row.appendChild(titleData);
        row.appendChild(valueData);
        list2.appendChild(row);
      });
      return Object.keys(data).length ? list2 : "";
    }
  };
  function rowSelection(cell, formatterParams, onRendered) {
    var checkbox = document.createElement("input");
    var blocked = false;
    checkbox.type = "checkbox";
    checkbox.setAttribute("aria-label", "Select Row");
    if (this.table.modExists("selectRow", true)) {
      checkbox.addEventListener("click", (e) => {
        e.stopPropagation();
      });
      if (typeof cell.getRow == "function") {
        var row = cell.getRow();
        if (row instanceof RowComponent) {
          checkbox.addEventListener("change", (e) => {
            if (this.table.options.selectableRowsRangeMode === "click") {
              if (!blocked) {
                row.toggleSelect();
              } else {
                blocked = false;
              }
            } else {
              row.toggleSelect();
            }
          });
          if (this.table.options.selectableRowsRangeMode === "click") {
            checkbox.addEventListener("click", (e) => {
              blocked = true;
              this.table.modules.selectRow.handleComplexRowClick(row._row, e);
            });
          }
          checkbox.checked = row.isSelected && row.isSelected();
          this.table.modules.selectRow.registerRowSelectCheckbox(row, checkbox);
        } else {
          checkbox = "";
        }
      } else {
        checkbox.addEventListener("change", (e) => {
          if (this.table.modules.selectRow.selectedRows.length) {
            this.table.deselectRow();
          } else {
            this.table.selectRow(formatterParams.rowRange);
          }
        });
        this.table.modules.selectRow.registerHeaderSelectCheckbox(checkbox);
      }
    }
    return checkbox;
  }
  var extensions$1 = {
    format: {
      formatters: {
        rowSelection
      }
    }
  };
  var SelectRow = class extends Module {
    static moduleName = "selectRow";
    static moduleExtensions = extensions$1;
    constructor(table) {
      super(table);
      this.selecting = false;
      this.lastClickedRow = false;
      this.selectPrev = [];
      this.selectedRows = [];
      this.headerCheckboxElement = null;
      this.registerTableOption("selectableRows", "highlight");
      this.registerTableOption("selectableRowsRangeMode", "drag");
      this.registerTableOption("selectableRowsRollingSelection", true);
      this.registerTableOption("selectableRowsPersistence", true);
      this.registerTableOption("selectableRowsCheck", function(data, row) {
        return true;
      });
      this.registerTableFunction("selectRow", this.selectRows.bind(this));
      this.registerTableFunction("deselectRow", this.deselectRows.bind(this));
      this.registerTableFunction("toggleSelectRow", this.toggleRow.bind(this));
      this.registerTableFunction("getSelectedRows", this.getSelectedRows.bind(this));
      this.registerTableFunction("getSelectedData", this.getSelectedData.bind(this));
      this.registerComponentFunction("row", "select", this.selectRows.bind(this));
      this.registerComponentFunction("row", "deselect", this.deselectRows.bind(this));
      this.registerComponentFunction("row", "toggleSelect", this.toggleRow.bind(this));
      this.registerComponentFunction("row", "isSelected", this.isRowSelected.bind(this));
    }
    initialize() {
      this.deprecatedOptionsCheck();
      if (this.table.options.selectableRows === "highlight" && this.table.options.selectableRange) {
        this.table.options.selectableRows = false;
      }
      if (this.table.options.selectableRows !== false) {
        this.subscribe("row-init", this.initializeRow.bind(this));
        this.subscribe("row-deleting", this.rowDeleted.bind(this));
        this.subscribe("rows-wipe", this.clearSelectionData.bind(this));
        this.subscribe("rows-retrieve", this.rowRetrieve.bind(this));
        if (this.table.options.selectableRows && !this.table.options.selectableRowsPersistence) {
          this.subscribe("data-refreshing", this.deselectRows.bind(this));
        }
      }
    }
    deprecatedOptionsCheck() {
    }
    rowRetrieve(type, prevValue) {
      return type === "selected" ? this.selectedRows : prevValue;
    }
    rowDeleted(row) {
      this._deselectRow(row, true);
    }
    clearSelectionData(silent) {
      var prevSelected = this.selectedRows.length;
      this.selecting = false;
      this.lastClickedRow = false;
      this.selectPrev = [];
      this.selectedRows = [];
      if (prevSelected && silent !== true) {
        this._rowSelectionChanged();
      }
    }
    initializeRow(row) {
      var self2 = this, selectable = self2.checkRowSelectability(row), element = row.getElement();
      var endSelect = function() {
        setTimeout(function() {
          self2.selecting = false;
        }, 50);
        document.body.removeEventListener("mouseup", endSelect);
      };
      row.modules.select = { selected: false };
      element.classList.toggle("tabulator-selectable", selectable);
      element.classList.toggle("tabulator-unselectable", !selectable);
      if (self2.checkRowSelectability(row)) {
        if (self2.table.options.selectableRows && self2.table.options.selectableRows != "highlight") {
          if (self2.table.options.selectableRowsRangeMode === "click") {
            element.addEventListener("click", this.handleComplexRowClick.bind(this, row));
          } else {
            element.addEventListener("click", function(e) {
              if (!self2.table.modExists("edit") || !self2.table.modules.edit.getCurrentCell()) {
                self2.table._clearSelection();
              }
              if (!self2.selecting) {
                self2.toggleRow(row);
              }
            });
            element.addEventListener("mousedown", function(e) {
              if (e.shiftKey) {
                self2.table._clearSelection();
                self2.selecting = true;
                self2.selectPrev = [];
                document.body.addEventListener("mouseup", endSelect);
                document.body.addEventListener("keyup", endSelect);
                self2.toggleRow(row);
                return false;
              }
            });
            element.addEventListener("mouseenter", function(e) {
              if (self2.selecting) {
                self2.table._clearSelection();
                self2.toggleRow(row);
                if (self2.selectPrev[1] == row) {
                  self2.toggleRow(self2.selectPrev[0]);
                }
              }
            });
            element.addEventListener("mouseout", function(e) {
              if (self2.selecting) {
                self2.table._clearSelection();
                self2.selectPrev.unshift(row);
              }
            });
          }
        }
      }
    }
    handleComplexRowClick(row, e) {
      if (e.shiftKey) {
        this.table._clearSelection();
        this.lastClickedRow = this.lastClickedRow || row;
        var lastClickedRowIdx = this.table.rowManager.getDisplayRowIndex(this.lastClickedRow);
        var rowIdx = this.table.rowManager.getDisplayRowIndex(row);
        var fromRowIdx = lastClickedRowIdx <= rowIdx ? lastClickedRowIdx : rowIdx;
        var toRowIdx = lastClickedRowIdx >= rowIdx ? lastClickedRowIdx : rowIdx;
        var rows2 = this.table.rowManager.getDisplayRows().slice(0);
        var toggledRows = rows2.splice(fromRowIdx, toRowIdx - fromRowIdx + 1);
        if (e.ctrlKey || e.metaKey) {
          toggledRows.forEach((toggledRow) => {
            if (toggledRow !== this.lastClickedRow) {
              if (this.table.options.selectableRows !== true && !this.isRowSelected(row)) {
                if (this.selectedRows.length < this.table.options.selectableRows) {
                  this.toggleRow(toggledRow);
                }
              } else {
                this.toggleRow(toggledRow);
              }
            }
          });
          this.lastClickedRow = row;
        } else {
          this.deselectRows(void 0, true);
          if (this.table.options.selectableRows !== true) {
            if (toggledRows.length > this.table.options.selectableRows) {
              toggledRows = toggledRows.slice(0, this.table.options.selectableRows);
            }
          }
          this.selectRows(toggledRows);
        }
        this.table._clearSelection();
      } else if (e.ctrlKey || e.metaKey) {
        this.toggleRow(row);
        this.lastClickedRow = row;
      } else {
        this.deselectRows(void 0, true);
        this.selectRows(row);
        this.lastClickedRow = row;
      }
    }
    checkRowSelectability(row) {
      if (row && row.type === "row") {
        return this.table.options.selectableRowsCheck.call(this.table, row.getComponent());
      }
      return false;
    }
    //toggle row selection
    toggleRow(row) {
      if (this.checkRowSelectability(row)) {
        if (row.modules.select && row.modules.select.selected) {
          this._deselectRow(row);
        } else {
          this._selectRow(row);
        }
      }
    }
    //select a number of rows
    selectRows(rows2) {
      var changes = [], rowMatch, change;
      switch (typeof rows2) {
        case "undefined":
          rowMatch = this.table.rowManager.rows;
          break;
        case "number":
          rowMatch = this.table.rowManager.findRow(rows2);
          break;
        case "string":
          rowMatch = this.table.rowManager.findRow(rows2);
          if (!rowMatch) {
            rowMatch = this.table.rowManager.getRows(rows2);
          }
          break;
        default:
          rowMatch = rows2;
          break;
      }
      if (Array.isArray(rowMatch)) {
        if (rowMatch.length) {
          rowMatch.forEach((row) => {
            change = this._selectRow(row, true, true);
            if (change) {
              changes.push(change);
            }
          });
          this._rowSelectionChanged(false, changes);
        }
      } else {
        if (rowMatch) {
          this._selectRow(rowMatch, false, true);
        }
      }
    }
    //select an individual row
    _selectRow(rowInfo, silent, force) {
      if (!isNaN(this.table.options.selectableRows) && this.table.options.selectableRows !== true && !force) {
        if (this.selectedRows.length >= this.table.options.selectableRows) {
          if (this.table.options.selectableRowsRollingSelection) {
            this._deselectRow(this.selectedRows[0]);
          } else {
            return false;
          }
        }
      }
      var row = this.table.rowManager.findRow(rowInfo);
      if (row) {
        if (this.selectedRows.indexOf(row) == -1) {
          row.getElement().classList.add("tabulator-selected");
          if (!row.modules.select) {
            row.modules.select = {};
          }
          row.modules.select.selected = true;
          if (row.modules.select.checkboxEl) {
            row.modules.select.checkboxEl.checked = true;
          }
          this.selectedRows.push(row);
          if (this.table.options.dataTreeSelectPropagate) {
            this.childRowSelection(row, true);
          }
          this.dispatchExternal("rowSelected", row.getComponent());
          this._rowSelectionChanged(silent, row);
          return row;
        }
      } else {
        if (!silent) {
          console.warn("Selection Error - No such row found, ignoring selection:" + rowInfo);
        }
      }
    }
    isRowSelected(row) {
      return this.selectedRows.indexOf(row) !== -1;
    }
    //deselect a number of rows
    deselectRows(rows2, silent) {
      var changes = [], rowMatch, change;
      switch (typeof rows2) {
        case "undefined":
          rowMatch = Object.assign([], this.selectedRows);
          break;
        case "number":
          rowMatch = this.table.rowManager.findRow(rows2);
          break;
        case "string":
          rowMatch = this.table.rowManager.findRow(rows2);
          if (!rowMatch) {
            rowMatch = this.table.rowManager.getRows(rows2);
          }
          break;
        default:
          rowMatch = rows2;
          break;
      }
      if (Array.isArray(rowMatch)) {
        if (rowMatch.length) {
          rowMatch.forEach((row) => {
            change = this._deselectRow(row, true, true);
            if (change) {
              changes.push(change);
            }
          });
          this._rowSelectionChanged(silent, [], changes);
        }
      } else {
        if (rowMatch) {
          this._deselectRow(rowMatch, silent, true);
        }
      }
    }
    //deselect an individual row
    _deselectRow(rowInfo, silent) {
      var self2 = this, row = self2.table.rowManager.findRow(rowInfo), index7, element;
      if (row) {
        index7 = self2.selectedRows.findIndex(function(selectedRow) {
          return selectedRow == row;
        });
        if (index7 > -1) {
          element = row.getElement();
          if (element) {
            element.classList.remove("tabulator-selected");
          }
          if (!row.modules.select) {
            row.modules.select = {};
          }
          row.modules.select.selected = false;
          if (row.modules.select.checkboxEl) {
            row.modules.select.checkboxEl.checked = false;
          }
          self2.selectedRows.splice(index7, 1);
          if (this.table.options.dataTreeSelectPropagate) {
            this.childRowSelection(row, false);
          }
          this.dispatchExternal("rowDeselected", row.getComponent());
          self2._rowSelectionChanged(silent, void 0, row);
          return row;
        }
      } else {
        if (!silent) {
          console.warn("Deselection Error - No such row found, ignoring selection:" + rowInfo);
        }
      }
    }
    getSelectedData() {
      var data = [];
      this.selectedRows.forEach(function(row) {
        data.push(row.getData());
      });
      return data;
    }
    getSelectedRows() {
      var rows2 = [];
      this.selectedRows.forEach(function(row) {
        rows2.push(row.getComponent());
      });
      return rows2;
    }
    _rowSelectionChanged(silent, selected = [], deselected = []) {
      if (this.headerCheckboxElement) {
        if (this.selectedRows.length === 0) {
          this.headerCheckboxElement.checked = false;
          this.headerCheckboxElement.indeterminate = false;
        } else if (this.table.rowManager.rows.length === this.selectedRows.length) {
          this.headerCheckboxElement.checked = true;
          this.headerCheckboxElement.indeterminate = false;
        } else {
          this.headerCheckboxElement.indeterminate = true;
          this.headerCheckboxElement.checked = false;
        }
      }
      if (!silent) {
        if (!Array.isArray(selected)) {
          selected = [selected];
        }
        selected = selected.map((row) => row.getComponent());
        if (!Array.isArray(deselected)) {
          deselected = [deselected];
        }
        deselected = deselected.map((row) => row.getComponent());
        this.dispatchExternal("rowSelectionChanged", this.getSelectedData(), this.getSelectedRows(), selected, deselected);
      }
    }
    registerRowSelectCheckbox(row, element) {
      if (!row._row.modules.select) {
        row._row.modules.select = {};
      }
      row._row.modules.select.checkboxEl = element;
    }
    registerHeaderSelectCheckbox(element) {
      this.headerCheckboxElement = element;
    }
    childRowSelection(row, select) {
      var children = this.table.modules.dataTree.getChildren(row, true, true);
      if (select) {
        for (let child of children) {
          this._selectRow(child, true);
        }
      } else {
        for (let child of children) {
          this._deselectRow(child, true);
        }
      }
    }
  };
  var RangeComponent = class {
    constructor(range2) {
      this._range = range2;
      return new Proxy(this, {
        get: function(target, name, receiver) {
          if (typeof target[name] !== "undefined") {
            return target[name];
          } else {
            return target._range.table.componentFunctionBinder.handle("range", target._range, name);
          }
        }
      });
    }
    getElement() {
      return this._range.element;
    }
    getData() {
      return this._range.getData();
    }
    getCells() {
      return this._range.getCells(true, true);
    }
    getStructuredCells() {
      return this._range.getStructuredCells();
    }
    getRows() {
      return this._range.getRows().map((row) => row.getComponent());
    }
    getColumns() {
      return this._range.getColumns().map((column) => column.getComponent());
    }
    getBounds() {
      return this._range.getBounds();
    }
    getTopEdge() {
      return this._range.top;
    }
    getBottomEdge() {
      return this._range.bottom;
    }
    getLeftEdge() {
      return this._range.left;
    }
    getRightEdge() {
      return this._range.right;
    }
    setBounds(start, end) {
      if (this._range.destroyedGuard("setBounds")) {
        this._range.setBounds(start ? start._cell : start, end ? end._cell : end);
      }
    }
    setStartBound(start) {
      if (this._range.destroyedGuard("setStartBound")) {
        this._range.setEndBound(start ? start._cell : start);
        this._range.rangeManager.layoutElement();
      }
    }
    setEndBound(end) {
      if (this._range.destroyedGuard("setEndBound")) {
        this._range.setEndBound(end ? end._cell : end);
        this._range.rangeManager.layoutElement();
      }
    }
    clearValues() {
      if (this._range.destroyedGuard("clearValues")) {
        this._range.clearValues();
      }
    }
    remove() {
      if (this._range.destroyedGuard("remove")) {
        this._range.destroy(true);
      }
    }
  };
  var Range = class extends CoreFeature {
    constructor(table, rangeManager, start, end) {
      super(table);
      this.rangeManager = rangeManager;
      this.element = null;
      this.initialized = false;
      this.initializing = {
        start: false,
        end: false
      };
      this.destroyed = false;
      this.top = 0;
      this.bottom = 0;
      this.left = 0;
      this.right = 0;
      this.table = table;
      this.start = { row: 0, col: 0 };
      this.end = { row: 0, col: 0 };
      if (this.rangeManager.rowHeader) {
        this.left = 1;
        this.right = 1;
        this.start.col = 1;
        this.end.col = 1;
      }
      this.initElement();
      setTimeout(() => {
        this.initBounds(start, end);
      });
    }
    initElement() {
      this.element = document.createElement("div");
      this.element.classList.add("tabulator-range");
    }
    initBounds(start, end) {
      this._updateMinMax();
      if (start) {
        this.setBounds(start, end || start);
      }
    }
    ///////////////////////////////////
    ///////   Boundary Setup    ///////
    ///////////////////////////////////
    setStart(row, col) {
      if (this.start.row !== row || this.start.col !== col) {
        this.start.row = row;
        this.start.col = col;
        this.initializing.start = true;
        this._updateMinMax();
      }
    }
    setEnd(row, col) {
      if (this.end.row !== row || this.end.col !== col) {
        this.end.row = row;
        this.end.col = col;
        this.initializing.end = true;
        this._updateMinMax();
      }
    }
    setBounds(start, end, visibleRows) {
      if (start) {
        this.setStartBound(start);
      }
      this.setEndBound(end || start);
      this.rangeManager.layoutElement(visibleRows);
    }
    setStartBound(element) {
      var row, col;
      if (element.type === "column") {
        if (this.rangeManager.columnSelection) {
          this.setStart(0, element.getPosition() - 1);
        }
      } else {
        row = element.row.position - 1;
        col = element.column.getPosition() - 1;
        if (element.column === this.rangeManager.rowHeader) {
          this.setStart(row, 1);
        } else {
          this.setStart(row, col);
        }
      }
    }
    setEndBound(element) {
      var rowsCount = this._getTableRows().length, row, col, isRowHeader;
      if (element.type === "column") {
        if (this.rangeManager.columnSelection) {
          if (this.rangeManager.selecting === "column") {
            this.setEnd(rowsCount - 1, element.getPosition() - 1);
          } else if (this.rangeManager.selecting === "cell") {
            this.setEnd(0, element.getPosition() - 1);
          }
        }
      } else {
        row = element.row.position - 1;
        col = element.column.getPosition() - 1;
        isRowHeader = element.column === this.rangeManager.rowHeader;
        if (this.rangeManager.selecting === "row") {
          this.setEnd(row, this._getTableColumns().length - 1);
        } else if (this.rangeManager.selecting !== "row" && isRowHeader) {
          this.setEnd(row, 0);
        } else if (this.rangeManager.selecting === "column") {
          this.setEnd(rowsCount - 1, col);
        } else {
          this.setEnd(row, col);
        }
      }
    }
    _updateMinMax() {
      this.top = Math.min(this.start.row, this.end.row);
      this.bottom = Math.max(this.start.row, this.end.row);
      this.left = Math.min(this.start.col, this.end.col);
      this.right = Math.max(this.start.col, this.end.col);
      if (this.initialized) {
        this.dispatchExternal("rangeChanged", this.getComponent());
      } else {
        if (this.initializing.start && this.initializing.end) {
          this.initialized = true;
          this.dispatchExternal("rangeAdded", this.getComponent());
        }
      }
    }
    _getTableColumns() {
      return this.table.columnManager.getVisibleColumnsByIndex();
    }
    _getTableRows() {
      return this.table.rowManager.getDisplayRows().filter((row) => row.type === "row");
    }
    ///////////////////////////////////
    ///////      Rendering      ///////
    ///////////////////////////////////
    layout() {
      var _vDomTop = this.table.rowManager.renderer.vDomTop, _vDomBottom = this.table.rowManager.renderer.vDomBottom, _vDomLeft = this.table.columnManager.renderer.leftCol, _vDomRight = this.table.columnManager.renderer.rightCol, top, bottom, left, right, topLeftCell, bottomRightCell, topLeftCellEl, bottomRightCellEl, topLeftRowEl, bottomRightRowEl;
      if (this.table.options.renderHorizontal === "virtual" && this.rangeManager.rowHeader) {
        _vDomRight += 1;
      }
      if (_vDomTop == null) {
        _vDomTop = 0;
      }
      if (_vDomBottom == null) {
        _vDomBottom = Infinity;
      }
      if (_vDomLeft == null) {
        _vDomLeft = 0;
      }
      if (_vDomRight == null) {
        _vDomRight = Infinity;
      }
      if (this.overlaps(_vDomLeft, _vDomTop, _vDomRight, _vDomBottom)) {
        top = Math.max(this.top, _vDomTop);
        bottom = Math.min(this.bottom, _vDomBottom);
        left = Math.max(this.left, _vDomLeft);
        right = Math.min(this.right, _vDomRight);
        topLeftCell = this.rangeManager.getCell(top, left);
        bottomRightCell = this.rangeManager.getCell(bottom, right);
        topLeftCellEl = topLeftCell.getElement();
        bottomRightCellEl = bottomRightCell.getElement();
        topLeftRowEl = topLeftCell.row.getElement();
        bottomRightRowEl = bottomRightCell.row.getElement();
        this.element.classList.add("tabulator-range-active");
        if (this.table.rtl) {
          this.element.style.right = topLeftRowEl.offsetWidth - topLeftCellEl.offsetLeft - topLeftCellEl.offsetWidth + "px";
          this.element.style.width = topLeftCellEl.offsetLeft + topLeftCellEl.offsetWidth - bottomRightCellEl.offsetLeft + "px";
        } else {
          this.element.style.left = topLeftRowEl.offsetLeft + topLeftCellEl.offsetLeft + "px";
          this.element.style.width = bottomRightCellEl.offsetLeft + bottomRightCellEl.offsetWidth - topLeftCellEl.offsetLeft + "px";
        }
        this.element.style.top = topLeftRowEl.offsetTop + "px";
        this.element.style.height = bottomRightRowEl.offsetTop + bottomRightRowEl.offsetHeight - topLeftRowEl.offsetTop + "px";
      }
    }
    atTopLeft(cell) {
      return cell.row.position - 1 === this.top && cell.column.getPosition() - 1 === this.left;
    }
    atBottomRight(cell) {
      return cell.row.position - 1 === this.bottom && cell.column.getPosition() - 1 === this.right;
    }
    occupies(cell) {
      return this.occupiesRow(cell.row) && this.occupiesColumn(cell.column);
    }
    occupiesRow(row) {
      return this.top <= row.position - 1 && row.position - 1 <= this.bottom;
    }
    occupiesColumn(col) {
      return this.left <= col.getPosition() - 1 && col.getPosition() - 1 <= this.right;
    }
    overlaps(left, top, right, bottom) {
      if (this.left > right || left > this.right || (this.top > bottom || top > this.bottom)) {
        return false;
      }
      return true;
    }
    getData() {
      var data = [], rows2 = this.getRows(), columns = this.getColumns();
      rows2.forEach((row) => {
        var rowData = row.getData(), result = {};
        columns.forEach((column) => {
          result[column.field] = rowData[column.field];
        });
        data.push(result);
      });
      return data;
    }
    getCells(structured, component) {
      var cells = [], rows2 = this.getRows(), columns = this.getColumns();
      if (structured) {
        cells = rows2.map((row) => {
          var arr = [];
          row.getCells().forEach((cell) => {
            if (columns.includes(cell.column)) {
              arr.push(component ? cell.getComponent() : cell);
            }
          });
          return arr;
        });
      } else {
        rows2.forEach((row) => {
          row.getCells().forEach((cell) => {
            if (columns.includes(cell.column)) {
              cells.push(component ? cell.getComponent() : cell);
            }
          });
        });
      }
      return cells;
    }
    getStructuredCells() {
      return this.getCells(true, true);
    }
    getRows() {
      return this._getTableRows().slice(this.top, this.bottom + 1);
    }
    getColumns() {
      return this._getTableColumns().slice(this.left, this.right + 1);
    }
    clearValues() {
      var cells = this.getCells();
      var clearValue = this.table.options.selectableRangeClearCellsValue;
      this.table.blockRedraw();
      cells.forEach((cell) => {
        cell.setValue(clearValue);
      });
      this.table.restoreRedraw();
    }
    getBounds(component) {
      var cells = this.getCells(false, component), output = {
        start: null,
        end: null
      };
      if (cells.length) {
        output.start = cells[0];
        output.end = cells[cells.length - 1];
      } else {
        console.warn("No bounds defined on range");
      }
      return output;
    }
    getComponent() {
      if (!this.component) {
        this.component = new RangeComponent(this);
      }
      return this.component;
    }
    destroy(notify) {
      this.destroyed = true;
      this.element.remove();
      if (notify) {
        this.rangeManager.rangeRemoved(this);
      }
      if (this.initialized) {
        this.dispatchExternal("rangeRemoved", this.getComponent());
      }
    }
    destroyedGuard(func) {
      if (this.destroyed) {
        console.warn("You cannot call the " + func + " function on a destroyed range");
      }
      return !this.destroyed;
    }
  };
  var bindings = {
    rangeJumpUp: ["ctrl + 38", "meta + 38"],
    rangeJumpDown: ["ctrl + 40", "meta + 40"],
    rangeJumpLeft: ["ctrl + 37", "meta + 37"],
    rangeJumpRight: ["ctrl + 39", "meta + 39"],
    rangeExpandUp: "shift + 38",
    rangeExpandDown: "shift + 40",
    rangeExpandLeft: "shift + 37",
    rangeExpandRight: "shift + 39",
    rangeExpandJumpUp: ["ctrl + shift + 38", "meta + shift + 38"],
    rangeExpandJumpDown: ["ctrl + shift + 40", "meta + shift + 40"],
    rangeExpandJumpLeft: ["ctrl + shift + 37", "meta + shift + 37"],
    rangeExpandJumpRight: ["ctrl + shift + 39", "meta + shift + 39"]
  };
  var actions = {
    rangeJumpLeft: function(e) {
      this.dispatch("keybinding-nav-range", e, "left", true, false);
    },
    rangeJumpRight: function(e) {
      this.dispatch("keybinding-nav-range", e, "right", true, false);
    },
    rangeJumpUp: function(e) {
      this.dispatch("keybinding-nav-range", e, "up", true, false);
    },
    rangeJumpDown: function(e) {
      this.dispatch("keybinding-nav-range", e, "down", true, false);
    },
    rangeExpandLeft: function(e) {
      this.dispatch("keybinding-nav-range", e, "left", false, true);
    },
    rangeExpandRight: function(e) {
      this.dispatch("keybinding-nav-range", e, "right", false, true);
    },
    rangeExpandUp: function(e) {
      this.dispatch("keybinding-nav-range", e, "up", false, true);
    },
    rangeExpandDown: function(e) {
      this.dispatch("keybinding-nav-range", e, "down", false, true);
    },
    rangeExpandJumpLeft: function(e) {
      this.dispatch("keybinding-nav-range", e, "left", true, true);
    },
    rangeExpandJumpRight: function(e) {
      this.dispatch("keybinding-nav-range", e, "right", true, true);
    },
    rangeExpandJumpUp: function(e) {
      this.dispatch("keybinding-nav-range", e, "up", true, true);
    },
    rangeExpandJumpDown: function(e) {
      this.dispatch("keybinding-nav-range", e, "down", true, true);
    }
  };
  var pasteActions = {
    range: function(data) {
      var rows2 = [], range2 = this.table.modules.selectRange.activeRange, singleCell = false, bounds, startCell, startRow, rowWidth, dataLength;
      dataLength = data.length;
      if (range2) {
        bounds = range2.getBounds();
        startCell = bounds.start;
        if (bounds.start === bounds.end) {
          singleCell = true;
        }
        if (startCell) {
          rows2 = this.table.rowManager.activeRows.slice();
          startRow = rows2.indexOf(startCell.row);
          if (singleCell) {
            rowWidth = data.length;
          } else {
            rowWidth = rows2.indexOf(bounds.end.row) - startRow + 1;
          }
          if (startRow > -1) {
            this.table.blockRedraw();
            rows2 = rows2.slice(startRow, startRow + rowWidth);
            rows2.forEach((row, i) => {
              row.updateData(data[i % dataLength]);
            });
            this.table.restoreRedraw();
          }
        }
      }
      return rows2;
    }
  };
  var pasteParsers = {
    range: function(clipboard) {
      var data = [], rows2 = [], range2 = this.table.modules.selectRange.activeRange, singleCell = false, bounds, startCell, colWidth, columnMap, startCol;
      if (range2) {
        bounds = range2.getBounds();
        startCell = bounds.start;
        if (bounds.start === bounds.end) {
          singleCell = true;
        }
        if (startCell) {
          clipboard = clipboard.split("\n");
          clipboard.forEach(function(row) {
            data.push(row.split("	"));
          });
          if (data.length) {
            columnMap = this.table.columnManager.getVisibleColumnsByIndex();
            startCol = columnMap.indexOf(startCell.column);
            if (startCol > -1) {
              if (singleCell) {
                colWidth = data[0].length;
              } else {
                colWidth = columnMap.indexOf(bounds.end.column) - startCol + 1;
              }
              columnMap = columnMap.slice(startCol, startCol + colWidth);
              data.forEach((item) => {
                var row = {};
                var itemLength = item.length;
                columnMap.forEach(function(col, i) {
                  row[col.field] = item[i % itemLength];
                });
                rows2.push(row);
              });
              return rows2;
            }
          }
        }
      }
      return false;
    }
  };
  var columnLookups = {
    range: function() {
      var columns = this.modules.selectRange.selectedColumns();
      if (this.columnManager.rowHeader) {
        columns.unshift(this.columnManager.rowHeader);
      }
      return columns;
    }
  };
  var rowLookups = {
    range: function() {
      return this.modules.selectRange.selectedRows();
    }
  };
  var extensions = {
    keybindings: {
      bindings,
      actions
    },
    clipboard: {
      pasteActions,
      pasteParsers
    },
    export: {
      columnLookups,
      rowLookups
    }
  };
  var SelectRange = class extends Module {
    static moduleName = "selectRange";
    static moduleInitOrder = 1;
    static moduleExtensions = extensions;
    constructor(table) {
      super(table);
      this.selecting = "cell";
      this.mousedown = false;
      this.ranges = [];
      this.overlay = null;
      this.rowHeader = null;
      this.layoutChangeTimeout = null;
      this.columnSelection = false;
      this.rowSelection = false;
      this.maxRanges = 0;
      this.activeRange = false;
      this.blockKeydown = false;
      this.keyDownEvent = this._handleKeyDown.bind(this);
      this.mouseUpEvent = this._handleMouseUp.bind(this);
      this.registerTableOption("selectableRange", false);
      this.registerTableOption("selectableRangeColumns", false);
      this.registerTableOption("selectableRangeRows", false);
      this.registerTableOption("selectableRangeClearCells", false);
      this.registerTableOption("selectableRangeClearCellsValue", void 0);
      this.registerTableOption("selectableRangeAutoFocus", true);
      this.registerTableFunction("getRangesData", this.getRangesData.bind(this));
      this.registerTableFunction("getRanges", this.getRanges.bind(this));
      this.registerTableFunction("addRange", this.addRangeFromComponent.bind(this));
      this.registerComponentFunction("cell", "getRanges", this.cellGetRanges.bind(this));
      this.registerComponentFunction("row", "getRanges", this.rowGetRanges.bind(this));
      this.registerComponentFunction("column", "getRanges", this.colGetRanges.bind(this));
    }
    ///////////////////////////////////
    ///////    Initialization   ///////
    ///////////////////////////////////
    initialize() {
      if (this.options("selectableRange")) {
        if (!this.options("selectableRows")) {
          this.maxRanges = this.options("selectableRange");
          this.initializeTable();
          this.initializeWatchers();
        } else {
          console.warn("SelectRange functionality cannot be used in conjunction with row selection");
        }
        if (this.options("columns").findIndex((column) => column.frozen) > 0) {
          console.warn("Having frozen column in arbitrary position with selectRange option may result in unpredictable behavior.");
        }
        if (this.options("columns").filter((column) => column.frozen) > 1) {
          console.warn("Having multiple frozen columns with selectRange option may result in unpredictable behavior.");
        }
      }
    }
    initializeTable() {
      this.overlay = document.createElement("div");
      this.overlay.classList.add("tabulator-range-overlay");
      this.rangeContainer = document.createElement("div");
      this.rangeContainer.classList.add("tabulator-range-container");
      this.activeRangeCellElement = document.createElement("div");
      this.activeRangeCellElement.classList.add("tabulator-range-cell-active");
      this.overlay.appendChild(this.rangeContainer);
      this.overlay.appendChild(this.activeRangeCellElement);
      this.table.rowManager.element.addEventListener("keydown", this.keyDownEvent);
      this.resetRanges();
      this.table.rowManager.element.appendChild(this.overlay);
      this.table.columnManager.element.setAttribute("tabindex", 0);
      this.table.element.classList.add("tabulator-ranges");
    }
    initializeWatchers() {
      this.columnSelection = this.options("selectableRangeColumns");
      this.rowSelection = this.options("selectableRangeRows");
      this.subscribe("column-init", this.initializeColumn.bind(this));
      this.subscribe("column-mousedown", this.handleColumnMouseDown.bind(this));
      this.subscribe("column-mousemove", this.handleColumnMouseMove.bind(this));
      this.subscribe("column-resized", this.handleColumnResized.bind(this));
      this.subscribe("column-moving", this.handleColumnMoving.bind(this));
      this.subscribe("column-moved", this.handleColumnMoved.bind(this));
      this.subscribe("column-width", this.layoutChange.bind(this));
      this.subscribe("column-height", this.layoutChange.bind(this));
      this.subscribe("column-resized", this.layoutChange.bind(this));
      this.subscribe("columns-loaded", this.updateHeaderColumn.bind(this));
      this.subscribe("cell-height", this.layoutChange.bind(this));
      this.subscribe("cell-rendered", this.renderCell.bind(this));
      this.subscribe("cell-mousedown", this.handleCellMouseDown.bind(this));
      this.subscribe("cell-mousemove", this.handleCellMouseMove.bind(this));
      this.subscribe("cell-click", this.handleCellClick.bind(this));
      this.subscribe("cell-editing", this.handleEditingCell.bind(this));
      this.subscribe("page-changed", this.redraw.bind(this));
      this.subscribe("scroll-vertical", this.layoutChange.bind(this));
      this.subscribe("scroll-horizontal", this.layoutChange.bind(this));
      this.subscribe("data-destroy", this.tableDestroyed.bind(this));
      this.subscribe("data-processed", this.resetRanges.bind(this));
      this.subscribe("table-layout", this.layoutElement.bind(this));
      this.subscribe("table-redraw", this.redraw.bind(this));
      this.subscribe("table-destroy", this.tableDestroyed.bind(this));
      this.subscribe("edit-editor-clear", this.finishEditingCell.bind(this));
      this.subscribe("edit-blur", this.restoreFocus.bind(this));
      this.subscribe("keybinding-nav-prev", this.keyNavigate.bind(this, "left"));
      this.subscribe("keybinding-nav-next", this.keyNavigate.bind(this, "right"));
      this.subscribe("keybinding-nav-left", this.keyNavigate.bind(this, "left"));
      this.subscribe("keybinding-nav-right", this.keyNavigate.bind(this, "right"));
      this.subscribe("keybinding-nav-up", this.keyNavigate.bind(this, "up"));
      this.subscribe("keybinding-nav-down", this.keyNavigate.bind(this, "down"));
      this.subscribe("keybinding-nav-range", this.keyNavigateRange.bind(this));
    }
    initializeColumn(column) {
      if (this.columnSelection && column.definition.headerSort && this.options("headerSortClickElement") !== "icon") {
        console.warn("Using column headerSort with selectableRangeColumns option may result in unpredictable behavior. Consider using headerSortClickElement: 'icon'.");
      }
      if (column.modules.edit)
        ;
    }
    updateHeaderColumn() {
      var frozenCols;
      if (this.rowSelection) {
        this.rowHeader = this.table.columnManager.getVisibleColumnsByIndex()[0];
        if (this.rowHeader) {
          this.rowHeader.definition.cssClass = this.rowHeader.definition.cssClass + " tabulator-range-row-header";
          if (this.rowHeader.definition.headerSort) {
            console.warn("Using column headerSort with selectableRangeRows option may result in unpredictable behavior");
          }
          if (this.rowHeader.definition.editor) {
            console.warn("Using column editor with selectableRangeRows option may result in unpredictable behavior");
          }
        }
      }
      if (this.table.modules.frozenColumns && this.table.modules.frozenColumns.active) {
        frozenCols = this.table.modules.frozenColumns.getFrozenColumns();
        if (frozenCols.length > 1 || frozenCols.length === 1 && frozenCols[0] !== this.rowHeader) {
          console.warn("Using frozen columns that are not the range header in combination with the selectRange option may result in unpredictable behavior");
        }
      }
    }
    ///////////////////////////////////
    ///////   Table Functions   ///////
    ///////////////////////////////////
    getRanges() {
      return this.ranges.map((range2) => range2.getComponent());
    }
    getRangesData() {
      return this.ranges.map((range2) => range2.getData());
    }
    addRangeFromComponent(start, end) {
      start = start ? start._cell : null;
      end = end ? end._cell : null;
      return this.addRange(start, end);
    }
    ///////////////////////////////////
    /////// Component Functions ///////
    ///////////////////////////////////
    cellGetRanges(cell) {
      var ranges = [];
      if (cell.column === this.rowHeader) {
        ranges = this.ranges.filter((range2) => range2.occupiesRow(cell.row));
      } else {
        ranges = this.ranges.filter((range2) => range2.occupies(cell));
      }
      return ranges.map((range2) => range2.getComponent());
    }
    rowGetRanges(row) {
      var ranges = this.ranges.filter((range2) => range2.occupiesRow(row));
      return ranges.map((range2) => range2.getComponent());
    }
    colGetRanges(col) {
      var ranges = this.ranges.filter((range2) => range2.occupiesColumn(col));
      return ranges.map((range2) => range2.getComponent());
    }
    ///////////////////////////////////
    ////////// Event Handlers /////////
    ///////////////////////////////////
    _handleMouseUp(e) {
      this.mousedown = false;
      document.removeEventListener("mouseup", this.mouseUpEvent);
    }
    _handleKeyDown(e) {
      if (!this.blockKeydown && (!this.table.modules.edit || this.table.modules.edit && !this.table.modules.edit.currentCell)) {
        if (e.key === "Enter") {
          if (this.table.modules.edit && this.table.modules.edit.currentCell) {
            return;
          }
          this.table.modules.edit.editCell(this.getActiveCell());
          e.preventDefault();
        }
        if ((e.key === "Backspace" || e.key === "Delete") && this.options("selectableRangeClearCells")) {
          if (this.activeRange) {
            this.activeRange.clearValues();
          }
        }
      }
    }
    initializeFocus(cell) {
      var range2;
      this.restoreFocus();
      try {
        if (document.selection) {
          range2 = document.body.createTextRange();
          range2.moveToElementText(cell.getElement());
          range2.select();
        } else if (window.getSelection) {
          range2 = document.createRange();
          range2.selectNode(cell.getElement());
          window.getSelection().removeAllRanges();
          window.getSelection().addRange(range2);
        }
      } catch (e) {
      }
    }
    restoreFocus(element) {
      this.table.rowManager.element.focus();
      return true;
    }
    ///////////////////////////////////
    ////// Column Functionality ///////
    ///////////////////////////////////
    handleColumnResized(column) {
      var selected;
      if (this.selecting !== "column" && this.selecting !== "all") {
        return;
      }
      selected = this.ranges.some((range2) => range2.occupiesColumn(column));
      if (!selected) {
        return;
      }
      this.ranges.forEach((range2) => {
        var selectedColumns = range2.getColumns(true);
        selectedColumns.forEach((selectedColumn) => {
          if (selectedColumn !== column) {
            selectedColumn.setWidth(column.width);
          }
        });
      });
    }
    handleColumnMoving(_event, column) {
      this.resetRanges().setBounds(column);
      this.overlay.style.visibility = "hidden";
    }
    handleColumnMoved(from, _to, _after) {
      this.activeRange.setBounds(from);
      this.layoutElement();
    }
    handleColumnMouseDown(event, column) {
      if (event.button === 2 && (this.selecting === "column" || this.selecting === "all") && this.activeRange.occupiesColumn(column)) {
        return;
      }
      if (this.table.options.movableColumns && this.selecting === "column" && this.activeRange.occupiesColumn(column)) {
        return;
      }
      this.mousedown = true;
      document.addEventListener("mouseup", this.mouseUpEvent);
      this.newSelection(event, column);
    }
    handleColumnMouseMove(e, column) {
      if (column === this.rowHeader || !this.mousedown || this.selecting === "all") {
        return;
      }
      this.activeRange.setBounds(false, column, true);
    }
    ///////////////////////////////////
    //////// Cell Functionality ///////
    ///////////////////////////////////
    renderCell(cell) {
      var el = cell.getElement(), rangeIdx = this.ranges.findIndex((range2) => range2.occupies(cell));
      el.classList.toggle("tabulator-range-selected", rangeIdx !== -1);
      el.classList.toggle("tabulator-range-only-cell-selected", this.ranges.length === 1 && this.ranges[0].atTopLeft(cell) && this.ranges[0].atBottomRight(cell));
      el.dataset.range = rangeIdx;
    }
    handleCellMouseDown(event, cell) {
      if (event.button === 2 && (this.activeRange.occupies(cell) || (this.selecting === "row" || this.selecting === "all") && this.activeRange.occupiesRow(cell.row))) {
        return;
      }
      this.mousedown = true;
      document.addEventListener("mouseup", this.mouseUpEvent);
      this.newSelection(event, cell);
    }
    handleCellMouseMove(e, cell) {
      if (!this.mousedown || this.selecting === "all") {
        return;
      }
      this.activeRange.setBounds(false, cell, true);
    }
    handleCellClick(e, cell) {
      this.initializeFocus(cell);
    }
    handleEditingCell(cell) {
      if (this.activeRange) {
        this.activeRange.setBounds(cell);
      }
    }
    finishEditingCell() {
      this.blockKeydown = true;
      this.table.rowManager.element.focus();
      setTimeout(() => {
        this.blockKeydown = false;
      }, 10);
    }
    ///////////////////////////////////
    ///////     Navigation      ///////
    ///////////////////////////////////
    keyNavigate(dir, e) {
      if (this.navigate(false, false, dir))
        ;
      e.preventDefault();
    }
    keyNavigateRange(e, dir, jump, expand) {
      if (this.navigate(jump, expand, dir))
        ;
      e.preventDefault();
    }
    navigate(jump, expand, dir) {
      var moved = false, range2, rangeEdge, prevRect, nextRow, nextCol, row, column, rowRect, rowManagerRect, columnRect, columnManagerRect;
      if (this.table.modules.edit && this.table.modules.edit.currentCell) {
        return false;
      }
      if (this.ranges.length > 1) {
        this.ranges = this.ranges.filter((range3) => {
          if (range3 === this.activeRange) {
            range3.setEnd(range3.start.row, range3.start.col);
            return true;
          }
          range3.destroy();
          return false;
        });
      }
      range2 = this.activeRange;
      prevRect = {
        top: range2.top,
        bottom: range2.bottom,
        left: range2.left,
        right: range2.right
      };
      rangeEdge = expand ? range2.end : range2.start;
      nextRow = rangeEdge.row;
      nextCol = rangeEdge.col;
      if (jump) {
        switch (dir) {
          case "left":
            nextCol = this.findJumpCellLeft(range2.start.row, rangeEdge.col);
            break;
          case "right":
            nextCol = this.findJumpCellRight(range2.start.row, rangeEdge.col);
            break;
          case "up":
            nextRow = this.findJumpCellUp(rangeEdge.row, range2.start.col);
            break;
          case "down":
            nextRow = this.findJumpCellDown(rangeEdge.row, range2.start.col);
            break;
        }
      } else {
        if (expand) {
          if (this.selecting === "row" && (dir === "left" || dir === "right") || this.selecting === "column" && (dir === "up" || dir === "down")) {
            return;
          }
        }
        switch (dir) {
          case "left":
            nextCol = Math.max(nextCol - 1, 0);
            break;
          case "right":
            nextCol = Math.min(nextCol + 1, this.getTableColumns().length - 1);
            break;
          case "up":
            nextRow = Math.max(nextRow - 1, 0);
            break;
          case "down":
            nextRow = Math.min(nextRow + 1, this.getTableRows().length - 1);
            break;
        }
      }
      if (this.rowHeader && nextCol === 0) {
        nextCol = 1;
      }
      if (!expand) {
        range2.setStart(nextRow, nextCol);
      }
      range2.setEnd(nextRow, nextCol);
      if (!expand) {
        this.selecting = "cell";
      }
      moved = prevRect.top !== range2.top || prevRect.bottom !== range2.bottom || prevRect.left !== range2.left || prevRect.right !== range2.right;
      if (moved) {
        row = this.getRowByRangePos(range2.end.row);
        column = this.getColumnByRangePos(range2.end.col);
        rowRect = row.getElement().getBoundingClientRect();
        columnRect = column.getElement().getBoundingClientRect();
        rowManagerRect = this.table.rowManager.getElement().getBoundingClientRect();
        columnManagerRect = this.table.columnManager.getElement().getBoundingClientRect();
        if (!(rowRect.top >= rowManagerRect.top && rowRect.bottom <= rowManagerRect.bottom)) {
          if (row.getElement().parentNode && column.getElement().parentNode) {
            this.autoScroll(range2, row.getElement(), column.getElement());
          } else {
            row.getComponent().scrollTo(void 0, false);
          }
        }
        if (!(columnRect.left >= columnManagerRect.left + this.getRowHeaderWidth() && columnRect.right <= columnManagerRect.right)) {
          if (row.getElement().parentNode && column.getElement().parentNode) {
            this.autoScroll(range2, row.getElement(), column.getElement());
          } else {
            column.getComponent().scrollTo(void 0, false);
          }
        }
        this.layoutElement();
        return true;
      }
    }
    rangeRemoved(removed) {
      this.ranges = this.ranges.filter((range2) => range2 !== removed);
      if (this.activeRange === removed) {
        if (this.ranges.length) {
          this.activeRange = this.ranges[this.ranges.length - 1];
        } else {
          this.addRange();
        }
      }
      this.layoutElement();
    }
    findJumpRow(column, rows2, reverse, emptyStart, emptySide) {
      if (reverse) {
        rows2 = rows2.reverse();
      }
      return this.findJumpItem(emptyStart, emptySide, rows2, function(row) {
        return row.getData()[column.getField()];
      });
    }
    findJumpCol(row, columns, reverse, emptyStart, emptySide) {
      if (reverse) {
        columns = columns.reverse();
      }
      return this.findJumpItem(emptyStart, emptySide, columns, function(column) {
        return row.getData()[column.getField()];
      });
    }
    findJumpItem(emptyStart, emptySide, items, valueResolver) {
      var nextItem;
      for (let currentItem of items) {
        let currentValue = valueResolver(currentItem);
        if (emptyStart) {
          nextItem = currentItem;
          if (currentValue) {
            break;
          }
        } else {
          if (emptySide) {
            nextItem = currentItem;
            if (currentValue) {
              break;
            }
          } else {
            if (currentValue) {
              nextItem = currentItem;
            } else {
              break;
            }
          }
        }
      }
      return nextItem;
    }
    findJumpCellLeft(rowPos, colPos) {
      var row = this.getRowByRangePos(rowPos), columns = this.getTableColumns(), isStartingCellEmpty = this.isEmpty(row.getData()[columns[colPos].getField()]), isLeftOfStartingCellEmpty = columns[colPos - 1] ? this.isEmpty(row.getData()[columns[colPos - 1].getField()]) : false, targetCols = this.rowHeader ? columns.slice(1, colPos) : columns.slice(0, colPos), jumpCol = this.findJumpCol(row, targetCols, true, isStartingCellEmpty, isLeftOfStartingCellEmpty);
      if (jumpCol) {
        return jumpCol.getPosition() - 1;
      }
      return colPos;
    }
    findJumpCellRight(rowPos, colPos) {
      var row = this.getRowByRangePos(rowPos), columns = this.getTableColumns(), isStartingCellEmpty = this.isEmpty(row.getData()[columns[colPos].getField()]), isRightOfStartingCellEmpty = columns[colPos + 1] ? this.isEmpty(row.getData()[columns[colPos + 1].getField()]) : false, jumpCol = this.findJumpCol(row, columns.slice(colPos + 1, columns.length), false, isStartingCellEmpty, isRightOfStartingCellEmpty);
      if (jumpCol) {
        return jumpCol.getPosition() - 1;
      }
      return colPos;
    }
    findJumpCellUp(rowPos, colPos) {
      var column = this.getColumnByRangePos(colPos), rows2 = this.getTableRows(), isStartingCellEmpty = this.isEmpty(rows2[rowPos].getData()[column.getField()]), isTopOfStartingCellEmpty = rows2[rowPos - 1] ? this.isEmpty(rows2[rowPos - 1].getData()[column.getField()]) : false, jumpRow = this.findJumpRow(column, rows2.slice(0, rowPos), true, isStartingCellEmpty, isTopOfStartingCellEmpty);
      if (jumpRow) {
        return jumpRow.position - 1;
      }
      return rowPos;
    }
    findJumpCellDown(rowPos, colPos) {
      var column = this.getColumnByRangePos(colPos), rows2 = this.getTableRows(), isStartingCellEmpty = this.isEmpty(rows2[rowPos].getData()[column.getField()]), isBottomOfStartingCellEmpty = rows2[rowPos + 1] ? this.isEmpty(rows2[rowPos + 1].getData()[column.getField()]) : false, jumpRow = this.findJumpRow(column, rows2.slice(rowPos + 1, rows2.length), false, isStartingCellEmpty, isBottomOfStartingCellEmpty);
      if (jumpRow) {
        return jumpRow.position - 1;
      }
      return rowPos;
    }
    ///////////////////////////////////
    ///////      Selection      ///////
    ///////////////////////////////////
    newSelection(event, element) {
      var range2;
      if (element.type === "column") {
        if (!this.columnSelection) {
          return;
        }
        if (element === this.rowHeader) {
          range2 = this.resetRanges();
          this.selecting = "all";
          var topLeftCell, bottomRightCell = this.getCell(-1, -1);
          if (this.rowHeader) {
            topLeftCell = this.getCell(0, 1);
          } else {
            topLeftCell = this.getCell(0, 0);
          }
          range2.setBounds(topLeftCell, bottomRightCell);
          return;
        } else {
          this.selecting = "column";
        }
      } else if (element.column === this.rowHeader) {
        this.selecting = "row";
      } else {
        this.selecting = "cell";
      }
      if (event.shiftKey) {
        this.activeRange.setBounds(false, element);
      } else if (event.ctrlKey) {
        this.addRange().setBounds(element);
      } else {
        this.resetRanges().setBounds(element);
      }
    }
    autoScroll(range2, row, column) {
      var tableHolder = this.table.rowManager.element, rect, view, withinHorizontalView, withinVerticalView;
      if (typeof row === "undefined") {
        row = this.getRowByRangePos(range2.end.row).getElement();
      }
      if (typeof column === "undefined") {
        column = this.getColumnByRangePos(range2.end.col).getElement();
      }
      rect = {
        left: column.offsetLeft,
        right: column.offsetLeft + column.offsetWidth,
        top: row.offsetTop,
        bottom: row.offsetTop + row.offsetHeight
      };
      view = {
        left: tableHolder.scrollLeft + this.getRowHeaderWidth(),
        right: Math.ceil(tableHolder.scrollLeft + tableHolder.clientWidth),
        top: tableHolder.scrollTop,
        bottom: tableHolder.scrollTop + tableHolder.offsetHeight - this.table.rowManager.scrollbarWidth
      };
      withinHorizontalView = view.left < rect.left && rect.left < view.right && view.left < rect.right && rect.right < view.right;
      withinVerticalView = view.top < rect.top && rect.top < view.bottom && view.top < rect.bottom && rect.bottom < view.bottom;
      if (!withinHorizontalView) {
        if (rect.left < view.left) {
          tableHolder.scrollLeft = rect.left - this.getRowHeaderWidth();
        } else if (rect.right > view.right) {
          tableHolder.scrollLeft = Math.min(rect.right - tableHolder.clientWidth, rect.left - this.getRowHeaderWidth());
        }
      }
      if (!withinVerticalView) {
        if (rect.top < view.top) {
          tableHolder.scrollTop = rect.top;
        } else if (rect.bottom > view.bottom) {
          tableHolder.scrollTop = rect.bottom - tableHolder.clientHeight;
        }
      }
    }
    ///////////////////////////////////
    ///////       Layout        ///////
    ///////////////////////////////////
    layoutChange() {
      this.overlay.style.visibility = "hidden";
      clearTimeout(this.layoutChangeTimeout);
      this.layoutChangeTimeout = setTimeout(this.layoutRanges.bind(this), 200);
    }
    redraw(force) {
      if (force) {
        this.selecting = "cell";
        this.resetRanges();
        this.layoutElement();
      }
    }
    layoutElement(visibleRows) {
      var rows2;
      if (visibleRows) {
        rows2 = this.table.rowManager.getVisibleRows(true);
      } else {
        rows2 = this.table.rowManager.getRows();
      }
      rows2.forEach((row) => {
        if (row.type === "row") {
          this.layoutRow(row);
          row.cells.forEach((cell) => this.renderCell(cell));
        }
      });
      this.getTableColumns().forEach((column) => {
        this.layoutColumn(column);
      });
      this.layoutRanges();
    }
    layoutRow(row) {
      var el = row.getElement(), selected = false, occupied = this.ranges.some((range2) => range2.occupiesRow(row));
      if (this.selecting === "row") {
        selected = occupied;
      } else if (this.selecting === "all") {
        selected = true;
      }
      el.classList.toggle("tabulator-range-selected", selected);
      el.classList.toggle("tabulator-range-highlight", occupied);
    }
    layoutColumn(column) {
      var el = column.getElement(), selected = false, occupied = this.ranges.some((range2) => range2.occupiesColumn(column));
      if (this.selecting === "column") {
        selected = occupied;
      } else if (this.selecting === "all") {
        selected = true;
      }
      el.classList.toggle("tabulator-range-selected", selected);
      el.classList.toggle("tabulator-range-highlight", occupied);
    }
    layoutRanges() {
      var activeCell, activeCellEl, activeRowEl;
      if (!this.table.initialized) {
        return;
      }
      activeCell = this.getActiveCell();
      if (!activeCell) {
        return;
      }
      activeCellEl = activeCell.getElement();
      activeRowEl = activeCell.row.getElement();
      if (this.table.rtl) {
        this.activeRangeCellElement.style.right = activeRowEl.offsetWidth - activeCellEl.offsetLeft - activeCellEl.offsetWidth + "px";
      } else {
        this.activeRangeCellElement.style.left = activeRowEl.offsetLeft + activeCellEl.offsetLeft + "px";
      }
      this.activeRangeCellElement.style.top = activeRowEl.offsetTop + "px";
      this.activeRangeCellElement.style.width = activeCellEl.offsetWidth + "px";
      this.activeRangeCellElement.style.height = activeRowEl.offsetHeight + "px";
      this.ranges.forEach((range2) => range2.layout());
      this.overlay.style.visibility = "visible";
    }
    ///////////////////////////////////
    ///////  Helper Functions   ///////
    ///////////////////////////////////	
    getCell(rowIdx, colIdx) {
      var row;
      if (colIdx < 0) {
        colIdx = this.getTableColumns().length + colIdx;
        if (colIdx < 0) {
          return null;
        }
      }
      if (rowIdx < 0) {
        rowIdx = this.getTableRows().length + rowIdx;
      }
      row = this.table.rowManager.getRowFromPosition(rowIdx + 1);
      return row ? row.getCells(false, true).filter((cell) => cell.column.visible)[colIdx] : null;
    }
    getActiveCell() {
      return this.getCell(this.activeRange.start.row, this.activeRange.start.col);
    }
    getRowByRangePos(pos) {
      return this.getTableRows()[pos];
    }
    getColumnByRangePos(pos) {
      return this.getTableColumns()[pos];
    }
    getTableRows() {
      return this.table.rowManager.getDisplayRows().filter((row) => row.type === "row");
    }
    getTableColumns() {
      return this.table.columnManager.getVisibleColumnsByIndex();
    }
    addRange(start, end) {
      var range2;
      if (this.maxRanges !== true && this.ranges.length >= this.maxRanges) {
        this.ranges.shift().destroy();
      }
      range2 = new Range(this.table, this, start, end);
      this.activeRange = range2;
      this.ranges.push(range2);
      this.rangeContainer.appendChild(range2.element);
      return range2;
    }
    resetRanges() {
      var range2, cell, visibleCells;
      this.ranges.forEach((range3) => range3.destroy());
      this.ranges = [];
      range2 = this.addRange();
      if (this.table.rowManager.activeRows.length) {
        visibleCells = this.table.rowManager.activeRows[0].cells.filter((cell2) => cell2.column.visible);
        cell = visibleCells[this.rowHeader ? 1 : 0];
        if (cell) {
          range2.setBounds(cell);
          if (this.options("selectableRangeAutoFocus")) {
            this.initializeFocus(cell);
          }
        }
      }
      return range2;
    }
    tableDestroyed() {
      document.removeEventListener("mouseup", this.mouseUpEvent);
      this.table.rowManager.element.removeEventListener("keydown", this.keyDownEvent);
    }
    selectedRows(component) {
      return component ? this.activeRange.getRows().map((row) => row.getComponent()) : this.activeRange.getRows();
    }
    selectedColumns(component) {
      return component ? this.activeRange.getColumns().map((col) => col.getComponent()) : this.activeRange.getColumns();
    }
    getRowHeaderWidth() {
      if (!this.rowHeader) {
        return 0;
      }
      return this.rowHeader.getElement().offsetWidth;
    }
    isEmpty(value) {
      return value === null || value === void 0 || value === "";
    }
  };
  function number(a, b, aRow, bRow, column, dir, params) {
    var alignEmptyValues = params.alignEmptyValues;
    var decimal = params.decimalSeparator;
    var thousand = params.thousandSeparator;
    var emptyAlign = 0;
    a = String(a);
    b = String(b);
    if (thousand) {
      a = a.split(thousand).join("");
      b = b.split(thousand).join("");
    }
    if (decimal) {
      a = a.split(decimal).join(".");
      b = b.split(decimal).join(".");
    }
    a = parseFloat(a);
    b = parseFloat(b);
    if (isNaN(a)) {
      emptyAlign = isNaN(b) ? 0 : -1;
    } else if (isNaN(b)) {
      emptyAlign = 1;
    } else {
      return a - b;
    }
    if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
      emptyAlign *= -1;
    }
    return emptyAlign;
  }
  function string(a, b, aRow, bRow, column, dir, params) {
    var alignEmptyValues = params.alignEmptyValues;
    var emptyAlign = 0;
    var locale;
    if (!a) {
      emptyAlign = !b ? 0 : -1;
    } else if (!b) {
      emptyAlign = 1;
    } else {
      switch (typeof params.locale) {
        case "boolean":
          if (params.locale) {
            locale = this.langLocale();
          }
          break;
        case "string":
          locale = params.locale;
          break;
      }
      return String(a).toLowerCase().localeCompare(String(b).toLowerCase(), locale);
    }
    if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
      emptyAlign *= -1;
    }
    return emptyAlign;
  }
  function datetime(a, b, aRow, bRow, column, dir, params) {
    var DT = this.table.dependencyRegistry.lookup(["luxon", "DateTime"], "DateTime");
    var format = params.format || "dd/MM/yyyy HH:mm:ss", alignEmptyValues = params.alignEmptyValues, emptyAlign = 0;
    if (typeof DT != "undefined") {
      if (!DT.isDateTime(a)) {
        if (format === "iso") {
          a = DT.fromISO(String(a));
        } else {
          a = DT.fromFormat(String(a), format);
        }
      }
      if (!DT.isDateTime(b)) {
        if (format === "iso") {
          b = DT.fromISO(String(b));
        } else {
          b = DT.fromFormat(String(b), format);
        }
      }
      if (!a.isValid) {
        emptyAlign = !b.isValid ? 0 : -1;
      } else if (!b.isValid) {
        emptyAlign = 1;
      } else {
        return a - b;
      }
      if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
        emptyAlign *= -1;
      }
      return emptyAlign;
    } else {
      console.error("Sort Error - 'datetime' sorter is dependant on luxon.js");
    }
  }
  function date(a, b, aRow, bRow, column, dir, params) {
    if (!params.format) {
      params.format = "dd/MM/yyyy";
    }
    return datetime.call(this, a, b, aRow, bRow, column, dir, params);
  }
  function time(a, b, aRow, bRow, column, dir, params) {
    if (!params.format) {
      params.format = "HH:mm";
    }
    return datetime.call(this, a, b, aRow, bRow, column, dir, params);
  }
  function boolean(a, b, aRow, bRow, column, dir, params) {
    var el1 = a === true || a === "true" || a === "True" || a === 1 ? 1 : 0;
    var el2 = b === true || b === "true" || b === "True" || b === 1 ? 1 : 0;
    return el1 - el2;
  }
  function array(a, b, aRow, bRow, column, dir, params) {
    var type = params.type || "length", alignEmptyValues = params.alignEmptyValues, emptyAlign = 0, table = this.table, valueMap;
    if (params.valueMap) {
      if (typeof params.valueMap === "string") {
        valueMap = function(value) {
          return value.map((item) => {
            return Helpers.retrieveNestedData(table.options.nestedFieldSeparator, params.valueMap, item);
          });
        };
      } else {
        valueMap = params.valueMap;
      }
    }
    function calc(value) {
      var result;
      if (valueMap) {
        value = valueMap(value);
      }
      switch (type) {
        case "length":
          result = value.length;
          break;
        case "sum":
          result = value.reduce(function(c, d) {
            return c + d;
          });
          break;
        case "max":
          result = Math.max.apply(null, value);
          break;
        case "min":
          result = Math.min.apply(null, value);
          break;
        case "avg":
          result = value.reduce(function(c, d) {
            return c + d;
          }) / value.length;
          break;
        case "string":
          result = value.join("");
          break;
      }
      return result;
    }
    if (!Array.isArray(a)) {
      emptyAlign = !Array.isArray(b) ? 0 : -1;
    } else if (!Array.isArray(b)) {
      emptyAlign = 1;
    } else {
      if (type === "string") {
        return String(calc(a)).toLowerCase().localeCompare(String(calc(b)).toLowerCase());
      } else {
        return calc(b) - calc(a);
      }
    }
    if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
      emptyAlign *= -1;
    }
    return emptyAlign;
  }
  function exists(a, b, aRow, bRow, column, dir, params) {
    var el1 = typeof a == "undefined" ? 0 : 1;
    var el2 = typeof b == "undefined" ? 0 : 1;
    return el1 - el2;
  }
  function alphanum(as, bs, aRow, bRow, column, dir, params) {
    var a, b, a1, b1, i = 0, L, rx = /(\d+)|(\D+)/g, rd = /\d/;
    var alignEmptyValues = params.alignEmptyValues;
    var emptyAlign = 0;
    if (!as && as !== 0) {
      emptyAlign = !bs && bs !== 0 ? 0 : -1;
    } else if (!bs && bs !== 0) {
      emptyAlign = 1;
    } else {
      if (isFinite(as) && isFinite(bs))
        return as - bs;
      a = String(as).toLowerCase();
      b = String(bs).toLowerCase();
      if (a === b)
        return 0;
      if (!(rd.test(a) && rd.test(b)))
        return a > b ? 1 : -1;
      a = a.match(rx);
      b = b.match(rx);
      L = a.length > b.length ? b.length : a.length;
      while (i < L) {
        a1 = a[i];
        b1 = b[i++];
        if (a1 !== b1) {
          if (isFinite(a1) && isFinite(b1)) {
            if (a1.charAt(0) === "0")
              a1 = "." + a1;
            if (b1.charAt(0) === "0")
              b1 = "." + b1;
            return a1 - b1;
          } else
            return a1 > b1 ? 1 : -1;
        }
      }
      return a.length > b.length;
    }
    if (alignEmptyValues === "top" && dir === "desc" || alignEmptyValues === "bottom" && dir === "asc") {
      emptyAlign *= -1;
    }
    return emptyAlign;
  }
  var defaultSorters = {
    number,
    string,
    date,
    time,
    datetime,
    boolean,
    array,
    exists,
    alphanum
  };
  var Sort = class _Sort extends Module {
    static moduleName = "sort";
    //load defaults
    static sorters = defaultSorters;
    constructor(table) {
      super(table);
      this.sortList = [];
      this.changed = false;
      this.registerTableOption("sortMode", "local");
      this.registerTableOption("initialSort", false);
      this.registerTableOption("columnHeaderSortMulti", true);
      this.registerTableOption("sortOrderReverse", false);
      this.registerTableOption("headerSortElement", "<div class='tabulator-arrow'></div>");
      this.registerTableOption("headerSortClickElement", "header");
      this.registerColumnOption("sorter");
      this.registerColumnOption("sorterParams");
      this.registerColumnOption("headerSort", true);
      this.registerColumnOption("headerSortStartingDir");
      this.registerColumnOption("headerSortTristate");
    }
    initialize() {
      this.subscribe("column-layout", this.initializeColumn.bind(this));
      this.subscribe("table-built", this.tableBuilt.bind(this));
      this.registerDataHandler(this.sort.bind(this), 20);
      this.registerTableFunction("setSort", this.userSetSort.bind(this));
      this.registerTableFunction("getSorters", this.getSort.bind(this));
      this.registerTableFunction("clearSort", this.clearSort.bind(this));
      if (this.table.options.sortMode === "remote") {
        this.subscribe("data-params", this.remoteSortParams.bind(this));
      }
    }
    tableBuilt() {
      if (this.table.options.initialSort) {
        this.setSort(this.table.options.initialSort);
      }
    }
    remoteSortParams(data, config, silent, params) {
      var sorters = this.getSort();
      sorters.forEach((item) => {
        delete item.column;
      });
      params.sort = sorters;
      return params;
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    userSetSort(sortList, dir) {
      this.setSort(sortList, dir);
      this.refreshSort();
    }
    clearSort() {
      this.clear();
      this.refreshSort();
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    //initialize column header for sorting
    initializeColumn(column) {
      var sorter = false, colEl, arrowEl;
      switch (typeof column.definition.sorter) {
        case "string":
          if (_Sort.sorters[column.definition.sorter]) {
            sorter = _Sort.sorters[column.definition.sorter];
          } else {
            console.warn("Sort Error - No such sorter found: ", column.definition.sorter);
          }
          break;
        case "function":
          sorter = column.definition.sorter;
          break;
      }
      column.modules.sort = {
        sorter,
        dir: "none",
        params: column.definition.sorterParams || {},
        startingDir: column.definition.headerSortStartingDir || "asc",
        tristate: column.definition.headerSortTristate
      };
      if (column.definition.headerSort !== false) {
        colEl = column.getElement();
        colEl.classList.add("tabulator-sortable");
        arrowEl = document.createElement("div");
        arrowEl.classList.add("tabulator-col-sorter");
        switch (this.table.options.headerSortClickElement) {
          case "icon":
            arrowEl.classList.add("tabulator-col-sorter-element");
            break;
          case "header":
            colEl.classList.add("tabulator-col-sorter-element");
            break;
          default:
            colEl.classList.add("tabulator-col-sorter-element");
            break;
        }
        switch (this.table.options.headerSortElement) {
          case "function":
            break;
          case "object":
            arrowEl.appendChild(this.table.options.headerSortElement);
            break;
          default:
            arrowEl.innerHTML = this.table.options.headerSortElement;
        }
        column.titleHolderElement.appendChild(arrowEl);
        column.modules.sort.element = arrowEl;
        this.setColumnHeaderSortIcon(column, "none");
        if (this.table.options.headerSortClickElement === "icon") {
          arrowEl.addEventListener("mousedown", (e) => {
            e.stopPropagation();
          });
        }
        (this.table.options.headerSortClickElement === "icon" ? arrowEl : colEl).addEventListener("click", (e) => {
          var dir = "", sorters = [], match = false;
          if (column.modules.sort) {
            if (column.modules.sort.tristate) {
              if (column.modules.sort.dir == "none") {
                dir = column.modules.sort.startingDir;
              } else {
                if (column.modules.sort.dir == column.modules.sort.startingDir) {
                  dir = column.modules.sort.dir == "asc" ? "desc" : "asc";
                } else {
                  dir = "none";
                }
              }
            } else {
              switch (column.modules.sort.dir) {
                case "asc":
                  dir = "desc";
                  break;
                case "desc":
                  dir = "asc";
                  break;
                default:
                  dir = column.modules.sort.startingDir;
              }
            }
            if (this.table.options.columnHeaderSortMulti && (e.shiftKey || e.ctrlKey)) {
              sorters = this.getSort();
              match = sorters.findIndex((sorter2) => {
                return sorter2.field === column.getField();
              });
              if (match > -1) {
                sorters[match].dir = dir;
                match = sorters.splice(match, 1)[0];
                if (dir != "none") {
                  sorters.push(match);
                }
              } else {
                if (dir != "none") {
                  sorters.push({ column, dir });
                }
              }
              this.setSort(sorters);
            } else {
              if (dir == "none") {
                this.clear();
              } else {
                this.setSort(column, dir);
              }
            }
            this.refreshSort();
          }
        });
      }
    }
    refreshSort() {
      if (this.table.options.sortMode === "remote") {
        this.reloadData(null, false, false);
      } else {
        this.refreshData(true);
      }
    }
    //check if the sorters have changed since last use
    hasChanged() {
      var changed = this.changed;
      this.changed = false;
      return changed;
    }
    //return current sorters
    getSort() {
      var self2 = this, sorters = [];
      self2.sortList.forEach(function(item) {
        if (item.column) {
          sorters.push({ column: item.column.getComponent(), field: item.column.getField(), dir: item.dir });
        }
      });
      return sorters;
    }
    //change sort list and trigger sort
    setSort(sortList, dir) {
      var self2 = this, newSortList = [];
      if (!Array.isArray(sortList)) {
        sortList = [{ column: sortList, dir }];
      }
      sortList.forEach(function(item) {
        var column;
        column = self2.table.columnManager.findColumn(item.column);
        if (column) {
          item.column = column;
          newSortList.push(item);
          self2.changed = true;
        } else {
          console.warn("Sort Warning - Sort field does not exist and is being ignored: ", item.column);
        }
      });
      self2.sortList = newSortList;
      this.dispatch("sort-changed");
    }
    //clear sorters
    clear() {
      this.setSort([]);
    }
    //find appropriate sorter for column
    findSorter(column) {
      var row = this.table.rowManager.activeRows[0], sorter = "string", field, value;
      if (row) {
        row = row.getData();
        field = column.getField();
        if (field) {
          value = column.getFieldValue(row);
          switch (typeof value) {
            case "undefined":
              sorter = "string";
              break;
            case "boolean":
              sorter = "boolean";
              break;
            default:
              if (!isNaN(value) && value !== "") {
                sorter = "number";
              } else {
                if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {
                  sorter = "alphanum";
                }
              }
              break;
          }
        }
      }
      return _Sort.sorters[sorter];
    }
    //work through sort list sorting data
    sort(data, sortOnly) {
      var self2 = this, sortList = this.table.options.sortOrderReverse ? self2.sortList.slice().reverse() : self2.sortList, sortListActual = [], rowComponents = [];
      if (this.subscribedExternal("dataSorting")) {
        this.dispatchExternal("dataSorting", self2.getSort());
      }
      if (!sortOnly) {
        self2.clearColumnHeaders();
      }
      if (this.table.options.sortMode !== "remote") {
        sortList.forEach(function(item, i) {
          var sortObj;
          if (item.column) {
            sortObj = item.column.modules.sort;
            if (sortObj) {
              if (!sortObj.sorter) {
                sortObj.sorter = self2.findSorter(item.column);
              }
              item.params = typeof sortObj.params === "function" ? sortObj.params(item.column.getComponent(), item.dir) : sortObj.params;
              sortListActual.push(item);
            }
            if (!sortOnly) {
              self2.setColumnHeader(item.column, item.dir);
            }
          }
        });
        if (sortListActual.length) {
          self2._sortItems(data, sortListActual);
        }
      } else if (!sortOnly) {
        sortList.forEach(function(item, i) {
          self2.setColumnHeader(item.column, item.dir);
        });
      }
      if (this.subscribedExternal("dataSorted")) {
        data.forEach((row) => {
          rowComponents.push(row.getComponent());
        });
        this.dispatchExternal("dataSorted", self2.getSort(), rowComponents);
      }
      return data;
    }
    //clear sort arrows on columns
    clearColumnHeaders() {
      this.table.columnManager.getRealColumns().forEach((column) => {
        if (column.modules.sort) {
          column.modules.sort.dir = "none";
          column.getElement().setAttribute("aria-sort", "none");
          this.setColumnHeaderSortIcon(column, "none");
        }
      });
    }
    //set the column header sort direction
    setColumnHeader(column, dir) {
      column.modules.sort.dir = dir;
      column.getElement().setAttribute("aria-sort", dir === "asc" ? "ascending" : "descending");
      this.setColumnHeaderSortIcon(column, dir);
    }
    setColumnHeaderSortIcon(column, dir) {
      var sortEl = column.modules.sort.element, arrowEl;
      if (column.definition.headerSort && typeof this.table.options.headerSortElement === "function") {
        while (sortEl.firstChild)
          sortEl.removeChild(sortEl.firstChild);
        arrowEl = this.table.options.headerSortElement.call(this.table, column.getComponent(), dir);
        if (typeof arrowEl === "object") {
          sortEl.appendChild(arrowEl);
        } else {
          sortEl.innerHTML = arrowEl;
        }
      }
    }
    //sort each item in sort list
    _sortItems(data, sortList) {
      var sorterCount = sortList.length - 1;
      data.sort((a, b) => {
        var result;
        for (var i = sorterCount; i >= 0; i--) {
          let sortItem = sortList[i];
          result = this._sortRow(a, b, sortItem.column, sortItem.dir, sortItem.params);
          if (result !== 0) {
            break;
          }
        }
        return result;
      });
    }
    //process individual rows for a sort function on active data
    _sortRow(a, b, column, dir, params) {
      var el1Comp, el2Comp;
      var el1 = dir == "asc" ? a : b;
      var el2 = dir == "asc" ? b : a;
      a = column.getFieldValue(el1.getData());
      b = column.getFieldValue(el2.getData());
      a = typeof a !== "undefined" ? a : "";
      b = typeof b !== "undefined" ? b : "";
      el1Comp = el1.getComponent();
      el2Comp = el2.getComponent();
      return column.modules.sort.sorter.call(this, a, b, el1Comp, el2Comp, column.getComponent(), dir, params);
    }
  };
  var GridCalculator = class {
    constructor(columns, rows2) {
      this.columnCount = columns;
      this.rowCount = rows2;
      this.columnString = [];
      this.columns = [];
      this.rows = [];
    }
    genColumns(data) {
      var colCount = Math.max(this.columnCount, Math.max(...data.map((item) => item.length)));
      this.columnString = [];
      this.columns = [];
      for (let i = 1; i <= colCount; i++) {
        this.incrementChar(this.columnString.length - 1);
        this.columns.push(this.columnString.join(""));
      }
      return this.columns;
    }
    genRows(data) {
      var rowCount = Math.max(this.rowCount, data.length);
      this.rows = [];
      for (let i = 1; i <= rowCount; i++) {
        this.rows.push(i);
      }
      return this.rows;
    }
    incrementChar(i) {
      let char = this.columnString[i];
      if (char) {
        if (char !== "Z") {
          this.columnString[i] = String.fromCharCode(this.columnString[i].charCodeAt(0) + 1);
        } else {
          this.columnString[i] = "A";
          if (i) {
            this.incrementChar(i - 1);
          } else {
            this.columnString.push("A");
          }
        }
      } else {
        this.columnString.push("A");
      }
    }
    setRowCount(count) {
      this.rowCount = count;
    }
    setColumnCount(count) {
      this.columnCount = count;
    }
  };
  var SheetComponent = class {
    constructor(sheet) {
      this._sheet = sheet;
      return new Proxy(this, {
        get: function(target, name, receiver) {
          if (typeof target[name] !== "undefined") {
            return target[name];
          } else {
            return target._sheet.table.componentFunctionBinder.handle("sheet", target._sheet, name);
          }
        }
      });
    }
    getTitle() {
      return this._sheet.title;
    }
    getKey() {
      return this._sheet.key;
    }
    getDefinition() {
      return this._sheet.getDefinition();
    }
    getData() {
      return this._sheet.getData();
    }
    setData(data) {
      return this._sheet.setData(data);
    }
    clear() {
      return this._sheet.clear();
    }
    remove() {
      return this._sheet.remove();
    }
    active() {
      return this._sheet.active();
    }
    setTitle(title) {
      return this._sheet.setTitle(title);
    }
    setRows(rows2) {
      return this._sheet.setRows(rows2);
    }
    setColumns(columns) {
      return this._sheet.setColumns(columns);
    }
  };
  var Sheet = class extends CoreFeature {
    constructor(spreadsheetManager, definition) {
      super(spreadsheetManager.table);
      this.spreadsheetManager = spreadsheetManager;
      this.definition = definition;
      this.title = this.definition.title || "";
      this.key = this.definition.key || this.definition.title;
      this.rowCount = this.definition.rows;
      this.columnCount = this.definition.columns;
      this.data = this.definition.data || [];
      this.element = null;
      this.isActive = false;
      this.grid = new GridCalculator(this.columnCount, this.rowCount);
      this.defaultColumnDefinition = { width: 100, headerHozAlign: "center", headerSort: false };
      this.columnDefinition = Object.assign(this.defaultColumnDefinition, this.options("spreadsheetColumnDefinition"));
      this.columnDefs = [];
      this.rowDefs = [];
      this.columnFields = [];
      this.columns = [];
      this.rows = [];
      this.scrollTop = null;
      this.scrollLeft = null;
      this.initialize();
      this.dispatchExternal("sheetAdded", this.getComponent());
    }
    ///////////////////////////////////
    ///////// Initialization //////////
    ///////////////////////////////////
    initialize() {
      this.initializeElement();
      this.initializeColumns();
      this.initializeRows();
    }
    reinitialize() {
      this.initializeColumns();
      this.initializeRows();
    }
    initializeElement() {
      this.element = document.createElement("div");
      this.element.classList.add("tabulator-spreadsheet-tab");
      this.element.innerText = this.title;
      this.element.addEventListener("click", () => {
        this.spreadsheetManager.loadSheet(this);
      });
    }
    initializeColumns() {
      this.grid.setColumnCount(this.columnCount);
      this.columnFields = this.grid.genColumns(this.data);
      this.columnDefs = [];
      this.columnFields.forEach((ref2) => {
        var def2 = Object.assign({}, this.columnDefinition);
        def2.field = ref2;
        def2.title = ref2;
        this.columnDefs.push(def2);
      });
    }
    initializeRows() {
      var refs;
      this.grid.setRowCount(this.rowCount);
      refs = this.grid.genRows(this.data);
      this.rowDefs = [];
      refs.forEach((ref2, i) => {
        var def2 = { "_id": ref2 };
        var data = this.data[i];
        if (data) {
          data.forEach((val, j) => {
            var field = this.columnFields[j];
            if (field) {
              def2[field] = val;
            }
          });
        }
        this.rowDefs.push(def2);
      });
    }
    unload() {
      this.isActive = false;
      this.scrollTop = this.table.rowManager.scrollTop;
      this.scrollLeft = this.table.rowManager.scrollLeft;
      this.data = this.getData(true);
      this.element.classList.remove("tabulator-spreadsheet-tab-active");
    }
    load() {
      var wasInactive = !this.isActive;
      this.isActive = true;
      this.table.blockRedraw();
      this.table.setData([]);
      this.table.setColumns(this.columnDefs);
      this.table.setData(this.rowDefs);
      this.table.restoreRedraw();
      if (wasInactive && this.scrollTop !== null) {
        this.table.rowManager.element.scrollLeft = this.scrollLeft;
        this.table.rowManager.element.scrollTop = this.scrollTop;
      }
      this.element.classList.add("tabulator-spreadsheet-tab-active");
      this.dispatchExternal("sheetLoaded", this.getComponent());
    }
    ///////////////////////////////////
    //////// Helper Functions /////////
    ///////////////////////////////////
    getComponent() {
      return new SheetComponent(this);
    }
    getDefinition() {
      return {
        title: this.title,
        key: this.key,
        rows: this.rowCount,
        columns: this.columnCount,
        data: this.getData()
      };
    }
    getData(full) {
      var output = [], rowWidths, outputWidth, outputHeight;
      this.rowDefs.forEach((rowData) => {
        var row = [];
        this.columnFields.forEach((field) => {
          row.push(rowData[field]);
        });
        output.push(row);
      });
      if (!full && !this.options("spreadsheetOutputFull")) {
        rowWidths = output.map((row) => row.findLastIndex((val) => typeof val !== "undefined") + 1);
        outputWidth = Math.max(...rowWidths);
        outputHeight = rowWidths.findLastIndex((width) => width > 0) + 1;
        output = output.slice(0, outputHeight);
        output = output.map((row) => row.slice(0, outputWidth));
      }
      return output;
    }
    setData(data) {
      this.data = data;
      this.reinitialize();
      this.dispatchExternal("sheetUpdated", this.getComponent());
      if (this.isActive) {
        this.load();
      }
    }
    clear() {
      this.setData([]);
    }
    setTitle(title) {
      this.title = title;
      this.element.innerText = title;
      this.dispatchExternal("sheetUpdated", this.getComponent());
    }
    setRows(rows2) {
      this.rowCount = rows2;
      this.initializeRows();
      this.dispatchExternal("sheetUpdated", this.getComponent());
      if (this.isActive) {
        this.load();
      }
    }
    setColumns(columns) {
      this.columnCount = columns;
      this.reinitialize();
      this.dispatchExternal("sheetUpdated", this.getComponent());
      if (this.isActive) {
        this.load();
      }
    }
    remove() {
      this.spreadsheetManager.removeSheet(this);
    }
    destroy() {
      if (this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
      this.dispatchExternal("sheetRemoved", this.getComponent());
    }
    active() {
      this.spreadsheetManager.loadSheet(this);
    }
  };
  var Spreadsheet = class extends Module {
    static moduleName = "spreadsheet";
    constructor(table) {
      super(table);
      this.sheets = [];
      this.element = null;
      this.registerTableOption("spreadsheet", false);
      this.registerTableOption("spreadsheetRows", 50);
      this.registerTableOption("spreadsheetColumns", 50);
      this.registerTableOption("spreadsheetColumnDefinition", {});
      this.registerTableOption("spreadsheetOutputFull", false);
      this.registerTableOption("spreadsheetData", false);
      this.registerTableOption("spreadsheetSheets", false);
      this.registerTableOption("spreadsheetSheetTabs", false);
      this.registerTableOption("spreadsheetSheetTabsElement", false);
      this.registerTableFunction("setSheets", this.setSheets.bind(this));
      this.registerTableFunction("addSheet", this.addSheet.bind(this));
      this.registerTableFunction("getSheets", this.getSheets.bind(this));
      this.registerTableFunction("getSheetDefinitions", this.getSheetDefinitions.bind(this));
      this.registerTableFunction("setSheetData", this.setSheetData.bind(this));
      this.registerTableFunction("getSheet", this.getSheet.bind(this));
      this.registerTableFunction("getSheetData", this.getSheetData.bind(this));
      this.registerTableFunction("clearSheet", this.clearSheet.bind(this));
      this.registerTableFunction("removeSheet", this.removeSheetFunc.bind(this));
      this.registerTableFunction("activeSheet", this.activeSheetFunc.bind(this));
    }
    ///////////////////////////////////
    ////// Module Initialization //////
    ///////////////////////////////////
    initialize() {
      if (this.options("spreadsheet")) {
        this.subscribe("table-initialized", this.tableInitialized.bind(this));
        this.subscribe("data-loaded", this.loadRemoteData.bind(this));
        this.table.options.index = "_id";
        if (this.options("spreadsheetData") && this.options("spreadsheetSheets")) {
          console.warn("You cannot use spreadsheetData and spreadsheetSheets at the same time, ignoring spreadsheetData");
          this.table.options.spreadsheetData = false;
        }
        this.compatibilityCheck();
        if (this.options("spreadsheetSheetTabs")) {
          this.initializeTabset();
        }
      }
    }
    compatibilityCheck() {
      if (this.options("data")) {
        console.warn("Do not use the data option when working with spreadsheets, use either spreadsheetData or spreadsheetSheets to pass data into the table");
      }
      if (this.options("pagination")) {
        console.warn("The spreadsheet module is not compatible with the pagination module");
      }
      if (this.options("groupBy")) {
        console.warn("The spreadsheet module is not compatible with the row grouping module");
      }
      if (this.options("responsiveCollapse")) {
        console.warn("The spreadsheet module is not compatible with the responsive collapse module");
      }
    }
    initializeTabset() {
      this.element = document.createElement("div");
      this.element.classList.add("tabulator-spreadsheet-tabs");
      var altContainer = this.options("spreadsheetSheetTabsElement");
      if (altContainer && !(altContainer instanceof HTMLElement)) {
        altContainer = document.querySelector(altContainer);
        if (!altContainer) {
          console.warn("Unable to find element matching spreadsheetSheetTabsElement selector:", this.options("spreadsheetSheetTabsElement"));
        }
      }
      if (altContainer) {
        altContainer.appendChild(this.element);
      } else {
        this.footerAppend(this.element);
      }
    }
    tableInitialized() {
      if (this.sheets.length) {
        this.loadSheet(this.sheets[0]);
      } else {
        if (this.options("spreadsheetSheets")) {
          this.loadSheets(this.options("spreadsheetSheets"));
        } else if (this.options("spreadsheetData")) {
          this.loadData(this.options("spreadsheetData"));
        }
      }
    }
    ///////////////////////////////////
    /////////// Ajax Parsing //////////
    ///////////////////////////////////
    loadRemoteData(data, data1, data2) {
      console.log("data", data, data1, data2);
      if (Array.isArray(data)) {
        this.table.dataLoader.clearAlert();
        this.dispatchExternal("dataLoaded", data);
        if (!data.length || Array.isArray(data[0])) {
          this.loadData(data);
        } else {
          this.loadSheets(data);
        }
      } else {
        console.error("Spreadsheet Loading Error - Unable to process remote data due to invalid data type \nExpecting: array \nReceived: ", typeof data, "\nData:     ", data);
      }
      return false;
    }
    ///////////////////////////////////
    ///////// Sheet Management ////////
    ///////////////////////////////////
    loadData(data) {
      var def2 = {
        data
      };
      this.loadSheet(this.newSheet(def2));
    }
    destroySheets() {
      this.sheets.forEach((sheet) => {
        sheet.destroy();
      });
      this.sheets = [];
      this.activeSheet = null;
    }
    loadSheets(sheets) {
      if (!Array.isArray(sheets)) {
        sheets = [];
      }
      this.destroySheets();
      sheets.forEach((def2) => {
        this.newSheet(def2);
      });
      this.loadSheet(this.sheets[0]);
    }
    loadSheet(sheet) {
      if (this.activeSheet !== sheet) {
        if (this.activeSheet) {
          this.activeSheet.unload();
        }
        this.activeSheet = sheet;
        sheet.load();
      }
    }
    newSheet(definition = {}) {
      var sheet;
      if (!definition.rows) {
        definition.rows = this.options("spreadsheetRows");
      }
      if (!definition.columns) {
        definition.columns = this.options("spreadsheetColumns");
      }
      sheet = new Sheet(this, definition);
      this.sheets.push(sheet);
      if (this.element) {
        this.element.appendChild(sheet.element);
      }
      return sheet;
    }
    removeSheet(sheet) {
      var index7 = this.sheets.indexOf(sheet), prevSheet;
      if (this.sheets.length > 1) {
        if (index7 > -1) {
          this.sheets.splice(index7, 1);
          sheet.destroy();
          if (this.activeSheet === sheet) {
            prevSheet = this.sheets[index7 - 1] || this.sheets[0];
            if (prevSheet) {
              this.loadSheet(prevSheet);
            } else {
              this.activeSheet = null;
            }
          }
        }
      } else {
        console.warn("Unable to remove sheet, at least one sheet must be active");
      }
    }
    lookupSheet(key) {
      if (!key) {
        return this.activeSheet;
      } else if (key instanceof Sheet) {
        return key;
      } else if (key instanceof SheetComponent) {
        return key._sheet;
      } else {
        return this.sheets.find((sheet) => sheet.key === key) || false;
      }
    }
    ///////////////////////////////////
    //////// Public Functions /////////
    ///////////////////////////////////
    setSheets(sheets) {
      this.loadSheets(sheets);
      return this.getSheets();
    }
    addSheet(sheet) {
      return this.newSheet(sheet).getComponent();
    }
    getSheetDefinitions() {
      return this.sheets.map((sheet) => sheet.getDefinition());
    }
    getSheets() {
      return this.sheets.map((sheet) => sheet.getComponent());
    }
    getSheet(key) {
      var sheet = this.lookupSheet(key);
      return sheet ? sheet.getComponent() : false;
    }
    setSheetData(key, data) {
      if (key && !data) {
        data = key;
        key = false;
      }
      var sheet = this.lookupSheet(key);
      return sheet ? sheet.setData(data) : false;
    }
    getSheetData(key) {
      var sheet = this.lookupSheet(key);
      return sheet ? sheet.getData() : false;
    }
    clearSheet(key) {
      var sheet = this.lookupSheet(key);
      return sheet ? sheet.clear() : false;
    }
    removeSheetFunc(key) {
      var sheet = this.lookupSheet(key);
      if (sheet) {
        this.removeSheet(sheet);
      }
    }
    activeSheetFunc(key) {
      var sheet = this.lookupSheet(key);
      return sheet ? this.loadSheet(sheet) : false;
    }
  };
  var Tooltip = class extends Module {
    static moduleName = "tooltip";
    constructor(table) {
      super(table);
      this.tooltipSubscriber = null, this.headerSubscriber = null, this.timeout = null;
      this.popupInstance = null;
      this.registerTableOption("tooltipDelay", 300);
      this.registerColumnOption("tooltip");
      this.registerColumnOption("headerTooltip");
    }
    initialize() {
      this.deprecatedOptionsCheck();
      this.subscribe("column-init", this.initializeColumn.bind(this));
    }
    deprecatedOptionsCheck() {
    }
    initializeColumn(column) {
      if (column.definition.headerTooltip && !this.headerSubscriber) {
        this.headerSubscriber = true;
        this.subscribe("column-mousemove", this.mousemoveCheck.bind(this, "headerTooltip"));
        this.subscribe("column-mouseout", this.mouseoutCheck.bind(this, "headerTooltip"));
      }
      if (column.definition.tooltip && !this.tooltipSubscriber) {
        this.tooltipSubscriber = true;
        this.subscribe("cell-mousemove", this.mousemoveCheck.bind(this, "tooltip"));
        this.subscribe("cell-mouseout", this.mouseoutCheck.bind(this, "tooltip"));
      }
    }
    mousemoveCheck(action, e, component) {
      var tooltip = action === "tooltip" ? component.column.definition.tooltip : component.definition.headerTooltip;
      if (tooltip) {
        this.clearPopup();
        this.timeout = setTimeout(this.loadTooltip.bind(this, e, component, tooltip), this.table.options.tooltipDelay);
      }
    }
    mouseoutCheck(action, e, component) {
      if (!this.popupInstance) {
        this.clearPopup();
      }
    }
    clearPopup(action, e, component) {
      clearTimeout(this.timeout);
      this.timeout = null;
      if (this.popupInstance) {
        this.popupInstance.hide();
      }
    }
    loadTooltip(e, component, tooltip) {
      var contentsEl, renderedCallback, coords;
      function onRendered(callback) {
        renderedCallback = callback;
      }
      if (typeof tooltip === "function") {
        tooltip = tooltip(e, component.getComponent(), onRendered);
      }
      if (tooltip instanceof HTMLElement) {
        contentsEl = tooltip;
      } else {
        contentsEl = document.createElement("div");
        if (tooltip === true) {
          if (component instanceof Cell) {
            tooltip = component.value;
          } else {
            if (component.definition.field) {
              this.langBind("columns|" + component.definition.field, (value) => {
                contentsEl.innerHTML = tooltip = value || component.definition.title;
              });
            } else {
              tooltip = component.definition.title;
            }
          }
        }
        contentsEl.innerHTML = tooltip;
      }
      if (tooltip || tooltip === 0 || tooltip === false) {
        contentsEl.classList.add("tabulator-tooltip");
        contentsEl.addEventListener("mousemove", (e2) => e2.preventDefault());
        this.popupInstance = this.popup(contentsEl);
        if (typeof renderedCallback === "function") {
          this.popupInstance.renderCallback(renderedCallback);
        }
        coords = this.popupInstance.containerEventCoords(e);
        this.popupInstance.show(coords.x + 15, coords.y + 15).hideOnBlur(() => {
          this.dispatchExternal("TooltipClosed", component.getComponent());
          this.popupInstance = null;
        });
        this.dispatchExternal("TooltipOpened", component.getComponent());
      }
    }
  };
  var defaultValidators = {
    //is integer
    integer: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      value = Number(value);
      return !isNaN(value) && isFinite(value) && Math.floor(value) === value;
    },
    //is float
    float: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      value = Number(value);
      return !isNaN(value) && isFinite(value) && value % 1 !== 0;
    },
    //must be a number
    numeric: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return !isNaN(value);
    },
    //must be a string
    string: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return isNaN(value);
    },
    //must be alphanumeric
    alphanumeric: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      var reg = new RegExp(/^[a-z0-9]+$/i);
      return reg.test(value);
    },
    //maximum value
    max: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return parseFloat(value) <= parameters;
    },
    //minimum value
    min: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return parseFloat(value) >= parameters;
    },
    //starts with  value
    starts: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return String(value).toLowerCase().startsWith(String(parameters).toLowerCase());
    },
    //ends with  value
    ends: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return String(value).toLowerCase().endsWith(String(parameters).toLowerCase());
    },
    //minimum string length
    minLength: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return String(value).length >= parameters;
    },
    //maximum string length
    maxLength: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      return String(value).length <= parameters;
    },
    //in provided value list
    in: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      if (typeof parameters == "string") {
        parameters = parameters.split("|");
      }
      return parameters.indexOf(value) > -1;
    },
    //must match provided regex
    regex: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      var reg = new RegExp(parameters);
      return reg.test(value);
    },
    //value must be unique in this column
    unique: function(cell, value, parameters) {
      if (value === "" || value === null || typeof value === "undefined") {
        return true;
      }
      var unique = true;
      var cellData = cell.getData();
      var column = cell.getColumn()._getSelf();
      this.table.rowManager.rows.forEach(function(row) {
        var data = row.getData();
        if (data !== cellData) {
          if (value == column.getFieldValue(data)) {
            unique = false;
          }
        }
      });
      return unique;
    },
    //must have a value
    required: function(cell, value, parameters) {
      return value !== "" && value !== null && typeof value !== "undefined";
    }
  };
  var Validate = class _Validate extends Module {
    static moduleName = "validate";
    //load defaults
    static validators = defaultValidators;
    constructor(table) {
      super(table);
      this.invalidCells = [];
      this.registerTableOption("validationMode", "blocking");
      this.registerColumnOption("validator");
      this.registerTableFunction("getInvalidCells", this.getInvalidCells.bind(this));
      this.registerTableFunction("clearCellValidation", this.userClearCellValidation.bind(this));
      this.registerTableFunction("validate", this.userValidate.bind(this));
      this.registerComponentFunction("cell", "isValid", this.cellIsValid.bind(this));
      this.registerComponentFunction("cell", "clearValidation", this.clearValidation.bind(this));
      this.registerComponentFunction("cell", "validate", this.cellValidate.bind(this));
      this.registerComponentFunction("column", "validate", this.columnValidate.bind(this));
      this.registerComponentFunction("row", "validate", this.rowValidate.bind(this));
    }
    initialize() {
      this.subscribe("cell-delete", this.clearValidation.bind(this));
      this.subscribe("column-layout", this.initializeColumnCheck.bind(this));
      this.subscribe("edit-success", this.editValidate.bind(this));
      this.subscribe("edit-editor-clear", this.editorClear.bind(this));
      this.subscribe("edit-edited-clear", this.editedClear.bind(this));
    }
    ///////////////////////////////////
    ///////// Event Handling //////////
    ///////////////////////////////////
    editValidate(cell, value, previousValue) {
      var valid = this.table.options.validationMode !== "manual" ? this.validate(cell.column.modules.validate, cell, value) : true;
      if (valid !== true) {
        setTimeout(() => {
          cell.getElement().classList.add("tabulator-validation-fail");
          this.dispatchExternal("validationFailed", cell.getComponent(), value, valid);
        });
      }
      return valid;
    }
    editorClear(cell, cancelled) {
      if (cancelled) {
        if (cell.column.modules.validate) {
          this.cellValidate(cell);
        }
      }
      cell.getElement().classList.remove("tabulator-validation-fail");
    }
    editedClear(cell) {
      if (cell.modules.validate) {
        cell.modules.validate.invalid = false;
      }
    }
    ///////////////////////////////////
    ////////// Cell Functions /////////
    ///////////////////////////////////
    cellIsValid(cell) {
      return cell.modules.validate ? cell.modules.validate.invalid || true : true;
    }
    cellValidate(cell) {
      return this.validate(cell.column.modules.validate, cell, cell.getValue());
    }
    ///////////////////////////////////
    ///////// Column Functions ////////
    ///////////////////////////////////
    columnValidate(column) {
      var invalid = [];
      column.cells.forEach((cell) => {
        if (this.cellValidate(cell) !== true) {
          invalid.push(cell.getComponent());
        }
      });
      return invalid.length ? invalid : true;
    }
    ///////////////////////////////////
    ////////// Row Functions //////////
    ///////////////////////////////////
    rowValidate(row) {
      var invalid = [];
      row.cells.forEach((cell) => {
        if (this.cellValidate(cell) !== true) {
          invalid.push(cell.getComponent());
        }
      });
      return invalid.length ? invalid : true;
    }
    ///////////////////////////////////
    ///////// Table Functions /////////
    ///////////////////////////////////
    userClearCellValidation(cells) {
      if (!cells) {
        cells = this.getInvalidCells();
      }
      if (!Array.isArray(cells)) {
        cells = [cells];
      }
      cells.forEach((cell) => {
        this.clearValidation(cell._getSelf());
      });
    }
    userValidate(cells) {
      var output = [];
      this.table.rowManager.rows.forEach((row) => {
        row = row.getComponent();
        var valid = row.validate();
        if (valid !== true) {
          output = output.concat(valid);
        }
      });
      return output.length ? output : true;
    }
    ///////////////////////////////////
    ///////// Internal Logic //////////
    ///////////////////////////////////
    initializeColumnCheck(column) {
      if (typeof column.definition.validator !== "undefined") {
        this.initializeColumn(column);
      }
    }
    //validate
    initializeColumn(column) {
      var self2 = this, config = [], validator;
      if (column.definition.validator) {
        if (Array.isArray(column.definition.validator)) {
          column.definition.validator.forEach((item) => {
            validator = self2._extractValidator(item);
            if (validator) {
              config.push(validator);
            }
          });
        } else {
          validator = this._extractValidator(column.definition.validator);
          if (validator) {
            config.push(validator);
          }
        }
        column.modules.validate = config.length ? config : false;
      }
    }
    _extractValidator(value) {
      var type, params, pos;
      switch (typeof value) {
        case "string":
          pos = value.indexOf(":");
          if (pos > -1) {
            type = value.substring(0, pos);
            params = value.substring(pos + 1);
          } else {
            type = value;
          }
          return this._buildValidator(type, params);
        case "function":
          return this._buildValidator(value);
        case "object":
          return this._buildValidator(value.type, value.parameters);
      }
    }
    _buildValidator(type, params) {
      var func = typeof type == "function" ? type : _Validate.validators[type];
      if (!func) {
        console.warn("Validator Setup Error - No matching validator found:", type);
        return false;
      } else {
        return {
          type: typeof type == "function" ? "function" : type,
          func,
          params
        };
      }
    }
    validate(validators, cell, value) {
      var self2 = this, failedValidators = [], invalidIndex = this.invalidCells.indexOf(cell);
      if (validators) {
        validators.forEach((item) => {
          if (!item.func.call(self2, cell.getComponent(), value, item.params)) {
            failedValidators.push({
              type: item.type,
              parameters: item.params
            });
          }
        });
      }
      if (!cell.modules.validate) {
        cell.modules.validate = {};
      }
      if (!failedValidators.length) {
        cell.modules.validate.invalid = false;
        cell.getElement().classList.remove("tabulator-validation-fail");
        if (invalidIndex > -1) {
          this.invalidCells.splice(invalidIndex, 1);
        }
      } else {
        cell.modules.validate.invalid = failedValidators;
        if (this.table.options.validationMode !== "manual") {
          cell.getElement().classList.add("tabulator-validation-fail");
        }
        if (invalidIndex == -1) {
          this.invalidCells.push(cell);
        }
      }
      return failedValidators.length ? failedValidators : true;
    }
    getInvalidCells() {
      var output = [];
      this.invalidCells.forEach((cell) => {
        output.push(cell.getComponent());
      });
      return output;
    }
    clearValidation(cell) {
      var invalidIndex;
      if (cell.modules.validate && cell.modules.validate.invalid) {
        cell.getElement().classList.remove("tabulator-validation-fail");
        cell.modules.validate.invalid = false;
        invalidIndex = this.invalidCells.indexOf(cell);
        if (invalidIndex > -1) {
          this.invalidCells.splice(invalidIndex, 1);
        }
      }
    }
  };
  var allModules = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    AccessorModule: Accessor,
    AjaxModule: Ajax,
    ClipboardModule: Clipboard,
    ColumnCalcsModule: ColumnCalcs,
    DataTreeModule: DataTree,
    DownloadModule: Download,
    EditModule: Edit2,
    ExportModule: Export,
    FilterModule: Filter,
    FormatModule: Format,
    FrozenColumnsModule: FrozenColumns,
    FrozenRowsModule: FrozenRows,
    GroupRowsModule: GroupRows,
    HistoryModule: History,
    HtmlTableImportModule: HtmlTableImport,
    ImportModule: Import,
    InteractionModule: Interaction,
    KeybindingsModule: Keybindings,
    MenuModule: Menu,
    MoveColumnsModule: MoveColumns,
    MoveRowsModule: MoveRows,
    MutatorModule: Mutator,
    PageModule: Page,
    PersistenceModule: Persistence,
    PopupModule: Popup2,
    PrintModule: Print,
    ReactiveDataModule: ReactiveData,
    ResizeColumnsModule: ResizeColumns,
    ResizeRowsModule: ResizeRows,
    ResizeTableModule: ResizeTable,
    ResponsiveLayoutModule: ResponsiveLayout,
    SelectRangeModule: SelectRange,
    SelectRowModule: SelectRow,
    SortModule: Sort,
    SpreadsheetModule: Spreadsheet,
    TooltipModule: Tooltip,
    ValidateModule: Validate
  });
  var defaultOptions = {
    debugEventsExternal: false,
    //flag to console log events
    debugEventsInternal: false,
    //flag to console log events
    debugInvalidOptions: true,
    //allow toggling of invalid option warnings
    debugInvalidComponentFuncs: true,
    //allow toggling of invalid component warnings
    debugInitialization: true,
    //allow toggling of pre initialization function call warnings
    debugDeprecation: true,
    //allow toggling of deprecation warnings
    height: false,
    //height of tabulator
    minHeight: false,
    //minimum height of tabulator
    maxHeight: false,
    //maximum height of tabulator
    columnHeaderVertAlign: "top",
    //vertical alignment of column headers
    popupContainer: false,
    columns: [],
    //store for colum header info
    columnDefaults: {},
    //store column default props
    rowHeader: false,
    data: false,
    //default starting data
    autoColumns: false,
    //build columns from data row structure
    autoColumnsDefinitions: false,
    nestedFieldSeparator: ".",
    //separator for nested data
    footerElement: false,
    //hold footer element
    index: "id",
    //filed for row index
    textDirection: "auto",
    addRowPos: "bottom",
    //position to insert blank rows, top|bottom
    headerVisible: true,
    //hide header
    renderVertical: "virtual",
    renderHorizontal: "basic",
    renderVerticalBuffer: 0,
    // set virtual DOM buffer size
    scrollToRowPosition: "top",
    scrollToRowIfVisible: true,
    scrollToColumnPosition: "left",
    scrollToColumnIfVisible: true,
    rowFormatter: false,
    rowFormatterPrint: null,
    rowFormatterClipboard: null,
    rowFormatterHtmlOutput: null,
    rowHeight: null,
    placeholder: false,
    dataLoader: true,
    dataLoaderLoading: false,
    dataLoaderError: false,
    dataLoaderErrorTimeout: 3e3,
    dataSendParams: {},
    dataReceiveParams: {},
    dependencies: {}
  };
  var OptionsList = class {
    constructor(table, msgType, defaults = {}) {
      this.table = table;
      this.msgType = msgType;
      this.registeredDefaults = Object.assign({}, defaults);
    }
    register(option, value) {
      this.registeredDefaults[option] = value;
    }
    generate(defaultOptions2, userOptions = {}) {
      var output = Object.assign({}, this.registeredDefaults), warn3 = this.table.options.debugInvalidOptions || userOptions.debugInvalidOptions === true;
      Object.assign(output, defaultOptions2);
      for (let key in userOptions) {
        if (!output.hasOwnProperty(key)) {
          if (warn3) {
            console.warn("Invalid " + this.msgType + " option:", key);
          }
          output[key] = userOptions.key;
        }
      }
      for (let key in output) {
        if (key in userOptions) {
          output[key] = userOptions[key];
        } else {
          if (Array.isArray(output[key])) {
            output[key] = Object.assign([], output[key]);
          } else if (typeof output[key] === "object" && output[key] !== null) {
            output[key] = Object.assign({}, output[key]);
          } else if (typeof output[key] === "undefined") {
            delete output[key];
          }
        }
      }
      return output;
    }
  };
  var Renderer = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.elementVertical = table.rowManager.element;
      this.elementHorizontal = table.columnManager.element;
      this.tableElement = table.rowManager.tableElement;
      this.verticalFillMode = "fit";
    }
    ///////////////////////////////////
    /////// Internal Bindings /////////
    ///////////////////////////////////
    initialize() {
    }
    clearRows() {
    }
    clearColumns() {
    }
    reinitializeColumnWidths(columns) {
    }
    renderRows() {
    }
    renderColumns() {
    }
    rerenderRows(callback) {
      if (callback) {
        callback();
      }
    }
    rerenderColumns(update, blockRedraw) {
    }
    renderRowCells(row) {
    }
    rerenderRowCells(row, force) {
    }
    scrollColumns(left, dir) {
    }
    scrollRows(top, dir) {
    }
    resize() {
    }
    scrollToRow(row) {
    }
    scrollToRowNearestTop(row) {
    }
    visibleRows(includingBuffer) {
      return [];
    }
    ///////////////////////////////////
    //////// Helper Functions /////////
    ///////////////////////////////////
    rows() {
      return this.table.rowManager.getDisplayRows();
    }
    styleRow(row, index7) {
      var rowEl = row.getElement();
      if (index7 % 2) {
        rowEl.classList.add("tabulator-row-even");
        rowEl.classList.remove("tabulator-row-odd");
      } else {
        rowEl.classList.add("tabulator-row-odd");
        rowEl.classList.remove("tabulator-row-even");
      }
    }
    ///////////////////////////////////
    /////// External Triggers /////////
    /////// (DO NOT OVERRIDE) /////////
    ///////////////////////////////////
    clear() {
      this.clearRows();
      this.clearColumns();
    }
    render() {
      this.renderRows();
      this.renderColumns();
    }
    rerender(callback) {
      this.rerenderRows();
      this.rerenderColumns();
    }
    scrollToRowPosition(row, position, ifVisible) {
      var rowIndex = this.rows().indexOf(row), rowEl = row.getElement(), offset2 = 0;
      return new Promise((resolve2, reject) => {
        if (rowIndex > -1) {
          if (typeof ifVisible === "undefined") {
            ifVisible = this.table.options.scrollToRowIfVisible;
          }
          if (!ifVisible) {
            if (Helpers.elVisible(rowEl)) {
              offset2 = Helpers.elOffset(rowEl).top - Helpers.elOffset(this.elementVertical).top;
              if (offset2 > 0 && offset2 < this.elementVertical.clientHeight - rowEl.offsetHeight) {
                resolve2();
                return false;
              }
            }
          }
          if (typeof position === "undefined") {
            position = this.table.options.scrollToRowPosition;
          }
          if (position === "nearest") {
            position = this.scrollToRowNearestTop(row) ? "top" : "bottom";
          }
          this.scrollToRow(row);
          switch (position) {
            case "middle":
            case "center":
              if (this.elementVertical.scrollHeight - this.elementVertical.scrollTop == this.elementVertical.clientHeight) {
                this.elementVertical.scrollTop = this.elementVertical.scrollTop + (rowEl.offsetTop - this.elementVertical.scrollTop) - (this.elementVertical.scrollHeight - rowEl.offsetTop) / 2;
              } else {
                this.elementVertical.scrollTop = this.elementVertical.scrollTop - this.elementVertical.clientHeight / 2;
              }
              break;
            case "bottom":
              if (this.elementVertical.scrollHeight - this.elementVertical.scrollTop == this.elementVertical.clientHeight) {
                this.elementVertical.scrollTop = this.elementVertical.scrollTop - (this.elementVertical.scrollHeight - rowEl.offsetTop) + rowEl.offsetHeight;
              } else {
                this.elementVertical.scrollTop = this.elementVertical.scrollTop - this.elementVertical.clientHeight + rowEl.offsetHeight;
              }
              break;
            case "top":
              this.elementVertical.scrollTop = rowEl.offsetTop;
              break;
          }
          resolve2();
        } else {
          console.warn("Scroll Error - Row not visible");
          reject("Scroll Error - Row not visible");
        }
      });
    }
  };
  var BasicHorizontal = class extends Renderer {
    constructor(table) {
      super(table);
    }
    renderRowCells(row, inFragment) {
      const rowFrag = document.createDocumentFragment();
      row.cells.forEach((cell) => {
        rowFrag.appendChild(cell.getElement());
      });
      row.element.appendChild(rowFrag);
      if (!inFragment) {
        row.cells.forEach((cell) => {
          cell.cellRendered();
        });
      }
    }
    reinitializeColumnWidths(columns) {
      columns.forEach(function(column) {
        column.reinitializeWidth();
      });
    }
  };
  var VirtualDomHorizontal = class extends Renderer {
    constructor(table) {
      super(table);
      this.leftCol = 0;
      this.rightCol = 0;
      this.scrollLeft = 0;
      this.vDomScrollPosLeft = 0;
      this.vDomScrollPosRight = 0;
      this.vDomPadLeft = 0;
      this.vDomPadRight = 0;
      this.fitDataColAvg = 0;
      this.windowBuffer = 200;
      this.visibleRows = null;
      this.initialized = false;
      this.isFitData = false;
      this.columns = [];
    }
    initialize() {
      this.compatibilityCheck();
      this.layoutCheck();
      this.vertScrollListen();
    }
    compatibilityCheck() {
      if (this.options("layout") == "fitDataTable") {
        console.warn("Horizontal Virtual DOM is not compatible with fitDataTable layout mode");
      }
      if (this.options("responsiveLayout")) {
        console.warn("Horizontal Virtual DOM is not compatible with responsive columns");
      }
      if (this.options("rtl")) {
        console.warn("Horizontal Virtual DOM is not currently compatible with RTL text direction");
      }
    }
    layoutCheck() {
      this.isFitData = this.options("layout").startsWith("fitData");
    }
    vertScrollListen() {
      this.subscribe("scroll-vertical", this.clearVisRowCache.bind(this));
      this.subscribe("data-refreshed", this.clearVisRowCache.bind(this));
    }
    clearVisRowCache() {
      this.visibleRows = null;
    }
    //////////////////////////////////////
    ///////// Public Functions ///////////
    //////////////////////////////////////
    renderColumns(row, force) {
      this.dataChange();
    }
    scrollColumns(left, dir) {
      if (this.scrollLeft != left) {
        this.scrollLeft = left;
        this.scroll(left - (this.vDomScrollPosLeft + this.windowBuffer));
      }
    }
    calcWindowBuffer() {
      var buffer2 = this.elementVertical.clientWidth;
      this.table.columnManager.columnsByIndex.forEach((column) => {
        if (column.visible) {
          var width = column.getWidth();
          if (width > buffer2) {
            buffer2 = width;
          }
        }
      });
      this.windowBuffer = buffer2 * 2;
    }
    rerenderColumns(update, blockRedraw) {
      var old = {
        cols: this.columns,
        leftCol: this.leftCol,
        rightCol: this.rightCol
      }, colPos = 0;
      if (update && !this.initialized) {
        return;
      }
      this.clear();
      this.calcWindowBuffer();
      this.scrollLeft = this.elementVertical.scrollLeft;
      this.vDomScrollPosLeft = this.scrollLeft - this.windowBuffer;
      this.vDomScrollPosRight = this.scrollLeft + this.elementVertical.clientWidth + this.windowBuffer;
      this.table.columnManager.columnsByIndex.forEach((column) => {
        var config = {}, width;
        if (column.visible) {
          if (!column.modules.frozen) {
            width = column.getWidth();
            config.leftPos = colPos;
            config.rightPos = colPos + width;
            config.width = width;
            if (this.isFitData) {
              config.fitDataCheck = column.modules.vdomHoz ? column.modules.vdomHoz.fitDataCheck : true;
            }
            if (colPos + width > this.vDomScrollPosLeft && colPos < this.vDomScrollPosRight) {
              if (this.leftCol == -1) {
                this.leftCol = this.columns.length;
                this.vDomPadLeft = colPos;
              }
              this.rightCol = this.columns.length;
            } else {
              if (this.leftCol !== -1) {
                this.vDomPadRight += width;
              }
            }
            this.columns.push(column);
            column.modules.vdomHoz = config;
            colPos += width;
          }
        }
      });
      this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
      this.tableElement.style.paddingRight = this.vDomPadRight + "px";
      this.initialized = true;
      if (!blockRedraw) {
        if (!update || this.reinitChanged(old)) {
          this.reinitializeRows();
        }
      }
      this.elementVertical.scrollLeft = this.scrollLeft;
    }
    renderRowCells(row) {
      if (this.initialized) {
        this.initializeRow(row);
      } else {
        const rowFrag = document.createDocumentFragment();
        row.cells.forEach((cell) => {
          rowFrag.appendChild(cell.getElement());
        });
        row.element.appendChild(rowFrag);
        row.cells.forEach((cell) => {
          cell.cellRendered();
        });
      }
    }
    rerenderRowCells(row, force) {
      this.reinitializeRow(row, force);
    }
    reinitializeColumnWidths(columns) {
      for (let i = this.leftCol; i <= this.rightCol; i++) {
        this.columns[i].reinitializeWidth();
      }
    }
    //////////////////////////////////////
    //////// Internal Rendering //////////
    //////////////////////////////////////
    deinitialize() {
      this.initialized = false;
    }
    clear() {
      this.columns = [];
      this.leftCol = -1;
      this.rightCol = 0;
      this.vDomScrollPosLeft = 0;
      this.vDomScrollPosRight = 0;
      this.vDomPadLeft = 0;
      this.vDomPadRight = 0;
    }
    dataChange() {
      var change = false, row, rowEl;
      if (this.isFitData) {
        this.table.columnManager.columnsByIndex.forEach((column) => {
          if (!column.definition.width && column.visible) {
            change = true;
          }
        });
        if (change && this.table.rowManager.getDisplayRows().length) {
          this.vDomScrollPosRight = this.scrollLeft + this.elementVertical.clientWidth + this.windowBuffer;
          row = this.chain("rows-sample", [1], [], () => {
            return this.table.rowManager.getDisplayRows();
          })[0];
          if (row) {
            rowEl = row.getElement();
            row.generateCells();
            this.tableElement.appendChild(rowEl);
            for (let colEnd = 0; colEnd < row.cells.length; colEnd++) {
              let cell = row.cells[colEnd];
              rowEl.appendChild(cell.getElement());
              cell.column.reinitializeWidth();
            }
            rowEl.parentNode.removeChild(rowEl);
            this.rerenderColumns(false, true);
          }
        }
      } else {
        if (this.options("layout") === "fitColumns") {
          this.layoutRefresh();
          this.rerenderColumns(false, true);
        }
      }
    }
    reinitChanged(old) {
      var match = true;
      if (old.cols.length !== this.columns.length || old.leftCol !== this.leftCol || old.rightCol !== this.rightCol) {
        return true;
      }
      old.cols.forEach((col, i) => {
        if (col !== this.columns[i]) {
          match = false;
        }
      });
      return !match;
    }
    reinitializeRows() {
      var visibleRows = this.getVisibleRows(), otherRows = this.table.rowManager.getRows().filter((row) => !visibleRows.includes(row));
      visibleRows.forEach((row) => {
        this.reinitializeRow(row, true);
      });
      otherRows.forEach((row) => {
        row.deinitialize();
      });
    }
    getVisibleRows() {
      if (!this.visibleRows) {
        this.visibleRows = this.table.rowManager.getVisibleRows();
      }
      return this.visibleRows;
    }
    scroll(diff) {
      this.vDomScrollPosLeft += diff;
      this.vDomScrollPosRight += diff;
      if (Math.abs(diff) > this.windowBuffer / 2) {
        this.rerenderColumns();
      } else {
        if (diff > 0) {
          this.addColRight();
          this.removeColLeft();
        } else {
          this.addColLeft();
          this.removeColRight();
        }
      }
    }
    colPositionAdjust(start, end, diff) {
      for (let i = start; i < end; i++) {
        let column = this.columns[i];
        column.modules.vdomHoz.leftPos += diff;
        column.modules.vdomHoz.rightPos += diff;
      }
    }
    addColRight() {
      var changes = false, working = true;
      while (working) {
        let column = this.columns[this.rightCol + 1];
        if (column) {
          if (column.modules.vdomHoz.leftPos <= this.vDomScrollPosRight) {
            changes = true;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                var cell = row.getCell(column);
                row.getElement().insertBefore(cell.getElement(), row.getCell(this.columns[this.rightCol]).getElement().nextSibling);
                cell.cellRendered();
              }
            });
            this.fitDataColActualWidthCheck(column);
            this.rightCol++;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                row.modules.vdomHoz.rightCol = this.rightCol;
              }
            });
            if (this.rightCol >= this.columns.length - 1) {
              this.vDomPadRight = 0;
            } else {
              this.vDomPadRight -= column.getWidth();
            }
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      if (changes) {
        this.tableElement.style.paddingRight = this.vDomPadRight + "px";
      }
    }
    addColLeft() {
      var changes = false, working = true;
      while (working) {
        let column = this.columns[this.leftCol - 1];
        if (column) {
          if (column.modules.vdomHoz.rightPos >= this.vDomScrollPosLeft) {
            changes = true;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                var cell = row.getCell(column);
                row.getElement().insertBefore(cell.getElement(), row.getCell(this.columns[this.leftCol]).getElement());
                cell.cellRendered();
              }
            });
            this.leftCol--;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                row.modules.vdomHoz.leftCol = this.leftCol;
              }
            });
            if (this.leftCol <= 0) {
              this.vDomPadLeft = 0;
            } else {
              this.vDomPadLeft -= column.getWidth();
            }
            let diff = this.fitDataColActualWidthCheck(column);
            if (diff) {
              this.scrollLeft = this.elementVertical.scrollLeft = this.elementVertical.scrollLeft + diff;
              this.vDomPadRight -= diff;
            }
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      if (changes) {
        this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
      }
    }
    removeColRight() {
      var changes = false, working = true;
      while (working) {
        let column = this.columns[this.rightCol];
        if (column) {
          if (column.modules.vdomHoz.leftPos > this.vDomScrollPosRight) {
            changes = true;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                var cell = row.getCell(column);
                try {
                  row.getElement().removeChild(cell.getElement());
                } catch (ex) {
                  console.warn("Could not removeColRight", ex.message);
                }
              }
            });
            this.vDomPadRight += column.getWidth();
            this.rightCol--;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                row.modules.vdomHoz.rightCol = this.rightCol;
              }
            });
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      if (changes) {
        this.tableElement.style.paddingRight = this.vDomPadRight + "px";
      }
    }
    removeColLeft() {
      var changes = false, working = true;
      while (working) {
        let column = this.columns[this.leftCol];
        if (column) {
          if (column.modules.vdomHoz.rightPos < this.vDomScrollPosLeft) {
            changes = true;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                var cell = row.getCell(column);
                try {
                  row.getElement().removeChild(cell.getElement());
                } catch (ex) {
                  console.warn("Could not removeColLeft", ex.message);
                }
              }
            });
            this.vDomPadLeft += column.getWidth();
            this.leftCol++;
            this.getVisibleRows().forEach((row) => {
              if (row.type !== "group") {
                row.modules.vdomHoz.leftCol = this.leftCol;
              }
            });
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      if (changes) {
        this.tableElement.style.paddingLeft = this.vDomPadLeft + "px";
      }
    }
    fitDataColActualWidthCheck(column) {
      var newWidth, widthDiff;
      if (column.modules.vdomHoz.fitDataCheck) {
        column.reinitializeWidth();
        newWidth = column.getWidth();
        widthDiff = newWidth - column.modules.vdomHoz.width;
        if (widthDiff) {
          column.modules.vdomHoz.rightPos += widthDiff;
          column.modules.vdomHoz.width = newWidth;
          this.colPositionAdjust(this.columns.indexOf(column) + 1, this.columns.length, widthDiff);
        }
        column.modules.vdomHoz.fitDataCheck = false;
      }
      return widthDiff;
    }
    initializeRow(row) {
      if (row.type !== "group") {
        row.modules.vdomHoz = {
          leftCol: this.leftCol,
          rightCol: this.rightCol
        };
        if (this.table.modules.frozenColumns) {
          this.table.modules.frozenColumns.leftColumns.forEach((column) => {
            this.appendCell(row, column);
          });
        }
        for (let i = this.leftCol; i <= this.rightCol; i++) {
          this.appendCell(row, this.columns[i]);
        }
        if (this.table.modules.frozenColumns) {
          this.table.modules.frozenColumns.rightColumns.forEach((column) => {
            this.appendCell(row, column);
          });
        }
      }
    }
    appendCell(row, column) {
      if (column && column.visible) {
        let cell = row.getCell(column);
        row.getElement().appendChild(cell.getElement());
        cell.cellRendered();
      }
    }
    reinitializeRow(row, force) {
      if (row.type !== "group") {
        if (force || !row.modules.vdomHoz || row.modules.vdomHoz.leftCol !== this.leftCol || row.modules.vdomHoz.rightCol !== this.rightCol) {
          var rowEl = row.getElement();
          while (rowEl.firstChild)
            rowEl.removeChild(rowEl.firstChild);
          this.initializeRow(row);
        }
      }
    }
  };
  var ColumnManager = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.blockHozScrollEvent = false;
      this.headersElement = null;
      this.contentsElement = null;
      this.rowHeader = null;
      this.element = null;
      this.columns = [];
      this.columnsByIndex = [];
      this.columnsByField = {};
      this.scrollLeft = 0;
      this.optionsList = new OptionsList(this.table, "column definition", defaultColumnOptions);
      this.redrawBlock = false;
      this.redrawBlockUpdate = null;
      this.renderer = null;
    }
    ////////////// Setup Functions /////////////////
    initialize() {
      this.initializeRenderer();
      this.headersElement = this.createHeadersElement();
      this.contentsElement = this.createHeaderContentsElement();
      this.element = this.createHeaderElement();
      this.contentsElement.insertBefore(this.headersElement, this.contentsElement.firstChild);
      this.element.insertBefore(this.contentsElement, this.element.firstChild);
      this.initializeScrollWheelWatcher();
      this.subscribe("scroll-horizontal", this.scrollHorizontal.bind(this));
      this.subscribe("scrollbar-vertical", this.padVerticalScrollbar.bind(this));
    }
    padVerticalScrollbar(width) {
      if (this.table.rtl) {
        this.headersElement.style.marginLeft = width + "px";
      } else {
        this.headersElement.style.marginRight = width + "px";
      }
    }
    initializeRenderer() {
      var renderClass;
      var renderers = {
        "virtual": VirtualDomHorizontal,
        "basic": BasicHorizontal
      };
      if (typeof this.table.options.renderHorizontal === "string") {
        renderClass = renderers[this.table.options.renderHorizontal];
      } else {
        renderClass = this.table.options.renderHorizontal;
      }
      if (renderClass) {
        this.renderer = new renderClass(this.table, this.element, this.tableElement);
        this.renderer.initialize();
      } else {
        console.error("Unable to find matching renderer:", this.table.options.renderHorizontal);
      }
    }
    createHeadersElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-headers");
      el.setAttribute("role", "row");
      return el;
    }
    createHeaderContentsElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-header-contents");
      el.setAttribute("role", "rowgroup");
      return el;
    }
    createHeaderElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-header");
      el.setAttribute("role", "rowgroup");
      if (!this.table.options.headerVisible) {
        el.classList.add("tabulator-header-hidden");
      }
      return el;
    }
    //return containing element
    getElement() {
      return this.element;
    }
    //return containing contents element
    getContentsElement() {
      return this.contentsElement;
    }
    //return header containing element
    getHeadersElement() {
      return this.headersElement;
    }
    //scroll horizontally to match table body
    scrollHorizontal(left) {
      this.contentsElement.scrollLeft = left;
      this.scrollLeft = left;
      this.renderer.scrollColumns(left);
    }
    initializeScrollWheelWatcher() {
      this.contentsElement.addEventListener("wheel", (e) => {
        var left;
        if (e.deltaX) {
          left = this.contentsElement.scrollLeft + e.deltaX;
          this.table.rowManager.scrollHorizontal(left);
          this.table.columnManager.scrollHorizontal(left);
        }
      });
    }
    ///////////// Column Setup Functions /////////////
    generateColumnsFromRowData(data) {
      var cols = [], collProgress = {}, rowSample = this.table.options.autoColumns === "full" ? data : [data[0]], definitions = this.table.options.autoColumnsDefinitions;
      if (data && data.length) {
        rowSample.forEach((row) => {
          Object.keys(row).forEach((key, index7) => {
            let value = row[key], col;
            if (!collProgress[key]) {
              col = {
                field: key,
                title: key,
                sorter: this.calculateSorterFromValue(value)
              };
              cols.splice(index7, 0, col);
              collProgress[key] = typeof value === "undefined" ? col : true;
            } else if (collProgress[key] !== true) {
              if (typeof value !== "undefined") {
                collProgress[key].sorter = this.calculateSorterFromValue(value);
                collProgress[key] = true;
              }
            }
          });
        });
        if (definitions) {
          switch (typeof definitions) {
            case "function":
              this.table.options.columns = definitions.call(this.table, cols);
              break;
            case "object":
              if (Array.isArray(definitions)) {
                cols.forEach((col) => {
                  var match = definitions.find((def2) => {
                    return def2.field === col.field;
                  });
                  if (match) {
                    Object.assign(col, match);
                  }
                });
              } else {
                cols.forEach((col) => {
                  if (definitions[col.field]) {
                    Object.assign(col, definitions[col.field]);
                  }
                });
              }
              this.table.options.columns = cols;
              break;
          }
        } else {
          this.table.options.columns = cols;
        }
        this.setColumns(this.table.options.columns);
      }
    }
    calculateSorterFromValue(value) {
      var sorter;
      switch (typeof value) {
        case "undefined":
          sorter = "string";
          break;
        case "boolean":
          sorter = "boolean";
          break;
        case "number":
          sorter = "number";
          break;
        case "object":
          if (Array.isArray(value)) {
            sorter = "array";
          } else {
            sorter = "string";
          }
          break;
        default:
          if (!isNaN(value) && value !== "") {
            sorter = "number";
          } else {
            if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {
              sorter = "alphanum";
            } else {
              sorter = "string";
            }
          }
          break;
      }
      return sorter;
    }
    setColumns(cols, row) {
      while (this.headersElement.firstChild)
        this.headersElement.removeChild(this.headersElement.firstChild);
      this.columns = [];
      this.columnsByIndex = [];
      this.columnsByField = {};
      this.dispatch("columns-loading");
      this.dispatchExternal("columnsLoading");
      if (this.table.options.rowHeader) {
        this.rowHeader = new Column(this.table.options.rowHeader === true ? {} : this.table.options.rowHeader, this, true);
        this.columns.push(this.rowHeader);
        this.headersElement.appendChild(this.rowHeader.getElement());
        this.rowHeader.columnRendered();
      }
      cols.forEach((def2, i) => {
        this._addColumn(def2);
      });
      this._reIndexColumns();
      this.dispatch("columns-loaded");
      if (this.subscribedExternal("columnsLoaded")) {
        this.dispatchExternal("columnsLoaded", this.getComponents());
      }
      this.rerenderColumns(false, true);
      this.redraw(true);
    }
    _addColumn(definition, before, nextToColumn) {
      var column = new Column(definition, this), colEl = column.getElement(), index7 = nextToColumn ? this.findColumnIndex(nextToColumn) : nextToColumn;
      if (before && this.rowHeader && (!nextToColumn || nextToColumn === this.rowHeader)) {
        before = false;
        nextToColumn = this.rowHeader;
        index7 = 0;
      }
      if (nextToColumn && index7 > -1) {
        var topColumn = nextToColumn.getTopColumn();
        var parentIndex = this.columns.indexOf(topColumn);
        var nextEl = topColumn.getElement();
        if (before) {
          this.columns.splice(parentIndex, 0, column);
          nextEl.parentNode.insertBefore(colEl, nextEl);
        } else {
          this.columns.splice(parentIndex + 1, 0, column);
          nextEl.parentNode.insertBefore(colEl, nextEl.nextSibling);
        }
      } else {
        if (before) {
          this.columns.unshift(column);
          this.headersElement.insertBefore(column.getElement(), this.headersElement.firstChild);
        } else {
          this.columns.push(column);
          this.headersElement.appendChild(column.getElement());
        }
      }
      column.columnRendered();
      return column;
    }
    registerColumnField(col) {
      if (col.definition.field) {
        this.columnsByField[col.definition.field] = col;
      }
    }
    registerColumnPosition(col) {
      this.columnsByIndex.push(col);
    }
    _reIndexColumns() {
      this.columnsByIndex = [];
      this.columns.forEach(function(column) {
        column.reRegisterPosition();
      });
    }
    //ensure column headers take up the correct amount of space in column groups
    verticalAlignHeaders() {
      var minHeight = 0;
      if (!this.redrawBlock) {
        this.headersElement.style.height = "";
        this.columns.forEach((column) => {
          column.clearVerticalAlign();
        });
        this.columns.forEach((column) => {
          var height = column.getHeight();
          if (height > minHeight) {
            minHeight = height;
          }
        });
        this.headersElement.style.height = minHeight + "px";
        this.columns.forEach((column) => {
          column.verticalAlign(this.table.options.columnHeaderVertAlign, minHeight);
        });
        this.table.rowManager.adjustTableSize();
      }
    }
    //////////////// Column Details /////////////////
    findColumn(subject) {
      var columns;
      if (typeof subject == "object") {
        if (subject instanceof Column) {
          return subject;
        } else if (subject instanceof ColumnComponent) {
          return subject._getSelf() || false;
        } else if (typeof HTMLElement !== "undefined" && subject instanceof HTMLElement) {
          columns = [];
          this.columns.forEach((column) => {
            columns.push(column);
            columns = columns.concat(column.getColumns(true));
          });
          let match = columns.find((column) => {
            return column.element === subject;
          });
          return match || false;
        }
      } else {
        return this.columnsByField[subject] || false;
      }
      return false;
    }
    getColumnByField(field) {
      return this.columnsByField[field];
    }
    getColumnsByFieldRoot(root) {
      var matches2 = [];
      Object.keys(this.columnsByField).forEach((field) => {
        var fieldRoot = this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator)[0] : field;
        if (fieldRoot === root) {
          matches2.push(this.columnsByField[field]);
        }
      });
      return matches2;
    }
    getColumnByIndex(index7) {
      return this.columnsByIndex[index7];
    }
    getFirstVisibleColumn() {
      var index7 = this.columnsByIndex.findIndex((col) => {
        return col.visible;
      });
      return index7 > -1 ? this.columnsByIndex[index7] : false;
    }
    getVisibleColumnsByIndex() {
      return this.columnsByIndex.filter((col) => col.visible);
    }
    getColumns() {
      return this.columns;
    }
    findColumnIndex(column) {
      return this.columnsByIndex.findIndex((col) => {
        return column === col;
      });
    }
    //return all columns that are not groups
    getRealColumns() {
      return this.columnsByIndex;
    }
    //traverse across columns and call action
    traverse(callback) {
      this.columnsByIndex.forEach((column, i) => {
        callback(column, i);
      });
    }
    //get definitions of actual columns
    getDefinitions(active) {
      var output = [];
      this.columnsByIndex.forEach((column) => {
        if (!active || active && column.visible) {
          output.push(column.getDefinition());
        }
      });
      return output;
    }
    //get full nested definition tree
    getDefinitionTree() {
      var output = [];
      this.columns.forEach((column) => {
        output.push(column.getDefinition(true));
      });
      return output;
    }
    getComponents(structured) {
      var output = [], columns = structured ? this.columns : this.columnsByIndex;
      columns.forEach((column) => {
        output.push(column.getComponent());
      });
      return output;
    }
    getWidth() {
      var width = 0;
      this.columnsByIndex.forEach((column) => {
        if (column.visible) {
          width += column.getWidth();
        }
      });
      return width;
    }
    moveColumn(from, to, after) {
      to.element.parentNode.insertBefore(from.element, to.element);
      if (after) {
        to.element.parentNode.insertBefore(to.element, from.element);
      }
      this.moveColumnActual(from, to, after);
      this.verticalAlignHeaders();
      this.table.rowManager.reinitialize();
    }
    moveColumnActual(from, to, after) {
      if (from.parent.isGroup) {
        this._moveColumnInArray(from.parent.columns, from, to, after);
      } else {
        this._moveColumnInArray(this.columns, from, to, after);
      }
      this._moveColumnInArray(this.columnsByIndex, from, to, after, true);
      this.rerenderColumns(true);
      this.dispatch("column-moved", from, to, after);
      if (this.subscribedExternal("columnMoved")) {
        this.dispatchExternal("columnMoved", from.getComponent(), this.table.columnManager.getComponents());
      }
    }
    _moveColumnInArray(columns, from, to, after, updateRows) {
      var fromIndex = columns.indexOf(from), toIndex, rows2 = [];
      if (fromIndex > -1) {
        columns.splice(fromIndex, 1);
        toIndex = columns.indexOf(to);
        if (toIndex > -1) {
          if (after) {
            toIndex = toIndex + 1;
          }
        } else {
          toIndex = fromIndex;
        }
        columns.splice(toIndex, 0, from);
        if (updateRows) {
          rows2 = this.chain("column-moving-rows", [from, to, after], null, []) || [];
          rows2 = rows2.concat(this.table.rowManager.rows);
          rows2.forEach(function(row) {
            if (row.cells.length) {
              var cell = row.cells.splice(fromIndex, 1)[0];
              row.cells.splice(toIndex, 0, cell);
            }
          });
        }
      }
    }
    scrollToColumn(column, position, ifVisible) {
      var left = 0, offset2 = column.getLeftOffset(), adjust = 0, colEl = column.getElement();
      return new Promise((resolve2, reject) => {
        if (typeof position === "undefined") {
          position = this.table.options.scrollToColumnPosition;
        }
        if (typeof ifVisible === "undefined") {
          ifVisible = this.table.options.scrollToColumnIfVisible;
        }
        if (column.visible) {
          switch (position) {
            case "middle":
            case "center":
              adjust = -this.element.clientWidth / 2;
              break;
            case "right":
              adjust = colEl.clientWidth - this.headersElement.clientWidth;
              break;
          }
          if (!ifVisible) {
            if (offset2 > 0 && offset2 + colEl.offsetWidth < this.element.clientWidth) {
              return false;
            }
          }
          left = offset2 + adjust;
          left = Math.max(Math.min(left, this.table.rowManager.element.scrollWidth - this.table.rowManager.element.clientWidth), 0);
          this.table.rowManager.scrollHorizontal(left);
          this.scrollHorizontal(left);
          resolve2();
        } else {
          console.warn("Scroll Error - Column not visible");
          reject("Scroll Error - Column not visible");
        }
      });
    }
    //////////////// Cell Management /////////////////
    generateCells(row) {
      var cells = [];
      this.columnsByIndex.forEach((column) => {
        cells.push(column.generateCell(row));
      });
      return cells;
    }
    //////////////// Column Management /////////////////
    getFlexBaseWidth() {
      var totalWidth = this.table.element.clientWidth, fixedWidth = 0;
      if (this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight) {
        totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;
      }
      this.columnsByIndex.forEach(function(column) {
        var width, minWidth, colWidth;
        if (column.visible) {
          width = column.definition.width || 0;
          minWidth = parseInt(column.minWidth);
          if (typeof width == "string") {
            if (width.indexOf("%") > -1) {
              colWidth = totalWidth / 100 * parseInt(width);
            } else {
              colWidth = parseInt(width);
            }
          } else {
            colWidth = width;
          }
          fixedWidth += colWidth > minWidth ? colWidth : minWidth;
        }
      });
      return fixedWidth;
    }
    addColumn(definition, before, nextToColumn) {
      return new Promise((resolve2, reject) => {
        var column = this._addColumn(definition, before, nextToColumn);
        this._reIndexColumns();
        this.dispatch("column-add", definition, before, nextToColumn);
        if (this.layoutMode() != "fitColumns") {
          column.reinitializeWidth();
        }
        this.redraw(true);
        this.table.rowManager.reinitialize();
        this.rerenderColumns();
        resolve2(column);
      });
    }
    //remove column from system
    deregisterColumn(column) {
      var field = column.getField(), index7;
      if (field) {
        delete this.columnsByField[field];
      }
      index7 = this.columnsByIndex.indexOf(column);
      if (index7 > -1) {
        this.columnsByIndex.splice(index7, 1);
      }
      index7 = this.columns.indexOf(column);
      if (index7 > -1) {
        this.columns.splice(index7, 1);
      }
      this.verticalAlignHeaders();
      this.redraw();
    }
    rerenderColumns(update, silent) {
      if (!this.redrawBlock) {
        this.renderer.rerenderColumns(update, silent);
      } else {
        if (update === false || update === true && this.redrawBlockUpdate === null) {
          this.redrawBlockUpdate = update;
        }
      }
    }
    blockRedraw() {
      this.redrawBlock = true;
      this.redrawBlockUpdate = null;
    }
    restoreRedraw() {
      this.redrawBlock = false;
      this.verticalAlignHeaders();
      this.renderer.rerenderColumns(this.redrawBlockUpdate);
    }
    //redraw columns
    redraw(force) {
      if (Helpers.elVisible(this.element)) {
        this.verticalAlignHeaders();
      }
      if (force) {
        this.table.rowManager.resetScroll();
        this.table.rowManager.reinitialize();
      }
      if (!this.confirm("table-redrawing", force)) {
        this.layoutRefresh(force);
      }
      this.dispatch("table-redraw", force);
      this.table.footerManager.redraw();
    }
  };
  var BasicVertical = class extends Renderer {
    constructor(table) {
      super(table);
      this.verticalFillMode = "fill";
      this.scrollTop = 0;
      this.scrollLeft = 0;
      this.scrollTop = 0;
      this.scrollLeft = 0;
    }
    clearRows() {
      var element = this.tableElement;
      while (element.firstChild)
        element.removeChild(element.firstChild);
      element.scrollTop = 0;
      element.scrollLeft = 0;
      element.style.minWidth = "";
      element.style.minHeight = "";
      element.style.display = "";
      element.style.visibility = "";
    }
    renderRows() {
      var element = this.tableElement, onlyGroupHeaders = true, tableFrag = document.createDocumentFragment(), rows2 = this.rows();
      rows2.forEach((row, index7) => {
        this.styleRow(row, index7);
        row.initialize(false, true);
        if (row.type !== "group") {
          onlyGroupHeaders = false;
        }
        tableFrag.appendChild(row.getElement());
      });
      element.appendChild(tableFrag);
      rows2.forEach((row) => {
        row.rendered();
        if (!row.heightInitialized) {
          row.calcHeight(true);
        }
      });
      rows2.forEach((row) => {
        if (!row.heightInitialized) {
          row.setCellHeight();
        }
      });
      if (onlyGroupHeaders) {
        element.style.minWidth = this.table.columnManager.getWidth() + "px";
      } else {
        element.style.minWidth = "";
      }
    }
    rerenderRows(callback) {
      this.clearRows();
      if (callback) {
        callback();
      }
      this.renderRows();
      if (!this.rows().length) {
        this.table.rowManager.tableEmpty();
      }
    }
    scrollToRowNearestTop(row) {
      var rowTop = Helpers.elOffset(row.getElement()).top;
      return !(Math.abs(this.elementVertical.scrollTop - rowTop) > Math.abs(this.elementVertical.scrollTop + this.elementVertical.clientHeight - rowTop));
    }
    scrollToRow(row) {
      var rowEl = row.getElement();
      this.elementVertical.scrollTop = Helpers.elOffset(rowEl).top - Helpers.elOffset(this.elementVertical).top + this.elementVertical.scrollTop;
    }
    visibleRows(includingBuffer) {
      return this.rows();
    }
  };
  var VirtualDomVertical = class extends Renderer {
    constructor(table) {
      super(table);
      this.verticalFillMode = "fill";
      this.scrollTop = 0;
      this.scrollLeft = 0;
      this.vDomRowHeight = 20;
      this.vDomTop = 0;
      this.vDomBottom = 0;
      this.vDomScrollPosTop = 0;
      this.vDomScrollPosBottom = 0;
      this.vDomTopPad = 0;
      this.vDomBottomPad = 0;
      this.vDomMaxRenderChain = 90;
      this.vDomWindowBuffer = 0;
      this.vDomWindowMinTotalRows = 20;
      this.vDomWindowMinMarginRows = 5;
      this.vDomTopNewRows = [];
      this.vDomBottomNewRows = [];
    }
    //////////////////////////////////////
    ///////// Public Functions ///////////
    //////////////////////////////////////
    clearRows() {
      var element = this.tableElement;
      while (element.firstChild)
        element.removeChild(element.firstChild);
      element.style.paddingTop = "";
      element.style.paddingBottom = "";
      element.style.minHeight = "";
      element.style.display = "";
      element.style.visibility = "";
      this.elementVertical.scrollTop = 0;
      this.elementVertical.scrollLeft = 0;
      this.scrollTop = 0;
      this.scrollLeft = 0;
      this.vDomTop = 0;
      this.vDomBottom = 0;
      this.vDomTopPad = 0;
      this.vDomBottomPad = 0;
      this.vDomScrollPosTop = 0;
      this.vDomScrollPosBottom = 0;
    }
    renderRows() {
      this._virtualRenderFill();
    }
    rerenderRows(callback) {
      var scrollTop = this.elementVertical.scrollTop;
      var topRow = false;
      var topOffset = false;
      var left = this.table.rowManager.scrollLeft;
      var rows2 = this.rows();
      for (var i = this.vDomTop; i <= this.vDomBottom; i++) {
        if (rows2[i]) {
          var diff = scrollTop - rows2[i].getElement().offsetTop;
          if (topOffset === false || Math.abs(diff) < topOffset) {
            topOffset = diff;
            topRow = i;
          } else {
            break;
          }
        }
      }
      rows2.forEach((row) => {
        row.deinitializeHeight();
      });
      if (callback) {
        callback();
      }
      if (this.rows().length) {
        this._virtualRenderFill(topRow === false ? this.rows.length - 1 : topRow, true, topOffset || 0);
      } else {
        this.clear();
        this.table.rowManager.tableEmpty();
      }
      this.scrollColumns(left);
    }
    scrollColumns(left) {
      this.table.rowManager.scrollHorizontal(left);
    }
    scrollRows(top, dir) {
      var topDiff = top - this.vDomScrollPosTop;
      var bottomDiff = top - this.vDomScrollPosBottom;
      var margin = this.vDomWindowBuffer * 2;
      var rows2 = this.rows();
      this.scrollTop = top;
      if (-topDiff > margin || bottomDiff > margin) {
        var left = this.table.rowManager.scrollLeft;
        this._virtualRenderFill(Math.floor(this.elementVertical.scrollTop / this.elementVertical.scrollHeight * rows2.length));
        this.scrollColumns(left);
      } else {
        if (dir) {
          if (topDiff < 0) {
            this._addTopRow(rows2, -topDiff);
          }
          if (bottomDiff < 0) {
            if (this.vDomScrollHeight - this.scrollTop > this.vDomWindowBuffer) {
              this._removeBottomRow(rows2, -bottomDiff);
            } else {
              this.vDomScrollPosBottom = this.scrollTop;
            }
          }
        } else {
          if (bottomDiff >= 0) {
            this._addBottomRow(rows2, bottomDiff);
          }
          if (topDiff >= 0) {
            if (this.scrollTop > this.vDomWindowBuffer) {
              this._removeTopRow(rows2, topDiff);
            } else {
              this.vDomScrollPosTop = this.scrollTop;
            }
          }
        }
      }
    }
    resize() {
      this.vDomWindowBuffer = this.table.options.renderVerticalBuffer || this.elementVertical.clientHeight;
    }
    scrollToRowNearestTop(row) {
      var rowIndex = this.rows().indexOf(row);
      return !(Math.abs(this.vDomTop - rowIndex) > Math.abs(this.vDomBottom - rowIndex));
    }
    scrollToRow(row) {
      var index7 = this.rows().indexOf(row);
      if (index7 > -1) {
        this._virtualRenderFill(index7, true);
      }
    }
    visibleRows(includingBuffer) {
      var topEdge = this.elementVertical.scrollTop, bottomEdge = this.elementVertical.clientHeight + topEdge, topFound = false, topRow = 0, bottomRow = 0, rows2 = this.rows();
      if (includingBuffer) {
        topRow = this.vDomTop;
        bottomRow = this.vDomBottom;
      } else {
        for (var i = this.vDomTop; i <= this.vDomBottom; i++) {
          if (rows2[i]) {
            if (!topFound) {
              if (topEdge - rows2[i].getElement().offsetTop >= 0) {
                topRow = i;
              } else {
                topFound = true;
                if (bottomEdge - rows2[i].getElement().offsetTop >= 0) {
                  bottomRow = i;
                } else {
                  break;
                }
              }
            } else {
              if (bottomEdge - rows2[i].getElement().offsetTop >= 0) {
                bottomRow = i;
              } else {
                break;
              }
            }
          }
        }
      }
      return rows2.slice(topRow, bottomRow + 1);
    }
    //////////////////////////////////////
    //////// Internal Rendering //////////
    //////////////////////////////////////
    //full virtual render
    _virtualRenderFill(position, forceMove, offset2) {
      var element = this.tableElement, holder = this.elementVertical, topPad = 0, rowsHeight = 0, rowHeight = 0, heightOccupied = 0, topPadHeight = 0, i = 0, rows2 = this.rows(), rowsCount = rows2.length, index7 = 0, row, rowFragment, renderedRows = [], totalRowsRendered = 0, rowsToRender = 0, fixedHeight = this.table.rowManager.fixedHeight, containerHeight = this.elementVertical.clientHeight, avgRowHeight = this.table.options.rowHeight, resized = true;
      position = position || 0;
      offset2 = offset2 || 0;
      if (!position) {
        this.clear();
      } else {
        while (element.firstChild)
          element.removeChild(element.firstChild);
        heightOccupied = (rowsCount - position + 1) * this.vDomRowHeight;
        if (heightOccupied < containerHeight) {
          position -= Math.ceil((containerHeight - heightOccupied) / this.vDomRowHeight);
          if (position < 0) {
            position = 0;
          }
        }
        topPad = Math.min(Math.max(Math.floor(this.vDomWindowBuffer / this.vDomRowHeight), this.vDomWindowMinMarginRows), position);
        position -= topPad;
      }
      if (rowsCount && Helpers.elVisible(this.elementVertical)) {
        this.vDomTop = position;
        this.vDomBottom = position - 1;
        if (fixedHeight || this.table.options.maxHeight) {
          if (avgRowHeight) {
            rowsToRender = containerHeight / avgRowHeight + this.vDomWindowBuffer / avgRowHeight;
          }
          rowsToRender = Math.max(this.vDomWindowMinTotalRows, Math.ceil(rowsToRender));
        } else {
          rowsToRender = rowsCount;
        }
        while ((rowsToRender == rowsCount || rowsHeight <= containerHeight + this.vDomWindowBuffer || totalRowsRendered < this.vDomWindowMinTotalRows) && this.vDomBottom < rowsCount - 1) {
          renderedRows = [];
          rowFragment = document.createDocumentFragment();
          i = 0;
          while (i < rowsToRender && this.vDomBottom < rowsCount - 1) {
            index7 = this.vDomBottom + 1, row = rows2[index7];
            this.styleRow(row, index7);
            row.initialize(false, true);
            if (!row.heightInitialized && !this.table.options.rowHeight) {
              row.clearCellHeight();
            }
            rowFragment.appendChild(row.getElement());
            renderedRows.push(row);
            this.vDomBottom++;
            i++;
          }
          if (!renderedRows.length) {
            break;
          }
          element.appendChild(rowFragment);
          renderedRows.forEach((row2) => {
            row2.rendered();
            if (!row2.heightInitialized) {
              row2.calcHeight(true);
            }
          });
          renderedRows.forEach((row2) => {
            if (!row2.heightInitialized) {
              row2.setCellHeight();
            }
          });
          renderedRows.forEach((row2) => {
            rowHeight = row2.getHeight();
            if (totalRowsRendered < topPad) {
              topPadHeight += rowHeight;
            } else {
              rowsHeight += rowHeight;
            }
            if (rowHeight > this.vDomWindowBuffer) {
              this.vDomWindowBuffer = rowHeight * 2;
            }
            totalRowsRendered++;
          });
          resized = this.table.rowManager.adjustTableSize();
          containerHeight = this.elementVertical.clientHeight;
          if (resized && (fixedHeight || this.table.options.maxHeight)) {
            avgRowHeight = rowsHeight / totalRowsRendered;
            rowsToRender = Math.max(this.vDomWindowMinTotalRows, Math.ceil(containerHeight / avgRowHeight + this.vDomWindowBuffer / avgRowHeight));
          }
        }
        if (!position) {
          this.vDomTopPad = 0;
          this.vDomRowHeight = Math.floor((rowsHeight + topPadHeight) / totalRowsRendered);
          this.vDomBottomPad = this.vDomRowHeight * (rowsCount - this.vDomBottom - 1);
          this.vDomScrollHeight = topPadHeight + rowsHeight + this.vDomBottomPad - containerHeight;
        } else {
          this.vDomTopPad = !forceMove ? this.scrollTop - topPadHeight : this.vDomRowHeight * this.vDomTop + offset2;
          this.vDomBottomPad = this.vDomBottom == rowsCount - 1 ? 0 : Math.max(this.vDomScrollHeight - this.vDomTopPad - rowsHeight - topPadHeight, 0);
        }
        element.style.paddingTop = this.vDomTopPad + "px";
        element.style.paddingBottom = this.vDomBottomPad + "px";
        if (forceMove) {
          this.scrollTop = this.vDomTopPad + topPadHeight + offset2 - (this.elementVertical.scrollWidth > this.elementVertical.clientWidth ? this.elementVertical.offsetHeight - containerHeight : 0);
        }
        this.scrollTop = Math.min(this.scrollTop, this.elementVertical.scrollHeight - containerHeight);
        if (this.elementVertical.scrollWidth > this.elementVertical.clientWidth && forceMove) {
          this.scrollTop += this.elementVertical.offsetHeight - containerHeight;
        }
        this.vDomScrollPosTop = this.scrollTop;
        this.vDomScrollPosBottom = this.scrollTop;
        holder.scrollTop = this.scrollTop;
        this.dispatch("render-virtual-fill");
      }
    }
    _addTopRow(rows2, fillableSpace) {
      var table = this.tableElement, addedRows = [], paddingAdjust = 0, index7 = this.vDomTop - 1, i = 0, working = true;
      while (working) {
        if (this.vDomTop) {
          let row = rows2[index7], rowHeight, initialized;
          if (row && i < this.vDomMaxRenderChain) {
            rowHeight = row.getHeight() || this.vDomRowHeight;
            initialized = row.initialized;
            if (fillableSpace >= rowHeight) {
              this.styleRow(row, index7);
              table.insertBefore(row.getElement(), table.firstChild);
              if (!row.initialized || !row.heightInitialized) {
                addedRows.push(row);
              }
              row.initialize();
              if (!initialized) {
                rowHeight = row.getElement().offsetHeight;
                if (rowHeight > this.vDomWindowBuffer) {
                  this.vDomWindowBuffer = rowHeight * 2;
                }
              }
              fillableSpace -= rowHeight;
              paddingAdjust += rowHeight;
              this.vDomTop--;
              index7--;
              i++;
            } else {
              working = false;
            }
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      for (let row of addedRows) {
        row.clearCellHeight();
      }
      this._quickNormalizeRowHeight(addedRows);
      if (paddingAdjust) {
        this.vDomTopPad -= paddingAdjust;
        if (this.vDomTopPad < 0) {
          this.vDomTopPad = index7 * this.vDomRowHeight;
        }
        if (index7 < 1) {
          this.vDomTopPad = 0;
        }
        table.style.paddingTop = this.vDomTopPad + "px";
        this.vDomScrollPosTop -= paddingAdjust;
      }
    }
    _removeTopRow(rows2, fillableSpace) {
      var removableRows = [], paddingAdjust = 0, i = 0, working = true;
      while (working) {
        let row = rows2[this.vDomTop], rowHeight;
        if (row && i < this.vDomMaxRenderChain) {
          rowHeight = row.getHeight() || this.vDomRowHeight;
          if (fillableSpace >= rowHeight) {
            this.vDomTop++;
            fillableSpace -= rowHeight;
            paddingAdjust += rowHeight;
            removableRows.push(row);
            i++;
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      for (let row of removableRows) {
        let rowEl = row.getElement();
        if (rowEl.parentNode) {
          rowEl.parentNode.removeChild(rowEl);
        }
      }
      if (paddingAdjust) {
        this.vDomTopPad += paddingAdjust;
        this.tableElement.style.paddingTop = this.vDomTopPad + "px";
        this.vDomScrollPosTop += this.vDomTop ? paddingAdjust : paddingAdjust + this.vDomWindowBuffer;
      }
    }
    _addBottomRow(rows2, fillableSpace) {
      var table = this.tableElement, addedRows = [], paddingAdjust = 0, index7 = this.vDomBottom + 1, i = 0, working = true;
      while (working) {
        let row = rows2[index7], rowHeight, initialized;
        if (row && i < this.vDomMaxRenderChain) {
          rowHeight = row.getHeight() || this.vDomRowHeight;
          initialized = row.initialized;
          if (fillableSpace >= rowHeight) {
            this.styleRow(row, index7);
            table.appendChild(row.getElement());
            if (!row.initialized || !row.heightInitialized) {
              addedRows.push(row);
            }
            row.initialize();
            if (!initialized) {
              rowHeight = row.getElement().offsetHeight;
              if (rowHeight > this.vDomWindowBuffer) {
                this.vDomWindowBuffer = rowHeight * 2;
              }
            }
            fillableSpace -= rowHeight;
            paddingAdjust += rowHeight;
            this.vDomBottom++;
            index7++;
            i++;
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      for (let row of addedRows) {
        row.clearCellHeight();
      }
      this._quickNormalizeRowHeight(addedRows);
      if (paddingAdjust) {
        this.vDomBottomPad -= paddingAdjust;
        if (this.vDomBottomPad < 0 || index7 == rows2.length - 1) {
          this.vDomBottomPad = 0;
        }
        table.style.paddingBottom = this.vDomBottomPad + "px";
        this.vDomScrollPosBottom += paddingAdjust;
      }
    }
    _removeBottomRow(rows2, fillableSpace) {
      var removableRows = [], paddingAdjust = 0, i = 0, working = true;
      while (working) {
        let row = rows2[this.vDomBottom], rowHeight;
        if (row && i < this.vDomMaxRenderChain) {
          rowHeight = row.getHeight() || this.vDomRowHeight;
          if (fillableSpace >= rowHeight) {
            this.vDomBottom--;
            fillableSpace -= rowHeight;
            paddingAdjust += rowHeight;
            removableRows.push(row);
            i++;
          } else {
            working = false;
          }
        } else {
          working = false;
        }
      }
      for (let row of removableRows) {
        let rowEl = row.getElement();
        if (rowEl.parentNode) {
          rowEl.parentNode.removeChild(rowEl);
        }
      }
      if (paddingAdjust) {
        this.vDomBottomPad += paddingAdjust;
        if (this.vDomBottomPad < 0) {
          this.vDomBottomPad = 0;
        }
        this.tableElement.style.paddingBottom = this.vDomBottomPad + "px";
        this.vDomScrollPosBottom -= paddingAdjust;
      }
    }
    _quickNormalizeRowHeight(rows2) {
      for (let row of rows2) {
        row.calcHeight();
      }
      for (let row of rows2) {
        row.setCellHeight();
      }
    }
  };
  var RowManager = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.element = this.createHolderElement();
      this.tableElement = this.createTableElement();
      this.heightFixer = this.createTableElement();
      this.placeholder = null;
      this.placeholderContents = null;
      this.firstRender = false;
      this.renderMode = "virtual";
      this.fixedHeight = false;
      this.rows = [];
      this.activeRowsPipeline = [];
      this.activeRows = [];
      this.activeRowsCount = 0;
      this.displayRows = [];
      this.displayRowsCount = 0;
      this.scrollTop = 0;
      this.scrollLeft = 0;
      this.redrawBlock = false;
      this.redrawBlockRestoreConfig = false;
      this.redrawBlockRenderInPosition = false;
      this.dataPipeline = [];
      this.displayPipeline = [];
      this.scrollbarWidth = 0;
      this.renderer = null;
    }
    //////////////// Setup Functions /////////////////
    createHolderElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-tableholder");
      el.setAttribute("tabindex", 0);
      return el;
    }
    createTableElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-table");
      el.setAttribute("role", "rowgroup");
      return el;
    }
    initializePlaceholder() {
      var placeholder = this.table.options.placeholder;
      if (typeof placeholder === "function") {
        placeholder = placeholder.call(this.table);
      }
      placeholder = this.chain("placeholder", [placeholder], placeholder, placeholder) || placeholder;
      if (placeholder) {
        let el = document.createElement("div");
        el.classList.add("tabulator-placeholder");
        if (typeof placeholder == "string") {
          let contents = document.createElement("div");
          contents.classList.add("tabulator-placeholder-contents");
          contents.innerHTML = placeholder;
          el.appendChild(contents);
          this.placeholderContents = contents;
        } else if (typeof HTMLElement !== "undefined" && placeholder instanceof HTMLElement) {
          el.appendChild(placeholder);
          this.placeholderContents = placeholder;
        } else {
          console.warn("Invalid placeholder provided, must be string or HTML Element", placeholder);
          this.el = null;
        }
        this.placeholder = el;
      }
    }
    //return containing element
    getElement() {
      return this.element;
    }
    //return table element
    getTableElement() {
      return this.tableElement;
    }
    initialize() {
      this.initializePlaceholder();
      this.initializeRenderer();
      this.element.appendChild(this.tableElement);
      this.firstRender = true;
      this.element.addEventListener("scroll", () => {
        var left = this.element.scrollLeft, leftDir = this.scrollLeft > left, top = this.element.scrollTop, topDir = this.scrollTop > top;
        if (this.scrollLeft != left) {
          this.scrollLeft = left;
          this.dispatch("scroll-horizontal", left, leftDir);
          this.dispatchExternal("scrollHorizontal", left, leftDir);
          this._positionPlaceholder();
        }
        if (this.scrollTop != top) {
          this.scrollTop = top;
          this.renderer.scrollRows(top, topDir);
          this.dispatch("scroll-vertical", top, topDir);
          this.dispatchExternal("scrollVertical", top, topDir);
        }
      });
    }
    ////////////////// Row Manipulation //////////////////
    findRow(subject) {
      if (typeof subject == "object") {
        if (subject instanceof Row) {
          return subject;
        } else if (subject instanceof RowComponent) {
          return subject._getSelf() || false;
        } else if (typeof HTMLElement !== "undefined" && subject instanceof HTMLElement) {
          let match = this.rows.find((row) => {
            return row.getElement() === subject;
          });
          return match || false;
        } else if (subject === null) {
          return false;
        }
      } else if (typeof subject == "undefined") {
        return false;
      } else {
        let match = this.rows.find((row) => {
          return row.data[this.table.options.index] == subject;
        });
        return match || false;
      }
      return false;
    }
    getRowFromDataObject(data) {
      var match = this.rows.find((row) => {
        return row.data === data;
      });
      return match || false;
    }
    getRowFromPosition(position) {
      return this.getDisplayRows().find((row) => {
        return row.type === "row" && row.getPosition() === position && row.isDisplayed();
      });
    }
    scrollToRow(row, position, ifVisible) {
      return this.renderer.scrollToRowPosition(row, position, ifVisible);
    }
    ////////////////// Data Handling //////////////////
    setData(data, renderInPosition, columnsChanged) {
      return new Promise((resolve2, reject) => {
        if (renderInPosition && this.getDisplayRows().length) {
          if (this.table.options.pagination) {
            this._setDataActual(data, true);
          } else {
            this.reRenderInPosition(() => {
              this._setDataActual(data);
            });
          }
        } else {
          if (this.table.options.autoColumns && columnsChanged && this.table.initialized) {
            this.table.columnManager.generateColumnsFromRowData(data);
          }
          this.resetScroll();
          this._setDataActual(data);
        }
        resolve2();
      });
    }
    _setDataActual(data, renderInPosition) {
      this.dispatchExternal("dataProcessing", data);
      this._wipeElements();
      if (Array.isArray(data)) {
        this.dispatch("data-processing", data);
        data.forEach((def2, i) => {
          if (def2 && typeof def2 === "object") {
            var row = new Row(def2, this);
            this.rows.push(row);
          } else {
            console.warn("Data Loading Warning - Invalid row data detected and ignored, expecting object but received:", def2);
          }
        });
        this.refreshActiveData(false, false, renderInPosition);
        this.dispatch("data-processed", data);
        this.dispatchExternal("dataProcessed", data);
      } else {
        console.error("Data Loading Error - Unable to process data due to invalid data type \nExpecting: array \nReceived: ", typeof data, "\nData:     ", data);
      }
    }
    _wipeElements() {
      this.dispatch("rows-wipe");
      this.destroy();
      this.adjustTableSize();
      this.dispatch("rows-wiped");
    }
    destroy() {
      this.rows.forEach((row) => {
        row.wipe();
      });
      this.rows = [];
      this.activeRows = [];
      this.activeRowsPipeline = [];
      this.activeRowsCount = 0;
      this.displayRows = [];
      this.displayRowsCount = 0;
    }
    deleteRow(row, blockRedraw) {
      var allIndex = this.rows.indexOf(row), activeIndex = this.activeRows.indexOf(row);
      if (activeIndex > -1) {
        this.activeRows.splice(activeIndex, 1);
      }
      if (allIndex > -1) {
        this.rows.splice(allIndex, 1);
      }
      this.setActiveRows(this.activeRows);
      this.displayRowIterator((rows2) => {
        var displayIndex = rows2.indexOf(row);
        if (displayIndex > -1) {
          rows2.splice(displayIndex, 1);
        }
      });
      if (!blockRedraw) {
        this.reRenderInPosition();
      }
      this.regenerateRowPositions();
      this.dispatchExternal("rowDeleted", row.getComponent());
      if (!this.displayRowsCount) {
        this.tableEmpty();
      }
      if (this.subscribedExternal("dataChanged")) {
        this.dispatchExternal("dataChanged", this.getData());
      }
    }
    addRow(data, pos, index7, blockRedraw) {
      var row = this.addRowActual(data, pos, index7, blockRedraw);
      return row;
    }
    //add multiple rows
    addRows(data, pos, index7, refreshDisplayOnly) {
      var rows2 = [];
      return new Promise((resolve2, reject) => {
        pos = this.findAddRowPos(pos);
        if (!Array.isArray(data)) {
          data = [data];
        }
        if (typeof index7 == "undefined" && pos || typeof index7 !== "undefined" && !pos) {
          data.reverse();
        }
        data.forEach((item, i) => {
          var row = this.addRow(item, pos, index7, true);
          rows2.push(row);
          this.dispatch("row-added", row, item, pos, index7);
        });
        this.refreshActiveData(refreshDisplayOnly ? "displayPipeline" : false, false, true);
        this.regenerateRowPositions();
        if (this.displayRowsCount) {
          this._clearPlaceholder();
        }
        resolve2(rows2);
      });
    }
    findAddRowPos(pos) {
      if (typeof pos === "undefined") {
        pos = this.table.options.addRowPos;
      }
      if (pos === "pos") {
        pos = true;
      }
      if (pos === "bottom") {
        pos = false;
      }
      return pos;
    }
    addRowActual(data, pos, index7, blockRedraw) {
      var row = data instanceof Row ? data : new Row(data || {}, this), top = this.findAddRowPos(pos), allIndex = -1, activeIndex, chainResult;
      if (!index7) {
        chainResult = this.chain("row-adding-position", [row, top], null, { index: index7, top });
        index7 = chainResult.index;
        top = chainResult.top;
      }
      if (typeof index7 !== "undefined") {
        index7 = this.findRow(index7);
      }
      index7 = this.chain("row-adding-index", [row, index7, top], null, index7);
      if (index7) {
        allIndex = this.rows.indexOf(index7);
      }
      if (index7 && allIndex > -1) {
        activeIndex = this.activeRows.indexOf(index7);
        this.displayRowIterator(function(rows2) {
          var displayIndex = rows2.indexOf(index7);
          if (displayIndex > -1) {
            rows2.splice(top ? displayIndex : displayIndex + 1, 0, row);
          }
        });
        if (activeIndex > -1) {
          this.activeRows.splice(top ? activeIndex : activeIndex + 1, 0, row);
        }
        this.rows.splice(top ? allIndex : allIndex + 1, 0, row);
      } else {
        if (top) {
          this.displayRowIterator(function(rows2) {
            rows2.unshift(row);
          });
          this.activeRows.unshift(row);
          this.rows.unshift(row);
        } else {
          this.displayRowIterator(function(rows2) {
            rows2.push(row);
          });
          this.activeRows.push(row);
          this.rows.push(row);
        }
      }
      this.setActiveRows(this.activeRows);
      this.dispatchExternal("rowAdded", row.getComponent());
      if (this.subscribedExternal("dataChanged")) {
        this.dispatchExternal("dataChanged", this.table.rowManager.getData());
      }
      if (!blockRedraw) {
        this.reRenderInPosition();
      }
      return row;
    }
    moveRow(from, to, after) {
      this.dispatch("row-move", from, to, after);
      this.moveRowActual(from, to, after);
      this.regenerateRowPositions();
      this.dispatch("row-moved", from, to, after);
      this.dispatchExternal("rowMoved", from.getComponent());
    }
    moveRowActual(from, to, after) {
      this.moveRowInArray(this.rows, from, to, after);
      this.moveRowInArray(this.activeRows, from, to, after);
      this.displayRowIterator((rows2) => {
        this.moveRowInArray(rows2, from, to, after);
      });
      this.dispatch("row-moving", from, to, after);
    }
    moveRowInArray(rows2, from, to, after) {
      var fromIndex, toIndex, start, end;
      if (from !== to) {
        fromIndex = rows2.indexOf(from);
        if (fromIndex > -1) {
          rows2.splice(fromIndex, 1);
          toIndex = rows2.indexOf(to);
          if (toIndex > -1) {
            if (after) {
              rows2.splice(toIndex + 1, 0, from);
            } else {
              rows2.splice(toIndex, 0, from);
            }
          } else {
            rows2.splice(fromIndex, 0, from);
          }
        }
        if (rows2 === this.getDisplayRows()) {
          start = fromIndex < toIndex ? fromIndex : toIndex;
          end = toIndex > fromIndex ? toIndex : fromIndex + 1;
          for (let i = start; i <= end; i++) {
            if (rows2[i]) {
              this.styleRow(rows2[i], i);
            }
          }
        }
      }
    }
    clearData() {
      this.setData([]);
    }
    getRowIndex(row) {
      return this.findRowIndex(row, this.rows);
    }
    getDisplayRowIndex(row) {
      var index7 = this.getDisplayRows().indexOf(row);
      return index7 > -1 ? index7 : false;
    }
    nextDisplayRow(row, rowOnly) {
      var index7 = this.getDisplayRowIndex(row), nextRow = false;
      if (index7 !== false && index7 < this.displayRowsCount - 1) {
        nextRow = this.getDisplayRows()[index7 + 1];
      }
      if (nextRow && (!(nextRow instanceof Row) || nextRow.type != "row")) {
        return this.nextDisplayRow(nextRow, rowOnly);
      }
      return nextRow;
    }
    prevDisplayRow(row, rowOnly) {
      var index7 = this.getDisplayRowIndex(row), prevRow = false;
      if (index7) {
        prevRow = this.getDisplayRows()[index7 - 1];
      }
      if (rowOnly && prevRow && (!(prevRow instanceof Row) || prevRow.type != "row")) {
        return this.prevDisplayRow(prevRow, rowOnly);
      }
      return prevRow;
    }
    findRowIndex(row, list2) {
      var rowIndex;
      row = this.findRow(row);
      if (row) {
        rowIndex = list2.indexOf(row);
        if (rowIndex > -1) {
          return rowIndex;
        }
      }
      return false;
    }
    getData(active, transform) {
      var output = [], rows2 = this.getRows(active);
      rows2.forEach(function(row) {
        if (row.type == "row") {
          output.push(row.getData(transform || "data"));
        }
      });
      return output;
    }
    getComponents(active) {
      var output = [], rows2 = this.getRows(active);
      rows2.forEach(function(row) {
        output.push(row.getComponent());
      });
      return output;
    }
    getDataCount(active) {
      var rows2 = this.getRows(active);
      return rows2.length;
    }
    scrollHorizontal(left) {
      this.scrollLeft = left;
      this.element.scrollLeft = left;
      this.dispatch("scroll-horizontal", left);
    }
    registerDataPipelineHandler(handler, priority) {
      if (typeof priority !== "undefined") {
        this.dataPipeline.push({ handler, priority });
        this.dataPipeline.sort((a, b) => {
          return a.priority - b.priority;
        });
      } else {
        console.error("Data pipeline handlers must have a priority in order to be registered");
      }
    }
    registerDisplayPipelineHandler(handler, priority) {
      if (typeof priority !== "undefined") {
        this.displayPipeline.push({ handler, priority });
        this.displayPipeline.sort((a, b) => {
          return a.priority - b.priority;
        });
      } else {
        console.error("Display pipeline handlers must have a priority in order to be registered");
      }
    }
    //set active data set
    refreshActiveData(handler, skipStage, renderInPosition) {
      var table = this.table, stage = "", index7 = 0, cascadeOrder = ["all", "dataPipeline", "display", "displayPipeline", "end"];
      if (!this.table.destroyed) {
        if (typeof handler === "function") {
          index7 = this.dataPipeline.findIndex((item) => {
            return item.handler === handler;
          });
          if (index7 > -1) {
            stage = "dataPipeline";
            if (skipStage) {
              if (index7 == this.dataPipeline.length - 1) {
                stage = "display";
              } else {
                index7++;
              }
            }
          } else {
            index7 = this.displayPipeline.findIndex((item) => {
              return item.handler === handler;
            });
            if (index7 > -1) {
              stage = "displayPipeline";
              if (skipStage) {
                if (index7 == this.displayPipeline.length - 1) {
                  stage = "end";
                } else {
                  index7++;
                }
              }
            } else {
              console.error("Unable to refresh data, invalid handler provided", handler);
              return;
            }
          }
        } else {
          stage = handler || "all";
          index7 = 0;
        }
        if (this.redrawBlock) {
          if (!this.redrawBlockRestoreConfig || this.redrawBlockRestoreConfig && (this.redrawBlockRestoreConfig.stage === stage && index7 < this.redrawBlockRestoreConfig.index || cascadeOrder.indexOf(stage) < cascadeOrder.indexOf(this.redrawBlockRestoreConfig.stage))) {
            this.redrawBlockRestoreConfig = {
              handler,
              skipStage,
              renderInPosition,
              stage,
              index: index7
            };
          }
          return;
        } else {
          if (Helpers.elVisible(this.element)) {
            if (renderInPosition) {
              this.reRenderInPosition(this.refreshPipelines.bind(this, handler, stage, index7, renderInPosition));
            } else {
              this.refreshPipelines(handler, stage, index7, renderInPosition);
              if (!handler) {
                this.table.columnManager.renderer.renderColumns();
              }
              this.renderTable();
              if (table.options.layoutColumnsOnNewData) {
                this.table.columnManager.redraw(true);
              }
            }
          } else {
            this.refreshPipelines(handler, stage, index7, renderInPosition);
          }
          this.dispatch("data-refreshed");
        }
      }
    }
    refreshPipelines(handler, stage, index7, renderInPosition) {
      this.dispatch("data-refreshing");
      if (!handler || !this.activeRowsPipeline[0]) {
        this.activeRowsPipeline[0] = this.rows.slice(0);
      }
      switch (stage) {
        case "all":
        case "dataPipeline":
          for (let i = index7; i < this.dataPipeline.length; i++) {
            let result = this.dataPipeline[i].handler(this.activeRowsPipeline[i].slice(0));
            this.activeRowsPipeline[i + 1] = result || this.activeRowsPipeline[i].slice(0);
          }
          this.setActiveRows(this.activeRowsPipeline[this.dataPipeline.length]);
        case "display":
          index7 = 0;
          this.resetDisplayRows();
        case "displayPipeline":
          for (let i = index7; i < this.displayPipeline.length; i++) {
            let result = this.displayPipeline[i].handler((i ? this.getDisplayRows(i - 1) : this.activeRows).slice(0), renderInPosition);
            this.setDisplayRows(result || this.getDisplayRows(i - 1).slice(0), i);
          }
        case "end":
          this.regenerateRowPositions();
      }
      if (this.getDisplayRows().length) {
        this._clearPlaceholder();
      }
    }
    //regenerate row positions
    regenerateRowPositions() {
      var rows2 = this.getDisplayRows();
      var index7 = 1;
      rows2.forEach((row) => {
        if (row.type === "row") {
          row.setPosition(index7);
          index7++;
        }
      });
    }
    setActiveRows(activeRows) {
      this.activeRows = this.activeRows = Object.assign([], activeRows);
      this.activeRowsCount = this.activeRows.length;
    }
    //reset display rows array
    resetDisplayRows() {
      this.displayRows = [];
      this.displayRows.push(this.activeRows.slice(0));
      this.displayRowsCount = this.displayRows[0].length;
    }
    //set display row pipeline data
    setDisplayRows(displayRows, index7) {
      this.displayRows[index7] = displayRows;
      if (index7 == this.displayRows.length - 1) {
        this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;
      }
    }
    getDisplayRows(index7) {
      if (typeof index7 == "undefined") {
        return this.displayRows.length ? this.displayRows[this.displayRows.length - 1] : [];
      } else {
        return this.displayRows[index7] || [];
      }
    }
    getVisibleRows(chain, viewable) {
      var rows2 = Object.assign([], this.renderer.visibleRows(!viewable));
      if (chain) {
        rows2 = this.chain("rows-visible", [viewable], rows2, rows2);
      }
      return rows2;
    }
    //repeat action across display rows
    displayRowIterator(callback) {
      this.activeRowsPipeline.forEach(callback);
      this.displayRows.forEach(callback);
      this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;
    }
    //return only actual rows (not group headers etc)
    getRows(type) {
      var rows2 = [];
      switch (type) {
        case "active":
          rows2 = this.activeRows;
          break;
        case "display":
          rows2 = this.table.rowManager.getDisplayRows();
          break;
        case "visible":
          rows2 = this.getVisibleRows(false, true);
          break;
        default:
          rows2 = this.chain("rows-retrieve", type, null, this.rows) || this.rows;
      }
      return rows2;
    }
    ///////////////// Table Rendering /////////////////
    //trigger rerender of table in current position
    reRenderInPosition(callback) {
      if (this.redrawBlock) {
        if (callback) {
          callback();
        } else {
          this.redrawBlockRenderInPosition = true;
        }
      } else {
        this.dispatchExternal("renderStarted");
        this.renderer.rerenderRows(callback);
        if (!this.fixedHeight) {
          this.adjustTableSize();
        }
        this.scrollBarCheck();
        this.dispatchExternal("renderComplete");
      }
    }
    scrollBarCheck() {
      var scrollbarWidth = 0;
      if (this.element.scrollHeight > this.element.clientHeight) {
        scrollbarWidth = this.element.offsetWidth - this.element.clientWidth;
      }
      if (scrollbarWidth !== this.scrollbarWidth) {
        this.scrollbarWidth = scrollbarWidth;
        this.dispatch("scrollbar-vertical", scrollbarWidth);
      }
    }
    initializeRenderer() {
      var renderClass;
      var renderers = {
        "virtual": VirtualDomVertical,
        "basic": BasicVertical
      };
      if (typeof this.table.options.renderVertical === "string") {
        renderClass = renderers[this.table.options.renderVertical];
      } else {
        renderClass = this.table.options.renderVertical;
      }
      if (renderClass) {
        this.renderMode = this.table.options.renderVertical;
        this.renderer = new renderClass(this.table, this.element, this.tableElement);
        this.renderer.initialize();
        if ((this.table.element.clientHeight || this.table.options.height) && !(this.table.options.minHeight && this.table.options.maxHeight)) {
          this.fixedHeight = true;
        } else {
          this.fixedHeight = false;
        }
      } else {
        console.error("Unable to find matching renderer:", this.table.options.renderVertical);
      }
    }
    getRenderMode() {
      return this.renderMode;
    }
    renderTable() {
      this.dispatchExternal("renderStarted");
      this.element.scrollTop = 0;
      this._clearTable();
      if (this.displayRowsCount) {
        this.renderer.renderRows();
        if (this.firstRender) {
          this.firstRender = false;
          if (!this.fixedHeight) {
            this.adjustTableSize();
          }
          this.layoutRefresh(true);
        }
      } else {
        this.renderEmptyScroll();
      }
      if (!this.fixedHeight) {
        this.adjustTableSize();
      }
      this.dispatch("table-layout");
      if (!this.displayRowsCount) {
        this._showPlaceholder();
      }
      this.scrollBarCheck();
      this.dispatchExternal("renderComplete");
    }
    //show scrollbars on empty table div
    renderEmptyScroll() {
      if (this.placeholder) {
        this.tableElement.style.display = "none";
      } else {
        this.tableElement.style.minWidth = this.table.columnManager.getWidth() + "px";
      }
    }
    _clearTable() {
      this._clearPlaceholder();
      this.scrollTop = 0;
      this.scrollLeft = 0;
      this.renderer.clearRows();
    }
    tableEmpty() {
      this.renderEmptyScroll();
      this._showPlaceholder();
    }
    checkPlaceholder() {
      if (this.displayRowsCount) {
        this._clearPlaceholder();
      } else {
        this.tableEmpty();
      }
    }
    _showPlaceholder() {
      if (this.placeholder) {
        if (this.placeholder && this.placeholder.parentNode) {
          this.placeholder.parentNode.removeChild(this.placeholder);
        }
        this.initializePlaceholder();
        this.placeholder.setAttribute("tabulator-render-mode", this.renderMode);
        this.getElement().appendChild(this.placeholder);
        this._positionPlaceholder();
        this.adjustTableSize();
      }
    }
    _clearPlaceholder() {
      if (this.placeholder && this.placeholder.parentNode) {
        this.placeholder.parentNode.removeChild(this.placeholder);
      }
      this.tableElement.style.minWidth = "";
      this.tableElement.style.display = "";
    }
    _positionPlaceholder() {
      if (this.placeholder && this.placeholder.parentNode) {
        this.placeholder.style.width = this.table.columnManager.getWidth() + "px";
        this.placeholderContents.style.width = this.table.rowManager.element.clientWidth + "px";
        this.placeholderContents.style.marginLeft = this.scrollLeft + "px";
      }
    }
    styleRow(row, index7) {
      var rowEl = row.getElement();
      if (index7 % 2) {
        rowEl.classList.add("tabulator-row-even");
        rowEl.classList.remove("tabulator-row-odd");
      } else {
        rowEl.classList.add("tabulator-row-odd");
        rowEl.classList.remove("tabulator-row-even");
      }
    }
    //normalize height of active rows
    normalizeHeight(force) {
      this.activeRows.forEach(function(row) {
        row.normalizeHeight(force);
      });
    }
    //adjust the height of the table holder to fit in the Tabulator element
    adjustTableSize() {
      let initialHeight = this.element.clientHeight, minHeight;
      let resized = false;
      if (this.renderer.verticalFillMode === "fill") {
        let otherHeight = Math.floor(this.table.columnManager.getElement().getBoundingClientRect().height + (this.table.footerManager && this.table.footerManager.active && !this.table.footerManager.external ? this.table.footerManager.getElement().getBoundingClientRect().height : 0));
        if (this.fixedHeight) {
          minHeight = isNaN(this.table.options.minHeight) ? this.table.options.minHeight : this.table.options.minHeight + "px";
          const height = "calc(100% - " + otherHeight + "px)";
          this.element.style.minHeight = minHeight || "calc(100% - " + otherHeight + "px)";
          this.element.style.height = height;
          this.element.style.maxHeight = height;
        } else {
          this.element.style.height = "";
          this.element.style.height = this.table.element.clientHeight - otherHeight + "px";
          this.element.scrollTop = this.scrollTop;
        }
        this.renderer.resize();
        if (!this.fixedHeight && initialHeight != this.element.clientHeight) {
          resized = true;
          if (this.subscribed("table-resize")) {
            this.dispatch("table-resize");
          } else {
            this.redraw();
          }
        }
        this.scrollBarCheck();
      }
      this._positionPlaceholder();
      return resized;
    }
    //reinitialize all rows
    reinitialize() {
      this.rows.forEach(function(row) {
        row.reinitialize(true);
      });
    }
    //prevent table from being redrawn
    blockRedraw() {
      this.redrawBlock = true;
      this.redrawBlockRestoreConfig = false;
    }
    //restore table redrawing
    restoreRedraw() {
      this.redrawBlock = false;
      if (this.redrawBlockRestoreConfig) {
        this.refreshActiveData(this.redrawBlockRestoreConfig.handler, this.redrawBlockRestoreConfig.skipStage, this.redrawBlockRestoreConfig.renderInPosition);
        this.redrawBlockRestoreConfig = false;
      } else {
        if (this.redrawBlockRenderInPosition) {
          this.reRenderInPosition();
        }
      }
      this.redrawBlockRenderInPosition = false;
    }
    //redraw table
    redraw(force) {
      this.adjustTableSize();
      this.table.tableWidth = this.table.element.clientWidth;
      if (!force) {
        this.reRenderInPosition();
        this.scrollHorizontal(this.scrollLeft);
      } else {
        this.renderTable();
      }
    }
    resetScroll() {
      this.element.scrollLeft = 0;
      this.element.scrollTop = 0;
      if (this.table.browser === "ie") {
        var event = document.createEvent("Event");
        event.initEvent("scroll", false, true);
        this.element.dispatchEvent(event);
      } else {
        this.element.dispatchEvent(new Event("scroll"));
      }
    }
  };
  var FooterManager = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.active = false;
      this.element = this.createElement();
      this.containerElement = this.createContainerElement();
      this.external = false;
    }
    initialize() {
      this.initializeElement();
    }
    createElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-footer");
      return el;
    }
    createContainerElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-footer-contents");
      this.element.appendChild(el);
      return el;
    }
    initializeElement() {
      if (this.table.options.footerElement) {
        switch (typeof this.table.options.footerElement) {
          case "string":
            if (this.table.options.footerElement[0] === "<") {
              this.containerElement.innerHTML = this.table.options.footerElement;
            } else {
              this.external = true;
              this.containerElement = document.querySelector(this.table.options.footerElement);
            }
            break;
          default:
            this.element = this.table.options.footerElement;
            break;
        }
      }
    }
    getElement() {
      return this.element;
    }
    append(element) {
      this.activate();
      this.containerElement.appendChild(element);
      this.table.rowManager.adjustTableSize();
    }
    prepend(element) {
      this.activate();
      this.element.insertBefore(element, this.element.firstChild);
      this.table.rowManager.adjustTableSize();
    }
    remove(element) {
      element.parentNode.removeChild(element);
      this.deactivate();
    }
    deactivate(force) {
      if (!this.element.firstChild || force) {
        if (!this.external) {
          this.element.parentNode.removeChild(this.element);
        }
        this.active = false;
      }
    }
    activate() {
      if (!this.active) {
        this.active = true;
        if (!this.external) {
          this.table.element.appendChild(this.getElement());
          this.table.element.style.display = "";
        }
      }
    }
    redraw() {
      this.dispatch("footer-redraw");
    }
  };
  var InteractionManager = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.el = null;
      this.abortClasses = ["tabulator-headers", "tabulator-table"];
      this.previousTargets = {};
      this.listeners = [
        "click",
        "dblclick",
        "contextmenu",
        "mouseenter",
        "mouseleave",
        "mouseover",
        "mouseout",
        "mousemove",
        "mouseup",
        "mousedown",
        "touchstart",
        "touchend"
      ];
      this.componentMap = {
        "tabulator-cell": "cell",
        "tabulator-row": "row",
        "tabulator-group": "group",
        "tabulator-col": "column"
      };
      this.pseudoTrackers = {
        "row": {
          subscriber: null,
          target: null
        },
        "cell": {
          subscriber: null,
          target: null
        },
        "group": {
          subscriber: null,
          target: null
        },
        "column": {
          subscriber: null,
          target: null
        }
      };
      this.pseudoTracking = false;
    }
    initialize() {
      this.el = this.table.element;
      this.buildListenerMap();
      this.bindSubscriptionWatchers();
    }
    buildListenerMap() {
      var listenerMap = {};
      this.listeners.forEach((listener) => {
        listenerMap[listener] = {
          handler: null,
          components: []
        };
      });
      this.listeners = listenerMap;
    }
    bindPseudoEvents() {
      Object.keys(this.pseudoTrackers).forEach((key) => {
        this.pseudoTrackers[key].subscriber = this.pseudoMouseEnter.bind(this, key);
        this.subscribe(key + "-mouseover", this.pseudoTrackers[key].subscriber);
      });
      this.pseudoTracking = true;
    }
    pseudoMouseEnter(key, e, target) {
      if (this.pseudoTrackers[key].target !== target) {
        if (this.pseudoTrackers[key].target) {
          this.dispatch(key + "-mouseleave", e, this.pseudoTrackers[key].target);
        }
        this.pseudoMouseLeave(key, e);
        this.pseudoTrackers[key].target = target;
        this.dispatch(key + "-mouseenter", e, target);
      }
    }
    pseudoMouseLeave(key, e) {
      var leaveList = Object.keys(this.pseudoTrackers), linkedKeys = {
        "row": ["cell"],
        "cell": ["row"]
      };
      leaveList = leaveList.filter((item) => {
        var links = linkedKeys[key];
        return item !== key && (!links || links && !links.includes(item));
      });
      leaveList.forEach((key2) => {
        var target = this.pseudoTrackers[key2].target;
        if (this.pseudoTrackers[key2].target) {
          this.dispatch(key2 + "-mouseleave", e, target);
          this.pseudoTrackers[key2].target = null;
        }
      });
    }
    bindSubscriptionWatchers() {
      var listeners = Object.keys(this.listeners), components = Object.values(this.componentMap);
      for (let comp of components) {
        for (let listener of listeners) {
          let key = comp + "-" + listener;
          this.subscriptionChange(key, this.subscriptionChanged.bind(this, comp, listener));
        }
      }
      this.subscribe("table-destroy", this.clearWatchers.bind(this));
    }
    subscriptionChanged(component, key, added) {
      var listener = this.listeners[key].components, index7 = listener.indexOf(component), changed = false;
      if (added) {
        if (index7 === -1) {
          listener.push(component);
          changed = true;
        }
      } else {
        if (!this.subscribed(component + "-" + key)) {
          if (index7 > -1) {
            listener.splice(index7, 1);
            changed = true;
          }
        }
      }
      if ((key === "mouseenter" || key === "mouseleave") && !this.pseudoTracking) {
        this.bindPseudoEvents();
      }
      if (changed) {
        this.updateEventListeners();
      }
    }
    updateEventListeners() {
      for (let key in this.listeners) {
        let listener = this.listeners[key];
        if (listener.components.length) {
          if (!listener.handler) {
            listener.handler = this.track.bind(this, key);
            this.el.addEventListener(key, listener.handler);
          }
        } else {
          if (listener.handler) {
            this.el.removeEventListener(key, listener.handler);
            listener.handler = null;
          }
        }
      }
    }
    track(type, e) {
      var path = e.composedPath && e.composedPath() || e.path;
      var targets = this.findTargets(path);
      targets = this.bindComponents(type, targets);
      this.triggerEvents(type, e, targets);
      if (this.pseudoTracking && (type == "mouseover" || type == "mouseleave") && !Object.keys(targets).length) {
        this.pseudoMouseLeave("none", e);
      }
    }
    findTargets(path) {
      var targets = {};
      let componentMap = Object.keys(this.componentMap);
      for (let el of path) {
        let classList = el.classList ? [...el.classList] : [];
        let abort = classList.filter((item) => {
          return this.abortClasses.includes(item);
        });
        if (abort.length) {
          break;
        }
        let elTargets = classList.filter((item) => {
          return componentMap.includes(item);
        });
        for (let target of elTargets) {
          if (!targets[this.componentMap[target]]) {
            targets[this.componentMap[target]] = el;
          }
        }
      }
      if (targets.group && targets.group === targets.row) {
        delete targets.row;
      }
      return targets;
    }
    bindComponents(type, targets) {
      var keys = Object.keys(targets).reverse(), listener = this.listeners[type], matches2 = {}, targetMatches = {};
      for (let key of keys) {
        let component, target = targets[key], previousTarget = this.previousTargets[key];
        if (previousTarget && previousTarget.target === target) {
          component = previousTarget.component;
        } else {
          switch (key) {
            case "row":
            case "group":
              if (listener.components.includes("row") || listener.components.includes("cell") || listener.components.includes("group")) {
                let rows2 = this.table.rowManager.getVisibleRows(true);
                component = rows2.find((row) => {
                  return row.getElement() === target;
                });
                if (targets["row"] && targets["row"].parentNode && targets["row"].parentNode.closest(".tabulator-row")) {
                  targets[key] = false;
                }
              }
              break;
            case "column":
              if (listener.components.includes("column")) {
                component = this.table.columnManager.findColumn(target);
              }
              break;
            case "cell":
              if (listener.components.includes("cell")) {
                if (matches2["row"] instanceof Row) {
                  component = matches2["row"].findCell(target);
                } else {
                  if (targets["row"]) {
                    console.warn("Event Target Lookup Error - The row this cell is attached to cannot be found, has the table been reinitialized without being destroyed first?");
                  }
                }
              }
              break;
          }
        }
        if (component) {
          matches2[key] = component;
          targetMatches[key] = {
            target,
            component
          };
        }
      }
      this.previousTargets = targetMatches;
      return matches2;
    }
    triggerEvents(type, e, targets) {
      var listener = this.listeners[type];
      for (let key in targets) {
        if (targets[key] && listener.components.includes(key)) {
          this.dispatch(key + "-" + type, e, targets[key]);
        }
      }
    }
    clearWatchers() {
      for (let key in this.listeners) {
        let listener = this.listeners[key];
        if (listener.handler) {
          this.el.removeEventListener(key, listener.handler);
          listener.handler = null;
        }
      }
    }
  };
  var ComponentFunctionBinder = class {
    constructor(table) {
      this.table = table;
      this.bindings = {};
    }
    bind(type, funcName, handler) {
      if (!this.bindings[type]) {
        this.bindings[type] = {};
      }
      if (this.bindings[type][funcName]) {
        console.warn("Unable to bind component handler, a matching function name is already bound", type, funcName, handler);
      } else {
        this.bindings[type][funcName] = handler;
      }
    }
    handle(type, component, name) {
      if (this.bindings[type] && this.bindings[type][name] && typeof this.bindings[type][name].bind === "function") {
        return this.bindings[type][name].bind(null, component);
      } else {
        if (name !== "then" && typeof name === "string" && !name.startsWith("_")) {
          if (this.table.options.debugInvalidComponentFuncs) {
            console.error("The " + type + " component does not have a " + name + " function, have you checked that you have the correct Tabulator module installed?");
          }
        }
      }
    }
  };
  var DataLoader = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.requestOrder = 0;
      this.loading = false;
    }
    initialize() {
    }
    load(data, params, config, replace, silent, columnsChanged) {
      var requestNo = ++this.requestOrder;
      if (this.table.destroyed) {
        return Promise.resolve();
      }
      this.dispatchExternal("dataLoading", data);
      if (data && (data.indexOf("{") == 0 || data.indexOf("[") == 0)) {
        data = JSON.parse(data);
      }
      if (this.confirm("data-loading", [data, params, config, silent])) {
        this.loading = true;
        if (!silent) {
          this.alertLoader();
        }
        params = this.chain("data-params", [data, config, silent], params || {}, params || {});
        params = this.mapParams(params, this.table.options.dataSendParams);
        var result = this.chain("data-load", [data, params, config, silent], false, Promise.resolve([]));
        return result.then((response) => {
          if (!this.table.destroyed) {
            if (!Array.isArray(response) && typeof response == "object") {
              response = this.mapParams(response, this.objectInvert(this.table.options.dataReceiveParams));
            }
            var rowData = this.chain("data-loaded", [response], null, response);
            if (requestNo == this.requestOrder) {
              this.clearAlert();
              if (rowData !== false) {
                this.dispatchExternal("dataLoaded", rowData);
                this.table.rowManager.setData(rowData, replace, typeof columnsChanged === "undefined" ? !replace : columnsChanged);
              }
            } else {
              console.warn("Data Load Response Blocked - An active data load request was blocked by an attempt to change table data while the request was being made");
            }
          } else {
            console.warn("Data Load Response Blocked - Table has been destroyed");
          }
        }).catch((error) => {
          console.error("Data Load Error: ", error);
          this.dispatchExternal("dataLoadError", error);
          if (!silent) {
            this.alertError();
          }
          setTimeout(() => {
            this.clearAlert();
          }, this.table.options.dataLoaderErrorTimeout);
        }).finally(() => {
          this.loading = false;
        });
      } else {
        this.dispatchExternal("dataLoaded", data);
        if (!data) {
          data = [];
        }
        this.table.rowManager.setData(data, replace, typeof columnsChanged === "undefined" ? !replace : columnsChanged);
        return Promise.resolve();
      }
    }
    mapParams(params, map2) {
      var output = {};
      for (let key in params) {
        output[map2.hasOwnProperty(key) ? map2[key] : key] = params[key];
      }
      return output;
    }
    objectInvert(obj) {
      var output = {};
      for (let key in obj) {
        output[obj[key]] = key;
      }
      return output;
    }
    blockActiveLoad() {
      this.requestOrder++;
    }
    alertLoader() {
      var shouldLoad = typeof this.table.options.dataLoader === "function" ? this.table.options.dataLoader() : this.table.options.dataLoader;
      if (shouldLoad) {
        this.table.alertManager.alert(this.table.options.dataLoaderLoading || this.langText("data|loading"));
      }
    }
    alertError() {
      this.table.alertManager.alert(this.table.options.dataLoaderError || this.langText("data|error"), "error");
    }
    clearAlert() {
      this.table.alertManager.clear();
    }
  };
  var ExternalEventBus = class {
    constructor(table, optionsList, debug) {
      this.table = table;
      this.events = {};
      this.optionsList = optionsList || {};
      this.subscriptionNotifiers = {};
      this.dispatch = debug ? this._debugDispatch.bind(this) : this._dispatch.bind(this);
      this.debug = debug;
    }
    subscriptionChange(key, callback) {
      if (!this.subscriptionNotifiers[key]) {
        this.subscriptionNotifiers[key] = [];
      }
      this.subscriptionNotifiers[key].push(callback);
      if (this.subscribed(key)) {
        this._notifySubscriptionChange(key, true);
      }
    }
    subscribe(key, callback) {
      if (!this.events[key]) {
        this.events[key] = [];
      }
      this.events[key].push(callback);
      this._notifySubscriptionChange(key, true);
    }
    unsubscribe(key, callback) {
      var index7;
      if (this.events[key]) {
        if (callback) {
          index7 = this.events[key].findIndex((item) => {
            return item === callback;
          });
          if (index7 > -1) {
            this.events[key].splice(index7, 1);
          } else {
            console.warn("Cannot remove event, no matching event found:", key, callback);
            return;
          }
        } else {
          delete this.events[key];
        }
      } else {
        console.warn("Cannot remove event, no events set on:", key);
        return;
      }
      this._notifySubscriptionChange(key, false);
    }
    subscribed(key) {
      return this.events[key] && this.events[key].length;
    }
    _notifySubscriptionChange(key, subscribed) {
      var notifiers = this.subscriptionNotifiers[key];
      if (notifiers) {
        notifiers.forEach((callback) => {
          callback(subscribed);
        });
      }
    }
    _dispatch() {
      var args = Array.from(arguments), key = args.shift(), result;
      if (this.events[key]) {
        this.events[key].forEach((callback, i) => {
          let callResult = callback.apply(this.table, args);
          if (!i) {
            result = callResult;
          }
        });
      }
      return result;
    }
    _debugDispatch() {
      var args = Array.from(arguments), key = args[0];
      args[0] = "ExternalEvent:" + args[0];
      if (this.debug === true || this.debug.includes(key)) {
        console.log(...args);
      }
      return this._dispatch(...arguments);
    }
  };
  var InternalEventBus = class {
    constructor(debug) {
      this.events = {};
      this.subscriptionNotifiers = {};
      this.dispatch = debug ? this._debugDispatch.bind(this) : this._dispatch.bind(this);
      this.chain = debug ? this._debugChain.bind(this) : this._chain.bind(this);
      this.confirm = debug ? this._debugConfirm.bind(this) : this._confirm.bind(this);
      this.debug = debug;
    }
    subscriptionChange(key, callback) {
      if (!this.subscriptionNotifiers[key]) {
        this.subscriptionNotifiers[key] = [];
      }
      this.subscriptionNotifiers[key].push(callback);
      if (this.subscribed(key)) {
        this._notifySubscriptionChange(key, true);
      }
    }
    subscribe(key, callback, priority = 1e4) {
      if (!this.events[key]) {
        this.events[key] = [];
      }
      this.events[key].push({ callback, priority });
      this.events[key].sort((a, b) => {
        return a.priority - b.priority;
      });
      this._notifySubscriptionChange(key, true);
    }
    unsubscribe(key, callback) {
      var index7;
      if (this.events[key]) {
        if (callback) {
          index7 = this.events[key].findIndex((item) => {
            return item.callback === callback;
          });
          if (index7 > -1) {
            this.events[key].splice(index7, 1);
          } else {
            console.warn("Cannot remove event, no matching event found:", key, callback);
            return;
          }
        }
      } else {
        console.warn("Cannot remove event, no events set on:", key);
        return;
      }
      this._notifySubscriptionChange(key, false);
    }
    subscribed(key) {
      return this.events[key] && this.events[key].length;
    }
    _chain(key, args, initialValue, fallback) {
      var value = initialValue;
      if (!Array.isArray(args)) {
        args = [args];
      }
      if (this.subscribed(key)) {
        this.events[key].forEach((subscriber, i) => {
          value = subscriber.callback.apply(this, args.concat([value]));
        });
        return value;
      } else {
        return typeof fallback === "function" ? fallback() : fallback;
      }
    }
    _confirm(key, args) {
      var confirmed = false;
      if (!Array.isArray(args)) {
        args = [args];
      }
      if (this.subscribed(key)) {
        this.events[key].forEach((subscriber, i) => {
          if (subscriber.callback.apply(this, args)) {
            confirmed = true;
          }
        });
      }
      return confirmed;
    }
    _notifySubscriptionChange(key, subscribed) {
      var notifiers = this.subscriptionNotifiers[key];
      if (notifiers) {
        notifiers.forEach((callback) => {
          callback(subscribed);
        });
      }
    }
    _dispatch() {
      var args = Array.from(arguments), key = args.shift();
      if (this.events[key]) {
        this.events[key].forEach((subscriber) => {
          subscriber.callback.apply(this, args);
        });
      }
    }
    _debugDispatch() {
      var args = Array.from(arguments), key = args[0];
      args[0] = "InternalEvent:" + key;
      if (this.debug === true || this.debug.includes(key)) {
        console.log(...args);
      }
      return this._dispatch(...arguments);
    }
    _debugChain() {
      var args = Array.from(arguments), key = args[0];
      args[0] = "InternalEvent:" + key;
      if (this.debug === true || this.debug.includes(key)) {
        console.log(...args);
      }
      return this._chain(...arguments);
    }
    _debugConfirm() {
      var args = Array.from(arguments), key = args[0];
      args[0] = "InternalEvent:" + key;
      if (this.debug === true || this.debug.includes(key)) {
        console.log(...args);
      }
      return this._confirm(...arguments);
    }
  };
  var DeprecationAdvisor = class extends CoreFeature {
    constructor(table) {
      super(table);
    }
    _warnUser() {
      if (this.options("debugDeprecation")) {
        console.warn(...arguments);
      }
    }
    check(oldOption, newOption, convert) {
      var msg = "";
      if (typeof this.options(oldOption) !== "undefined") {
        msg = "Deprecated Setup Option - Use of the %c" + oldOption + "%c option is now deprecated";
        if (newOption) {
          msg = msg + ", Please use the %c" + newOption + "%c option instead";
          this._warnUser(msg, "font-weight: bold;", "font-weight: normal;", "font-weight: bold;", "font-weight: normal;");
          if (convert) {
            this.table.options[newOption] = this.table.options[oldOption];
          }
        } else {
          this._warnUser(msg, "font-weight: bold;", "font-weight: normal;");
        }
        return false;
      } else {
        return true;
      }
    }
    checkMsg(oldOption, msg) {
      if (typeof this.options(oldOption) !== "undefined") {
        this._warnUser("%cDeprecated Setup Option - Use of the %c" + oldOption + " %c option is now deprecated, " + msg, "font-weight: normal;", "font-weight: bold;", "font-weight: normal;");
        return false;
      } else {
        return true;
      }
    }
    msg(msg) {
      this._warnUser(msg);
    }
  };
  var DependencyRegistry = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.deps = {};
      this.props = {};
    }
    initialize() {
      this.deps = Object.assign({}, this.options("dependencies"));
    }
    lookup(key, prop, silent) {
      if (Array.isArray(key)) {
        for (const item of key) {
          var match = this.lookup(item, prop, true);
          if (match) {
            break;
          }
        }
        if (match) {
          return match;
        } else {
          this.error(key);
        }
      } else {
        if (prop) {
          return this.lookupProp(key, prop, silent);
        } else {
          return this.lookupKey(key, silent);
        }
      }
    }
    lookupProp(key, prop, silent) {
      var dependency;
      if (this.props[key] && this.props[key][prop]) {
        return this.props[key][prop];
      } else {
        dependency = this.lookupKey(key, silent);
        if (dependency) {
          if (!this.props[key]) {
            this.props[key] = {};
          }
          this.props[key][prop] = dependency[prop] || dependency;
          return this.props[key][prop];
        }
      }
    }
    lookupKey(key, silent) {
      var dependency;
      if (this.deps[key]) {
        dependency = this.deps[key];
      } else if (window[key]) {
        this.deps[key] = window[key];
        dependency = this.deps[key];
      } else {
        if (!silent) {
          this.error(key);
        }
      }
      return dependency;
    }
    error(key) {
      console.error("Unable to find dependency", key, "Please check documentation and ensure you have imported the required library into your project");
    }
  };
  function fitData(columns, forced) {
    if (forced) {
      this.table.columnManager.renderer.reinitializeColumnWidths(columns);
    }
    if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
      this.table.modules.responsiveLayout.update();
    }
  }
  function fitDataGeneral(columns, forced) {
    columns.forEach(function(column) {
      column.reinitializeWidth();
    });
    if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
      this.table.modules.responsiveLayout.update();
    }
  }
  function fitDataStretch(columns, forced) {
    var colsWidth = 0, tableWidth = this.table.rowManager.element.clientWidth, gap = 0, lastCol = false;
    columns.forEach((column, i) => {
      if (!column.widthFixed) {
        column.reinitializeWidth();
      }
      if (this.table.options.responsiveLayout ? column.modules.responsive.visible : column.visible) {
        lastCol = column;
      }
      if (column.visible) {
        colsWidth += column.getWidth();
      }
    });
    if (lastCol) {
      gap = tableWidth - colsWidth + lastCol.getWidth();
      if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
        lastCol.setWidth(0);
        this.table.modules.responsiveLayout.update();
      }
      if (gap > 0) {
        lastCol.setWidth(gap);
      } else {
        lastCol.reinitializeWidth();
      }
    } else {
      if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
        this.table.modules.responsiveLayout.update();
      }
    }
  }
  function fitColumns(columns, forced) {
    var totalWidth = this.table.rowManager.element.getBoundingClientRect().width;
    var fixedWidth = 0;
    var flexWidth = 0;
    var flexGrowUnits = 0;
    var flexColWidth = 0;
    var flexColumns = [];
    var fixedShrinkColumns = [];
    var flexShrinkUnits = 0;
    var overflowWidth = 0;
    var gapFill = 0;
    function calcWidth(width) {
      var colWidth;
      if (typeof width == "string") {
        if (width.indexOf("%") > -1) {
          colWidth = totalWidth / 100 * parseInt(width);
        } else {
          colWidth = parseInt(width);
        }
      } else {
        colWidth = width;
      }
      return colWidth;
    }
    function scaleColumns(columns2, freeSpace, colWidth, shrinkCols) {
      var oversizeCols = [], oversizeSpace = 0, remainingSpace = 0, nextColWidth = 0, remainingFlexGrowUnits = flexGrowUnits, gap = 0, changeUnits = 0, undersizeCols = [];
      function calcGrow(col) {
        return colWidth * (col.column.definition.widthGrow || 1);
      }
      function calcShrink(col) {
        return calcWidth(col.width) - colWidth * (col.column.definition.widthShrink || 0);
      }
      columns2.forEach(function(col, i) {
        var width = shrinkCols ? calcShrink(col) : calcGrow(col);
        if (col.column.minWidth >= width) {
          oversizeCols.push(col);
        } else {
          if (col.column.maxWidth && col.column.maxWidth < width) {
            col.width = col.column.maxWidth;
            freeSpace -= col.column.maxWidth;
            remainingFlexGrowUnits -= shrinkCols ? col.column.definition.widthShrink || 1 : col.column.definition.widthGrow || 1;
            if (remainingFlexGrowUnits) {
              colWidth = Math.floor(freeSpace / remainingFlexGrowUnits);
            }
          } else {
            undersizeCols.push(col);
            changeUnits += shrinkCols ? col.column.definition.widthShrink || 1 : col.column.definition.widthGrow || 1;
          }
        }
      });
      if (oversizeCols.length) {
        oversizeCols.forEach(function(col) {
          oversizeSpace += shrinkCols ? col.width - col.column.minWidth : col.column.minWidth;
          col.width = col.column.minWidth;
        });
        remainingSpace = freeSpace - oversizeSpace;
        nextColWidth = changeUnits ? Math.floor(remainingSpace / changeUnits) : remainingSpace;
        gap = scaleColumns(undersizeCols, remainingSpace, nextColWidth, shrinkCols);
      } else {
        gap = changeUnits ? freeSpace - Math.floor(freeSpace / changeUnits) * changeUnits : freeSpace;
        undersizeCols.forEach(function(column) {
          column.width = shrinkCols ? calcShrink(column) : calcGrow(column);
        });
      }
      return gap;
    }
    if (this.table.options.responsiveLayout && this.table.modExists("responsiveLayout", true)) {
      this.table.modules.responsiveLayout.update();
    }
    if (this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight) {
      totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;
    }
    columns.forEach(function(column) {
      var width, minWidth, colWidth;
      if (column.visible) {
        width = column.definition.width;
        minWidth = parseInt(column.minWidth);
        if (width) {
          colWidth = calcWidth(width);
          fixedWidth += colWidth > minWidth ? colWidth : minWidth;
          if (column.definition.widthShrink) {
            fixedShrinkColumns.push({
              column,
              width: colWidth > minWidth ? colWidth : minWidth
            });
            flexShrinkUnits += column.definition.widthShrink;
          }
        } else {
          flexColumns.push({
            column,
            width: 0
          });
          flexGrowUnits += column.definition.widthGrow || 1;
        }
      }
    });
    flexWidth = totalWidth - fixedWidth;
    flexColWidth = Math.floor(flexWidth / flexGrowUnits);
    gapFill = scaleColumns(flexColumns, flexWidth, flexColWidth, false);
    if (flexColumns.length && gapFill > 0) {
      flexColumns[flexColumns.length - 1].width += gapFill;
    }
    flexColumns.forEach(function(col) {
      flexWidth -= col.width;
    });
    overflowWidth = Math.abs(gapFill) + flexWidth;
    if (overflowWidth > 0 && flexShrinkUnits) {
      gapFill = scaleColumns(fixedShrinkColumns, overflowWidth, Math.floor(overflowWidth / flexShrinkUnits), true);
    }
    if (gapFill && fixedShrinkColumns.length) {
      fixedShrinkColumns[fixedShrinkColumns.length - 1].width -= gapFill;
    }
    flexColumns.forEach(function(col) {
      col.column.setWidth(col.width);
    });
    fixedShrinkColumns.forEach(function(col) {
      col.column.setWidth(col.width);
    });
  }
  var defaultModes = {
    fitData,
    fitDataFill: fitDataGeneral,
    fitDataTable: fitDataGeneral,
    fitDataStretch,
    fitColumns
  };
  var Layout = class _Layout extends Module {
    static moduleName = "layout";
    //load defaults
    static modes = defaultModes;
    constructor(table) {
      super(table, "layout");
      this.mode = null;
      this.registerTableOption("layout", "fitData");
      this.registerTableOption("layoutColumnsOnNewData", false);
      this.registerColumnOption("widthGrow");
      this.registerColumnOption("widthShrink");
    }
    //initialize layout system
    initialize() {
      var layout = this.table.options.layout;
      if (_Layout.modes[layout]) {
        this.mode = layout;
      } else {
        console.warn("Layout Error - invalid mode set, defaulting to 'fitData' : " + layout);
        this.mode = "fitData";
      }
      this.table.element.setAttribute("tabulator-layout", this.mode);
      this.subscribe("column-init", this.initializeColumn.bind(this));
    }
    initializeColumn(column) {
      if (column.definition.widthGrow) {
        column.definition.widthGrow = Number(column.definition.widthGrow);
      }
      if (column.definition.widthShrink) {
        column.definition.widthShrink = Number(column.definition.widthShrink);
      }
    }
    getMode() {
      return this.mode;
    }
    //trigger table layout
    layout(dataChanged) {
      var variableHeight = this.table.columnManager.columnsByIndex.find((column) => column.definition.variableHeight || column.definition.formatter === "textarea");
      this.dispatch("layout-refreshing");
      _Layout.modes[this.mode].call(this, this.table.columnManager.columnsByIndex, dataChanged);
      if (variableHeight) {
        this.table.rowManager.normalizeHeight(true);
      }
      this.dispatch("layout-refreshed");
    }
  };
  var defaultLangs = {
    "default": {
      //hold default locale text
      "groups": {
        "item": "item",
        "items": "items"
      },
      "columns": {},
      "data": {
        "loading": "Loading",
        "error": "Error"
      },
      "pagination": {
        "page_size": "Page Size",
        "page_title": "Show Page",
        "first": "First",
        "first_title": "First Page",
        "last": "Last",
        "last_title": "Last Page",
        "prev": "Prev",
        "prev_title": "Prev Page",
        "next": "Next",
        "next_title": "Next Page",
        "all": "All",
        "counter": {
          "showing": "Showing",
          "of": "of",
          "rows": "rows",
          "pages": "pages"
        }
      },
      "headerFilters": {
        "default": "filter column...",
        "columns": {}
      }
    }
  };
  var Localize = class _Localize extends Module {
    static moduleName = "localize";
    //load defaults
    static langs = defaultLangs;
    constructor(table) {
      super(table);
      this.locale = "default";
      this.lang = false;
      this.bindings = {};
      this.langList = {};
      this.registerTableOption("locale", false);
      this.registerTableOption("langs", {});
    }
    initialize() {
      this.langList = Helpers.deepClone(_Localize.langs);
      if (this.table.options.columnDefaults.headerFilterPlaceholder !== false) {
        this.setHeaderFilterPlaceholder(this.table.options.columnDefaults.headerFilterPlaceholder);
      }
      for (let locale in this.table.options.langs) {
        this.installLang(locale, this.table.options.langs[locale]);
      }
      this.setLocale(this.table.options.locale);
      this.registerTableFunction("setLocale", this.setLocale.bind(this));
      this.registerTableFunction("getLocale", this.getLocale.bind(this));
      this.registerTableFunction("getLang", this.getLang.bind(this));
    }
    //set header placeholder
    setHeaderFilterPlaceholder(placeholder) {
      this.langList.default.headerFilters.default = placeholder;
    }
    //setup a lang description object
    installLang(locale, lang) {
      if (this.langList[locale]) {
        this._setLangProp(this.langList[locale], lang);
      } else {
        this.langList[locale] = lang;
      }
    }
    _setLangProp(lang, values) {
      for (let key in values) {
        if (lang[key] && typeof lang[key] == "object") {
          this._setLangProp(lang[key], values[key]);
        } else {
          lang[key] = values[key];
        }
      }
    }
    //set current locale
    setLocale(desiredLocale) {
      desiredLocale = desiredLocale || "default";
      function traverseLang(trans, path) {
        for (var prop in trans) {
          if (typeof trans[prop] == "object") {
            if (!path[prop]) {
              path[prop] = {};
            }
            traverseLang(trans[prop], path[prop]);
          } else {
            path[prop] = trans[prop];
          }
        }
      }
      if (desiredLocale === true && navigator.language) {
        desiredLocale = navigator.language.toLowerCase();
      }
      if (desiredLocale) {
        if (!this.langList[desiredLocale]) {
          let prefix = desiredLocale.split("-")[0];
          if (this.langList[prefix]) {
            console.warn("Localization Error - Exact matching locale not found, using closest match: ", desiredLocale, prefix);
            desiredLocale = prefix;
          } else {
            console.warn("Localization Error - Matching locale not found, using default: ", desiredLocale);
            desiredLocale = "default";
          }
        }
      }
      this.locale = desiredLocale;
      this.lang = Helpers.deepClone(this.langList.default || {});
      if (desiredLocale != "default") {
        traverseLang(this.langList[desiredLocale], this.lang);
      }
      this.dispatchExternal("localized", this.locale, this.lang);
      this._executeBindings();
    }
    //get current locale
    getLocale(locale) {
      return this.locale;
    }
    //get lang object for given local or current if none provided
    getLang(locale) {
      return locale ? this.langList[locale] : this.lang;
    }
    //get text for current locale
    getText(path, value) {
      var fillPath = value ? path + "|" + value : path, pathArray = fillPath.split("|"), text = this._getLangElement(pathArray, this.locale);
      return text || "";
    }
    //traverse langs object and find localized copy
    _getLangElement(path, locale) {
      var root = this.lang;
      path.forEach(function(level) {
        var rootPath;
        if (root) {
          rootPath = root[level];
          if (typeof rootPath != "undefined") {
            root = rootPath;
          } else {
            root = false;
          }
        }
      });
      return root;
    }
    //set update binding
    bind(path, callback) {
      if (!this.bindings[path]) {
        this.bindings[path] = [];
      }
      this.bindings[path].push(callback);
      callback(this.getText(path), this.lang);
    }
    //iterate through bindings and trigger updates
    _executeBindings() {
      for (let path in this.bindings) {
        this.bindings[path].forEach((binding) => {
          binding(this.getText(path), this.lang);
        });
      }
    }
  };
  var Comms = class extends Module {
    static moduleName = "comms";
    constructor(table) {
      super(table);
    }
    initialize() {
      this.registerTableFunction("tableComms", this.receive.bind(this));
    }
    getConnections(selectors) {
      var connections = [], connection;
      connection = this.table.constructor.registry.lookupTable(selectors);
      connection.forEach((con) => {
        if (this.table !== con) {
          connections.push(con);
        }
      });
      return connections;
    }
    send(selectors, module, action, data) {
      var connections = this.getConnections(selectors);
      connections.forEach((connection) => {
        connection.tableComms(this.table.element, module, action, data);
      });
      if (!connections.length && selectors) {
        console.warn("Table Connection Error - No tables matching selector found", selectors);
      }
    }
    receive(table, module, action, data) {
      if (this.table.modExists(module)) {
        return this.table.modules[module].commsReceived(table, action, data);
      } else {
        console.warn("Inter-table Comms Error - no such module:", module);
      }
    }
  };
  var coreModules = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    CommsModule: Comms,
    LayoutModule: Layout,
    LocalizeModule: Localize
  });
  var TableRegistry = class _TableRegistry {
    static registry = {
      tables: [],
      register(table) {
        _TableRegistry.registry.tables.push(table);
      },
      deregister(table) {
        var index7 = _TableRegistry.registry.tables.indexOf(table);
        if (index7 > -1) {
          _TableRegistry.registry.tables.splice(index7, 1);
        }
      },
      lookupTable(query, silent) {
        var results = [], matches2, match;
        if (typeof query === "string") {
          matches2 = document.querySelectorAll(query);
          if (matches2.length) {
            for (var i = 0; i < matches2.length; i++) {
              match = _TableRegistry.registry.matchElement(matches2[i]);
              if (match) {
                results.push(match);
              }
            }
          }
        } else if (typeof HTMLElement !== "undefined" && query instanceof HTMLElement || query instanceof _TableRegistry) {
          match = _TableRegistry.registry.matchElement(query);
          if (match) {
            results.push(match);
          }
        } else if (Array.isArray(query)) {
          query.forEach(function(item) {
            results = results.concat(_TableRegistry.registry.lookupTable(item));
          });
        } else {
          if (!silent) {
            console.warn("Table Connection Error - Invalid Selector", query);
          }
        }
        return results;
      },
      matchElement(element) {
        return _TableRegistry.registry.tables.find(function(table) {
          return element instanceof _TableRegistry ? table === element : table.element === element;
        });
      }
    };
    static findTable(query) {
      var results = _TableRegistry.registry.lookupTable(query, true);
      return Array.isArray(results) && !results.length ? false : results;
    }
  };
  var ModuleBinder = class _ModuleBinder extends TableRegistry {
    static moduleBindings = {};
    static moduleExtensions = {};
    static modulesRegistered = false;
    static defaultModules = false;
    constructor() {
      super();
    }
    static initializeModuleBinder(defaultModules) {
      if (!_ModuleBinder.modulesRegistered) {
        _ModuleBinder.modulesRegistered = true;
        _ModuleBinder._registerModules(coreModules, true);
        if (defaultModules) {
          _ModuleBinder._registerModules(defaultModules);
        }
      }
    }
    static _extendModule(name, property, values) {
      if (_ModuleBinder.moduleBindings[name]) {
        var source = _ModuleBinder.moduleBindings[name][property];
        if (source) {
          if (typeof values == "object") {
            for (let key in values) {
              source[key] = values[key];
            }
          } else {
            console.warn("Module Error - Invalid value type, it must be an object");
          }
        } else {
          console.warn("Module Error - property does not exist:", property);
        }
      } else {
        console.warn("Module Error - module does not exist:", name);
      }
    }
    static _registerModules(modules, core) {
      var mods = Object.values(modules);
      if (core) {
        mods.forEach((mod) => {
          mod.prototype.moduleCore = true;
        });
      }
      _ModuleBinder._registerModule(mods);
    }
    static _registerModule(modules) {
      if (!Array.isArray(modules)) {
        modules = [modules];
      }
      modules.forEach((mod) => {
        _ModuleBinder._registerModuleBinding(mod);
        _ModuleBinder._registerModuleExtensions(mod);
      });
    }
    static _registerModuleBinding(mod) {
      if (mod.moduleName) {
        _ModuleBinder.moduleBindings[mod.moduleName] = mod;
      } else {
        console.error("Unable to bind module, no moduleName defined", mod.moduleName);
      }
    }
    static _registerModuleExtensions(mod) {
      var extensions2 = mod.moduleExtensions;
      if (mod.moduleExtensions) {
        for (let modKey in extensions2) {
          let ext = extensions2[modKey];
          if (_ModuleBinder.moduleBindings[modKey]) {
            for (let propKey in ext) {
              _ModuleBinder._extendModule(modKey, propKey, ext[propKey]);
            }
          } else {
            if (!_ModuleBinder.moduleExtensions[modKey]) {
              _ModuleBinder.moduleExtensions[modKey] = {};
            }
            for (let propKey in ext) {
              if (!_ModuleBinder.moduleExtensions[modKey][propKey]) {
                _ModuleBinder.moduleExtensions[modKey][propKey] = {};
              }
              Object.assign(_ModuleBinder.moduleExtensions[modKey][propKey], ext[propKey]);
            }
          }
        }
      }
      _ModuleBinder._extendModuleFromQueue(mod);
    }
    static _extendModuleFromQueue(mod) {
      var extensions2 = _ModuleBinder.moduleExtensions[mod.moduleName];
      if (extensions2) {
        for (let propKey in extensions2) {
          _ModuleBinder._extendModule(mod.moduleName, propKey, extensions2[propKey]);
        }
      }
    }
    //ensure that module are bound to instantiated function
    _bindModules() {
      var orderedStartMods = [], orderedEndMods = [], unOrderedMods = [];
      this.modules = {};
      for (var name in _ModuleBinder.moduleBindings) {
        let mod = _ModuleBinder.moduleBindings[name];
        let module = new mod(this);
        this.modules[name] = module;
        if (mod.prototype.moduleCore) {
          this.modulesCore.push(module);
        } else {
          if (mod.moduleInitOrder) {
            if (mod.moduleInitOrder < 0) {
              orderedStartMods.push(module);
            } else {
              orderedEndMods.push(module);
            }
          } else {
            unOrderedMods.push(module);
          }
        }
      }
      orderedStartMods.sort((a, b) => a.moduleInitOrder > b.moduleInitOrder ? 1 : -1);
      orderedEndMods.sort((a, b) => a.moduleInitOrder > b.moduleInitOrder ? 1 : -1);
      this.modulesRegular = orderedStartMods.concat(unOrderedMods.concat(orderedEndMods));
    }
  };
  var Alert = class extends CoreFeature {
    constructor(table) {
      super(table);
      this.element = this._createAlertElement();
      this.msgElement = this._createMsgElement();
      this.type = null;
      this.element.appendChild(this.msgElement);
    }
    _createAlertElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-alert");
      return el;
    }
    _createMsgElement() {
      var el = document.createElement("div");
      el.classList.add("tabulator-alert-msg");
      el.setAttribute("role", "alert");
      return el;
    }
    _typeClass() {
      return "tabulator-alert-state-" + this.type;
    }
    alert(content, type = "msg") {
      if (content) {
        this.clear();
        this.dispatch("alert-show", type);
        this.type = type;
        while (this.msgElement.firstChild)
          this.msgElement.removeChild(this.msgElement.firstChild);
        this.msgElement.classList.add(this._typeClass());
        if (typeof content === "function") {
          content = content();
        }
        if (content instanceof HTMLElement) {
          this.msgElement.appendChild(content);
        } else {
          this.msgElement.innerHTML = content;
        }
        this.table.element.appendChild(this.element);
      }
    }
    clear() {
      this.dispatch("alert-hide", this.type);
      if (this.element.parentNode) {
        this.element.parentNode.removeChild(this.element);
      }
      this.msgElement.classList.remove(this._typeClass());
    }
  };
  var Tabulator = class _Tabulator extends ModuleBinder {
    //default setup options
    static defaultOptions = defaultOptions;
    static extendModule() {
      _Tabulator.initializeModuleBinder();
      _Tabulator._extendModule(...arguments);
    }
    static registerModule() {
      _Tabulator.initializeModuleBinder();
      _Tabulator._registerModule(...arguments);
    }
    constructor(element, options, modules) {
      super();
      _Tabulator.initializeModuleBinder(modules);
      this.options = {};
      this.columnManager = null;
      this.rowManager = null;
      this.footerManager = null;
      this.alertManager = null;
      this.vdomHoz = null;
      this.externalEvents = null;
      this.eventBus = null;
      this.interactionMonitor = false;
      this.browser = "";
      this.browserSlow = false;
      this.browserMobile = false;
      this.rtl = false;
      this.originalElement = null;
      this.componentFunctionBinder = new ComponentFunctionBinder(this);
      this.dataLoader = false;
      this.modules = {};
      this.modulesCore = [];
      this.modulesRegular = [];
      this.deprecationAdvisor = new DeprecationAdvisor(this);
      this.optionsList = new OptionsList(this, "table constructor");
      this.dependencyRegistry = new DependencyRegistry(this);
      this.initialized = false;
      this.destroyed = false;
      if (this.initializeElement(element)) {
        this.initializeCoreSystems(options);
        setTimeout(() => {
          this._create();
        });
      }
      this.constructor.registry.register(this);
    }
    initializeElement(element) {
      if (typeof HTMLElement !== "undefined" && element instanceof HTMLElement) {
        this.element = element;
        return true;
      } else if (typeof element === "string") {
        this.element = document.querySelector(element);
        if (this.element) {
          return true;
        } else {
          console.error("Tabulator Creation Error - no element found matching selector: ", element);
          return false;
        }
      } else {
        console.error("Tabulator Creation Error - Invalid element provided:", element);
        return false;
      }
    }
    initializeCoreSystems(options) {
      this.columnManager = new ColumnManager(this);
      this.rowManager = new RowManager(this);
      this.footerManager = new FooterManager(this);
      this.dataLoader = new DataLoader(this);
      this.alertManager = new Alert(this);
      this._bindModules();
      this.options = this.optionsList.generate(_Tabulator.defaultOptions, options);
      this._clearObjectPointers();
      this._mapDeprecatedFunctionality();
      this.externalEvents = new ExternalEventBus(this, this.options, this.options.debugEventsExternal);
      this.eventBus = new InternalEventBus(this.options.debugEventsInternal);
      this.interactionMonitor = new InteractionManager(this);
      this.dataLoader.initialize();
      this.footerManager.initialize();
      this.dependencyRegistry.initialize();
    }
    //convert deprecated functionality to new functions
    _mapDeprecatedFunctionality() {
    }
    _clearSelection() {
      this.element.classList.add("tabulator-block-select");
      if (window.getSelection) {
        if (window.getSelection().empty) {
          window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges) {
          window.getSelection().removeAllRanges();
        }
      } else if (document.selection) {
        document.selection.empty();
      }
      this.element.classList.remove("tabulator-block-select");
    }
    //create table
    _create() {
      this.externalEvents.dispatch("tableBuilding");
      this.eventBus.dispatch("table-building");
      this._rtlCheck();
      this._buildElement();
      this._initializeTable();
      this.initialized = true;
      this._loadInitialData().finally(() => {
        this.eventBus.dispatch("table-initialized");
        this.externalEvents.dispatch("tableBuilt");
      });
    }
    _rtlCheck() {
      var style = window.getComputedStyle(this.element);
      switch (this.options.textDirection) {
        case "auto":
          if (style.direction !== "rtl") {
            break;
          }
        case "rtl":
          this.element.classList.add("tabulator-rtl");
          this.rtl = true;
          break;
        case "ltr":
          this.element.classList.add("tabulator-ltr");
        default:
          this.rtl = false;
      }
    }
    //clear pointers to objects in default config object
    _clearObjectPointers() {
      this.options.columns = this.options.columns.slice(0);
      if (Array.isArray(this.options.data) && !this.options.reactiveData) {
        this.options.data = this.options.data.slice(0);
      }
    }
    //build tabulator element
    _buildElement() {
      var element = this.element, options = this.options, newElement;
      if (element.tagName === "TABLE") {
        this.originalElement = this.element;
        newElement = document.createElement("div");
        var attributes = element.attributes;
        for (var i in attributes) {
          if (typeof attributes[i] == "object") {
            newElement.setAttribute(attributes[i].name, attributes[i].value);
          }
        }
        element.parentNode.replaceChild(newElement, element);
        this.element = element = newElement;
      }
      element.classList.add("tabulator");
      element.setAttribute("role", "grid");
      while (element.firstChild)
        element.removeChild(element.firstChild);
      if (options.height) {
        options.height = isNaN(options.height) ? options.height : options.height + "px";
        element.style.height = options.height;
      }
      if (options.minHeight !== false) {
        options.minHeight = isNaN(options.minHeight) ? options.minHeight : options.minHeight + "px";
        element.style.minHeight = options.minHeight;
      }
      if (options.maxHeight !== false) {
        options.maxHeight = isNaN(options.maxHeight) ? options.maxHeight : options.maxHeight + "px";
        element.style.maxHeight = options.maxHeight;
      }
    }
    //initialize core systems and modules
    _initializeTable() {
      var element = this.element, options = this.options;
      this.interactionMonitor.initialize();
      this.columnManager.initialize();
      this.rowManager.initialize();
      this._detectBrowser();
      this.modulesCore.forEach((mod) => {
        mod.initialize();
      });
      element.appendChild(this.columnManager.getElement());
      element.appendChild(this.rowManager.getElement());
      if (options.footerElement) {
        this.footerManager.activate();
      }
      if (options.autoColumns && options.data) {
        this.columnManager.generateColumnsFromRowData(this.options.data);
      }
      this.modulesRegular.forEach((mod) => {
        mod.initialize();
      });
      this.columnManager.setColumns(options.columns);
      this.eventBus.dispatch("table-built");
    }
    _loadInitialData() {
      return this.dataLoader.load(this.options.data).finally(() => {
        this.columnManager.verticalAlignHeaders();
      });
    }
    //deconstructor
    destroy() {
      var element = this.element;
      this.destroyed = true;
      this.constructor.registry.deregister(this);
      this.eventBus.dispatch("table-destroy");
      this.rowManager.destroy();
      while (element.firstChild)
        element.removeChild(element.firstChild);
      element.classList.remove("tabulator");
      this.externalEvents.dispatch("tableDestroyed");
    }
    _detectBrowser() {
      var ua = navigator.userAgent || navigator.vendor || window.opera;
      if (ua.indexOf("Trident") > -1) {
        this.browser = "ie";
        this.browserSlow = true;
      } else if (ua.indexOf("Edge") > -1) {
        this.browser = "edge";
        this.browserSlow = true;
      } else if (ua.indexOf("Firefox") > -1) {
        this.browser = "firefox";
        this.browserSlow = false;
      } else if (ua.indexOf("Mac OS") > -1) {
        this.browser = "safari";
        this.browserSlow = false;
      } else {
        this.browser = "other";
        this.browserSlow = false;
      }
      this.browserMobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(ua.slice(0, 4));
    }
    initGuard(func, msg) {
      var stack2, line;
      if (this.options.debugInitialization && !this.initialized) {
        if (!func) {
          stack2 = new Error().stack.split("\n");
          line = stack2[0] == "Error" ? stack2[2] : stack2[1];
          if (line[0] == " ") {
            func = line.trim().split(" ")[1].split(".")[1];
          } else {
            func = line.trim().split("@")[0];
          }
        }
        console.warn("Table Not Initialized - Calling the " + func + " function before the table is initialized may result in inconsistent behavior, Please wait for the `tableBuilt` event before calling this function." + (msg ? " " + msg : ""));
      }
      return this.initialized;
    }
    ////////////////// Data Handling //////////////////
    //block table redrawing
    blockRedraw() {
      this.initGuard();
      this.eventBus.dispatch("redraw-blocking");
      this.rowManager.blockRedraw();
      this.columnManager.blockRedraw();
      this.eventBus.dispatch("redraw-blocked");
    }
    //restore table redrawing
    restoreRedraw() {
      this.initGuard();
      this.eventBus.dispatch("redraw-restoring");
      this.rowManager.restoreRedraw();
      this.columnManager.restoreRedraw();
      this.eventBus.dispatch("redraw-restored");
    }
    //load data
    setData(data, params, config) {
      this.initGuard(false, "To set initial data please use the 'data' property in the table constructor.");
      return this.dataLoader.load(data, params, config, false);
    }
    //clear data
    clearData() {
      this.initGuard();
      this.dataLoader.blockActiveLoad();
      this.rowManager.clearData();
    }
    //get table data array
    getData(active) {
      return this.rowManager.getData(active);
    }
    //get table data array count
    getDataCount(active) {
      return this.rowManager.getDataCount(active);
    }
    //replace data, keeping table in position with same sort
    replaceData(data, params, config) {
      this.initGuard();
      return this.dataLoader.load(data, params, config, true, true);
    }
    //update table data
    updateData(data) {
      var responses = 0;
      this.initGuard();
      return new Promise((resolve2, reject) => {
        this.dataLoader.blockActiveLoad();
        if (typeof data === "string") {
          data = JSON.parse(data);
        }
        if (data && data.length > 0) {
          data.forEach((item) => {
            var row = this.rowManager.findRow(item[this.options.index]);
            if (row) {
              responses++;
              row.updateData(item).then(() => {
                responses--;
                if (!responses) {
                  resolve2();
                }
              }).catch((e) => {
                reject("Update Error - Unable to update row", item, e);
              });
            } else {
              reject("Update Error - Unable to find row", item);
            }
          });
        } else {
          console.warn("Update Error - No data provided");
          reject("Update Error - No data provided");
        }
      });
    }
    addData(data, pos, index7) {
      this.initGuard();
      return new Promise((resolve2, reject) => {
        this.dataLoader.blockActiveLoad();
        if (typeof data === "string") {
          data = JSON.parse(data);
        }
        if (data) {
          this.rowManager.addRows(data, pos, index7).then((rows2) => {
            var output = [];
            rows2.forEach(function(row) {
              output.push(row.getComponent());
            });
            resolve2(output);
          });
        } else {
          console.warn("Update Error - No data provided");
          reject("Update Error - No data provided");
        }
      });
    }
    //update table data
    updateOrAddData(data) {
      var rows2 = [], responses = 0;
      this.initGuard();
      return new Promise((resolve2, reject) => {
        this.dataLoader.blockActiveLoad();
        if (typeof data === "string") {
          data = JSON.parse(data);
        }
        if (data && data.length > 0) {
          data.forEach((item) => {
            var row = this.rowManager.findRow(item[this.options.index]);
            responses++;
            if (row) {
              row.updateData(item).then(() => {
                responses--;
                rows2.push(row.getComponent());
                if (!responses) {
                  resolve2(rows2);
                }
              });
            } else {
              this.rowManager.addRows(item).then((newRows) => {
                responses--;
                rows2.push(newRows[0].getComponent());
                if (!responses) {
                  resolve2(rows2);
                }
              });
            }
          });
        } else {
          console.warn("Update Error - No data provided");
          reject("Update Error - No data provided");
        }
      });
    }
    //get row object
    getRow(index7) {
      var row = this.rowManager.findRow(index7);
      if (row) {
        return row.getComponent();
      } else {
        console.warn("Find Error - No matching row found:", index7);
        return false;
      }
    }
    //get row object
    getRowFromPosition(position) {
      var row = this.rowManager.getRowFromPosition(position);
      if (row) {
        return row.getComponent();
      } else {
        console.warn("Find Error - No matching row found:", position);
        return false;
      }
    }
    //delete row from table
    deleteRow(index7) {
      var foundRows = [];
      this.initGuard();
      if (!Array.isArray(index7)) {
        index7 = [index7];
      }
      for (let item of index7) {
        let row = this.rowManager.findRow(item, true);
        if (row) {
          foundRows.push(row);
        } else {
          console.error("Delete Error - No matching row found:", item);
          return Promise.reject("Delete Error - No matching row found");
        }
      }
      foundRows.sort((a, b) => {
        return this.rowManager.rows.indexOf(a) > this.rowManager.rows.indexOf(b) ? 1 : -1;
      });
      foundRows.forEach((row) => {
        row.delete();
      });
      this.rowManager.reRenderInPosition();
      return Promise.resolve();
    }
    //add row to table
    addRow(data, pos, index7) {
      this.initGuard();
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      return this.rowManager.addRows(data, pos, index7, true).then((rows2) => {
        return rows2[0].getComponent();
      });
    }
    //update a row if it exists otherwise create it
    updateOrAddRow(index7, data) {
      var row = this.rowManager.findRow(index7);
      this.initGuard();
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      if (row) {
        return row.updateData(data).then(() => {
          return row.getComponent();
        });
      } else {
        return this.rowManager.addRows(data).then((rows2) => {
          return rows2[0].getComponent();
        });
      }
    }
    //update row data
    updateRow(index7, data) {
      var row = this.rowManager.findRow(index7);
      this.initGuard();
      if (typeof data === "string") {
        data = JSON.parse(data);
      }
      if (row) {
        return row.updateData(data).then(() => {
          return Promise.resolve(row.getComponent());
        });
      } else {
        console.warn("Update Error - No matching row found:", index7);
        return Promise.reject("Update Error - No matching row found");
      }
    }
    //scroll to row in DOM
    scrollToRow(index7, position, ifVisible) {
      var row = this.rowManager.findRow(index7);
      if (row) {
        return this.rowManager.scrollToRow(row, position, ifVisible);
      } else {
        console.warn("Scroll Error - No matching row found:", index7);
        return Promise.reject("Scroll Error - No matching row found");
      }
    }
    moveRow(from, to, after) {
      var fromRow = this.rowManager.findRow(from);
      this.initGuard();
      if (fromRow) {
        fromRow.moveToRow(to, after);
      } else {
        console.warn("Move Error - No matching row found:", from);
      }
    }
    getRows(active) {
      return this.rowManager.getComponents(active);
    }
    //get position of row in table
    getRowPosition(index7) {
      var row = this.rowManager.findRow(index7);
      if (row) {
        return row.getPosition();
      } else {
        console.warn("Position Error - No matching row found:", index7);
        return false;
      }
    }
    /////////////// Column Functions  ///////////////
    setColumns(definition) {
      this.initGuard(false, "To set initial columns please use the 'columns' property in the table constructor");
      this.columnManager.setColumns(definition);
    }
    getColumns(structured) {
      return this.columnManager.getComponents(structured);
    }
    getColumn(field) {
      var column = this.columnManager.findColumn(field);
      if (column) {
        return column.getComponent();
      } else {
        console.warn("Find Error - No matching column found:", field);
        return false;
      }
    }
    getColumnDefinitions() {
      return this.columnManager.getDefinitionTree();
    }
    showColumn(field) {
      var column = this.columnManager.findColumn(field);
      this.initGuard();
      if (column) {
        column.show();
      } else {
        console.warn("Column Show Error - No matching column found:", field);
        return false;
      }
    }
    hideColumn(field) {
      var column = this.columnManager.findColumn(field);
      this.initGuard();
      if (column) {
        column.hide();
      } else {
        console.warn("Column Hide Error - No matching column found:", field);
        return false;
      }
    }
    toggleColumn(field) {
      var column = this.columnManager.findColumn(field);
      this.initGuard();
      if (column) {
        if (column.visible) {
          column.hide();
        } else {
          column.show();
        }
      } else {
        console.warn("Column Visibility Toggle Error - No matching column found:", field);
        return false;
      }
    }
    addColumn(definition, before, field) {
      var column = this.columnManager.findColumn(field);
      this.initGuard();
      return this.columnManager.addColumn(definition, before, column).then((column2) => {
        return column2.getComponent();
      });
    }
    deleteColumn(field) {
      var column = this.columnManager.findColumn(field);
      this.initGuard();
      if (column) {
        return column.delete();
      } else {
        console.warn("Column Delete Error - No matching column found:", field);
        return Promise.reject();
      }
    }
    updateColumnDefinition(field, definition) {
      var column = this.columnManager.findColumn(field);
      this.initGuard();
      if (column) {
        return column.updateDefinition(definition);
      } else {
        console.warn("Column Update Error - No matching column found:", field);
        return Promise.reject();
      }
    }
    moveColumn(from, to, after) {
      var fromColumn = this.columnManager.findColumn(from), toColumn = this.columnManager.findColumn(to);
      this.initGuard();
      if (fromColumn) {
        if (toColumn) {
          this.columnManager.moveColumn(fromColumn, toColumn, after);
        } else {
          console.warn("Move Error - No matching column found:", toColumn);
        }
      } else {
        console.warn("Move Error - No matching column found:", from);
      }
    }
    //scroll to column in DOM
    scrollToColumn(field, position, ifVisible) {
      return new Promise((resolve2, reject) => {
        var column = this.columnManager.findColumn(field);
        if (column) {
          return this.columnManager.scrollToColumn(column, position, ifVisible);
        } else {
          console.warn("Scroll Error - No matching column found:", field);
          return Promise.reject("Scroll Error - No matching column found");
        }
      });
    }
    //////////// General Public Functions ////////////
    //redraw list without updating data
    redraw(force) {
      this.initGuard();
      this.columnManager.redraw(force);
      this.rowManager.redraw(force);
    }
    setHeight(height) {
      this.options.height = isNaN(height) ? height : height + "px";
      this.element.style.height = this.options.height;
      this.rowManager.initializeRenderer();
      this.rowManager.redraw(true);
    }
    //////////////////// Event Bus ///////////////////
    on(key, callback) {
      this.externalEvents.subscribe(key, callback);
    }
    off(key, callback) {
      this.externalEvents.unsubscribe(key, callback);
    }
    dispatchEvent() {
      var args = Array.from(arguments);
      args.shift();
      this.externalEvents.dispatch(...arguments);
    }
    //////////////////// Alerts ///////////////////
    alert(contents, type) {
      this.initGuard();
      this.alertManager.alert(contents, type);
    }
    clearAlert() {
      this.initGuard();
      this.alertManager.clear();
    }
    ////////////// Extension Management //////////////
    modExists(plugin, required) {
      if (this.modules[plugin]) {
        return true;
      } else {
        if (required) {
          console.error("Tabulator Module Not Installed: " + plugin);
        }
        return false;
      }
    }
    module(key) {
      var mod = this.modules[key];
      if (!mod) {
        console.error("Tabulator module not installed: " + key);
      }
      return mod;
    }
  };
  var Tabulator$1 = Tabulator;
  var TabulatorFull = class extends Tabulator$1 {
    static extendModule() {
      Tabulator$1.initializeModuleBinder(allModules);
      Tabulator$1._extendModule(...arguments);
    }
    static registerModule() {
      Tabulator$1.initializeModuleBinder(allModules);
      Tabulator$1._registerModule(...arguments);
    }
    constructor(element, options, modules) {
      super(element, options, allModules);
    }
  };
  var TabulatorFull$1 = TabulatorFull;

  // js/editor/constants.ts
  var CURATION_STATUS = {
    DISCUSSED: "Discussed",
    READY: "Ready",
    PROPOSED: "Proposed",
    TO_BE_DISCUSSED: "To be discussed",
    IN_DISCUSSION: "In discussion",
    PUBLISHED: "Published",
    OBSOLETE: "Obsolete",
    EXTERNAL: "External",
    PRE_PROPOSED: "Pre-proposed"
  };
  var COLUMN_NAMES = {
    CURATION_STATUS: "Curation status",
    TO_BE_REVIEWED_BY: "To be reviewed by",
    CURATOR: "Curator",
    ID: "ID",
    E_CIGO: "E-CigO",
    FUZZY_SET: "Fuzzy set",
    RELATIONSHIP_TYPE: "Relationship type",
    LABEL: "Label"
  };

  // js/editor/tabulator-config.ts
  function setRowColor(row, data, navigateToRow = -1) {
    const curation_status = data[COLUMN_NAMES.CURATION_STATUS]?.toLowerCase()?.trim() ?? null;
    if (curation_status !== null) {
      for (let status of Object.values(CURATION_STATUS)) {
        if (curation_status === status.toLowerCase()) {
          for (const c of row.getElement().classList) {
            if (c.startsWith(`ose-curation-status-`)) {
              row.getElement().classList.remove(c);
            }
          }
          row.getElement().classList.add(`ose-curation-status-${status.toLowerCase().replace(/[^a-z]/g, "_")}`);
        }
      }
    }
    if (navigateToRow === row.getIndex()) {
      row.getElement().style.boxShadow = "inset 0 0 10px 5px #ffcb00";
    }
  }
  var headerMenuFactory = (table) => [
    {
      label: "Hide Column",
      action(_, column) {
        column.hide();
      }
    },
    {
      label: "Show Hidden",
      action() {
        const allColumns = table().getColumns();
        for (const column of allColumns) {
          column.show();
        }
      }
    },
    {
      label: "Reset All Column Widths",
      action() {
        const allColumns = table().getColumns();
        for (const column of allColumns) {
          if (column.getField() == "E-CigO" || column.getField() == "Fuzzy set") {
            column.setWidth(140);
          } else {
            column.setWidth(200);
          }
        }
      }
    }
  ];
  function columnDefFor(fieldName, suggestionsRef, table) {
    const headerMenu = headerMenuFactory(table);
    if (fieldName == COLUMN_NAMES.CURATION_STATUS) {
      return {
        title: fieldName,
        field: fieldName,
        sorter: "string",
        editor: "list",
        editorParams: { values: ["Pre-proposed", "Proposed", "To Be Discussed", "In Discussion", "Discussed", "Published", "Obsolete", "External"] },
        headerFilter: "input",
        width: "200",
        formatter: "textarea",
        headerMenu
      };
    } else if (fieldName == "E-CigO") {
      return {
        title: fieldName,
        field: fieldName,
        sorter: "boolean",
        hozAlign: "center",
        editor: true,
        formatter: "tickCross",
        headerFilter: true,
        width: "140",
        headerMenu
      };
    } else if (fieldName == "Fuzzy set") {
      return {
        title: fieldName,
        field: fieldName,
        sorter: "boolean",
        hozAlign: "center",
        editor: true,
        formatter: "tickCross",
        headerFilter: true,
        width: "140",
        headerMenu
      };
    } else if (fieldName == "To be reviewed by") {
      return {
        title: fieldName,
        field: fieldName,
        sorter: "string",
        editor: "textarea",
        headerFilter: "input",
        width: "200",
        formatter: "textarea",
        headerMenu
      };
    } else if (fieldName == "Parent") {
      return {
        title: fieldName,
        field: fieldName,
        sorter: "string",
        editor: "list",
        editorParams: {
          values: suggestionsRef,
          autocomplete: true,
          freetext: true,
          allowEmpty: true,
          elementAttributes: { formatter: "textarea" }
        },
        headerFilter: "input",
        width: "200",
        formatter: "textarea",
        headerMenu
      };
    } else if (fieldName.includes("REL") || fieldName === "Domain" || fieldName === "Range") {
      return {
        title: fieldName,
        field: fieldName,
        sorter: "string",
        editor: "list",
        editorParams: {
          values: suggestionsRef,
          autocomplete: true,
          freetext: true,
          allowEmpty: true
          // elementAttributes: {formatter: "textarea"},
        },
        headerFilter: "input",
        width: "200",
        formatter: "textarea",
        headerMenu
      };
    } else {
      return {
        title: fieldName,
        field: fieldName,
        sorter: "string",
        editor: "textarea",
        headerFilter: "input",
        width: "200",
        formatter: "textarea",
        headerMenu
      };
    }
  }

  // js/common/bootbox.ts
  function promptDialog(options) {
    return new Promise((resolve2) => {
      bootbox.prompt({
        ...options,
        callback(result) {
          resolve2(result ?? null);
        }
      });
    });
  }
  function alertDialog(options, resumeAfter = "hide") {
    return new Promise((resolve2) => {
      let value = null;
      bootbox.alert({
        ...options,
        onHidden() {
          if (resumeAfter === "hidden") {
            resolve2(value);
          }
        },
        callback(result) {
          if (resumeAfter === "hidden") {
            value = result ?? null;
          } else {
            resolve2(result ?? null);
          }
        }
      });
    });
  }
  function confirmDialog(options) {
    return new Promise((resolve2) => {
      bootbox.confirm({
        ...options,
        callback(result) {
          resolve2(result);
        }
      });
    });
  }

  // js/common/diagnostic-data.ts
  var DIAGNOSTIC_DATA = {
    "unknown-parent": {
      severity: "error",
      title: (d) => `Unknown parent`,
      message: (d) => `The parent <code>${d.parent.label}</code> of <code>${(d.term ?? d.relation).label}</code>
              (<code>${(d.term ?? d.relation).id || "no id"}</code>) is not known.`
    },
    "missing-parent": {
      severity: "error",
      title: (d) => `Missing parent`,
      message: (d) => `The parent <code>${d.parent.label}</code> (<code>${d.parent.id}</code>) of
              <code>${d.term.label}</code>
              (<code>${d.term.id || "no id"}) is neither defined in the Excel files or imported.
              If it is an external term, add the missing import the entry with
              <code>${d.parent.label} [${d.parent.id}]</code>.`
    },
    "no-parent": {
      severity: "error",
      title: (d) => `Term has no parent`,
      message: (d) => `The term <code>${d.term.label}</code> (<code>${d.term.id ?? "no id"}</code>) has no parent!`
    },
    "ignored-parent": {
      severity: "error",
      title: (d) => `${d.status} parent`,
      message: (d) => `The parent <code>${d.parent.label}</code> of <code>${d.term.label}</code>
              (<code>${d.term.id ?? "no id"}</code>) is ${d.status.toLowerCase()}.<br>`
    },
    "missing-label": {
      severity: "error",
      title: (d) => `Missing label`,
      message: (d) => `The term <code>${d.term.id}</code> has no label.`
    },
    "missing-id": {
      severity: "error",
      title: (d) => `Term has no ID`,
      message: (d) => `              The term <code>${d.term.label}</code> has no ID but is also not obsolete or pre-proposed. <br>`
    },
    "unknown-disjoint": {
      severity: "error",
      title: (d) => `Unknown disjoint class`,
      message: (d) => `The class <code>${d.term.label}</code> (<code>${d.term.id ?? "no id"}</code>) is
              specified to
              be disjoint with <code>${d.disjoint_class.label}</code> but it is not known.<br>`
    },
    "missing-disjoint": {
      severity: "error",
      title: (d) => `Missing disjoint class`,
      message: (d) => `The disjoint class <code>${d.disjoint_class.label}</code> (<code>${d.disjoint_class.id}</code>) of 
              <code>${d.term.label}</code>
              (<code>${d.term.id || "no id"}) is neither defined in the Excel files or imported.
              If it is an external term, add the missing import the entry with
              <code>${d.disjoint_class.label} [${d.disjoint_class.id}]</code>.`
    },
    "ignored-disjoint": {
      severity: "error",
      title: (d) => `${d.status} disjoint class`,
      message: (d) => `The disjoint class <code>${d.disjoint_class.label}</code> of <code>${d.term.label}</code>
              (<code>${d.term.id ?? "no id"}</code>) is ${d.status.toLowerCase()}.<br>`
    },
    "unknown-relation-value": {
      severity: "error",
      title: (d) => `Unknown value for relation <code>${d.relation.label}</code>`,
      message: (d) => `Related term <code>${d.value.label}</code> of <code>${d.term.label}</code>
              (<code>${d.term.id || "no id"}
            </code>) for <code>${d.relation.label}</code> is not known.`
    },
    "missing-relation-value": {
      severity: "error",
      title: (d) => `Unknown value for relation <code>${d.relation.label}</code>`,
      message: (d) => `Related term <code>${d.value.label}</code> of 
              <code>${d.term.label}</code>
              (<code>${d.term.id || "no id"}) is neither defined in the Excel files or imported.
              If it is an external term, add the missing import the entry with
              <code>${d.value.label} [${d.value.id}]</code>.`
    },
    "ignored-relation-value": {
      severity: "error",
      title: (d) => `${d.status} value for relation <code>${d.relation.label}</code>`,
      message: (d) => `Related term <code>${d.value.label}</code> of <code>${d.term.label}</code>
              (<code>${d.term.id ?? "no id"}</code>) is ${d.status.toLowerCase()}.`
    },
    "unknown-range": {
      severity: "error",
      title: (d) => `Unknown range`,
      message: (d) => `The range <code>${d.relation.range.label}</code> of
              <code>${d.relation.label}</code>
              (<code>${d.relation.id || "no id"}
            </code>) is not known. `
    },
    "missing-range": {
      severity: "error",
      title: (d) => `Missing range`,
      message: (d) => `The range <code>${d.relation.range.label}</code> of 
              <code>${d.relation.label}</code>
              (<code>${d.relation.id || "no id"}) is neither defined in the Excel files or imported.
              If it is an external term, add the missing import the entry with
              <code>${d.range.label} [${d.range.id}]</code>.`
    },
    "ignored-range": {
      severity: "error",
      title: (d) => `${d.status} range`,
      message: (d) => `The range <code>${d.range.label}</code> of <code>${d.relation.label}</code>
              (<code>${d.relation.id ?? "no id"}</code>) is ${d.status.toLowerCase()}.<br>`
    },
    "unknown-domain": {
      severity: "error",
      title: (d) => `Unknown domain`,
      message: (d) => `The domain <code>${d.relation.domain.label}</code> of
              <code>${d.relation.label}</code>
              (<code>${d.relation.id || "no id"} </code>) is not known.`
    },
    "missing-domain": {
      severity: "error",
      title: (d) => `Missing domain`,
      message: (d) => `The domain <code>${d.relation.domain.label}</code> of 
              <code>${d.relation.label}</code>
              (<code>${d.relation.id || "no id"}) is neither defined in the Excel files or imported.
              If it is an external term, add the missing import the entry with
              <code>${d.domain.label} [${d.domain.id}]</code>.`
    },
    "ignored-domain": {
      severity: "error",
      title: (d) => `${d.status} domain`,
      message: (d) => `The domain <code>${d.domain.label}</code> of <code>${d.relation.label}</code>
              (<code>${d.relation.id ?? "no id"}</code>) is ${d.status.toLowerCase()}.<br>`
    },
    "unknown-relation": {
      severity: "error",
      title: (d) => `Unknown relation`,
      message: (d) => `The relation ${d.relation.label ? `<code>${d.relation.label}</code>` + (d.relation.id ? "(" + d.relation.id + ")" : "") : d.relation.id} is not known`
    },
    "duplicate": {
      severity: "error",
      title: (d) => `Conflicting entries (duplicates)`,
      message: (d) => `There are multiple terms for the ${d.duplicate_field} <code>${d.duplicate_value}</code>:`
    },
    "incomplete-term": {
      severity: "warning",
      title: (d) => `Incomplete term`,
      message: (d) => `There is an incomplete term with no an ID, a label, or a parent defined. Is there an empty line in the
              spreadsheet? The line is ignored`
    },
    "unknown-column": {
      severity: "warning",
      title: (d) => `Unmapped column`,
      message: (d) => `The column <code>${d.column}</code> of <code>${d.sheet}</code> is not mapped
              to any OWL property or internal field.`
    },
    "missing-import": {
      severity: "warning",
      title: (d) => `Missing import`,
      message: (d) => `The term <code>${d.term.label}</code> (<code>${d.term.id ?? "no id"}</code>) has the curation
              status
              "External" but is not included in the externally imported terms.` + (d.term.id ? ` Does the term still exist in
                ${d.term.id.split(":")[0]}?` : "")
    },
    "inconsistent-import": {
      severity: "warning",
      title: (d) => `Inconsistent import`,
      message: (d) => `The term <code>${d.term.label}</code> (<code>${d.term.id ?? "no id"}</code>) has the curation
              status "External" but its ` + (d.term.id !== d.imported_term.id ? `ID (<code>${d.imported_term.id}</code>)` : `label (<code>${d.imported_term.label}</code>)`) + ` differs.`
    }
  };

  // sfc-script:/home/bjoern/development/onto-spread-ed/js/common/Diagnostic.vue?type=script
  var Diagnostic_default = /* @__PURE__ */ defineComponent({
    __name: "Diagnostic",
    props: {
      diagnostic: { type: Object, required: true },
      severity: { type: [String, null], required: false, default: null },
      format: { type: String, required: false, default: "long" }
    },
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const badgeClasses = computed2(() => ({
        "text-bg-danger": (props.severity ?? data.value.severity) === "error",
        "text-bg-warning": (props.severity ?? data.value.severity) === "warning",
        "text-bg-info": (props.severity ?? data.value.severity) === "info"
      }));
      const data = computed2(() => ({
        severity: DIAGNOSTIC_DATA[props.diagnostic.type].severity,
        title: DIAGNOSTIC_DATA[props.diagnostic.type].title(props.diagnostic),
        message: DIAGNOSTIC_DATA[props.diagnostic.type].message(props.diagnostic)
      }));
      const __returned__ = { props, badgeClasses, data };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-template:/home/bjoern/development/onto-spread-ed/js/common/Diagnostic.vue?type=template
  var _hoisted_1 = ["innerHTML"];
  var _hoisted_2 = { key: 0 };
  var _hoisted_3 = { key: 1 };
  var _hoisted_4 = ["innerHTML"];
  function render(_ctx, _cache, $props, $setup, $data, $options) {
    return $props.format === "long" ? (openBlock(), createElementBlock(
      Fragment,
      { key: 0 },
      [
        createBaseVNode(
          "h5",
          null,
          toDisplayString($setup.data.title),
          1
          /* TEXT */
        ),
        createBaseVNode("p", {
          innerHTML: $setup.data.message
        }, null, 8, _hoisted_1),
        _ctx.$slots.default ? (openBlock(), createElementBlock("p", _hoisted_2, [
          renderSlot(_ctx.$slots, "default")
        ])) : createCommentVNode("v-if", true)
      ],
      64
      /* STABLE_FRAGMENT */
    )) : $props.format === "inline" ? (openBlock(), createElementBlock("p", _hoisted_3, [
      createBaseVNode("span", {
        innerHTML: $setup.data.message
      }, null, 8, _hoisted_4)
    ])) : $props.format === "text" ? (openBlock(), createElementBlock(
      Fragment,
      { key: 2 },
      [
        createTextVNode(
          toDisplayString($setup.data.message.replace(/(<([^>]+)>)/ig, "")),
          1
          /* TEXT */
        )
      ],
      64
      /* STABLE_FRAGMENT */
    )) : createCommentVNode("v-if", true);
  }

  // js/common/Diagnostic.vue
  Diagnostic_default.render = render;
  Diagnostic_default.__file = "js/common/Diagnostic.vue";
  var Diagnostic_default2 = Diagnostic_default;

  // node_modules/bootstrap-vue-next/dist/keys-DeiCXkdV.mjs
  var withBvnPrefix = (value, suffix = "") => {
    const suffixWithTrail = `${suffix}___`;
    return `___BVN__ID__${value}__${suffix ? suffixWithTrail : ""}`;
  };
  var createBvnInjectionKey = (name) => withBvnPrefix(name);
  var createBvnPluginInjectionKey = (name) => withBvnPrefix(`${name}__plugin`);
  var carouselInjectionKey = createBvnInjectionKey("carousel");
  var tabsInjectionKey = createBvnInjectionKey("tabs");
  var progressInjectionKey = createBvnInjectionKey("progress");
  var listGroupInjectionKey = createBvnInjectionKey("listGroup");
  var avatarGroupInjectionKey = createBvnInjectionKey("avatarGroup");
  var accordionInjectionKey = createBvnInjectionKey("accordion");
  var checkboxGroupKey = createBvnInjectionKey("checkboxGroup");
  var radioGroupKey = createBvnInjectionKey("radioGroup");
  var collapseInjectionKey = createBvnInjectionKey("collapse");
  var globalShowHideStorageInjectionKey = createBvnPluginInjectionKey("globalShowHideStorage");
  var dropdownInjectionKey = createBvnInjectionKey("dropdown");
  var navbarInjectionKey = createBvnInjectionKey("navbar");
  var rtlPluginKey = createBvnPluginInjectionKey("rtl");
  var breadcrumbPluginKey = createBvnPluginInjectionKey("breadcrumbPlugin");
  var modalManagerPluginKey = createBvnPluginInjectionKey("modalManager");
  var defaultsKey = createBvnPluginInjectionKey("defaults");
  var inputGroupKey = createBvnInjectionKey("inputGroup");
  var buttonGroupKey = createBvnInjectionKey("buttonGroup");
  var toastPluginKey = createBvnPluginInjectionKey("toast");
  var modalControllerPluginKey = createBvnPluginInjectionKey("modalController");
  var popoverPluginKey = createBvnPluginInjectionKey("popover");
  var formGroupPluginKey = createBvnInjectionKey("formGroupPlugin");

  // node_modules/bootstrap-vue-next/dist/index-D3jGjWWk.mjs
  function tryOnScopeDispose(fn) {
    if (getCurrentScope()) {
      onScopeDispose(fn);
      return true;
    }
    return false;
  }
  function createSharedComposable(composable) {
    let subscribers = 0;
    let state;
    let scope;
    const dispose = () => {
      subscribers -= 1;
      if (scope && subscribers <= 0) {
        scope.stop();
        state = void 0;
        scope = void 0;
      }
    };
    return (...args) => {
      subscribers += 1;
      if (!scope) {
        scope = effectScope(true);
        state = scope.run(() => composable(...args));
      }
      tryOnScopeDispose(dispose);
      return state;
    };
  }
  function toValue2(r) {
    return typeof r === "function" ? r() : unref(r);
  }
  var isClient = typeof window !== "undefined" && typeof document !== "undefined";
  typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope;
  var notNullish = (val) => val != null;
  var toString = Object.prototype.toString;
  var isObject2 = (val) => toString.call(val) === "[object Object]";
  var timestamp = () => +Date.now();
  var noop = () => {
  };
  var isIOS = /* @__PURE__ */ getIsIOS();
  function getIsIOS() {
    var _a, _b;
    return isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && (/iP(?:ad|hone|od)/.test(window.navigator.userAgent) || ((_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.maxTouchPoints) > 2 && /iPad|Macintosh/.test(window == null ? void 0 : window.navigator.userAgent));
  }
  function createFilterWrapper(filter, fn) {
    function wrapper(...args) {
      return new Promise((resolve2, reject) => {
        Promise.resolve(filter(() => fn.apply(this, args), { fn, thisArg: this, args })).then(resolve2).catch(reject);
      });
    }
    return wrapper;
  }
  function throttleFilter(...args) {
    let lastExec = 0;
    let timer;
    let isLeading = true;
    let lastRejector = noop;
    let lastValue;
    let ms;
    let trailing;
    let leading;
    let rejectOnCancel;
    if (!isRef2(args[0]) && typeof args[0] === "object")
      ({ delay: ms, trailing = true, leading = true, rejectOnCancel = false } = args[0]);
    else
      [ms, trailing = true, leading = true, rejectOnCancel = false] = args;
    const clear = () => {
      if (timer) {
        clearTimeout(timer);
        timer = void 0;
        lastRejector();
        lastRejector = noop;
      }
    };
    const filter = (_invoke) => {
      const duration = toValue2(ms);
      const elapsed = Date.now() - lastExec;
      const invoke = () => {
        return lastValue = _invoke();
      };
      clear();
      if (duration <= 0) {
        lastExec = Date.now();
        return invoke();
      }
      if (elapsed > duration && (leading || !isLeading)) {
        lastExec = Date.now();
        invoke();
      } else if (trailing) {
        lastValue = new Promise((resolve2, reject) => {
          lastRejector = rejectOnCancel ? reject : resolve2;
          timer = setTimeout(() => {
            lastExec = Date.now();
            isLeading = true;
            resolve2(invoke());
            clear();
          }, Math.max(0, duration - elapsed));
        });
      }
      if (!leading && !timer)
        timer = setTimeout(() => isLeading = true, duration);
      isLeading = false;
      return lastValue;
    };
    return filter;
  }
  function cacheStringFunction2(fn) {
    const cache = /* @__PURE__ */ Object.create(null);
    return (str) => {
      const hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  }
  var camelizeRE2 = /-(\w)/g;
  var camelize2 = cacheStringFunction2((str) => {
    return str.replace(camelizeRE2, (_, c) => c ? c.toUpperCase() : "");
  });
  function increaseWithUnit(target, delta) {
    var _a;
    if (typeof target === "number")
      return target + delta;
    const value = ((_a = target.match(/^-?\d+\.?\d*/)) == null ? void 0 : _a[0]) || "";
    const unit = target.slice(value.length);
    const result = Number.parseFloat(value) + delta;
    if (Number.isNaN(result))
      return target;
    return result + unit;
  }
  function toRef2(...args) {
    if (args.length !== 1)
      return toRef(...args);
    const r = args[0];
    return typeof r === "function" ? readonly(customRef(() => ({ get: r, set: noop }))) : ref(r);
  }
  function useThrottleFn(fn, ms = 200, trailing = false, leading = true, rejectOnCancel = false) {
    return createFilterWrapper(
      throttleFilter(ms, trailing, leading, rejectOnCancel),
      fn
    );
  }
  function useIntervalFn(cb, interval = 1e3, options = {}) {
    const {
      immediate = true,
      immediateCallback = false
    } = options;
    let timer = null;
    const isActive = ref(false);
    function clean() {
      if (timer) {
        clearInterval(timer);
        timer = null;
      }
    }
    function pause() {
      isActive.value = false;
      clean();
    }
    function resume() {
      const intervalValue = toValue2(interval);
      if (intervalValue <= 0)
        return;
      isActive.value = true;
      if (immediateCallback)
        cb();
      clean();
      if (isActive.value)
        timer = setInterval(cb, intervalValue);
    }
    if (immediate && isClient)
      resume();
    if (isRef2(interval) || typeof interval === "function") {
      const stopWatch = watch2(interval, () => {
        if (isActive.value && isClient)
          resume();
      });
      tryOnScopeDispose(stopWatch);
    }
    tryOnScopeDispose(pause);
    return {
      isActive,
      pause,
      resume
    };
  }
  function useToNumber(value, options = {}) {
    const {
      method = "parseFloat",
      radix,
      nanToZero
    } = options;
    return computed2(() => {
      let resolved = toValue2(value);
      if (typeof resolved === "string")
        resolved = Number[method](resolved, radix);
      if (nanToZero && Number.isNaN(resolved))
        resolved = 0;
      return resolved;
    });
  }

  // node_modules/bootstrap-vue-next/dist/index-Cr5Qd2ql.mjs
  var defaultWindow = isClient ? window : void 0;
  function unrefElement(elRef) {
    var _a;
    const plain = toValue2(elRef);
    return (_a = plain == null ? void 0 : plain.$el) != null ? _a : plain;
  }
  function useEventListener(...args) {
    let target;
    let events;
    let listeners;
    let options;
    if (typeof args[0] === "string" || Array.isArray(args[0])) {
      [events, listeners, options] = args;
      target = defaultWindow;
    } else {
      [target, events, listeners, options] = args;
    }
    if (!target)
      return noop;
    if (!Array.isArray(events))
      events = [events];
    if (!Array.isArray(listeners))
      listeners = [listeners];
    const cleanups = [];
    const cleanup = () => {
      cleanups.forEach((fn) => fn());
      cleanups.length = 0;
    };
    const register = (el, event, listener, options2) => {
      el.addEventListener(event, listener, options2);
      return () => el.removeEventListener(event, listener, options2);
    };
    const stopWatch = watch2(
      () => [unrefElement(target), toValue2(options)],
      ([el, options2]) => {
        cleanup();
        if (!el)
          return;
        const optionsClone = isObject2(options2) ? { ...options2 } : options2;
        cleanups.push(
          ...events.flatMap((event) => {
            return listeners.map((listener) => register(el, event, listener, optionsClone));
          })
        );
      },
      { immediate: true, flush: "post" }
    );
    const stop2 = () => {
      stopWatch();
      cleanup();
    };
    tryOnScopeDispose(stop2);
    return stop2;
  }
  var _iOSWorkaround = false;
  function onClickOutside(target, handler, options = {}) {
    const { window: window2 = defaultWindow, ignore = [], capture = true, detectIframe = false } = options;
    if (!window2)
      return noop;
    if (isIOS && !_iOSWorkaround) {
      _iOSWorkaround = true;
      Array.from(window2.document.body.children).forEach((el) => el.addEventListener("click", noop));
      window2.document.documentElement.addEventListener("click", noop);
    }
    let shouldListen = true;
    const shouldIgnore = (event) => {
      return toValue2(ignore).some((target2) => {
        if (typeof target2 === "string") {
          return Array.from(window2.document.querySelectorAll(target2)).some((el) => el === event.target || event.composedPath().includes(el));
        } else {
          const el = unrefElement(target2);
          return el && (event.target === el || event.composedPath().includes(el));
        }
      });
    };
    const listener = (event) => {
      const el = unrefElement(target);
      if (!el || el === event.target || event.composedPath().includes(el))
        return;
      if (event.detail === 0)
        shouldListen = !shouldIgnore(event);
      if (!shouldListen) {
        shouldListen = true;
        return;
      }
      handler(event);
    };
    let isProcessingClick = false;
    const cleanup = [
      useEventListener(window2, "click", (event) => {
        if (!isProcessingClick) {
          isProcessingClick = true;
          setTimeout(() => {
            isProcessingClick = false;
          }, 0);
          listener(event);
        }
      }, { passive: true, capture }),
      useEventListener(window2, "pointerdown", (e) => {
        const el = unrefElement(target);
        shouldListen = !shouldIgnore(e) && !!(el && !e.composedPath().includes(el));
      }, { passive: true }),
      detectIframe && useEventListener(window2, "blur", (event) => {
        setTimeout(() => {
          var _a;
          const el = unrefElement(target);
          if (((_a = window2.document.activeElement) == null ? void 0 : _a.tagName) === "IFRAME" && !(el == null ? void 0 : el.contains(window2.document.activeElement))) {
            handler(event);
          }
        }, 0);
      })
    ].filter(Boolean);
    const stop2 = () => cleanup.forEach((fn) => fn());
    return stop2;
  }
  function createKeyPredicate(keyFilter) {
    if (typeof keyFilter === "function")
      return keyFilter;
    else if (typeof keyFilter === "string")
      return (event) => event.key === keyFilter;
    else if (Array.isArray(keyFilter))
      return (event) => keyFilter.includes(event.key);
    return () => true;
  }
  function onKeyStroke(...args) {
    let key;
    let handler;
    let options = {};
    if (args.length === 3) {
      key = args[0];
      handler = args[1];
      options = args[2];
    } else if (args.length === 2) {
      if (typeof args[1] === "object") {
        key = true;
        handler = args[0];
        options = args[1];
      } else {
        key = args[0];
        handler = args[1];
      }
    } else {
      key = true;
      handler = args[0];
    }
    const {
      target = defaultWindow,
      eventName = "keydown",
      passive = false,
      dedupe = false
    } = options;
    const predicate = createKeyPredicate(key);
    const listener = (e) => {
      if (e.repeat && toValue2(dedupe))
        return;
      if (predicate(e))
        handler(e);
    };
    return useEventListener(target, eventName, listener, passive);
  }
  function useMounted() {
    const isMounted = ref(false);
    const instance = getCurrentInstance();
    if (instance) {
      onMounted(() => {
        isMounted.value = true;
      }, instance);
    }
    return isMounted;
  }
  function useSupported(callback) {
    const isMounted = useMounted();
    return computed2(() => {
      isMounted.value;
      return Boolean(callback());
    });
  }
  function useMutationObserver(target, callback, options = {}) {
    const { window: window2 = defaultWindow, ...mutationOptions } = options;
    let observer;
    const isSupported2 = useSupported(() => window2 && "MutationObserver" in window2);
    const cleanup = () => {
      if (observer) {
        observer.disconnect();
        observer = void 0;
      }
    };
    const targets = computed2(() => {
      const value = toValue2(target);
      const items = (Array.isArray(value) ? value : [value]).map(unrefElement).filter(notNullish);
      return new Set(items);
    });
    const stopWatch = watch2(
      () => targets.value,
      (targets2) => {
        cleanup();
        if (isSupported2.value && targets2.size) {
          observer = new MutationObserver(callback);
          targets2.forEach((el) => observer.observe(el, mutationOptions));
        }
      },
      { immediate: true, flush: "post" }
    );
    const takeRecords = () => {
      return observer == null ? void 0 : observer.takeRecords();
    };
    const stop2 = () => {
      stopWatch();
      cleanup();
    };
    tryOnScopeDispose(stop2);
    return {
      isSupported: isSupported2,
      stop: stop2,
      takeRecords
    };
  }
  function useRafFn(fn, options = {}) {
    const {
      immediate = true,
      fpsLimit = void 0,
      window: window2 = defaultWindow
    } = options;
    const isActive = ref(false);
    const intervalLimit = fpsLimit ? 1e3 / fpsLimit : null;
    let previousFrameTimestamp = 0;
    let rafId = null;
    function loop(timestamp2) {
      if (!isActive.value || !window2)
        return;
      if (!previousFrameTimestamp)
        previousFrameTimestamp = timestamp2;
      const delta = timestamp2 - previousFrameTimestamp;
      if (intervalLimit && delta < intervalLimit) {
        rafId = window2.requestAnimationFrame(loop);
        return;
      }
      previousFrameTimestamp = timestamp2;
      fn({ delta, timestamp: timestamp2 });
      rafId = window2.requestAnimationFrame(loop);
    }
    function resume() {
      if (!isActive.value && window2) {
        isActive.value = true;
        previousFrameTimestamp = 0;
        rafId = window2.requestAnimationFrame(loop);
      }
    }
    function pause() {
      isActive.value = false;
      if (rafId != null && window2) {
        window2.cancelAnimationFrame(rafId);
        rafId = null;
      }
    }
    if (immediate)
      resume();
    tryOnScopeDispose(pause);
    return {
      isActive: readonly(isActive),
      pause,
      resume
    };
  }
  function useMediaQuery(query, options = {}) {
    const { window: window2 = defaultWindow } = options;
    const isSupported2 = useSupported(() => window2 && "matchMedia" in window2 && typeof window2.matchMedia === "function");
    let mediaQuery;
    const matches2 = ref(false);
    const handler = (event) => {
      matches2.value = event.matches;
    };
    const cleanup = () => {
      if (!mediaQuery)
        return;
      if ("removeEventListener" in mediaQuery)
        mediaQuery.removeEventListener("change", handler);
      else
        mediaQuery.removeListener(handler);
    };
    const stopWatch = watchEffect(() => {
      if (!isSupported2.value)
        return;
      cleanup();
      mediaQuery = window2.matchMedia(toValue2(query));
      if ("addEventListener" in mediaQuery)
        mediaQuery.addEventListener("change", handler);
      else
        mediaQuery.addListener(handler);
      matches2.value = mediaQuery.matches;
    });
    tryOnScopeDispose(() => {
      stopWatch();
      cleanup();
      mediaQuery = void 0;
    });
    return matches2;
  }
  var breakpointsBootstrapV5 = {
    xs: 0,
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200,
    xxl: 1400
  };
  function useBreakpoints(breakpoints, options = {}) {
    function getValue2(k, delta) {
      let v = toValue2(breakpoints[toValue2(k)]);
      if (delta != null)
        v = increaseWithUnit(v, delta);
      if (typeof v === "number")
        v = `${v}px`;
      return v;
    }
    const { window: window2 = defaultWindow, strategy = "min-width" } = options;
    function match(query) {
      if (!window2)
        return false;
      return window2.matchMedia(query).matches;
    }
    const greaterOrEqual = (k) => {
      return useMediaQuery(() => `(min-width: ${getValue2(k)})`, options);
    };
    const smallerOrEqual = (k) => {
      return useMediaQuery(() => `(max-width: ${getValue2(k)})`, options);
    };
    const shortcutMethods = Object.keys(breakpoints).reduce((shortcuts, k) => {
      Object.defineProperty(shortcuts, k, {
        get: () => strategy === "min-width" ? greaterOrEqual(k) : smallerOrEqual(k),
        enumerable: true,
        configurable: true
      });
      return shortcuts;
    }, {});
    function current() {
      const points = Object.keys(breakpoints).map((i) => [i, greaterOrEqual(i)]);
      return computed2(() => points.filter(([, v]) => v.value).map(([k]) => k));
    }
    return Object.assign(shortcutMethods, {
      greaterOrEqual,
      smallerOrEqual,
      greater(k) {
        return useMediaQuery(() => `(min-width: ${getValue2(k, 0.1)})`, options);
      },
      smaller(k) {
        return useMediaQuery(() => `(max-width: ${getValue2(k, -0.1)})`, options);
      },
      between(a, b) {
        return useMediaQuery(() => `(min-width: ${getValue2(a)}) and (max-width: ${getValue2(b, -0.1)})`, options);
      },
      isGreater(k) {
        return match(`(min-width: ${getValue2(k, 0.1)})`);
      },
      isGreaterOrEqual(k) {
        return match(`(min-width: ${getValue2(k)})`);
      },
      isSmaller(k) {
        return match(`(max-width: ${getValue2(k, -0.1)})`);
      },
      isSmallerOrEqual(k) {
        return match(`(max-width: ${getValue2(k)})`);
      },
      isInBetween(a, b) {
        return match(`(min-width: ${getValue2(a)}) and (max-width: ${getValue2(b, -0.1)})`);
      },
      current,
      active() {
        const bps = current();
        return computed2(() => bps.value.length === 0 ? "" : bps.value.at(-1));
      }
    });
  }
  var _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  var globalKey = "__vueuse_ssr_handlers__";
  var handlers = /* @__PURE__ */ getHandlers();
  function getHandlers() {
    if (!(globalKey in _global))
      _global[globalKey] = _global[globalKey] || {};
    return _global[globalKey];
  }
  function getSSRHandler(key, fallback) {
    return handlers[key] || fallback;
  }
  function useElementHover(el, options = {}) {
    const {
      delayEnter = 0,
      delayLeave = 0,
      window: window2 = defaultWindow
    } = options;
    const isHovered = ref(false);
    let timer;
    const toggle2 = (entering) => {
      const delay3 = entering ? delayEnter : delayLeave;
      if (timer) {
        clearTimeout(timer);
        timer = void 0;
      }
      if (delay3)
        timer = setTimeout(() => isHovered.value = entering, delay3);
      else
        isHovered.value = entering;
    };
    if (!window2)
      return isHovered;
    useEventListener(el, "mouseenter", () => toggle2(true), { passive: true });
    useEventListener(el, "mouseleave", () => toggle2(false), { passive: true });
    return isHovered;
  }
  function useFocus(target, options = {}) {
    const { initialValue = false, focusVisible = false, preventScroll = false } = options;
    const innerFocused = ref(false);
    const targetElement = computed2(() => unrefElement(target));
    useEventListener(targetElement, "focus", (event) => {
      var _a, _b;
      if (!focusVisible || ((_b = (_a = event.target).matches) == null ? void 0 : _b.call(_a, ":focus-visible")))
        innerFocused.value = true;
    });
    useEventListener(targetElement, "blur", () => innerFocused.value = false);
    const focused = computed2({
      get: () => innerFocused.value,
      set(value) {
        var _a, _b;
        if (!value && innerFocused.value)
          (_a = targetElement.value) == null ? void 0 : _a.blur();
        else if (value && !innerFocused.value)
          (_b = targetElement.value) == null ? void 0 : _b.focus({ preventScroll });
      }
    });
    watch2(
      targetElement,
      () => {
        focused.value = initialValue;
      },
      { immediate: true, flush: "post" }
    );
    return { focused };
  }
  function resolveElement(el) {
    if (typeof Window !== "undefined" && el instanceof Window)
      return el.document.documentElement;
    if (typeof Document !== "undefined" && el instanceof Document)
      return el.documentElement;
    return el;
  }
  var UseMouseBuiltinExtractors = {
    page: (event) => [event.pageX, event.pageY],
    client: (event) => [event.clientX, event.clientY],
    screen: (event) => [event.screenX, event.screenY],
    movement: (event) => event instanceof Touch ? null : [event.movementX, event.movementY]
  };
  function useMouse(options = {}) {
    const {
      type = "page",
      touch = true,
      resetOnTouchEnds = false,
      initialValue = { x: 0, y: 0 },
      window: window2 = defaultWindow,
      target = window2,
      scroll = true,
      eventFilter: eventFilter2
    } = options;
    let _prevMouseEvent = null;
    const x = ref(initialValue.x);
    const y = ref(initialValue.y);
    const sourceType = ref(null);
    const extractor = typeof type === "function" ? type : UseMouseBuiltinExtractors[type];
    const mouseHandler = (event) => {
      const result = extractor(event);
      _prevMouseEvent = event;
      if (result) {
        [x.value, y.value] = result;
        sourceType.value = "mouse";
      }
    };
    const touchHandler = (event) => {
      if (event.touches.length > 0) {
        const result = extractor(event.touches[0]);
        if (result) {
          [x.value, y.value] = result;
          sourceType.value = "touch";
        }
      }
    };
    const scrollHandler = () => {
      if (!_prevMouseEvent || !window2)
        return;
      const pos = extractor(_prevMouseEvent);
      if (_prevMouseEvent instanceof MouseEvent && pos) {
        x.value = pos[0] + window2.scrollX;
        y.value = pos[1] + window2.scrollY;
      }
    };
    const reset = () => {
      x.value = initialValue.x;
      y.value = initialValue.y;
    };
    const mouseHandlerWrapper = eventFilter2 ? (event) => eventFilter2(() => mouseHandler(event), {}) : (event) => mouseHandler(event);
    const touchHandlerWrapper = eventFilter2 ? (event) => eventFilter2(() => touchHandler(event), {}) : (event) => touchHandler(event);
    const scrollHandlerWrapper = eventFilter2 ? () => eventFilter2(() => scrollHandler(), {}) : () => scrollHandler();
    if (target) {
      const listenerOptions = { passive: true };
      useEventListener(target, ["mousemove", "dragover"], mouseHandlerWrapper, listenerOptions);
      if (touch && type !== "movement") {
        useEventListener(target, ["touchstart", "touchmove"], touchHandlerWrapper, listenerOptions);
        if (resetOnTouchEnds)
          useEventListener(target, "touchend", reset, listenerOptions);
      }
      if (scroll && type === "page")
        useEventListener(window2, "scroll", scrollHandlerWrapper, { passive: true });
    }
    return {
      x,
      y,
      sourceType
    };
  }
  function checkOverflowScroll(ele) {
    const style = window.getComputedStyle(ele);
    if (style.overflowX === "scroll" || style.overflowY === "scroll" || style.overflowX === "auto" && ele.clientWidth < ele.scrollWidth || style.overflowY === "auto" && ele.clientHeight < ele.scrollHeight) {
      return true;
    } else {
      const parent = ele.parentNode;
      if (!parent || parent.tagName === "BODY")
        return false;
      return checkOverflowScroll(parent);
    }
  }
  function preventDefault(rawEvent) {
    const e = rawEvent || window.event;
    const _target = e.target;
    if (checkOverflowScroll(_target))
      return false;
    if (e.touches.length > 1)
      return true;
    if (e.preventDefault)
      e.preventDefault();
    return false;
  }
  var elInitialOverflow = /* @__PURE__ */ new WeakMap();
  function useScrollLock(element, initialState = false) {
    const isLocked = ref(initialState);
    let stopTouchMoveListener = null;
    let initialOverflow = "";
    watch2(toRef2(element), (el) => {
      const target = resolveElement(toValue2(el));
      if (target) {
        const ele = target;
        if (!elInitialOverflow.get(ele))
          elInitialOverflow.set(ele, ele.style.overflow);
        if (ele.style.overflow !== "hidden")
          initialOverflow = ele.style.overflow;
        if (ele.style.overflow === "hidden")
          return isLocked.value = true;
        if (isLocked.value)
          return ele.style.overflow = "hidden";
      }
    }, {
      immediate: true
    });
    const lock = () => {
      const el = resolveElement(toValue2(element));
      if (!el || isLocked.value)
        return;
      if (isIOS) {
        stopTouchMoveListener = useEventListener(
          el,
          "touchmove",
          (e) => {
            preventDefault(e);
          },
          { passive: false }
        );
      }
      el.style.overflow = "hidden";
      isLocked.value = true;
    };
    const unlock = () => {
      const el = resolveElement(toValue2(element));
      if (!el || !isLocked.value)
        return;
      if (isIOS)
        stopTouchMoveListener == null ? void 0 : stopTouchMoveListener();
      el.style.overflow = initialOverflow;
      elInitialOverflow.delete(el);
      isLocked.value = false;
    };
    tryOnScopeDispose(unlock);
    return computed2({
      get() {
        return isLocked.value;
      },
      set(v) {
        if (v)
          lock();
        else
          unlock();
      }
    });
  }
  function useTimestamp(options = {}) {
    const {
      controls: exposeControls = false,
      offset: offset2 = 0,
      immediate = true,
      interval = "requestAnimationFrame",
      callback
    } = options;
    const ts = ref(timestamp() + offset2);
    const update = () => ts.value = timestamp() + offset2;
    const cb = callback ? () => {
      update();
      callback(ts.value);
    } : update;
    const controls = interval === "requestAnimationFrame" ? useRafFn(cb, { immediate }) : useIntervalFn(cb, interval, { immediate });
    if (exposeControls) {
      return {
        timestamp: ts,
        ...controls
      };
    } else {
      return ts;
    }
  }

  // node_modules/bootstrap-vue-next/dist/useModalManager-CZA3qe8b.mjs
  var modalOpenClassName = "modal-open";
  var useSharedModalStack = () => {
    const modalManagerPlugin2 = inject(modalManagerPluginKey);
    const dispose = (modal) => {
      modalManagerPlugin2 == null ? void 0 : modalManagerPlugin2.removeStack(modal);
      modalManagerPlugin2 == null ? void 0 : modalManagerPlugin2.removeRegistry(modal);
    };
    const updateHTMLAttrs = getSSRHandler("updateHTMLAttrs", (selector, attribute, value) => {
      const el = typeof selector === "string" ? window == null ? void 0 : window.document.querySelector(selector) : unrefElement(selector);
      if (!el)
        return;
      if (attribute === "class") {
        el.classList.toggle(modalOpenClassName, value === modalOpenClassName);
      } else {
        el.setAttribute(attribute, value);
      }
    });
    tryOnScopeDispose(() => {
      updateHTMLAttrs("body", "class", "");
    });
    watch2(
      () => modalManagerPlugin2 == null ? void 0 : modalManagerPlugin2.countStack.value,
      (newValue) => {
        if (newValue === void 0)
          return;
        updateHTMLAttrs("body", "class", newValue > 0 ? modalOpenClassName : "");
      }
    );
    return {
      ...modalManagerPlugin2,
      dispose
    };
  };
  var useModalManager = (modalOpen, initialValue) => {
    const { pushRegistry, pushStack, removeStack, stack: stack2, dispose, countStack } = useSharedModalStack();
    const currentModal = getCurrentInstance();
    if (!currentModal || currentModal.type.__name !== "BModal") {
      throw new Error("useModalManager must only use in BModal component");
    }
    pushRegistry == null ? void 0 : pushRegistry(currentModal);
    tryOnScopeDispose(() => {
      dispose(currentModal);
    });
    const setInStack = (newValue, oldValue) => {
      if (newValue) {
        pushStack == null ? void 0 : pushStack(currentModal);
      } else if (oldValue && !newValue) {
        removeStack == null ? void 0 : removeStack(currentModal);
      }
    };
    setInStack(initialValue, initialValue);
    watch2(modalOpen, setInStack);
    return {
      activePosition: computed2(
        () => stack2 == null ? void 0 : stack2.value.findIndex((el) => {
          var _a, _b;
          return ((_a = el.exposed) == null ? void 0 : _a.id) === ((_b = currentModal.exposed) == null ? void 0 : _b.id);
        })
      ),
      activeModalCount: countStack,
      stackWithoutSelf: computed2(
        () => (stack2 == null ? void 0 : stack2.value.filter((el) => {
          var _a, _b;
          return ((_a = el.exposed) == null ? void 0 : _a.id) !== ((_b = currentModal.exposed) == null ? void 0 : _b.id);
        })) ?? []
      )
    };
  };

  // node_modules/bootstrap-vue-next/dist/src/composables/useModalController/index.mjs
  var useModalController = () => {
    const { lastStack, stack: stack2 } = useSharedModalStack();
    const modalControllerPlugin2 = inject(modalControllerPluginKey);
    const hide2 = (trigger2 = "") => {
      var _a;
      if (lastStack == null ? void 0 : lastStack.value) {
        (_a = lastStack == null ? void 0 : lastStack.value.exposed) == null ? void 0 : _a.hide(trigger2);
      }
    };
    const hideAll = (trigger2 = "") => {
      stack2 == null ? void 0 : stack2.value.forEach((modal) => {
        var _a;
        (_a = modal.exposed) == null ? void 0 : _a.hide(trigger2);
      });
    };
    return {
      ...modalControllerPlugin2,
      hide: hide2,
      hideAll
      // Todo: Supports listening events globally in the future
    };
  };

  // node_modules/bootstrap-vue-next/dist/getElement-D_JPfLJS.mjs
  var getElement = (element) => {
    if (!element)
      return void 0;
    if (typeof element === "string") {
      if (typeof document === "undefined")
        return void 0;
      const idElement = document.getElementById(element);
      return idElement ?? document.querySelector(element) ?? void 0;
    }
    return element.$el ?? element;
  };

  // node_modules/bootstrap-vue-next/dist/src/composables/useToastController/index.mjs
  var useToastController = () => ({ ...inject(toastPluginKey) });

  // node_modules/bootstrap-vue-next/dist/constants-DY6pmjuU.mjs
  var CODE_DOWN = "ArrowDown";
  var CODE_END = "End";
  var CODE_HOME = "Home";
  var CODE_PAGEDOWN = "PageDown";
  var CODE_PAGEUP = "PageUp";
  var CODE_UP = "ArrowUp";
  var RX_UNDERSCORE = /_/g;
  var RX_LOWER_UPPER = /([a-z])([A-Z])/g;
  var RX_NUMBER = /^[0-9]*\.?[0-9]+$/;
  var RX_START_SPACE_WORD = /(\s|^)(\w)/g;
  var RX_FIRST_START_SPACE_WORD = /(\s|^)(\w)/;

  // node_modules/bootstrap-vue-next/dist/useDefaults-C92La0nf.mjs
  function injectSelf(key, vm = getCurrentInstance2("injectSelf")) {
    const { provides } = vm;
    if (provides && key in provides) {
      return provides[key];
    }
    return void 0;
  }
  function getCurrentInstance2(name, message) {
    const vm = getCurrentInstance();
    if (!vm) {
      throw new Error(`[Bvn] ${name} ${"must be called from inside a setup function"}`);
    }
    return vm;
  }
  var toKebabCase = (str = "") => str.replace(/[^a-z]/gi, "-").replace(/\B([A-Z])/g, "-$1").toLowerCase();
  var isObject3 = (obj) => obj !== null && typeof obj === "object" && !Array.isArray(obj);
  function mergeDeep(source = {}, target = {}, arrayFn) {
    const out = {};
    for (const key in source) {
      out[key] = source[key];
    }
    for (const key in target) {
      const sourceProperty = source[key];
      const targetProperty = target[key];
      if (isObject3(sourceProperty) && isObject3(targetProperty)) {
        out[key] = mergeDeep(sourceProperty, targetProperty, arrayFn);
        continue;
      }
      if (Array.isArray(sourceProperty) && Array.isArray(targetProperty) && arrayFn) {
        out[key] = arrayFn(sourceProperty, targetProperty);
        continue;
      }
      out[key] = targetProperty;
    }
    return out;
  }
  var propIsDefined = (vnode, prop) => {
    var _a, _b;
    return typeof ((_a = vnode.props) == null ? void 0 : _a[prop]) !== "undefined" || typeof ((_b = vnode.props) == null ? void 0 : _b[toKebabCase(prop)]) !== "undefined";
  };
  function internalUseDefaults(props = {}, name) {
    const defaults = inject(defaultsKey, ref({}));
    const vm = getCurrentInstance2("useDefaults");
    name = name ?? vm.type.name ?? vm.type.__name;
    if (!name) {
      throw new Error("[Bvn] Could not determine component name");
    }
    const componentDefaults = computed2(() => {
      var _a;
      return (_a = defaults.value) == null ? void 0 : _a[props._as ?? name];
    });
    const _props = new Proxy(props, {
      get(target, prop) {
        var _a, _b, _c, _d;
        const propValue = Reflect.get(target, prop);
        if (prop === "class" || prop === "style") {
          return [(_a = componentDefaults.value) == null ? void 0 : _a[prop], propValue].filter((v) => v != null);
        } else if (typeof prop === "string" && !propIsDefined(vm.vnode, prop)) {
          return ((_b = componentDefaults.value) == null ? void 0 : _b[prop]) ?? ((_d = (_c = defaults.value) == null ? void 0 : _c.global) == null ? void 0 : _d[prop]) ?? propValue;
        }
        return propValue;
      }
    });
    const _subcomponentDefaults = shallowRef();
    watchEffect(() => {
      if (componentDefaults.value) {
        const subComponents = Object.entries(componentDefaults.value).filter(
          ([key]) => key.startsWith(key[0].toUpperCase())
        );
        _subcomponentDefaults.value = subComponents.length ? Object.fromEntries(subComponents) : void 0;
      } else {
        _subcomponentDefaults.value = void 0;
      }
    });
    function provideSubDefaults() {
      const injected = injectSelf(defaultsKey, vm);
      provide(
        defaultsKey,
        computed2(
          () => _subcomponentDefaults.value ? mergeDeep((injected == null ? void 0 : injected.value) ?? {}, _subcomponentDefaults.value) : injected == null ? void 0 : injected.value
        )
      );
    }
    return { props: _props, provideSubDefaults };
  }
  function useDefaults(props, name) {
    const { props: _props, provideSubDefaults } = internalUseDefaults(props, name);
    provideSubDefaults();
    return _props;
  }

  // node_modules/bootstrap-vue-next/dist/useId-CNUxHyGb.mjs
  var useId2 = (id, suffix) => {
    const genId = useId();
    return computed2(() => toValue(id) || withBvnPrefix(genId || "", suffix));
  };

  // node_modules/bootstrap-vue-next/dist/ConditionalTeleport.vue_vue_type_script_lang-2PJ2jBTg.mjs
  var _sfc_main = defineComponent({
    name: "ConditionalTeleport",
    inheritAttrs: false,
    slots: Object,
    props: {
      to: {
        type: [String, Object],
        default: null
      },
      disabled: {
        type: Boolean,
        required: true
      }
    },
    setup(props, { slots }) {
      return () => {
        var _a, _b;
        return !props.to ? (_a = slots.default) == null ? void 0 : _a.call(slots, {}) : h(Teleport, { to: props.to, disabled: props.disabled || !props.to }, [(_b = slots.default) == null ? void 0 : _b.call(slots, {})]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/classes-IC0yVJlq.mjs
  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  var BvEvent = class _BvEvent {
    constructor(eventType, eventInit = {}) {
      __publicField(this, "cancelable", true);
      __publicField(this, "componentId", null);
      __publicField(this, "_defaultPrevented", false);
      __publicField(this, "eventType", "");
      __publicField(this, "nativeEvent", null);
      __publicField(this, "_preventDefault");
      __publicField(this, "relatedTarget", null);
      __publicField(this, "target", null);
      if (!eventType) {
        throw new TypeError(
          `Failed to construct '${this.constructor.name}'. 1 argument required, ${arguments.length} given.`
        );
      }
      Object.assign(this, _BvEvent.Defaults, eventInit, { eventType });
      this._preventDefault = function _preventDefault() {
        if (this.cancelable) {
          this.defaultPrevented = true;
        }
      };
    }
    // Readable by everyone,
    // But only overwritten by inherrited constructors
    get defaultPrevented() {
      return this._defaultPrevented;
    }
    set defaultPrevented(prop) {
      this._defaultPrevented = prop;
    }
    // I think this is right
    // We want to be able to have it callable to everyone,
    // But only overwritten by inherrited constructors
    get preventDefault() {
      return this._preventDefault;
    }
    // This may not be correct, because it doesn't get correct type inferences in children
    // Ex overwrite this.preventDefault = () => true is valid. Could be a TS issue
    set preventDefault(setter) {
      this._preventDefault = setter;
    }
    static get Defaults() {
      return {
        cancelable: true,
        componentId: null,
        eventType: "",
        nativeEvent: null,
        relatedTarget: null,
        target: null
      };
    }
  };
  var BvTriggerableEvent = class extends BvEvent {
    constructor(eventType, eventInit = {}) {
      super(eventType, eventInit);
      __publicField(this, "trigger", null);
      Object.assign(this, BvEvent.Defaults, eventInit, { eventType });
    }
    static get Defaults() {
      return {
        ...super.Defaults,
        trigger: null
      };
    }
  };

  // node_modules/bootstrap-vue-next/dist/useShowHide-BIIrQlBY.mjs
  var fadeBaseTransitionProps = {
    name: "fade",
    enterActiveClass: "",
    enterFromClass: "showing",
    enterToClass: "",
    leaveActiveClass: "",
    leaveFromClass: "",
    leaveToClass: "showing",
    css: true
  };
  var useShowHide = (modelValue, props, emit2, element, computedId, options = {
    transitionProps: {},
    showFn: () => {
    },
    hideFn: () => {
    }
  }) => {
    var _a;
    let noAction = false;
    const initialShow = !!modelValue.value && !props.initialAnimation || props.visible || false;
    const showRef = ref(false);
    const renderRef = ref(initialShow);
    const renderBackdropRef = ref(initialShow);
    let isCountdown = typeof modelValue.value !== "boolean";
    watch2(modelValue, () => {
      isCountdown = typeof modelValue.value !== "boolean";
      if (noAction) {
        noAction = false;
        return;
      }
      if (modelValue.value) {
        show();
      } else {
        hide2();
      }
    });
    const localNoAnimation = ref(initialShow);
    const localTemporaryHide = ref(false);
    const computedNoAnimation = computed2(
      () => props.noAnimation || props.noFade || localNoAnimation.value || false
    );
    onMounted(() => {
      var _a2;
      if (!props.show && initialShow) {
        const event = buildTriggerableEvent("show", { cancelable: true });
        emit2("show", event);
        if (event.defaultPrevented) {
          emit2("show-prevented", buildTriggerableEvent("show-prevented"));
          return;
        }
        localNoAnimation.value = true;
        if (!modelValue.value) {
          noAction = true;
          modelValue.value = true;
        }
        renderRef.value = true;
        renderBackdropRef.value = true;
        isVisible2.value = true;
        backdropVisible.value = true;
        backdropReady.value = true;
        showRef.value = true;
        (_a2 = options.showFn) == null ? void 0 : _a2.call(options);
      } else if (props.show || !!modelValue.value && props.initialAnimation) {
        show();
      }
    });
    watch2(
      () => props.visible,
      (newval) => {
        localNoAnimation.value = true;
        nextTick(() => {
          if (newval)
            isVisible2.value = true;
          if (newval) {
            show();
          } else {
            hide2();
          }
        });
      }
    );
    watch2(
      () => props.show,
      (newval) => {
        if (newval) {
          show();
        } else {
          hide2();
        }
      }
    );
    useEventListener(element, "bv-toggle", () => {
      modelValue.value = !modelValue.value;
    });
    const buildTriggerableEvent = (type, opts = {}) => new BvTriggerableEvent(type, {
      cancelable: false,
      target: (element == null ? void 0 : element.value) || null,
      relatedTarget: null,
      trigger: null,
      ...opts,
      componentId: computedId == null ? void 0 : computedId.value
    });
    let showTimeout;
    const show = () => {
      if (showRef.value)
        return;
      const event = buildTriggerableEvent("show", { cancelable: true });
      emit2("show", event);
      if (event.defaultPrevented) {
        emit2("show-prevented", buildTriggerableEvent("show-prevented"));
        if (isVisible2.value) {
          isVisible2.value = false;
        }
        if (modelValue.value && !isCountdown) {
          noAction = true;
          nextTick(() => {
            modelValue.value = false;
          });
        }
        return;
      }
      renderRef.value = true;
      renderBackdropRef.value = true;
      requestAnimationFrame(() => {
        var _a2;
        showTimeout = setTimeout(
          () => {
            var _a3;
            showRef.value = true;
            (_a3 = options.showFn) == null ? void 0 : _a3.call(options);
            if (!modelValue.value) {
              noAction = true;
              nextTick(() => {
                modelValue.value = true;
              });
            }
          },
          localNoAnimation.value ? 0 : typeof props.delay === "number" ? props.delay : ((_a2 = props.delay) == null ? void 0 : _a2.show) || 0
        );
      });
    };
    const hide2 = (trigger2) => {
      var _a2;
      if (!showRef.value)
        return;
      const event = buildTriggerableEvent("hide", { cancelable: true, trigger: trigger2 });
      const event2 = buildTriggerableEvent(trigger2 || "ignore", { cancelable: true, trigger: trigger2 });
      if (trigger2 === "backdrop" && props.noCloseOnBackdrop || trigger2 === "esc" && props.noCloseOnEsc) {
        emit2("hide-prevented", buildTriggerableEvent("hide-prevented"));
        return;
      }
      if (showTimeout) {
        clearTimeout(showTimeout);
        showTimeout = void 0;
      }
      if (trigger2) {
        emit2(trigger2, event2);
      }
      emit2("hide", event);
      if (event.defaultPrevented || event2.defaultPrevented) {
        emit2("hide-prevented", buildTriggerableEvent("hide-prevented"));
        if (!modelValue.value) {
          nextTick(() => {
            noAction = true;
            modelValue.value = true;
          });
        }
        return;
      }
      setTimeout(
        () => {
          var _a3;
          isLeaving.value = true;
          showRef.value = false;
          (_a3 = options.hideFn) == null ? void 0 : _a3.call(options);
          if (modelValue.value) {
            noAction = true;
            modelValue.value = isCountdown ? 0 : false;
          }
        },
        localNoAnimation.value ? 0 : typeof props.delay === "number" ? props.delay : ((_a2 = props.delay) == null ? void 0 : _a2.hide) || 0
      );
    };
    const throttleHide = useThrottleFn((a) => hide2(a), 500);
    const throttleShow = useThrottleFn(() => show(), 500);
    const toggle2 = () => {
      const e = buildTriggerableEvent("toggle", { cancelable: true });
      emit2("toggle", e);
      if (e.defaultPrevented) {
        emit2("toggle-prevented", buildTriggerableEvent("toggle-prevented"));
        return;
      }
      if (showRef.value) {
        hide2();
      } else {
        show();
      }
    };
    const appRegistry = (_a = inject(
      globalShowHideStorageInjectionKey,
      void 0
    )) == null ? void 0 : _a({
      id: computedId.value,
      toggle: toggle2,
      show,
      hide: hide2,
      value: readonly(showRef)
    });
    onBeforeUnmount(() => {
      appRegistry == null ? void 0 : appRegistry.unregister();
    });
    const lazyLoadCompleted = ref(false);
    const markLazyLoadCompleted = () => {
      if (props.lazy === true)
        lazyLoadCompleted.value = true;
    };
    const isLeaving = ref(false);
    const isActive = ref(false);
    const isVisible2 = ref(false);
    const onBeforeEnter = (el) => {
      var _a2, _b, _c, _d;
      (_b = (_a2 = options.transitionProps) == null ? void 0 : _a2.onBeforeEnter) == null ? void 0 : _b.call(_a2, el);
      (_d = (_c = props.transitionProps) == null ? void 0 : _c.onBeforeEnter) == null ? void 0 : _d.call(_c, el);
      isActive.value = true;
    };
    const onEnter = (el) => {
      var _a2, _b, _c, _d;
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          isVisible2.value = true;
        });
      });
      (_b = (_a2 = options.transitionProps) == null ? void 0 : _a2.onEnter) == null ? void 0 : _b.call(_a2, el);
      (_d = (_c = props.transitionProps) == null ? void 0 : _c.onEnter) == null ? void 0 : _d.call(_c, el);
    };
    const onAfterEnter = (el) => {
      var _a2, _b, _c, _d;
      emit2("shown", buildTriggerableEvent("shown"));
      markLazyLoadCompleted();
      (_b = (_a2 = options.transitionProps) == null ? void 0 : _a2.onAfterEnter) == null ? void 0 : _b.call(_a2, el);
      (_d = (_c = props.transitionProps) == null ? void 0 : _c.onAfterEnter) == null ? void 0 : _d.call(_c, el);
      if (localNoAnimation.value) {
        requestAnimationFrame(() => {
          localNoAnimation.value = false;
        });
      }
      if (localTemporaryHide.value) {
        localTemporaryHide.value = false;
      }
    };
    const onBeforeLeave = (el) => {
      var _a2, _b, _c, _d;
      if (!isLeaving.value)
        isLeaving.value = true;
      (_b = (_a2 = options.transitionProps) == null ? void 0 : _a2.onBeforeLeave) == null ? void 0 : _b.call(_a2, el);
      (_d = (_c = props.transitionProps) == null ? void 0 : _c.onBeforeLeave) == null ? void 0 : _d.call(_c, el);
    };
    const onLeave = (el) => {
      var _a2, _b, _c, _d;
      isVisible2.value = false;
      (_b = (_a2 = options.transitionProps) == null ? void 0 : _a2.onLeave) == null ? void 0 : _b.call(_a2, el);
      (_d = (_c = props.transitionProps) == null ? void 0 : _c.onLeave) == null ? void 0 : _d.call(_c, el);
    };
    const onAfterLeave = (el) => {
      var _a2, _b, _c, _d;
      emit2("hidden", buildTriggerableEvent("hidden"));
      (_b = (_a2 = options.transitionProps) == null ? void 0 : _a2.onAfterLeave) == null ? void 0 : _b.call(_a2, el);
      (_d = (_c = props.transitionProps) == null ? void 0 : _c.onAfterLeave) == null ? void 0 : _d.call(_c, el);
      isLeaving.value = false;
      isActive.value = false;
      if (localNoAnimation.value) {
        requestAnimationFrame(() => {
          localNoAnimation.value = false;
        });
      }
      requestAnimationFrame(() => {
        if (!localTemporaryHide.value)
          renderRef.value = false;
      });
    };
    const contentShowing = computed2(
      () => localTemporaryHide.value === true || isActive.value === true || props.lazy === false || props.lazy === true && lazyLoadCompleted.value === true && props.unmountLazy === false
    );
    const trapActive = ref(false);
    watch2(isVisible2, (val) => {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            requestAnimationFrame(() => {
              setTimeout(() => {
                trapActive.value = val;
              }, 32);
            });
          });
        });
      });
    });
    const backdropVisible = ref(false);
    const backdropReady = ref(false);
    const transitionFunctions = {
      ...options.transitionProps,
      onBeforeEnter,
      onEnter,
      onAfterEnter,
      onBeforeLeave,
      onLeave,
      onAfterLeave
    };
    return {
      showRef,
      renderRef,
      renderBackdropRef,
      isVisible: isVisible2,
      isActive,
      trapActive,
      show,
      hide: hide2,
      toggle: toggle2,
      throttleHide,
      throttleShow,
      buildTriggerableEvent,
      computedNoAnimation,
      localNoAnimation,
      localTemporaryHide,
      isLeaving,
      transitionProps: {
        ...fadeBaseTransitionProps,
        ...props.transitionProps,
        ...transitionFunctions
      },
      lazyLoadCompleted,
      markLazyLoadCompleted,
      contentShowing,
      backdropReady,
      backdropVisible,
      backdropTransitionProps: {
        ...fadeBaseTransitionProps,
        onBeforeEnter: () => {
          requestAnimationFrame(() => {
            requestAnimationFrame(() => {
              backdropVisible.value = true;
            });
          });
          backdropReady.value = false;
        },
        onAfterEnter: () => {
          backdropReady.value = true;
        },
        onBeforeLeave: () => {
          backdropVisible.value = false;
        },
        onAfterLeave: () => {
          backdropReady.value = false;
          requestAnimationFrame(() => {
            renderBackdropRef.value = false;
          });
        }
      }
    };
  };

  // node_modules/bootstrap-vue-next/dist/_plugin-vue_export-helper-1tPrXgE0.mjs
  var _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };

  // node_modules/bootstrap-vue-next/dist/floatingUi-D5nPqieE.mjs
  var sides = ["top", "right", "bottom", "left"];
  var alignments = ["start", "end"];
  var placements = /* @__PURE__ */ sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
  var min = Math.min;
  var max = Math.max;
  var round = Math.round;
  var floor = Math.floor;
  var createCoords = (v) => ({
    x: v,
    y: v
  });
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp(start, value, end) {
    return max(start, min(value, end));
  }
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl)
          return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list2 = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list2 = list2.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list2 = list2.concat(list2.map(getOppositeAlignmentPlacement));
      }
    }
    return list2;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    const {
      x,
      y,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y,
      left: x,
      right: x + width,
      bottom: y + height,
      x,
      y
    };
  }
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition$1 = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x,
      y
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i = 0; i < validMiddleware.length; i++) {
      const {
        name,
        fn
      } = validMiddleware[i];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn({
        x,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y = nextY != null ? nextY : y;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i = -1;
      }
    }
    return {
      x,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x,
      y,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x,
      y,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  var arrow$2 = (options) => ({
    name: "arrow",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state;
      const {
        element,
        padding = 0
      } = evaluate(options, state) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x,
        y
      };
      const axis = getAlignmentAxis(placement);
      const length = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
      const minPadding = min(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset2 = clamp(min$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: {
          [axis]: offset2,
          centerOffset: center - offset2 - alignmentOffset,
          ...shouldAddOffset && {
            alignmentOffset
          }
        },
        reset: shouldAddOffset
      };
    }
  });
  function getPlacementList(alignment, autoAlignment, allowedPlacements) {
    const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
    return allowedPlacementsSortedByAlignment.filter((placement) => {
      if (alignment) {
        return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
      }
      return true;
    });
  }
  var autoPlacement$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "autoPlacement",
      options,
      async fn(state) {
        var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
        const {
          rects,
          middlewareData,
          placement,
          platform: platform2,
          elements
        } = state;
        const {
          crossAxis = false,
          alignment,
          allowedPlacements = placements,
          autoAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state);
        const placements$1 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
        const currentPlacement = placements$1[currentIndex];
        if (currentPlacement == null) {
          return {};
        }
        const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
        if (placement !== currentPlacement) {
          return {
            reset: {
              placement: placements$1[0]
            }
          };
        }
        const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
        const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
          placement: currentPlacement,
          overflows: currentOverflows
        }];
        const nextPlacement = placements$1[currentIndex + 1];
        if (nextPlacement) {
          return {
            data: {
              index: currentIndex + 1,
              overflows: allOverflows
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        const placementsSortedByMostSpace = allOverflows.map((d) => {
          const alignment2 = getAlignment(d.placement);
          return [d.placement, alignment2 && crossAxis ? (
            // Check along the mainAxis and main crossAxis side.
            d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0)
          ) : (
            // Check only the mainAxis.
            d.overflows[0]
          ), d.overflows];
        }).sort((a, b) => a[1] - b[1]);
        const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d) => d[2].slice(
          0,
          // Aligned placements should not check their opposite crossAxis
          // side.
          getAlignment(d[0]) ? 2 : 3
        ).every((v) => v <= 0));
        const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
        if (resetPlacement !== placement) {
          return {
            data: {
              index: currentIndex + 1,
              overflows: allOverflows
            },
            reset: {
              placement: resetPlacement
            }
          };
        }
        return {};
      }
    };
  };
  var flip$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  function getSideOffsets(overflow, rect) {
    return {
      top: overflow.top - rect.height,
      right: overflow.right - rect.width,
      bottom: overflow.bottom - rect.height,
      left: overflow.left - rect.width
    };
  }
  function isAnySideFullyClipped(overflow) {
    return sides.some((side) => overflow[side] >= 0);
  }
  var hide$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "hide",
      options,
      async fn(state) {
        const {
          rects
        } = state;
        const {
          strategy = "referenceHidden",
          ...detectOverflowOptions
        } = evaluate(options, state);
        switch (strategy) {
          case "referenceHidden": {
            const overflow = await detectOverflow(state, {
              ...detectOverflowOptions,
              elementContext: "reference"
            });
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }
          case "escaped": {
            const overflow = await detectOverflow(state, {
              ...detectOverflowOptions,
              altBoundary: true
            });
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }
          default: {
            return {};
          }
        }
      }
    };
  };
  function getBoundingRect(rects) {
    const minX = min(...rects.map((rect) => rect.left));
    const minY = min(...rects.map((rect) => rect.top));
    const maxX = max(...rects.map((rect) => rect.right));
    const maxY = max(...rects.map((rect) => rect.bottom));
    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  }
  function getRectsByLine(rects) {
    const sortedRects = rects.slice().sort((a, b) => a.y - b.y);
    const groups = [];
    let prevRect = null;
    for (let i = 0; i < sortedRects.length; i++) {
      const rect = sortedRects[i];
      if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
        groups.push([rect]);
      } else {
        groups[groups.length - 1].push(rect);
      }
      prevRect = rect;
    }
    return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
  }
  var inline$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "inline",
      options,
      async fn(state) {
        const {
          placement,
          elements,
          rects,
          platform: platform2,
          strategy
        } = state;
        const {
          padding = 2,
          x,
          y
        } = evaluate(options, state);
        const nativeClientRects = Array.from(await (platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
        const clientRects = getRectsByLine(nativeClientRects);
        const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
        const paddingObject = getPaddingObject(padding);
        function getBoundingClientRect2() {
          if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {
            return clientRects.find((rect) => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;
          }
          if (clientRects.length >= 2) {
            if (getSideAxis(placement) === "y") {
              const firstRect = clientRects[0];
              const lastRect = clientRects[clientRects.length - 1];
              const isTop = getSide(placement) === "top";
              const top2 = firstRect.top;
              const bottom2 = lastRect.bottom;
              const left2 = isTop ? firstRect.left : lastRect.left;
              const right2 = isTop ? firstRect.right : lastRect.right;
              const width2 = right2 - left2;
              const height2 = bottom2 - top2;
              return {
                top: top2,
                bottom: bottom2,
                left: left2,
                right: right2,
                width: width2,
                height: height2,
                x: left2,
                y: top2
              };
            }
            const isLeftSide = getSide(placement) === "left";
            const maxRight = max(...clientRects.map((rect) => rect.right));
            const minLeft = min(...clientRects.map((rect) => rect.left));
            const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
            const top = measureRects[0].top;
            const bottom = measureRects[measureRects.length - 1].bottom;
            const left = minLeft;
            const right = maxRight;
            const width = right - left;
            const height = bottom - top;
            return {
              top,
              bottom,
              left,
              right,
              width,
              height,
              x: left,
              y: top
            };
          }
          return fallback;
        }
        const resetRects = await platform2.getElementRects({
          reference: {
            getBoundingClientRect: getBoundingClientRect2
          },
          floating: elements.floating,
          strategy
        });
        if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
          return {
            reset: {
              rects: resetRects
            }
          };
        }
        return {};
      }
    };
  };
  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  var offset$1 = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x,
          y,
          placement,
          middlewareData
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x + diffCoords.x,
          y: y + diffCoords.y,
          data: {
            ...diffCoords,
            placement
          }
        };
      }
    };
  };
  var shift$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state) {
        const {
          x,
          y,
          placement
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref) => {
              let {
                x: x2,
                y: y2
              } = _ref;
              return {
                x: x2,
                y: y2
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate(options, state);
        const coords = {
          x,
          y
        };
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn({
          ...state,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x,
            y: limitedCoords.y - y,
            enabled: {
              [mainAxis]: checkMainAxis,
              [crossAxis]: checkCrossAxis
            }
          }
        };
      }
    };
  };
  var size$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      async fn(state) {
        var _state$middlewareData, _state$middlewareData2;
        const {
          placement,
          rects,
          platform: platform2,
          elements
        } = state;
        const {
          apply: apply2 = () => {
          },
          ...detectOverflowOptions
        } = evaluate(options, state);
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const side = getSide(placement);
        const alignment = getAlignment(placement);
        const isYAxis = getSideAxis(placement) === "y";
        const {
          width,
          height
        } = rects.floating;
        let heightSide;
        let widthSide;
        if (side === "top" || side === "bottom") {
          heightSide = side;
          widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
        } else {
          widthSide = side;
          heightSide = alignment === "end" ? "top" : "bottom";
        }
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        const maximumClippingWidth = width - overflow.left - overflow.right;
        const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
        const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
        const noShift = !state.middlewareData.shift;
        let availableHeight = overflowAvailableHeight;
        let availableWidth = overflowAvailableWidth;
        if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
          availableWidth = maximumClippingWidth;
        }
        if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
          availableHeight = maximumClippingHeight;
        }
        if (noShift && !alignment) {
          const xMin = max(overflow.left, 0);
          const xMax = max(overflow.right, 0);
          const yMin = max(overflow.top, 0);
          const yMax = max(overflow.bottom, 0);
          if (isYAxis) {
            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
          } else {
            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
          }
        }
        await apply2({
          ...state,
          availableWidth,
          availableHeight
        });
        const nextDimensions = await platform2.getDimensions(elements.floating);
        if (width !== nextDimensions.width || height !== nextDimensions.height) {
          return {
            reset: {
              rects: true
            }
          };
        }
        return {};
      }
    };
  };
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow(node) {
    var _node$ownerDocument;
    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  function isElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  function isHTMLElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle2(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  function isTopLayer(element) {
    return [":popover-open", ":modal"].some((selector) => {
      try {
        return element.matches(selector);
      } catch (e) {
        return false;
      }
    });
  }
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
    return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports)
      return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node) {
    return ["html", "body", "#document"].includes(getNodeName(node));
  }
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot || // DOM Element detected.
      node.parentNode || // ShadowRoot detected.
      isShadowRoot(node) && node.host || // Fallback.
      getDocumentElement(node)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list2, traverseIframes) {
    var _node$ownerDocument2;
    if (list2 === void 0) {
      list2 = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list2.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list2.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }
  function getCssDimensions(element) {
    const css = getComputedStyle2(element);
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement$1(element) {
    return !isElement(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement$1(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $
    } = getCssDimensions(domElement);
    let x = ($ ? round(rect.width) : rect.width) / width;
    let y = ($ ? round(rect.height) : rect.height) / height;
    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y || !Number.isFinite(y)) {
      y = 1;
    }
    return {
      x,
      y
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement$1(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle2(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x *= iframeScale.x;
        y *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x += left;
        y += top;
        currentWin = getWindow(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x,
      y
    });
  }
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y = htmlRect.top + scroll.scrollTop;
    return {
      x,
      y
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getDocumentRect(element) {
    const html2 = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max(html2.scrollWidth, html2.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html2.scrollHeight, html2.clientHeight, body.scrollHeight, body.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle2(body).direction === "rtl") {
      x += max(html2.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html2 = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html2.clientWidth;
    let height = html2.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left * scale.x;
    const y = top * scale.y;
    return {
      width,
      height,
      x,
      y
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle2(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle2(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x,
      y,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element) {
    return getComputedStyle2(element).position === "static";
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const win = getWindow(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement(element)) {
      let svgOffsetParent = getParentNode(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  var getElementRects = async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL(element) {
    return getComputedStyle2(element).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
  };
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const {
        left,
        top,
        width,
        height
      } = element.getBoundingClientRect();
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top);
      const insetRight = floor(root.clientWidth - (left + width));
      const insetBottom = floor(root.clientHeight - (top + height));
      const insetLeft = floor(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root.ownerDocument
        });
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement$1(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  var offset = offset$1;
  var autoPlacement = autoPlacement$1;
  var shift = shift$1;
  var flip = flip$1;
  var size = size$1;
  var hide = hide$1;
  var arrow$1 = arrow$2;
  var inline = inline$1;
  var computePosition = (reference, floating, options) => {
    const cache = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache
    };
    return computePosition$1(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };
  function isComponentPublicInstance(target) {
    return target != null && typeof target === "object" && "$el" in target;
  }
  function unwrapElement(target) {
    if (isComponentPublicInstance(target)) {
      const element = target.$el;
      return isNode(element) && getNodeName(element) === "#comment" ? null : element;
    }
    return target;
  }
  function toValue3(source) {
    return typeof source === "function" ? source() : unref(source);
  }
  function arrow(options) {
    return {
      name: "arrow",
      options,
      fn(args) {
        const element = unwrapElement(toValue3(options.element));
        if (element == null) {
          return {};
        }
        return arrow$1({
          element,
          padding: options.padding
        }).fn(args);
      }
    };
  }
  function getDPR(element) {
    if (typeof window === "undefined") {
      return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  function roundByDPR(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
  }
  function useFloating(reference, floating, options) {
    if (options === void 0) {
      options = {};
    }
    const whileElementsMountedOption = options.whileElementsMounted;
    const openOption = computed2(() => {
      var _toValue;
      return (_toValue = toValue3(options.open)) != null ? _toValue : true;
    });
    const middlewareOption = computed2(() => toValue3(options.middleware));
    const placementOption = computed2(() => {
      var _toValue2;
      return (_toValue2 = toValue3(options.placement)) != null ? _toValue2 : "bottom";
    });
    const strategyOption = computed2(() => {
      var _toValue3;
      return (_toValue3 = toValue3(options.strategy)) != null ? _toValue3 : "absolute";
    });
    const transformOption = computed2(() => {
      var _toValue4;
      return (_toValue4 = toValue3(options.transform)) != null ? _toValue4 : true;
    });
    const referenceElement = computed2(() => unwrapElement(reference.value));
    const floatingElement = computed2(() => unwrapElement(floating.value));
    const x = ref(0);
    const y = ref(0);
    const strategy = ref(strategyOption.value);
    const placement = ref(placementOption.value);
    const middlewareData = shallowRef({});
    const isPositioned = ref(false);
    const floatingStyles = computed2(() => {
      const initialStyles = {
        position: strategy.value,
        left: "0",
        top: "0"
      };
      if (!floatingElement.value) {
        return initialStyles;
      }
      const xVal = roundByDPR(floatingElement.value, x.value);
      const yVal = roundByDPR(floatingElement.value, y.value);
      if (transformOption.value) {
        return {
          ...initialStyles,
          transform: "translate(" + xVal + "px, " + yVal + "px)",
          ...getDPR(floatingElement.value) >= 1.5 && {
            willChange: "transform"
          }
        };
      }
      return {
        position: strategy.value,
        left: xVal + "px",
        top: yVal + "px"
      };
    });
    let whileElementsMountedCleanup;
    function update() {
      if (referenceElement.value == null || floatingElement.value == null) {
        return;
      }
      const open = openOption.value;
      computePosition(referenceElement.value, floatingElement.value, {
        middleware: middlewareOption.value,
        placement: placementOption.value,
        strategy: strategyOption.value
      }).then((position) => {
        x.value = position.x;
        y.value = position.y;
        strategy.value = position.strategy;
        placement.value = position.placement;
        middlewareData.value = position.middlewareData;
        isPositioned.value = open !== false;
      });
    }
    function cleanup() {
      if (typeof whileElementsMountedCleanup === "function") {
        whileElementsMountedCleanup();
        whileElementsMountedCleanup = void 0;
      }
    }
    function attach() {
      cleanup();
      if (whileElementsMountedOption === void 0) {
        update();
        return;
      }
      if (referenceElement.value != null && floatingElement.value != null) {
        whileElementsMountedCleanup = whileElementsMountedOption(referenceElement.value, floatingElement.value, update);
        return;
      }
    }
    function reset() {
      if (!openOption.value) {
        isPositioned.value = false;
      }
    }
    watch2([middlewareOption, placementOption, strategyOption, openOption], update, {
      flush: "sync"
    });
    watch2([referenceElement, floatingElement], attach, {
      flush: "sync"
    });
    watch2(openOption, reset, {
      flush: "sync"
    });
    if (getCurrentScope()) {
      onScopeDispose(cleanup);
    }
    return {
      x: shallowReadonly(x),
      y: shallowReadonly(y),
      strategy: shallowReadonly(strategy),
      placement: shallowReadonly(placement),
      middlewareData: shallowReadonly(middlewareData),
      isPositioned: shallowReadonly(isPositioned),
      floatingStyles,
      update
    };
  }
  var useMouse2 = createSharedComposable(useMouse);
  var _hoisted_12 = ["id"];
  var _hoisted_22 = ["id"];
  var _sfc_main2 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BPopover",
    props: /* @__PURE__ */ mergeModels({
      boundary: { default: "clippingAncestors" },
      boundaryPadding: { default: void 0 },
      click: { type: Boolean, default: false },
      closeOnHide: { type: Boolean, default: false },
      content: { default: void 0 },
      customClass: { default: "" },
      delay: { default: () => ({ show: 100, hide: 300 }) },
      floatingMiddleware: { default: void 0 },
      hideMargin: { default: 2 },
      id: { default: void 0 },
      inline: { type: Boolean, default: false },
      manual: { type: Boolean, default: false },
      noAutoClose: { type: Boolean, default: false },
      noFlip: { type: Boolean, default: false },
      noHide: { type: Boolean, default: false },
      noShift: { type: Boolean, default: false },
      noSize: { type: Boolean, default: false },
      noninteractive: { type: Boolean, default: false },
      offset: { default: null },
      placement: { default: "top" },
      realtime: { type: Boolean, default: false },
      reference: { default: null },
      strategy: { default: "absolute" },
      target: { default: null },
      title: { default: void 0 },
      tooltip: { type: Boolean, default: false },
      variant: { default: null },
      teleportDisabled: { type: Boolean, default: false },
      teleportTo: { default: void 0 },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean },
      noFade: { type: Boolean, default: false },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean, default: false },
      show: { type: Boolean, default: false },
      transProps: {},
      visible: { type: Boolean, default: false }
    }, {
      "modelValue": { type: Boolean, ...{
        default: false
      } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["pointerleave", "blur", "click-outside", "close-on-hide", "hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BPopover");
      const emit2 = __emit;
      const slots = useSlots();
      const modelValue = useModel(__props, "modelValue");
      const computedId = useId2(() => props.id, "popover");
      const hidden = ref(false);
      const element = useTemplateRef("_element");
      const content = useTemplateRef("_content");
      const arrow$12 = useTemplateRef("_arrow");
      const placeholder = useTemplateRef("_placeholder");
      const floatingTarget = ref(null);
      const trigger2 = ref(null);
      const isAutoPlacement = computed2(() => props.placement.startsWith("auto"));
      const offsetNumber = useToNumber(() => props.offset ?? NaN);
      const boundary = computed2(
        () => isBoundary(props.boundary) ? props.boundary : void 0
      );
      const rootBoundary = computed2(
        () => isRootBoundary(props.boundary) ? props.boundary : void 0
      );
      const sizeStyles = ref({});
      const floatingMiddleware = computed2(() => {
        if (props.floatingMiddleware !== void 0) {
          return props.floatingMiddleware;
        }
        const off = props.offset !== null ? offsetNumber.value : props.tooltip ? 6 : 8;
        const arr = [offset(off)];
        if (props.noFlip === false && !isAutoPlacement.value) {
          arr.push(
            flip({
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding
            })
          );
        }
        if (isAutoPlacement.value) {
          arr.push(
            autoPlacement({
              alignment: props.placement.split("-")[1] || void 0,
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding
            })
          );
        }
        if (props.noShift === false) {
          arr.push(
            shift({
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding
            })
          );
        }
        if (props.noHide === false) {
          arr.push(
            hide({
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding
            })
          );
        }
        if (props.inline === true) {
          arr.push(inline());
        }
        arr.push(arrow({ element: arrow$12, padding: 10 }));
        if (props.noSize === false) {
          arr.push(
            size({
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding,
              apply({ availableWidth, availableHeight }) {
                var _a, _b;
                sizeStyles.value = {
                  maxHeight: availableHeight >= (((_a = content.value) == null ? void 0 : _a.scrollHeight) ?? 0) ? void 0 : availableHeight ? `${Math.max(0, availableHeight)}px` : void 0,
                  maxWidth: availableWidth >= (((_b = content.value) == null ? void 0 : _b.scrollWidth) ?? 0) ? void 0 : availableWidth ? `${Math.max(0, availableWidth)}px` : void 0
                };
              }
            })
          );
        }
        return arr;
      });
      const placementRef = computed2(
        () => isAutoPlacement.value ? void 0 : props.placement
      );
      const { floatingStyles, middlewareData, placement, update } = useFloating(floatingTarget, element, {
        placement: placementRef,
        middleware: floatingMiddleware,
        strategy: toRef(() => props.strategy),
        whileElementsMounted: (...args) => {
          const cleanup = autoUpdate(...args, { animationFrame: props.realtime });
          return cleanup;
        }
      });
      const arrowStyle = ref({ position: "absolute" });
      watch2(middlewareData, (newValue) => {
        var _a, _b;
        if (props.noHide === false) {
          if (((_a = newValue.hide) == null ? void 0 : _a.referenceHidden) && !hidden.value && showRef.value) {
            if (props.closeOnHide && !props.noAutoClose && !props.manual) {
              throttleHide("close-on-hide");
            } else {
              localTemporaryHide.value = true;
              hidden.value = true;
            }
          } else if (localTemporaryHide.value && !((_b = newValue.hide) == null ? void 0 : _b.referenceHidden)) {
            localTemporaryHide.value = false;
            hidden.value = false;
          }
        }
        if (newValue.arrow) {
          const { x: x2, y: y2 } = newValue.arrow;
          arrowStyle.value = {
            position: "absolute",
            top: y2 ? `${y2}px` : "",
            left: x2 ? `${x2}px` : ""
          };
        }
      });
      const {
        showRef,
        hide: hide$12,
        show,
        toggle: toggle2,
        throttleHide,
        computedNoAnimation,
        transitionProps,
        contentShowing,
        isVisible: isVisible2,
        renderRef,
        localTemporaryHide
      } = useShowHide(modelValue, props, emit2, element, computedId, {
        showFn: () => {
          if (hidden.value) {
            update();
          }
        }
      });
      const computedClasses = computed2(() => {
        const type = props.tooltip ? "tooltip" : "popover";
        return [
          type,
          `b-${type}`,
          {
            [`b-${type}-${props.variant}`]: props.variant !== null,
            show: isVisible2.value && !hidden.value,
            fade: !computedNoAnimation.value,
            [`${props.customClass}`]: props.customClass !== void 0,
            [`bs-${type}-${resolveBootstrapPlacement(placement.value)}`]: placement.value !== void 0
          }
        ];
      });
      const { x, y } = useMouse2();
      const isElementAndTriggerOutside = () => {
        var _a, _b;
        const triggerRect = (_a = trigger2.value) == null ? void 0 : _a.getBoundingClientRect();
        const elementRect = (_b = element.value) == null ? void 0 : _b.getBoundingClientRect();
        const margin = parseInt(props.hideMargin, 10) || 0;
        const offsetX = (window == null ? void 0 : window.scrollX) || 0;
        const offsetY = (window == null ? void 0 : window.scrollY) || 0;
        const triggerIsOutside = !triggerRect || x.value < triggerRect.left + offsetX - margin || x.value > triggerRect.right + offsetX + margin || y.value < triggerRect.top + offsetY - margin || y.value > triggerRect.bottom + offsetY + margin;
        const isOutside = !elementRect || x.value < elementRect.left + offsetX - margin || x.value > elementRect.right + offsetX + margin || y.value < elementRect.top + offsetY - margin || y.value > elementRect.bottom + offsetY + margin;
        return { triggerIsOutside, isOutside };
      };
      let looptimeout;
      const tryHide = (e) => {
        var _a, _b, _c;
        const delay3 = typeof props.delay === "number" ? props.delay : ((_a = props.delay) == null ? void 0 : _a.hide) || 0;
        const { triggerIsOutside, isOutside } = isElementAndTriggerOutside();
        if (!props.noninteractive && isOutside && triggerIsOutside && !((_b = element.value) == null ? void 0 : _b.contains(document == null ? void 0 : document.activeElement)) && !((_c = trigger2.value) == null ? void 0 : _c.contains(document == null ? void 0 : document.activeElement)) || props.noninteractive && triggerIsOutside) {
          hide$12(e == null ? void 0 : e.type);
        } else {
          if (looptimeout)
            clearTimeout(looptimeout);
          looptimeout = setTimeout(
            () => {
              tryHide(e);
            },
            delay3 < 50 ? 50 : delay3
          );
        }
      };
      watch2(isVisible2, () => {
        update();
      });
      __expose({
        hide: hide$12,
        show,
        toggle: toggle2
      });
      const localToggle = (e) => {
        if (showRef.value) {
          hide$12(e.type === "click" ? "click" : "toggle");
        } else {
          show();
        }
      };
      const bind2 = () => {
        var _a;
        if (props.target) {
          const elem = getElement(toValue(props.target));
          if (elem) {
            trigger2.value = elem;
          } else {
            console.warn("Target element not found", props.target);
          }
        } else {
          trigger2.value = (_a = placeholder.value) == null ? void 0 : _a.nextElementSibling;
        }
        if (props.reference) {
          const elem = getElement(toValue(props.reference));
          if (elem) {
            floatingTarget.value = elem;
          } else {
            console.warn("Reference element not found", props.reference);
          }
        } else {
          floatingTarget.value = trigger2.value;
        }
        if (!trigger2.value || props.manual) {
          return;
        }
        if (props.click) {
          trigger2.value.addEventListener("click", localToggle);
          return;
        }
        trigger2.value.addEventListener("pointerenter", show);
        trigger2.value.addEventListener("pointerleave", tryHide);
        trigger2.value.addEventListener("focus", show);
        trigger2.value.addEventListener("blur", tryHide);
      };
      const unbind2 = () => {
        if (trigger2.value) {
          trigger2.value.removeEventListener("click", localToggle);
          trigger2.value.removeEventListener("pointerenter", show);
          trigger2.value.removeEventListener("pointerleave", tryHide);
          trigger2.value.removeEventListener("focus", show);
          trigger2.value.removeEventListener("blur", tryHide);
        }
      };
      onClickOutside(
        element,
        () => {
          if (showRef.value && props.click && !props.noAutoClose && !props.manual)
            hide$12("click-outside");
        },
        { ignore: [trigger2] }
      );
      watch2([() => props.click, () => props.target, () => props.reference], () => {
        unbind2();
        bind2();
      });
      onMounted(() => {
        bind2();
        nextTick(() => {
          update();
        });
      });
      onBeforeUnmount(unbind2);
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock(Fragment, null, [
          createBaseVNode("span", {
            id: unref(computedId) + "_placeholder",
            ref: "_placeholder"
          }, null, 8, _hoisted_12),
          renderSlot(_ctx.$slots, "target", {
            show: unref(show),
            hide: unref(hide$12),
            toggle: unref(toggle2),
            visible: unref(showRef)
          }, void 0, true),
          createVNode(_sfc_main, {
            to: unref(props).teleportTo,
            disabled: !unref(props).teleportTo || unref(props).teleportDisabled
          }, {
            default: withCtx(() => [
              unref(renderRef) || unref(contentShowing) ? (openBlock(), createBlock(Transition, mergeProps({ key: 0 }, unref(transitionProps), {
                appear: modelValue.value || unref(props).visible
              }), {
                default: withCtx(() => [
                  withDirectives(createBaseVNode("div", mergeProps({ id: unref(computedId) }, _ctx.$attrs, {
                    ref: "_element",
                    class: computedClasses.value,
                    role: "tooltip",
                    tabindex: "-1",
                    style: unref(floatingStyles)
                  }), [
                    createBaseVNode("div", {
                      ref: "_arrow",
                      class: normalizeClass(`${unref(props).tooltip ? "tooltip" : "popover"}-arrow`),
                      style: normalizeStyle(arrowStyle.value),
                      "data-popper-arrow": ""
                    }, null, 6),
                    createBaseVNode("div", {
                      ref: "_content",
                      class: "overflow-auto",
                      style: normalizeStyle(sizeStyles.value)
                    }, [
                      unref(props).title || slots.title ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(["position-sticky top-0", unref(props).tooltip ? "tooltip-inner" : "popover-header"])
                      }, [
                        renderSlot(_ctx.$slots, "title", {}, () => [
                          createTextVNode(toDisplayString(unref(props).title), 1)
                        ], true)
                      ], 2)) : createCommentVNode("", true),
                      unref(props).tooltip && !slots.title && !unref(props).title || !unref(props).tooltip ? (openBlock(), createElementBlock("div", {
                        key: 1,
                        class: normalizeClass(unref(props).tooltip ? "tooltip-inner" : "popover-body")
                      }, [
                        renderSlot(_ctx.$slots, "default", {}, () => [
                          createTextVNode(toDisplayString(unref(props).content), 1)
                        ], true)
                      ], 2)) : createCommentVNode("", true)
                    ], 4)
                  ], 16, _hoisted_22), [
                    [vShow, unref(showRef) && !hidden.value]
                  ])
                ]),
                _: 3
              }, 16, ["appear"])) : createCommentVNode("", true)
            ]),
            _: 3
          }, 8, ["to", "disabled"])
        ], 64);
      };
    }
  });
  var BPopover = /* @__PURE__ */ _export_sfc(_sfc_main2, [["__scopeId", "data-v-08119d6e"]]);
  var resolveBootstrapPlacement = (placement) => {
    const [_placement] = placement.split("-");
    switch (_placement) {
      case "left":
        return "start";
      case "right":
        return "end";
      default:
        return _placement;
    }
  };
  var isBoundary = (input2) => input2 === "clippingAncestors" || input2 instanceof Element || Array.isArray(input2);
  var isRootBoundary = (input2) => !isBoundary(input2);

  // node_modules/bootstrap-vue-next/dist/object-DIbMZaP9.mjs
  var pick = (objToPluck, keysToPluck) => [...keysToPluck].reduce(
    (memo, prop) => {
      memo[prop] = objToPluck[prop];
      return memo;
    },
    {}
  );
  var get = (value, path, defaultValue) => {
    const segments = path.split(/[.[\]]/g);
    let current = value;
    for (const key of segments) {
      if (current === null)
        return defaultValue;
      if (current === void 0)
        return defaultValue;
      if (key.trim() === "")
        continue;
      current = current[key];
    }
    if (current === void 0)
      return defaultValue;
    return current;
  };
  var set = (initial, path, value) => {
    const clone = (obj) => {
      const isPrimitive = (value2) => value2 === void 0 || value2 === null || typeof value2 !== "object" && typeof value2 !== "function";
      if (isPrimitive(obj)) {
        return obj;
      }
      if (typeof obj === "function") {
        return obj.bind({});
      }
      const newObj = new obj.constructor();
      Object.getOwnPropertyNames(obj).forEach((prop) => {
        newObj[prop] = obj[prop];
      });
      return newObj;
    };
    const toInt = (value2, defaultValue) => {
      const def2 = defaultValue === void 0 ? 0 : defaultValue;
      if (value2 === null || value2 === void 0) {
        return def2;
      }
      const result = Number.parseInt(value2);
      return Number.isNaN(result) ? def2 : result;
    };
    if (!initial)
      return {};
    if (!path || value === void 0)
      return initial;
    const segments = path.split(/[.[\]]/g).filter((x) => !!x.trim());
    const _set = (node) => {
      if (segments.length > 1) {
        const key = segments.shift();
        const nextIsNum = toInt(segments[0], null) === null ? false : true;
        node[key] = node[key] === void 0 ? nextIsNum ? [] : {} : node[key];
        _set(node[key]);
      } else {
        node[segments[0]] = value;
      }
    };
    const cloned = clone(initial);
    _set(cloned);
    return cloned;
  };

  // node_modules/bootstrap-vue-next/dist/BCollapse.vue_vue_type_script_setup_true_lang-DigjRrkA.mjs
  var _sfc_main3 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BCollapse",
    props: /* @__PURE__ */ mergeModels({
      horizontal: { type: Boolean, default: false },
      id: { default: void 0 },
      isNav: { type: Boolean, default: false },
      tag: { default: "div" },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean, default: false },
      noFade: { type: Boolean },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean, default: false },
      show: { type: Boolean, default: false },
      transProps: {},
      visible: { type: Boolean, default: false }
    }, {
      "modelValue": { type: Boolean, ...{
        default: false
      } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BCollapse");
      const emit2 = __emit;
      const modelValue = useModel(__props, "modelValue");
      const computedId = useId2(() => props.id, "collapse");
      const element = useTemplateRef("_element");
      let inCollapse = false;
      const onEnter = (el) => {
        inCollapse = true;
        requestAnimationFrame(() => {
          if (props.horizontal) {
            el.style.width = `${el.scrollWidth}px`;
          } else {
            el.style.height = `${el.scrollHeight}px`;
          }
        });
      };
      const onBeforeLeave = (el) => {
        if (inCollapse) {
          return;
        }
        if (props.horizontal) {
          el.style.width = `${el.scrollWidth}px`;
        } else {
          el.style.height = `${el.scrollHeight}px`;
        }
        el.offsetHeight;
      };
      const onLeave = (el) => {
        requestAnimationFrame(() => {
          if (props.horizontal) {
            el.style.width = ``;
          } else {
            el.style.height = ``;
          }
        });
      };
      const onAfterEnter = (el) => {
        el.style.height = ``;
        el.style.width = ``;
        inCollapse = false;
      };
      const onAfterLeave = (el) => {
        el.style.height = ``;
        el.style.width = ``;
        inCollapse = false;
      };
      const {
        showRef,
        renderRef,
        hide: hide2,
        show,
        toggle: toggle2,
        isActive,
        computedNoAnimation,
        contentShowing,
        transitionProps
      } = useShowHide(modelValue, props, emit2, element, computedId, {
        // addShowClass: false,
        transitionProps: {
          onBeforeLeave,
          onEnter,
          onLeave,
          onAfterEnter,
          onAfterLeave,
          enterToClass: "",
          leaveToClass: "",
          enterFromClass: "",
          leaveFromClass: "",
          enterActiveClass: "",
          leaveActiveClass: ""
        }
      });
      const computedClasses = computed2(() => ({
        "show": isActive.value,
        "navbar-collapse": props.isNav,
        "collapse-horizontal": props.horizontal
      }));
      const sharedSlots = computed2(() => ({
        toggle: toggle2,
        show,
        hide: hide2,
        id: computedId.value,
        visible: showRef.value
      }));
      __expose({
        hide: hide2,
        isNav: props.isNav,
        show,
        toggle: toggle2,
        visible: readonly(showRef)
      });
      provide(collapseInjectionKey, {
        id: computedId,
        hide: hide2,
        show,
        toggle: toggle2,
        visible: readonly(showRef),
        isNav: toRef(() => props.isNav)
      });
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock(Fragment, null, [
          renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps(sharedSlots.value))),
          unref(renderRef) || unref(contentShowing) ? (openBlock(), createBlock(Transition, mergeProps({ key: 0 }, unref(transitionProps), {
            "enter-active-class": unref(computedNoAnimation) ? "" : "collapsing",
            "leave-active-class": unref(computedNoAnimation) ? "" : "collapsing",
            appear: modelValue.value || unref(props).visible
          }), {
            default: withCtx(() => [
              withDirectives((openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), mergeProps({
                id: unref(computedId),
                ref: "_element",
                class: ["collapse", computedClasses.value],
                "is-nav": unref(props).isNav
              }, _ctx.$attrs), {
                default: withCtx(() => [
                  unref(contentShowing) ? renderSlot(_ctx.$slots, "default", normalizeProps(mergeProps({ key: 0 }, sharedSlots.value))) : createCommentVNode("", true)
                ]),
                _: 3
              }, 16, ["id", "class", "is-nav"])), [
                [vShow, unref(showRef)]
              ])
            ]),
            _: 3
          }, 16, ["enter-active-class", "leave-active-class", "appear"])) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "footer", normalizeProps(guardReactiveProps(sharedSlots.value)))
        ], 64);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BAccordionItem.vue_vue_type_script_setup_true_lang-CpORCzCe.mjs
  var _hoisted_13 = ["aria-expanded", "aria-controls", "onClick"];
  var _sfc_main4 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BAccordionItem",
    props: /* @__PURE__ */ mergeModels({
      bodyAttrs: { default: void 0 },
      bodyClass: { default: void 0 },
      buttonAttrs: { default: void 0 },
      buttonClass: { default: void 0 },
      collapseClass: { default: void 0 },
      headerAttrs: { default: void 0 },
      headerClass: { default: void 0 },
      headerTag: { default: "h2" },
      horizontal: { type: Boolean, default: void 0 },
      id: { default: void 0 },
      isNav: { type: Boolean, default: void 0 },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean, default: false },
      tag: { default: void 0 },
      title: { default: void 0 },
      show: { type: Boolean, default: void 0 },
      visible: { type: Boolean, default: false },
      wrapperAttrs: { default: void 0 }
    }, {
      "modelValue": { type: Boolean, ...{
        default: false
      } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { emit: __emit }) {
      const { class: wrapperClass, ...collapseAttrs } = useAttrs();
      const _props = __props;
      const props = useDefaults(_props, "BAccordionItem");
      const emit2 = __emit;
      const parentData = inject(accordionInjectionKey, null);
      const computedId = useId2(() => props.id, "accordion_item");
      const modelValue = useModel(__props, "modelValue");
      modelValue.value = (parentData == null ? void 0 : parentData.openItem.value) === computedId.value && !(parentData == null ? void 0 : parentData.initialAnimation.value);
      if (modelValue.value && !(parentData == null ? void 0 : parentData.free.value)) {
        parentData == null ? void 0 : parentData.setOpenItem(computedId.value);
      }
      onMounted(() => {
        if (!modelValue.value && (parentData == null ? void 0 : parentData.openItem.value) === computedId.value) {
          nextTick(() => {
            modelValue.value = true;
          });
        }
      });
      watch2(
        () => parentData == null ? void 0 : parentData.openItem.value,
        () => modelValue.value = (parentData == null ? void 0 : parentData.openItem.value) === computedId.value && !(parentData == null ? void 0 : parentData.free.value)
      );
      watch2(modelValue, () => {
        if (modelValue.value && !(parentData == null ? void 0 : parentData.free.value))
          parentData == null ? void 0 : parentData.setOpenItem(computedId.value);
      });
      return (_ctx, _cache) => {
        var _a, _b;
        return openBlock(), createElementBlock("div", mergeProps({ class: "accordion-item" }, unref(props).wrapperAttrs, { class: unref(wrapperClass) }), [
          createVNode(_sfc_main3, mergeProps({
            id: unref(computedId),
            modelValue: modelValue.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => modelValue.value = $event),
            class: ["accordion-collapse", unref(props).collapseClass],
            "aria-labelledby": `${unref(computedId)}-heading`
          }, collapseAttrs, {
            tag: unref(props).tag,
            show: unref(props).show,
            horizontal: unref(props).horizontal,
            visible: unref(props).visible,
            "is-nav": unref(props).isNav,
            lazy: unref(props).lazy || ((_a = unref(parentData)) == null ? void 0 : _a.lazy.value),
            "unmount-lazy": unref(props).unmountLazy || ((_b = unref(parentData)) == null ? void 0 : _b.unmountLazy.value),
            onShow: _cache[1] || (_cache[1] = ($event) => emit2("show", $event)),
            onShown: _cache[2] || (_cache[2] = ($event) => emit2("shown", $event)),
            onHide: _cache[3] || (_cache[3] = ($event) => emit2("hide", $event)),
            onHidden: _cache[4] || (_cache[4] = ($event) => emit2("hidden", $event)),
            onHidePrevented: _cache[5] || (_cache[5] = ($event) => emit2("hide-prevented", $event)),
            onShowPrevented: _cache[6] || (_cache[6] = ($event) => emit2("show-prevented", $event)),
            onTogglePrevented: _cache[7] || (_cache[7] = ($event) => emit2("toggle-prevented", $event)),
            onToggle: _cache[8] || (_cache[8] = ($event) => emit2("toggle", $event))
          }), {
            header: withCtx(({ visible: toggleVisible, toggle: slotToggle }) => [
              (openBlock(), createBlock(resolveDynamicComponent(unref(props).headerTag), mergeProps({
                id: `${unref(computedId)}-heading`,
                class: ["accordion-header", unref(props).headerClass]
              }, unref(props).headerAttrs), {
                default: withCtx(() => [
                  createBaseVNode("button", mergeProps({ class: "accordion-button" }, unref(props).buttonAttrs, {
                    class: [{ collapsed: !toggleVisible }, unref(props).buttonClass],
                    type: "button",
                    "aria-expanded": toggleVisible ? "true" : "false",
                    "aria-controls": unref(computedId),
                    onClick: slotToggle
                  }), [
                    renderSlot(_ctx.$slots, "title", {}, () => [
                      createTextVNode(toDisplayString(unref(props).title), 1)
                    ])
                  ], 16, _hoisted_13)
                ]),
                _: 2
              }, 1040, ["id", "class"]))
            ]),
            default: withCtx(() => [
              createBaseVNode("div", mergeProps({ class: "accordion-body" }, unref(props).bodyAttrs, {
                class: unref(props).bodyClass
              }), [
                renderSlot(_ctx.$slots, "default")
              ], 16)
            ]),
            _: 3
          }, 16, ["id", "modelValue", "class", "aria-labelledby", "tag", "show", "horizontal", "visible", "is-nav", "lazy", "unmount-lazy"])
        ], 16);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BCloseButton.vue_vue_type_script_setup_true_lang-CiWwt6-j.mjs
  var _hoisted_14 = ["type", "disabled", "aria-label"];
  var _sfc_main5 = /* @__PURE__ */ defineComponent({
    __name: "BCloseButton",
    props: {
      ariaLabel: { default: "Close" },
      disabled: { type: Boolean, default: false },
      type: { default: "button" }
    },
    emits: ["click"],
    setup(__props, { emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BCloseButton");
      const emit2 = __emit;
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("button", {
          type: unref(props).type,
          class: "btn-close",
          disabled: unref(props).disabled,
          "aria-label": unref(props).ariaLabel,
          onClick: _cache[0] || (_cache[0] = ($event) => emit2("click", $event))
        }, null, 8, _hoisted_14);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/dom-DSGRrOAo.mjs
  var isEmptySlot = (el) => ((el == null ? void 0 : el()) ?? []).length === 0;

  // node_modules/bootstrap-vue-next/dist/useColorVariantClasses-ZDE19TZw.mjs
  var useColorVariantClasses = (obj) => computed2(() => {
    let props = toValue(obj);
    props = {
      variant: props.variant ?? null,
      bgVariant: props.bgVariant ?? null,
      textVariant: props.textVariant ?? null,
      borderVariant: props.borderVariant ?? null
    };
    return {
      [`text-bg-${props.variant}`]: props.variant !== null,
      [`text-${props.textVariant}`]: props.textVariant !== null,
      [`bg-${props.bgVariant}`]: props.bgVariant !== null,
      [`border-${props.borderVariant}`]: props.borderVariant !== null
    };
  });

  // node_modules/bootstrap-vue-next/dist/BSpinner.vue_vue_type_script_setup_true_lang-C2afVNWl.mjs
  var _hoisted_15 = {
    key: 0,
    class: "visually-hidden"
  };
  var _sfc_main6 = /* @__PURE__ */ defineComponent({
    __name: "BSpinner",
    props: {
      label: { default: void 0 },
      role: { default: "status" },
      small: { type: Boolean, default: false },
      tag: { default: "span" },
      type: { default: "border" },
      variant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BSpinner");
      const slots = useSlots();
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          textVariant: props.variant
        }))
      );
      const computedClasses = computed2(() => [
        `spinner-${props.type}`,
        colorClasses.value,
        {
          [`spinner-${props.type}-sm`]: props.small
        }
      ]);
      const hasLabelSlot = computed2(() => !isEmptySlot(slots.label));
      return (_ctx, _cache) => {
        return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), {
          class: normalizeClass(computedClasses.value),
          role: unref(props).label || hasLabelSlot.value ? unref(props).role : null,
          "aria-hidden": unref(props).label || hasLabelSlot.value ? null : true
        }, {
          default: withCtx(() => [
            unref(props).label || hasLabelSlot.value ? (openBlock(), createElementBlock("span", _hoisted_15, [
              renderSlot(_ctx.$slots, "label", {}, () => [
                createTextVNode(toDisplayString(unref(props).label), 1)
              ])
            ])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["class", "role", "aria-hidden"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/useBLinkHelper-Bvtov_sk.mjs
  var isLink = (props) => !!(props.href || props.to);
  var useBLinkHelper = (props, pickProps) => {
    const pickPropsResolved = readonly(toRef(pickProps));
    const resolvedProps = readonly(toRef(props));
    const computedLink = computed2(() => isLink(resolvedProps.value));
    const computedLinkProps = computed2(
      () => computedLink.value ? pick(
        resolvedProps.value,
        pickPropsResolved.value ?? [
          "active",
          "activeClass",
          "append",
          "href",
          "rel",
          "replace",
          "routerComponentName",
          "target",
          "to",
          "variant",
          "opacity",
          "opacityHover",
          "underlineVariant",
          "underlineOffset",
          "underlineOffsetHover",
          "underlineOpacity",
          "underlineOpacityHover"
        ]
      ) : {}
    );
    return { computedLink, computedLinkProps };
  };

  // node_modules/bootstrap-vue-next/dist/BLink.vue_vue_type_script_setup_true_lang-CsQYhGWY.mjs
  var useLinkClasses = (linkProps) => computed2(() => {
    const props = toValue(linkProps);
    return {
      [`link-${props.variant}`]: props.variant !== null,
      [`link-opacity-${props.opacity}`]: props.opacity !== void 0,
      [`link-opacity-${props.opacityHover}-hover`]: props.opacityHover !== void 0,
      [`link-underline-${props.underlineVariant}`]: props.underlineVariant !== null,
      [`link-offset-${props.underlineOffset}`]: props.underlineOffset !== void 0,
      [`link-offset-${props.underlineOffsetHover}-hover`]: props.underlineOffsetHover !== void 0,
      ["link-underline"]: props.underlineVariant === null && (props.underlineOpacity !== void 0 || props.underlineOpacityHover !== void 0),
      [`link-underline-opacity-${props.underlineOpacity}`]: props.underlineOpacity !== void 0,
      [`link-underline-opacity-${props.underlineOpacityHover}-hover`]: props.underlineOpacityHover !== void 0,
      "icon-link": props.icon === true
    };
  });
  var defaultActiveClass = "active";
  var _sfc_main7 = /* @__PURE__ */ defineComponent({
    __name: "BLink",
    props: {
      active: { type: Boolean, default: void 0 },
      activeClass: { default: "router-link-active" },
      disabled: { type: Boolean, default: false },
      exactActiveClass: { default: "router-link-exact-active" },
      href: { default: void 0 },
      icon: { type: Boolean, default: false },
      noRel: { type: Boolean },
      opacity: { default: void 0 },
      opacityHover: { default: void 0 },
      rel: { default: void 0 },
      replace: { type: Boolean, default: false },
      routerComponentName: { default: "router-link" },
      routerTag: { default: "a" },
      stretched: { type: Boolean, default: false },
      target: { default: void 0 },
      to: { default: void 0 },
      underlineOffset: { default: void 0 },
      underlineOffsetHover: { default: void 0 },
      underlineOpacity: { default: void 0 },
      underlineOpacityHover: { default: void 0 },
      underlineVariant: { default: null },
      variant: { default: null }
    },
    emits: ["click"],
    setup(__props, { emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BLink");
      const emit2 = __emit;
      const attrs = useAttrs();
      const collapseData = inject(collapseInjectionKey, null);
      const navbarData = inject(navbarInjectionKey, null);
      const instance = getCurrentInstance();
      const tag = computed2(() => {
        const routerName = props.routerComponentName.split("-").map((e) => e.charAt(0).toUpperCase() + e.slice(1)).join("");
        const hasRouter = (instance == null ? void 0 : instance.appContext.app.component(routerName)) !== void 0;
        if (!hasRouter || props.disabled || !props.to) {
          return "a";
        }
        return props.routerComponentName;
      });
      const computedHref = computed2(() => {
        const toFallback = "#";
        if (props.href)
          return props.href;
        if (typeof props.to === "string")
          return props.to || toFallback;
        const { to } = props;
        if (to !== void 0 && "path" in to) {
          const path = to.path || "";
          const query = to.query ? `?${Object.keys(to.query).map((e) => {
            var _a;
            return `${e}=${(_a = to.query) == null ? void 0 : _a[e]}`;
          }).join("=")}` : "";
          const hash = !to.hash || to.hash.charAt(0) === "#" ? to.hash || "" : `#${to.hash}`;
          return `${path}${query}${hash}` || toFallback;
        }
        return toFallback;
      });
      const linkValueClasses = useLinkClasses(props);
      const computedClasses = computed2(() => [
        linkValueClasses.value,
        {
          "stretched-link": props.stretched === true
        }
      ]);
      const routerAttr = computed2(() => ({
        "class": computedClasses.value,
        "to": props.to,
        "replace": props.replace,
        "href": computedHref.value,
        "target": props.target,
        "rel": props.target === "_blank" ? props.rel ?? "noopener" : void 0,
        "tabindex": props.disabled ? "-1" : typeof attrs.tabindex === "undefined" ? null : attrs.tabindex,
        "aria-disabled": props.disabled ? true : null
      }));
      const computedLinkClasses = computed2(() => ({
        [defaultActiveClass]: props.active,
        disabled: props.disabled
      }));
      const clicked = (e) => {
        var _a, _b, _c;
        if (props.disabled) {
          e.preventDefault();
          e.stopImmediatePropagation();
          return;
        }
        if (((_a = collapseData == null ? void 0 : collapseData.isNav) == null ? void 0 : _a.value) === true && navbarData === null || navbarData !== null && ((_b = navbarData.autoClose) == null ? void 0 : _b.value) === true) {
          (_c = collapseData == null ? void 0 : collapseData.hide) == null ? void 0 : _c.call(collapseData);
        }
        emit2("click", e);
      };
      return (_ctx, _cache) => {
        return tag.value === "router-link" ? (openBlock(), createBlock(resolveDynamicComponent(tag.value), mergeProps({ key: 0 }, routerAttr.value, { custom: "" }), {
          default: withCtx(({ href: localHref, navigate, isActive, isExactActive }) => [
            (openBlock(), createBlock(resolveDynamicComponent(unref(props).routerTag), mergeProps({
              href: localHref,
              target: unref(props).target,
              class: {
                [defaultActiveClass]: unref(props).active,
                [unref(props).activeClass]: isActive,
                [unref(props).exactActiveClass]: isExactActive
              }
            }, _ctx.$attrs, {
              onClick: ($event) => {
                [navigate($event), clicked($event)];
              }
            }), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 2
            }, 1040, ["href", "target", "class", "onClick"]))
          ]),
          _: 3
        }, 16)) : (openBlock(), createBlock(resolveDynamicComponent(tag.value), mergeProps({
          key: 1,
          class: computedLinkClasses.value
        }, routerAttr.value, { onClick: clicked }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["class"]));
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BButton.vue_vue_type_script_setup_true_lang-D7bZQchs.mjs
  var _sfc_main8 = /* @__PURE__ */ defineComponent({
    __name: "BButton",
    props: /* @__PURE__ */ mergeModels({
      loading: { type: Boolean, default: false },
      loadingFill: { type: Boolean, default: false },
      loadingText: { default: "Loading..." },
      pill: { type: Boolean, default: false },
      size: { default: "md" },
      squared: { type: Boolean, default: false },
      tag: { default: "button" },
      type: { default: "button" },
      variant: { default: "secondary" },
      active: { type: Boolean, default: false },
      activeClass: { default: void 0 },
      disabled: { type: Boolean, default: void 0 },
      exactActiveClass: { default: void 0 },
      href: { default: void 0 },
      icon: { type: Boolean, default: false },
      noRel: { type: Boolean },
      opacity: { default: void 0 },
      opacityHover: { default: void 0 },
      rel: { default: void 0 },
      replace: { type: Boolean, default: void 0 },
      routerComponentName: { default: void 0 },
      routerTag: { default: void 0 },
      stretched: { type: Boolean, default: false },
      target: { default: void 0 },
      to: { default: void 0 },
      underlineOffset: { default: void 0 },
      underlineOffsetHover: { default: void 0 },
      underlineOpacity: { default: void 0 },
      underlineOpacityHover: { default: void 0 },
      underlineVariant: { default: null }
    }, {
      "pressed": { type: Boolean, ...{ default: void 0 } },
      "pressedModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["click"], ["update:pressed"]),
    setup(__props, { emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BButton");
      const emit2 = __emit;
      const element = useTemplateRef("_element");
      const pressedValue = useModel(__props, "pressed");
      const { computedLink, computedLinkProps } = useBLinkHelper(props, [
        "active-class",
        "exact-active-class",
        "replace",
        "routerComponentName",
        "routerTag"
      ]);
      const isToggle = computed2(() => typeof pressedValue.value === "boolean");
      const isButton = computed2(
        () => props.tag === "button" && props.href === void 0 && props.to === void 0
      );
      const isBLink = computed2(() => props.to !== void 0);
      const nonStandardTag = computed2(() => props.href !== void 0 ? false : !isButton.value);
      const linkProps = computed2(() => isBLink.value ? computedLinkProps.value : []);
      const computedAriaDisabled = computed2(() => {
        if (props.href === "#" && props.disabled)
          return true;
        return nonStandardTag.value ? props.disabled : null;
      });
      const variantIsLinkType = computed2(() => {
        var _a;
        return ((_a = props.variant) == null ? void 0 : _a.startsWith("link")) || false;
      });
      const variantIsLinkTypeSubset = computed2(() => {
        var _a;
        return ((_a = props.variant) == null ? void 0 : _a.startsWith("link-")) || false;
      });
      const linkValueClasses = useLinkClasses(
        computed2(() => {
          var _a;
          return {
            ...variantIsLinkType.value && {
              icon: props.icon,
              opacity: props.opacity,
              opacityHover: props.opacityHover,
              underlineOffset: props.underlineOffset,
              underlineOffsetHover: props.underlineOffsetHover,
              underlineOpacity: props.underlineOpacity,
              underlineOpacityHover: props.underlineOpacityHover,
              underlineVariant: props.underlineVariant,
              variant: variantIsLinkTypeSubset.value === true ? (_a = props.variant) == null ? void 0 : _a.slice(5) : null
            }
          };
        })
      );
      const computedClasses = computed2(() => [
        variantIsLinkType.value === true && computedLink.value === false ? linkValueClasses.value : void 0,
        [`btn-${props.size}`],
        {
          [`btn-${props.variant}`]: props.variant !== null && variantIsLinkTypeSubset.value === false,
          "active": props.active || pressedValue.value,
          "rounded-pill": props.pill,
          "rounded-0": props.squared,
          "disabled": props.disabled
        }
      ]);
      const computedTag = computed2(() => isBLink.value ? _sfc_main7 : props.href ? "a" : props.tag);
      const clicked = (e) => {
        if (props.disabled) {
          e.preventDefault();
          e.stopPropagation();
          return;
        }
        emit2("click", e);
        if (isToggle.value)
          pressedValue.value = !pressedValue.value;
      };
      onKeyStroke(
        [" ", "enter"],
        (e) => {
          var _a;
          if (props.href === "#") {
            e.preventDefault();
            (_a = element.value) == null ? void 0 : _a.click();
          }
        },
        { target: element }
      );
      return (_ctx, _cache) => {
        return openBlock(), createBlock(resolveDynamicComponent(computedTag.value), mergeProps({
          ref: "_element",
          class: "btn"
        }, linkProps.value, {
          class: computedClasses.value,
          "aria-disabled": computedAriaDisabled.value,
          "aria-pressed": isToggle.value ? pressedValue.value : null,
          autocomplete: isToggle.value ? "off" : null,
          disabled: isButton.value ? unref(props).disabled : null,
          href: unref(props).href,
          rel: unref(computedLink) ? unref(props).rel : null,
          role: nonStandardTag.value || unref(computedLink) ? "button" : null,
          target: unref(computedLink) ? unref(props).target : null,
          type: isButton.value ? unref(props).type : null,
          to: !isButton.value ? unref(props).to : null,
          onClick: clicked
        }), {
          default: withCtx(() => [
            unref(props).loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }, () => [
              !unref(props).loadingFill ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                createTextVNode(toDisplayString(unref(props).loadingText), 1)
              ], 64)) : createCommentVNode("", true),
              renderSlot(_ctx.$slots, "loading-spinner", {}, () => [
                createVNode(_sfc_main6, {
                  small: unref(props).size !== "lg",
                  label: unref(props).loadingFill ? unref(props).loadingText : void 0
                }, null, 8, ["small", "label"])
              ])
            ]) : renderSlot(_ctx.$slots, "default", { key: 1 })
          ]),
          _: 3
        }, 16, ["class", "aria-disabled", "aria-pressed", "autocomplete", "disabled", "href", "rel", "role", "target", "type", "to"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/useCountdownHover-GEvDq366.mjs
  var useCountdown = (length, interval, timestampOpts = {}) => {
    const resolvedLength = readonly(toRef(length));
    const isPaused = ref(false);
    const target = ref(Date.now() + resolvedLength.value);
    const { isActive, pause, resume, timestamp: timestamp2 } = useTimestamp({
      interval,
      controls: true,
      callback: (v) => {
        if (v >= target.value) {
          isPaused.value = false;
          pause();
        }
      },
      ...timestampOpts
    });
    const value = computed2(() => target.value - timestamp2.value);
    const restart = () => {
      target.value = Date.now() + resolvedLength.value;
      resume();
    };
    watch2(resolvedLength, () => {
      restart();
    });
    const myPause = () => {
      isPaused.value = true;
      pause();
    };
    const myResume = () => {
      isPaused.value = false;
      const remainingTime = target.value - timestamp2.value;
      target.value = Date.now() + remainingTime;
      resume();
    };
    const stop2 = () => {
      pause();
      timestamp2.value = target.value;
      isPaused.value = false;
    };
    return {
      isActive: readonly(isActive),
      isPaused: readonly(isPaused),
      stop: stop2,
      pause: myPause,
      resume: myResume,
      restart,
      value
    };
  };
  var useCountdownHover = (element, props, actions2) => {
    const isHovering = useElementHover(element);
    const onMouseEnter = () => {
      if (toValue(props).noHoverPause)
        return;
      actions2.pause();
    };
    const onMouseLeave = () => {
      if (toValue(props).noResumeOnHoverLeave)
        return;
      actions2.resume();
    };
    watch2(isHovering, (newValue) => {
      if (toValue(props).modelValueIgnoresHover)
        return;
      if (newValue) {
        onMouseEnter();
        return;
      }
      onMouseLeave();
    });
    return {
      isHovering
    };
  };

  // node_modules/bootstrap-vue-next/dist/useTransitions-BJccF5e-.mjs
  var useFadeTransition = (fade) => computed2(() => {
    const NO_FADE_PROPS = {
      name: "",
      enterActiveClass: "",
      enterToClass: "",
      leaveActiveClass: "",
      leaveToClass: "showing",
      enterFromClass: "showing",
      leaveFromClass: ""
    };
    const FADE_PROPS = {
      ...NO_FADE_PROPS,
      enterActiveClass: "fade showing",
      leaveActiveClass: "fade showing"
    };
    return toValue(fade) ? FADE_PROPS : NO_FADE_PROPS;
  });

  // node_modules/bootstrap-vue-next/dist/BAlert-BNMW3CdV.mjs
  var _sfc_main9 = /* @__PURE__ */ defineComponent({
    __name: "BAlert",
    props: /* @__PURE__ */ mergeModels({
      closeClass: { default: void 0 },
      closeContent: { default: void 0 },
      closeLabel: { default: "Close" },
      closeVariant: { default: "secondary" },
      dismissible: { type: Boolean, default: false },
      fade: { type: Boolean, default: false },
      immediate: { type: Boolean, default: true },
      interval: { default: "requestAnimationFrame" },
      noHoverPause: { type: Boolean, default: false },
      noResumeOnHoverLeave: { type: Boolean, default: false },
      showOnPause: { type: Boolean, default: true },
      variant: { default: "info" }
    }, {
      "modelValue": { type: [Boolean, Number], ...{ default: false } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["close", "close-countdown", "closed"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BAlert");
      const emit2 = __emit;
      const slots = useSlots();
      const fadeTransitions = useFadeTransition(() => props.fade);
      const element = useTemplateRef("_element");
      const modelValue = useModel(__props, "modelValue");
      const hasCloseSlot = computed2(() => !isEmptySlot(slots.close));
      const countdownLength = computed2(
        () => typeof modelValue.value === "boolean" ? 0 : modelValue.value
      );
      const computedClasses = computed2(() => ({
        [`alert-${props.variant}`]: props.variant !== null,
        "alert-dismissible": props.dismissible
      }));
      const closeClasses = computed2(() => [props.closeClass, { "btn-close-custom": hasCloseSlot.value }]);
      const {
        isActive,
        pause,
        resume,
        stop: stop2,
        isPaused,
        restart,
        value: remainingMs
      } = useCountdown(countdownLength, props.interval, {
        immediate: typeof modelValue.value === "number" && props.immediate
      });
      useCountdownHover(
        element,
        computed2(() => ({
          noHoverPause: props.noHoverPause,
          noResumeOnHoverLeave: props.noResumeOnHoverLeave,
          modelValueIgnoresHover: typeof modelValue.value === "boolean"
        })),
        { pause, resume }
      );
      const isAlertVisible = computed2(
        () => typeof modelValue.value === "boolean" ? modelValue.value : isActive.value || props.showOnPause && isPaused.value
      );
      const closeAttrs = computed2(() => ({
        variant: hasCloseSlot.value ? props.closeVariant : void 0,
        class: closeClasses.value
      }));
      watchEffect(() => {
        emit2("close-countdown", remainingMs.value);
      });
      const hide2 = () => {
        emit2("close");
        if (typeof modelValue.value === "boolean") {
          modelValue.value = false;
        } else {
          modelValue.value = 0;
          stop2();
        }
        emit2("closed");
      };
      __expose({
        pause,
        resume,
        stop: stop2,
        restart
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(Transition, mergeProps(unref(fadeTransitions), { "enter-to-class": "show" }), {
          default: withCtx(() => [
            isAlertVisible.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              ref: "_element",
              class: normalizeClass(["alert", computedClasses.value]),
              role: "alert",
              "aria-live": "polite",
              "aria-atomic": "true"
            }, [
              renderSlot(_ctx.$slots, "default", {}, void 0, true),
              unref(props).dismissible ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                hasCloseSlot.value || unref(props).closeContent ? (openBlock(), createBlock(_sfc_main8, mergeProps({ key: 0 }, closeAttrs.value, { onClick: hide2 }), {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "close", {}, () => [
                      createTextVNode(toDisplayString(unref(props).closeContent), 1)
                    ], true)
                  ]),
                  _: 3
                }, 16)) : (openBlock(), createBlock(_sfc_main5, mergeProps({
                  key: 1,
                  "aria-label": unref(props).closeLabel
                }, closeAttrs.value, { onClick: hide2 }), null, 16, ["aria-label"]))
              ], 64)) : createCommentVNode("", true)
            ], 2)) : createCommentVNode("", true)
          ]),
          _: 3
        }, 16);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/ConditionalWrapper.vue_vue_type_script_lang-CUX3HBqw.mjs
  var _sfc_main10 = defineComponent({
    name: "ConditionalWrapper",
    inheritAttrs: false,
    slots: Object,
    props: {
      tag: {
        type: String,
        default: "div"
      },
      skip: {
        type: Boolean,
        required: true
      }
    },
    setup(props, { slots, attrs }) {
      return () => {
        var _a, _b;
        return props.skip ? (_a = slots.default) == null ? void 0 : _a.call(slots, {}) : h(props.tag, { ...attrs }, [(_b = slots.default) == null ? void 0 : _b.call(slots, {})]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/useNumberishToStyle-BaHH1FuW.mjs
  var useNumberishToStyle = (el, unit = "px") => computed2(() => {
    const value = toValue(el);
    const resolvedUnit = toValue(unit);
    return RX_NUMBER.test(String(value)) ? `${Number(value)}${resolvedUnit}` : value;
  });

  // node_modules/bootstrap-vue-next/dist/BDropdown-CE9W2Dxt.mjs
  var _hoisted_16 = { class: "visually-hidden" };
  var _hoisted_23 = ["id", "aria-labelledby", "role"];
  var _sfc_main13 = /* @__PURE__ */ defineComponent({
    __name: "BDropdown",
    props: /* @__PURE__ */ mergeModels({
      ariaLabel: { default: void 0 },
      autoClose: { type: [Boolean, String], default: true },
      boundary: { default: "clippingAncestors" },
      boundaryPadding: { default: void 0 },
      disabled: { type: Boolean, default: false },
      floatingMiddleware: { default: void 0 },
      id: { default: void 0 },
      isNav: { type: Boolean, default: false },
      menuClass: { default: void 0 },
      noCaret: { type: Boolean, default: false },
      noFlip: { type: Boolean, default: false },
      noShift: { type: Boolean, default: false },
      noSize: { type: Boolean, default: false },
      offset: { default: 0 },
      role: { default: "menu" },
      size: { default: "md" },
      noWrapper: { type: Boolean, default: false },
      split: { type: Boolean, default: false },
      splitButtonType: { default: "button" },
      splitClass: { default: void 0 },
      splitDisabled: { type: Boolean, default: void 0 },
      splitHref: { default: void 0 },
      splitTo: { default: void 0 },
      splitVariant: { default: void 0 },
      strategy: { default: "absolute" },
      text: { default: void 0 },
      toggleClass: { default: void 0 },
      toggleText: { default: "Toggle dropdown" },
      variant: { default: "secondary" },
      wrapperClass: { default: void 0 },
      placement: { default: "bottom-start" },
      teleportDisabled: { type: Boolean, default: false },
      teleportTo: { default: void 0 },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean },
      noFade: { type: Boolean, default: false },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean, default: false },
      show: { type: Boolean, default: false },
      transProps: { default: void 0 },
      visible: { type: Boolean, default: false }
    }, {
      "modelValue": { type: Boolean, ...{ default: false } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["click", "hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BDropdown");
      const emit2 = __emit;
      const computedId = useId2(() => props.id, "dropdown");
      const modelValue = useModel(__props, "modelValue");
      const inInputGroup = inject(inputGroupKey, false);
      const inButtonGroup = inject(buttonGroupKey, false);
      const computedOffset = computed2(
        () => typeof props.offset === "string" || typeof props.offset === "number" ? props.offset : NaN
      );
      const offsetToNumber = useToNumber(computedOffset);
      const floating = useTemplateRef("_floating");
      const button = useTemplateRef("_button");
      const splitButton = useTemplateRef("_splitButton");
      const boundary = computed2(
        () => isBoundary(props.boundary) ? props.boundary : void 0
      );
      const rootBoundary = computed2(
        () => isRootBoundary(props.boundary) ? props.boundary : void 0
      );
      const referencePlacement = computed2(() => !props.split ? splitButton.value : button.value);
      const {
        showRef,
        renderRef,
        hide: hide2,
        show,
        toggle: toggle2,
        computedNoAnimation,
        transitionProps,
        contentShowing,
        isVisible: isVisible2
      } = useShowHide(modelValue, props, emit2, referencePlacement, computedId);
      const computedMenuClasses = computed2(() => [
        {
          show: isVisible2.value,
          fade: !computedNoAnimation.value
        }
      ]);
      onKeyStroke(
        "Escape",
        () => {
          var _a;
          hide2();
          (_a = getElement(referencePlacement.value)) == null ? void 0 : _a.focus();
        },
        { target: referencePlacement }
      );
      onKeyStroke(
        "Escape",
        () => {
          var _a;
          hide2();
          (_a = getElement(referencePlacement.value)) == null ? void 0 : _a.focus();
        },
        { target: floating }
      );
      const keynav = (e, v) => {
        var _a, _b, _c, _d, _e, _f, _g;
        if ((_b = floating.value) == null ? void 0 : _b.contains((_a = e.target) == null ? void 0 : _a.closest("form")))
          return;
        if (/input|select|option|textarea|form/i.test((_c = e.target) == null ? void 0 : _c.tagName))
          return;
        e.preventDefault();
        if (!showRef.value) {
          show();
          const loop = setInterval(() => {
            if (isVisible2.value) {
              clearInterval(loop);
              nextTick(() => keynav(e, v));
            }
          }, 16);
          return;
        }
        const list2 = (_d = floating.value) == null ? void 0 : _d.querySelectorAll(".dropdown-item:not(.disabled):not(:disabled)");
        if (!list2)
          return;
        if ((_e = floating.value) == null ? void 0 : _e.contains(document.activeElement)) {
          const active = floating.value.querySelector(".dropdown-item:focus");
          const index7 = Array.prototype.indexOf.call(list2, active) + v;
          if (index7 >= 0 && index7 < (list2 == null ? void 0 : list2.length))
            (_f = list2[index7]) == null ? void 0 : _f.focus();
        } else {
          (_g = list2[v === -1 ? list2.length - 1 : 0]) == null ? void 0 : _g.focus();
        }
      };
      onKeyStroke("ArrowUp", (e) => keynav(e, -1), { target: referencePlacement });
      onKeyStroke("ArrowDown", (e) => keynav(e, 1), { target: referencePlacement });
      onKeyStroke("ArrowUp", (e) => keynav(e, -1), { target: floating });
      onKeyStroke("ArrowDown", (e) => keynav(e, 1), { target: floating });
      const sizeStyles = ref({});
      const floatingMiddleware = computed2(() => {
        if (props.floatingMiddleware !== void 0) {
          return props.floatingMiddleware;
        }
        const localOffset = typeof props.offset === "string" || typeof props.offset === "number" ? offsetToNumber.value : props.offset;
        const arr = [offset(localOffset)];
        if (props.noFlip === false) {
          arr.push(
            flip({
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding
            })
          );
        }
        if (props.noShift === false) {
          arr.push(
            shift({
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding
            })
          );
        }
        if (props.noSize === false) {
          arr.push(
            size({
              boundary: boundary.value,
              rootBoundary: rootBoundary.value,
              padding: props.boundaryPadding,
              apply({ availableWidth, availableHeight }) {
                var _a, _b;
                sizeStyles.value = {
                  maxHeight: availableHeight >= (((_a = floating.value) == null ? void 0 : _a.scrollHeight) ?? 0) ? void 0 : availableHeight ? `${Math.max(0, availableHeight)}px` : void 0,
                  maxWidth: availableWidth >= (((_b = floating.value) == null ? void 0 : _b.scrollWidth) ?? 0) ? void 0 : availableWidth ? `${Math.max(0, availableWidth)}px` : void 0
                };
              }
            })
          );
        }
        return arr;
      });
      const { update, floatingStyles } = useFloating(referencePlacement, floating, {
        placement: () => props.placement,
        middleware: floatingMiddleware,
        strategy: toRef(() => props.strategy),
        whileElementsMounted: autoUpdate
      });
      const inButtonGroupAttributes = inButtonGroup ? {
        class: "btn-group",
        role: "group"
      } : void 0;
      const computedClasses = computed2(() => [
        inButtonGroupAttributes == null ? void 0 : inButtonGroupAttributes.class,
        props.wrapperClass,
        {
          "btn-group": !props.wrapperClass && props.split,
          "dropdown": !props.wrapperClass && !props.split,
          "position-static": props.boundary !== "clippingAncestors" && !props.isNav
        }
      ]);
      const buttonClasses = computed2(() => [
        props.split ? props.splitClass : props.toggleClass,
        {
          "nav-link": props.isNav,
          "dropdown-toggle": !props.split,
          "dropdown-toggle-no-caret": props.noCaret && !props.split,
          "show": props.split ? void 0 : showRef.value
        }
      ]);
      const onButtonClick = () => {
        toggle2();
      };
      const onSplitClick = (event) => {
        if (props.split) {
          emit2("click", event);
          return;
        }
        onButtonClick();
      };
      onClickOutside(
        floating,
        () => {
          if (showRef.value && (props.autoClose === true || props.autoClose === "outside")) {
            hide2();
          }
        },
        { ignore: [button, splitButton] }
      );
      const onClickInside = () => {
        if (showRef.value && (props.autoClose === true || props.autoClose === "inside")) {
          hide2();
        }
      };
      watch2(isVisible2, () => {
        update();
      });
      __expose({
        hide: hide2,
        show,
        toggle: toggle2
      });
      provide(dropdownInjectionKey, {
        id: computedId,
        show,
        hide: hide2,
        toggle: toggle2,
        visible: toRef(() => showRef.value),
        isNav: toRef(() => props.isNav)
      });
      return (_ctx, _cache) => {
        var _a;
        return openBlock(), createBlock(_sfc_main10, {
          skip: unref(inInputGroup) || unref(props).noWrapper,
          class: normalizeClass(computedClasses.value),
          role: (_a = unref(inButtonGroupAttributes)) == null ? void 0 : _a.role
        }, {
          default: withCtx(() => [
            createVNode(_sfc_main8, {
              id: unref(computedId),
              ref: "_splitButton",
              variant: unref(props).splitVariant || unref(props).variant,
              size: unref(props).size,
              class: normalizeClass(buttonClasses.value),
              disabled: unref(props).splitDisabled || unref(props).disabled,
              type: unref(props).splitButtonType,
              "aria-label": unref(props).ariaLabel,
              "aria-expanded": unref(props).split ? void 0 : unref(showRef),
              "aria-haspopup": unref(props).split ? void 0 : "menu",
              href: unref(props).split ? unref(props).splitHref : void 0,
              to: unref(props).split && unref(props).splitTo ? unref(props).splitTo : void 0,
              onClick: onSplitClick
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "button-content", {}, () => [
                  createTextVNode(toDisplayString(unref(props).text), 1)
                ], true)
              ]),
              _: 3
            }, 8, ["id", "variant", "size", "class", "disabled", "type", "aria-label", "aria-expanded", "aria-haspopup", "href", "to"]),
            unref(props).split ? (openBlock(), createBlock(_sfc_main8, {
              key: 0,
              id: unref(computedId) + "-split",
              ref: "_button",
              variant: unref(props).variant,
              size: unref(props).size,
              disabled: unref(props).disabled,
              class: normalizeClass([[unref(props).toggleClass, { show: unref(showRef) }], "dropdown-toggle-split dropdown-toggle"]),
              "aria-expanded": unref(showRef),
              "aria-haspopup": "menu",
              onClick: onButtonClick
            }, {
              default: withCtx(() => [
                createBaseVNode("span", _hoisted_16, [
                  renderSlot(_ctx.$slots, "toggle-text", {}, () => [
                    createTextVNode(toDisplayString(unref(props).toggleText), 1)
                  ], true)
                ])
              ]),
              _: 3
            }, 8, ["id", "variant", "size", "disabled", "class", "aria-expanded"])) : createCommentVNode("", true),
            createVNode(_sfc_main, {
              to: unref(props).teleportTo,
              disabled: !unref(props).teleportTo || unref(props).teleportDisabled
            }, {
              default: withCtx(() => [
                unref(renderRef) || unref(contentShowing) ? (openBlock(), createBlock(Transition, mergeProps({ key: 0 }, unref(transitionProps), {
                  appear: modelValue.value || unref(props).visible
                }), {
                  default: withCtx(() => [
                    withDirectives(createBaseVNode("ul", {
                      id: unref(computedId) + "-menu",
                      ref: "_floating",
                      style: normalizeStyle([unref(floatingStyles), sizeStyles.value]),
                      class: normalizeClass(["dropdown-menu overflow-auto", [unref(props).menuClass, computedMenuClasses.value]]),
                      "aria-labelledby": unref(computedId),
                      role: unref(props).role,
                      onClick: onClickInside
                    }, [
                      unref(contentShowing) ? renderSlot(_ctx.$slots, "default", {
                        key: 0,
                        hide: unref(hide2),
                        show: unref(show),
                        visible: unref(showRef)
                      }, void 0, true) : createCommentVNode("", true)
                    ], 14, _hoisted_23), [
                      [vShow, unref(showRef)]
                    ])
                  ]),
                  _: 3
                }, 16, ["appear"])) : createCommentVNode("", true)
              ]),
              _: 3
            }, 8, ["to", "disabled"])
          ]),
          _: 3
        }, 8, ["skip", "class", "role"]);
      };
    }
  });
  var BDropdown = /* @__PURE__ */ _export_sfc(_sfc_main13, [["__scopeId", "data-v-5ca1e58b"]]);

  // node_modules/bootstrap-vue-next/dist/BDropdownText.vue_vue_type_script_setup_true_lang-Be9ZyM6V.mjs
  var _sfc_main$6 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BDropdownDivider",
    props: {
      dividerClass: { default: void 0 },
      tag: { default: "hr" },
      variant: {},
      wrapperAttrs: { default: void 0 }
    },
    setup(__props) {
      const { class: wrapperClass, ...attrs } = useAttrs();
      const _props = __props;
      const props = useDefaults(_props, "BDropdownDivider");
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", mergeProps({
          role: "presentation",
          class: unref(wrapperClass)
        }, _ctx.wrapperAttrs), [
          (openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), mergeProps({
            class: ["dropdown-divider", unref(props).dividerClass],
            role: "separator",
            "aria-orientation": "horizontal"
          }, attrs), null, 16, ["class"]))
        ], 16);
      };
    }
  });
  var _hoisted_1$2 = ["novalidate"];
  var _sfc_main$5 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BDropdownForm",
    props: {
      formClass: { default: void 0 },
      novalidate: { type: Boolean, default: void 0 },
      validated: { type: Boolean, default: void 0 },
      wrapperAttrs: { default: void 0 }
    },
    setup(__props) {
      const { class: wrapperClass, ...attrs } = useAttrs();
      const _props = __props;
      const props = useDefaults(_props, "BDropdownForm");
      const computedClasses = computed2(() => ({
        "was-validated": props.validated,
        ...props.formClass
      }));
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", mergeProps({
          role: "presentation",
          class: unref(wrapperClass)
        }, unref(props).wrapperAttrs), [
          createBaseVNode("form", mergeProps({
            class: ["dropdown-item-text", computedClasses.value],
            novalidate: unref(props).novalidate
          }, attrs), [
            renderSlot(_ctx.$slots, "default")
          ], 16, _hoisted_1$2)
        ], 16);
      };
    }
  });
  var _hoisted_1$1 = { role: "presentation" };
  var _hoisted_24 = ["id", "aria-describedby"];
  var _sfc_main$4 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BDropdownGroup",
    props: {
      ariaDescribedby: { default: void 0 },
      header: { default: void 0 },
      headerClass: { default: void 0 },
      headerTag: { default: "header" },
      headerVariant: { default: null },
      id: { default: void 0 }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BDropdownGroup");
      const headerId = computed2(() => props.id ? `${props.id}_group_dd_header` : void 0);
      const headerRole = computed2(() => props.headerTag === "header" ? void 0 : "heading");
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          textVariant: props.headerVariant
        }))
      );
      const computedClasses = computed2(() => [props.headerClass, colorClasses.value]);
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", _hoisted_1$1, [
          (openBlock(), createBlock(resolveDynamicComponent(unref(props).headerTag), {
            id: headerId.value,
            class: normalizeClass(["dropdown-header", computedClasses.value]),
            role: headerRole.value
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "header", {}, () => [
                createTextVNode(toDisplayString(unref(props).header), 1)
              ])
            ]),
            _: 3
          }, 8, ["id", "class", "role"])),
          createBaseVNode("ul", mergeProps({
            id: unref(props).id,
            role: "group",
            class: "list-unstyled"
          }, _ctx.$attrs, {
            "aria-describedby": unref(props).ariaDescribedby || headerId.value
          }), [
            renderSlot(_ctx.$slots, "default")
          ], 16, _hoisted_24)
        ]);
      };
    }
  });
  var _sfc_main$3 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BDropdownHeader",
    props: {
      headerClass: { default: void 0 },
      tag: { default: "h6" },
      text: { default: void 0 },
      variant: { default: null },
      wrapperAttrs: { default: void 0 }
    },
    setup(__props) {
      const { class: wrapperClass, ...attrs } = useAttrs();
      const _props = __props;
      const props = useDefaults(_props, "BDropdownHeader");
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          textVariant: props.variant
        }))
      );
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", mergeProps({
          role: "presentation",
          class: unref(wrapperClass)
        }, _ctx.wrapperAttrs), [
          (openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), mergeProps({
            class: ["dropdown-header", [unref(colorClasses), unref(props).headerClass]]
          }, attrs), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString(unref(props).text), 1)
              ])
            ]),
            _: 3
          }, 16, ["class"]))
        ], 16);
      };
    }
  });
  var _sfc_main$2 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BDropdownItem",
    props: {
      linkClass: { default: void 0 },
      wrapperAttrs: { default: void 0 },
      active: { type: Boolean, default: void 0 },
      activeClass: { default: void 0 },
      disabled: { type: Boolean, default: void 0 },
      exactActiveClass: { default: void 0 },
      href: { default: void 0 },
      icon: { type: Boolean, default: void 0 },
      noRel: { type: Boolean },
      opacity: { default: void 0 },
      opacityHover: { default: void 0 },
      rel: { default: void 0 },
      replace: { type: Boolean, default: void 0 },
      routerComponentName: { default: void 0 },
      stretched: { type: Boolean, default: false },
      target: { default: void 0 },
      to: { default: void 0 },
      underlineOffset: { default: void 0 },
      underlineOffsetHover: { default: void 0 },
      underlineOpacity: { default: void 0 },
      underlineOpacityHover: { default: void 0 },
      underlineVariant: { default: void 0 },
      variant: { default: null }
    },
    emits: ["click"],
    setup(__props, { emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BDropdownItem");
      const emit2 = __emit;
      const { class: wrapperClass, ...attrs } = useAttrs();
      const { computedLink, computedLinkProps } = useBLinkHelper(props);
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          textVariant: props.variant
        }))
      );
      const computedClasses = computed2(() => [
        props.linkClass,
        colorClasses.value,
        {
          active: props.active,
          disabled: props.disabled
        }
      ]);
      const computedTag = computed2(() => computedLink.value ? _sfc_main7 : props.href ? "a" : "button");
      const collapseData = inject(collapseInjectionKey, null);
      const dropdownData = inject(dropdownInjectionKey, null);
      const navbarData = inject(navbarInjectionKey, null);
      const clicked = (e) => {
        var _a, _b, _c;
        emit2("click", e);
        if (navbarData !== null && ((_a = navbarData == null ? void 0 : navbarData.autoClose) == null ? void 0 : _a.value) === true) {
          (_b = collapseData == null ? void 0 : collapseData.hide) == null ? void 0 : _b.call(collapseData);
        }
        (_c = dropdownData == null ? void 0 : dropdownData.hide) == null ? void 0 : _c.call(dropdownData);
      };
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", mergeProps({
          role: "presentation",
          class: unref(wrapperClass)
        }, unref(props).wrapperAttrs), [
          (openBlock(), createBlock(resolveDynamicComponent(computedTag.value), mergeProps({
            class: ["dropdown-item", computedClasses.value],
            disabled: unref(props).disabled,
            "aria-disabled": unref(props).disabled ? true : null,
            "aria-current": unref(props).active ? true : null,
            href: computedTag.value === "a" ? unref(props).href : null,
            rel: unref(props).rel,
            role: "menuitem",
            type: computedTag.value === "button" ? "button" : null,
            target: unref(props).target
          }, { ...unref(computedLinkProps), ...attrs }, { onClick: clicked }), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["class", "disabled", "aria-disabled", "aria-current", "href", "rel", "type", "target"]))
        ], 16);
      };
    }
  });
  var _hoisted_17 = ["disabled"];
  var _sfc_main$1 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BDropdownItemButton",
    props: {
      active: { type: Boolean, default: false },
      activeClass: { default: "active" },
      buttonClass: { default: void 0 },
      wrapperAttrs: { default: void 0 },
      disabled: { type: Boolean, default: false },
      variant: { default: null }
    },
    emits: ["click"],
    setup(__props, { emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BDropdownItemButton");
      const emit2 = __emit;
      const { class: wrapperClass, ...attrs } = useAttrs();
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          textVariant: props.variant
        }))
      );
      const computedClasses = computed2(() => [
        props.buttonClass,
        colorClasses.value,
        {
          [props.activeClass]: props.active,
          disabled: props.disabled
        }
      ]);
      const clicked = (e) => {
        if (props.disabled) {
          e.preventDefault();
          e.stopPropagation();
          return;
        }
        emit2("click", e);
      };
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", mergeProps({
          role: "presentation",
          class: unref(wrapperClass)
        }, unref(props).wrapperAttrs), [
          createBaseVNode("button", mergeProps({
            role: "menu",
            type: "button",
            class: ["dropdown-item", computedClasses.value],
            disabled: unref(props).disabled
          }, attrs, { onClick: clicked }), [
            renderSlot(_ctx.$slots, "default")
          ], 16, _hoisted_17)
        ], 16);
      };
    }
  });
  var _sfc_main14 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BDropdownText",
    props: {
      textClass: { default: void 0 },
      tag: { default: "span" },
      text: { default: void 0 },
      variant: { default: null },
      wrapperAttrs: { default: void 0 }
    },
    setup(__props) {
      const { class: wrapperClass, ...attrs } = useAttrs();
      const _props = __props;
      const props = useDefaults(_props, "BDropdownText");
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          textVariant: props.variant
        }))
      );
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", mergeProps({
          role: "presentation",
          class: unref(wrapperClass)
        }, _ctx.wrapperAttrs), [
          (openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), mergeProps({
            class: ["dropdown-item-text", [unref(colorClasses), unref(props).textClass]]
          }, attrs), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default", {}, () => [
                createTextVNode(toDisplayString(unref(props).text), 1)
              ])
            ]),
            _: 3
          }, 16, ["class"]))
        ], 16);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BForm.vue_vue_type_script_setup_true_lang-Cqtoh3CF.mjs
  var _hoisted_18 = ["id", "novalidate"];
  var _sfc_main15 = /* @__PURE__ */ defineComponent({
    __name: "BForm",
    props: {
      floating: { type: Boolean, default: false },
      id: { default: void 0 },
      novalidate: { type: Boolean, default: false },
      validated: { type: Boolean, default: false }
    },
    setup(__props, { expose: __expose }) {
      const _props = __props;
      const props = useDefaults(_props, "BForm");
      const element = useTemplateRef("_element");
      const computedClasses = computed2(() => ({
        "form-floating": props.floating,
        "was-validated": props.validated
      }));
      __expose({
        element
      });
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("form", {
          id: unref(props).id,
          ref: "_element",
          novalidate: unref(props).novalidate,
          class: normalizeClass(computedClasses.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 10, _hoisted_18);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/useStateClass-BGbSLWFN.mjs
  var useStateClass = (value) => computed2(() => {
    const resolvedValue = toValue(value);
    return resolvedValue === true ? "is-valid" : resolvedValue === false ? "is-invalid" : null;
  });

  // node_modules/bootstrap-vue-next/dist/useFormCheck-Bcx8Ea7M.mjs
  var getClasses2 = (items) => computed2(() => {
    const resolvedItems = toValue(items);
    return {
      "form-check": resolvedItems.plain === false && resolvedItems.button === false && resolvedItems.hasDefaultSlot,
      "form-check-reverse": resolvedItems.reverse === true,
      "form-check-inline": resolvedItems.inline === true,
      "form-switch": resolvedItems.switch === true,
      [`form-control-${resolvedItems.size}`]: resolvedItems.size !== void 0 && resolvedItems.size !== "md" && resolvedItems.button === false
    };
  });
  var getInputClasses = (items) => {
    const resolvedItems = readonly(toRef(items));
    const stateClass = useStateClass(() => resolvedItems.value.state ?? null);
    return computed2(() => [
      stateClass.value,
      {
        "form-check-input": resolvedItems.value.plain === false && resolvedItems.value.button === false,
        "btn-check": resolvedItems.value.button === true
      }
    ]);
  };
  var getLabelClasses = (items) => computed2(() => {
    const resolvedItems = toValue(items);
    return {
      "form-check-label": resolvedItems.plain === false && resolvedItems.button === false,
      "btn": resolvedItems.button === true,
      [`btn-${resolvedItems.buttonVariant}`]: resolvedItems.button === true && resolvedItems.buttonVariant !== void 0 && resolvedItems.buttonVariant !== null,
      [`btn-${resolvedItems.size}`]: resolvedItems.button && resolvedItems.size && resolvedItems.size !== "md"
    };
  });

  // node_modules/bootstrap-vue-next/dist/BFormCheckboxGroup.vue_vue_type_script_setup_true_lang-Crv_7H47.mjs
  var _hoisted_1$12 = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "aria-required", "value", "true-value", "false-value", "indeterminate"];
  var _hoisted_25 = ["for"];
  var _sfc_main$12 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BFormCheckbox",
    props: /* @__PURE__ */ mergeModels({
      ariaLabel: { default: void 0 },
      ariaLabelledby: { default: void 0 },
      autofocus: { type: Boolean, default: false },
      button: { type: Boolean, default: false },
      buttonGroup: { type: Boolean, default: false },
      buttonVariant: { default: null },
      disabled: { type: Boolean, default: false },
      form: { default: void 0 },
      id: { default: void 0 },
      inline: { type: Boolean, default: false },
      name: { default: void 0 },
      plain: { type: Boolean, default: false },
      required: { type: Boolean, default: void 0 },
      reverse: { type: Boolean, default: false },
      size: { default: void 0 },
      state: { type: [Boolean, null], default: null },
      switch: { type: Boolean, default: false },
      uncheckedValue: { type: [Array, Set, String, Boolean, Object, Number, null], default: false },
      wrapperAttrs: { default: void 0 },
      inputClass: { default: void 0 },
      value: { type: [String, Boolean, Array, Set, Object, Number, null], default: true }
    }, {
      "modelValue": { type: [Array, Set, String, Boolean, Object, Number, null], ...{
        default: void 0
      } },
      "modelModifiers": {},
      "indeterminate": { type: Boolean, ...{
        default: false
      } },
      "indeterminateModifiers": {}
    }),
    emits: ["update:modelValue", "update:indeterminate"],
    setup(__props, { expose: __expose }) {
      const { class: wrapperClass, ...inputAttrs } = useAttrs();
      const _props = __props;
      const props = useDefaults(_props, "BFormCheckbox");
      const slots = useSlots();
      const modelValue = useModel(__props, "modelValue");
      const indeterminate = useModel(
        __props,
        "indeterminate"
      );
      const computedId = useId2(() => props.id, "form-check");
      const parentData = inject(checkboxGroupKey, null);
      const input2 = useTemplateRef("_input");
      const { focused } = useFocus(input2, {
        initialValue: props.autofocus
      });
      const hasDefaultSlot = computed2(() => !isEmptySlot(slots.default));
      const localValue = computed2({
        get: () => parentData ? parentData.modelValue.value : modelValue.value,
        set: (newVal) => {
          if (newVal === void 0)
            return;
          indeterminate.value = false;
          if (parentData !== null && Array.isArray(newVal)) {
            parentData.modelValue.value = newVal;
            return;
          }
          modelValue.value = newVal;
        }
      });
      const computedRequired = computed2(
        () => !!(props.name ?? (parentData == null ? void 0 : parentData.name.value)) && (props.required || (parentData == null ? void 0 : parentData.required.value))
      );
      const isButtonGroup = computed2(() => props.buttonGroup || ((parentData == null ? void 0 : parentData.buttons.value) ?? false));
      const classesObject = computed2(() => ({
        plain: props.plain || ((parentData == null ? void 0 : parentData.plain.value) ?? false),
        button: props.button || ((parentData == null ? void 0 : parentData.buttons.value) ?? false),
        inline: props.inline || ((parentData == null ? void 0 : parentData.inline.value) ?? false),
        reverse: props.reverse || ((parentData == null ? void 0 : parentData.reverse.value) ?? false),
        switch: props.switch || ((parentData == null ? void 0 : parentData.switch.value) ?? false),
        state: props.state === true || props.state === false ? props.state : (parentData == null ? void 0 : parentData.state.value) ?? null,
        size: props.size ?? (parentData == null ? void 0 : parentData.size.value) ?? "md",
        // This is where the true default is made
        buttonVariant: props.buttonVariant ?? (parentData == null ? void 0 : parentData.buttonVariant.value) ?? "secondary",
        // This is where the true default is made
        hasDefaultSlot: hasDefaultSlot.value
      }));
      const wrapperClasses = getClasses2(classesObject);
      const computedWrapperClasses = computed2(() => [wrapperClasses.value, wrapperClass]);
      const inputClasses = getInputClasses(classesObject);
      const computedInputClasses = computed2(() => [inputClasses.value, props.inputClass]);
      const labelClasses = getLabelClasses(classesObject);
      __expose({
        blur: () => {
          focused.value = false;
        },
        element: input2,
        focus: () => {
          focused.value = true;
        }
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main10, mergeProps({ skip: isButtonGroup.value }, unref(props).wrapperAttrs, { class: computedWrapperClasses.value }), {
          default: withCtx(() => {
            var _a, _b, _c;
            return [
              withDirectives(createBaseVNode("input", mergeProps({
                id: unref(computedId),
                ref: "_input",
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => localValue.value = $event),
                class: computedInputClasses.value,
                type: "checkbox",
                disabled: unref(props).disabled || ((_a = unref(parentData)) == null ? void 0 : _a.disabled.value),
                required: computedRequired.value || void 0,
                name: unref(props).name || ((_b = unref(parentData)) == null ? void 0 : _b.name.value),
                form: unref(props).form || ((_c = unref(parentData)) == null ? void 0 : _c.form.value),
                "aria-label": unref(props).ariaLabel,
                "aria-labelledby": unref(props).ariaLabelledby,
                "aria-required": computedRequired.value || void 0,
                value: unref(props).value,
                "true-value": unref(props).value,
                "false-value": unref(props).uncheckedValue,
                indeterminate: indeterminate.value || void 0
              }, inputAttrs), null, 16, _hoisted_1$12), [
                [vModelCheckbox, localValue.value]
              ]),
              hasDefaultSlot.value || unref(props).plain === false ? (openBlock(), createElementBlock("label", {
                key: 0,
                for: unref(computedId),
                class: normalizeClass(unref(labelClasses))
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 10, _hoisted_25)) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 16, ["skip", "class"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BFormFile.vue_vue_type_script_setup_true_lang-6tVyhwhL.mjs
  var _hoisted_19 = ["for"];
  var _hoisted_26 = ["id", "form", "name", "multiple", "disabled", "capture", "accept", "required", "aria-label", "aria-labelledby", "aria-required", "directory", "webkitdirectory"];
  var _sfc_main17 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BFormFile",
    props: /* @__PURE__ */ mergeModels({
      ariaLabel: { default: void 0 },
      ariaLabelledby: { default: void 0 },
      accept: { default: "" },
      autofocus: { type: Boolean, default: false },
      capture: { type: [Boolean, String], default: void 0 },
      directory: { type: Boolean, default: false },
      disabled: { type: Boolean, default: false },
      form: { default: void 0 },
      id: { default: void 0 },
      label: { default: "" },
      labelClass: { default: void 0 },
      multiple: { type: Boolean, default: false },
      name: { default: void 0 },
      noButton: { type: Boolean, default: false },
      noDrop: { type: Boolean, default: false },
      noTraverse: { type: Boolean, default: false },
      plain: { type: Boolean, default: false },
      required: { type: Boolean, default: false },
      size: { default: void 0 },
      state: { type: [Boolean, null], default: null }
    }, {
      "modelValue": {
        default: null
      },
      "modelModifiers": {}
    }),
    emits: ["update:modelValue"],
    setup(__props, { expose: __expose }) {
      const slots = useSlots();
      const _props = __props;
      const props = useDefaults(_props, "BFormFile");
      const modelValue = useModel(__props, "modelValue");
      const computedId = useId2(() => props.id);
      const stateClass = useStateClass(() => props.state);
      const input2 = useTemplateRef("_input");
      const { focused } = useFocus(input2, { initialValue: props.autofocus });
      const hasLabelSlot = computed2(() => !isEmptySlot(slots["label"]));
      const computedAccept = computed2(
        () => typeof props.accept === "string" ? props.accept : props.accept.join(",")
      );
      const computedClasses = computed2(() => [
        stateClass.value,
        {
          [`form-control-${props.size}`]: props.size !== void 0,
          "form-control": !props.plain,
          "form-control-input-file-hide-button": props.noButton
        }
      ]);
      const onChange = () => {
        var _a, _b;
        const value = ((_a = input2.value) == null ? void 0 : _a.files) === null || ((_b = input2.value) == null ? void 0 : _b.files) === void 0 ? null : [...input2.value.files];
        modelValue.value = value === null ? null : props.multiple === true ? value : value[0];
      };
      const onDrop = (e) => {
        if (props.noDrop === true) {
          e.preventDefault();
        }
      };
      const reset = () => {
        modelValue.value = null;
      };
      watch2(modelValue, (newValue) => {
        if (newValue === null && input2.value !== null) {
          input2.value.value = "";
        }
      });
      __expose({
        blur: () => {
          focused.value = false;
        },
        element: input2,
        focus: () => {
          focused.value = true;
        },
        reset
      });
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock(Fragment, null, [
          hasLabelSlot.value || unref(props).label ? (openBlock(), createElementBlock("label", {
            key: 0,
            class: normalizeClass(["form-label", unref(props).labelClass]),
            for: unref(computedId)
          }, [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(unref(props).label), 1)
            ])
          ], 10, _hoisted_19)) : createCommentVNode("", true),
          createBaseVNode("input", mergeProps({ id: unref(computedId) }, _ctx.$attrs, {
            ref: "_input",
            type: "file",
            class: computedClasses.value,
            form: unref(props).form,
            name: unref(props).name,
            multiple: unref(props).multiple,
            disabled: unref(props).disabled,
            capture: unref(props).capture,
            accept: computedAccept.value || void 0,
            required: unref(props).required || void 0,
            "aria-label": unref(props).ariaLabel,
            "aria-labelledby": unref(props).ariaLabelledby,
            "aria-required": unref(props).required || void 0,
            directory: unref(props).directory,
            webkitdirectory: unref(props).directory,
            onChange,
            onDrop
          }), null, 16, _hoisted_26)
        ], 64);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/stringUtils-BCx12BQM.mjs
  var startCase = (str) => str.replace(RX_UNDERSCORE, " ").replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`).replace(RX_FIRST_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase());
  var titleCase = (str) => str.replace(RX_UNDERSCORE, " ").replace(RX_LOWER_UPPER, (_, $1, $2) => `${$1} ${$2}`).replace(RX_START_SPACE_WORD, (_, $1, $2) => $1 + $2.toUpperCase());

  // node_modules/bootstrap-vue-next/dist/BFormRadioGroup.vue_vue_type_script_setup_true_lang-j2Yeg8fd.mjs
  var _hoisted_1$13 = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "value", "aria-required"];
  var _hoisted_27 = ["for"];
  var _sfc_main$14 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BFormRadio",
    props: /* @__PURE__ */ mergeModels({
      ariaLabel: { default: void 0 },
      ariaLabelledby: { default: void 0 },
      autofocus: { type: Boolean, default: false },
      button: { type: Boolean, default: false },
      buttonGroup: { type: Boolean, default: false },
      buttonVariant: { default: null },
      disabled: { type: Boolean, default: false },
      form: { default: void 0 },
      id: { default: void 0 },
      inline: { type: Boolean, default: false },
      name: { default: void 0 },
      plain: { type: Boolean, default: false },
      required: { type: Boolean, default: false },
      reverse: { type: Boolean, default: false },
      size: { default: void 0 },
      state: { type: [Boolean, null], default: null },
      value: { type: [Boolean, String, Array, Object, Number, null], default: true }
    }, {
      "modelValue": { type: [Boolean, String, Array, Object, Number, null], ...{
        default: void 0
      } },
      "modelModifiers": {}
    }),
    emits: ["update:modelValue"],
    setup(__props, { expose: __expose }) {
      const _props = __props;
      const props = useDefaults(_props, "BFormRadio");
      const slots = useSlots();
      const modelValue = useModel(__props, "modelValue");
      const computedId = useId2(() => props.id, "form-check");
      const parentData = inject(radioGroupKey, null);
      const input2 = useTemplateRef("_input");
      const { focused } = useFocus(input2, {
        initialValue: props.autofocus
      });
      const hasDefaultSlot = computed2(() => !isEmptySlot(slots.default));
      const localValue = computed2({
        get: () => parentData ? parentData.modelValue.value : modelValue.value,
        set: (newValue) => {
          if (newValue === void 0)
            return;
          if (parentData !== null) {
            parentData.modelValue.value = newValue;
            return;
          }
          modelValue.value = newValue;
        }
      });
      const computedRequired = computed2(
        () => !!(props.name ?? (parentData == null ? void 0 : parentData.name.value)) && (props.required || (parentData == null ? void 0 : parentData.required.value))
      );
      const isButtonGroup = computed2(() => props.buttonGroup || ((parentData == null ? void 0 : parentData.buttons.value) ?? false));
      const classesObject = computed2(() => ({
        plain: props.plain || ((parentData == null ? void 0 : parentData.plain.value) ?? false),
        button: props.button || ((parentData == null ? void 0 : parentData.buttons.value) ?? false),
        inline: props.inline || ((parentData == null ? void 0 : parentData.inline.value) ?? false),
        state: props.state || (parentData == null ? void 0 : parentData.state.value),
        reverse: props.reverse || ((parentData == null ? void 0 : parentData.reverse.value) ?? false),
        size: props.size ?? (parentData == null ? void 0 : parentData.size.value) ?? "md",
        // This is where the true default is made
        buttonVariant: props.buttonVariant ?? (parentData == null ? void 0 : parentData.buttonVariant.value) ?? "secondary",
        // This is where the true default is made
        hasDefaultSlot: hasDefaultSlot.value
      }));
      const computedClasses = getClasses2(classesObject);
      const inputClasses = getInputClasses(classesObject);
      const labelClasses = getLabelClasses(classesObject);
      __expose({
        blur: () => {
          focused.value = false;
        },
        element: input2,
        focus: () => {
          focused.value = true;
        }
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main10, {
          skip: isButtonGroup.value,
          class: normalizeClass(unref(computedClasses))
        }, {
          default: withCtx(() => {
            var _a, _b, _c;
            return [
              withDirectives(createBaseVNode("input", mergeProps({ id: unref(computedId) }, _ctx.$attrs, {
                ref: "_input",
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => localValue.value = $event),
                class: unref(inputClasses),
                type: "radio",
                disabled: unref(props).disabled || ((_a = unref(parentData)) == null ? void 0 : _a.disabled.value),
                required: computedRequired.value || void 0,
                name: unref(props).name || ((_b = unref(parentData)) == null ? void 0 : _b.name.value),
                form: unref(props).form || ((_c = unref(parentData)) == null ? void 0 : _c.form.value),
                "aria-label": unref(props).ariaLabel,
                "aria-labelledby": unref(props).ariaLabelledby,
                value: unref(props).value,
                "aria-required": computedRequired.value || void 0
              }), null, 16, _hoisted_1$13), [
                [vModelRadio, localValue.value]
              ]),
              hasDefaultSlot.value || unref(props).plain === false ? (openBlock(), createElementBlock("label", {
                key: 0,
                for: unref(computedId),
                class: normalizeClass(unref(labelClasses))
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 10, _hoisted_27)) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 8, ["skip", "class"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/event-a_bi5ysw.mjs
  var IS_BROWSER = typeof window !== "undefined" && typeof document !== "undefined" && typeof navigator !== "undefined";
  var parseEventOptions = (options) => {
    const HAS_PASSIVE_EVENT_SUPPORT = (() => {
      let passiveEventSupported = false;
      if (IS_BROWSER) {
        try {
          const options2 = {
            // This function will be called when the browser
            // attempts to access the passive property
            get passive() {
              passiveEventSupported = true;
              return;
            }
          };
          WINDOW.addEventListener("test", options2, options2);
          WINDOW.removeEventListener("test", options2, options2);
        } catch {
          passiveEventSupported = false;
        }
      }
      return passiveEventSupported;
    })();
    if (HAS_PASSIVE_EVENT_SUPPORT) {
      return typeof options === "object" ? options : { capture: !!options || false };
    }
    return typeof options === "object" ? options.capture : options;
  };
  var eventOn = (el, eventName, handler, options) => {
    if (el && el.addEventListener) {
      el.addEventListener(eventName, handler, parseEventOptions(options));
    }
  };
  var eventOff = (el, eventName, handler, options) => {
    if (el && el.removeEventListener) {
      el.removeEventListener(eventName, handler, options);
    }
  };
  var eventOnOff = (on, eventParams) => {
    const method = on ? eventOn : eventOff;
    method(...eventParams);
  };
  var stopEvent = (event, { preventDefault: preventDefault2 = true, propagation = false, immediatePropagation = false } = {}) => {
    if (preventDefault2) {
      event.preventDefault();
    }
    if (propagation) {
      event.stopPropagation();
    }
    if (immediatePropagation) {
      event.stopImmediatePropagation();
    }
  };

  // node_modules/bootstrap-vue-next/dist/BFormSpinbutton.vue_vue_type_script_setup_true_lang-DV-f3D16.mjs
  var useRtl = () => {
    const rtlPlugin2 = inject(rtlPluginKey);
    onMounted(() => {
      watch2(
        () => rtlPlugin2 == null ? void 0 : rtlPlugin2.locale.value,
        (newValue) => {
          const html2 = document.documentElement;
          html2.setAttribute("lang", newValue ?? "");
        },
        { immediate: true }
      );
      watch2(
        () => rtlPlugin2 == null ? void 0 : rtlPlugin2.isRtl.value,
        (newValue) => {
          const html2 = document.documentElement;
          html2.setAttribute("dir", newValue ?? false ? "rtl" : "ltr");
        },
        { immediate: true }
      );
    });
    return { ...rtlPlugin2 };
  };
  var _hoisted_110 = ["lang", "tabindex", "title"];
  var _hoisted_28 = ["name", "form", "value"];
  var _hoisted_32 = ["id", "dir", "tabindex", "aria-label", "aria-invalid", "aria-required", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext"];
  var defaultValues = {
    min: 1,
    max: 100,
    step: 1,
    repeatDelay: 500,
    repeatInterval: 100,
    repeatThreshold: 10,
    repeatMultiplier: 4
  };
  var _sfc_main20 = /* @__PURE__ */ defineComponent({
    __name: "BFormSpinbutton",
    props: /* @__PURE__ */ mergeModels({
      ariaControls: { default: void 0 },
      ariaLabel: { default: void 0 },
      disabled: { type: Boolean, default: false },
      form: { default: void 0 },
      formatterFn: { type: Function, default: void 0 },
      id: { default: void 0 },
      inline: { type: Boolean, default: false },
      labelDecrement: { default: "Decrement" },
      labelIncrement: { default: "Increment" },
      locale: { default: void 0 },
      max: { default: defaultValues.max },
      min: { default: defaultValues.min },
      name: { default: void 0 },
      placeholder: { default: void 0 },
      readonly: { type: Boolean, default: false },
      repeatDelay: { default: defaultValues.repeatDelay },
      repeatInterval: { default: defaultValues.repeatInterval },
      repeatStepMultiplier: { default: defaultValues.repeatMultiplier },
      repeatThreshold: { default: defaultValues.repeatThreshold },
      required: { type: Boolean, default: false },
      size: { default: void 0 },
      state: { type: [Boolean, null], default: null },
      step: { default: defaultValues.step },
      vertical: { type: Boolean, default: false },
      wrap: { type: Boolean, default: false }
    }, {
      "modelValue": {
        default: null
      },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["change"], ["update:modelValue"]),
    setup(__props, { emit: __emit }) {
      const KEY_CODES = [CODE_UP, CODE_DOWN, CODE_HOME, CODE_END, CODE_PAGEUP, CODE_PAGEDOWN];
      const _props = __props;
      const props = useDefaults(_props, "BFormSpinbutton");
      const emit2 = __emit;
      const modelValue = useModel(__props, "modelValue");
      const element = useTemplateRef("_element");
      const { focused } = useFocus(element);
      const computedId = useId2(() => props.id, "spinbutton");
      const computedClasses = computed2(() => ({
        "disabled": props.disabled,
        "readonly": props.readonly,
        "focus": focused.value,
        "d-inline-flex": props.inline || props.vertical,
        "d-flex": !props.inline && !props.vertical,
        "align-items-stretch": !props.vertical,
        "flex-column": props.vertical,
        [`form-control-${props.size}`]: props.size !== void 0
      }));
      const computedSpinClasses = computed2(() => ({
        "d-flex": props.vertical,
        "align-self-center": !props.vertical,
        "align-items-center": props.vertical,
        "border-top": props.vertical,
        "border-bottom": props.vertical,
        "border-start": !props.vertical,
        "border-end": !props.vertical
      }));
      let $_autoDelayTimer;
      let $_autoRepeatTimer;
      let $_keyIsDown = false;
      const stepNumber = useToNumber(() => props.step);
      const computedStep = computed2(
        () => Number.isNaN(stepNumber.value) ? defaultValues.step : stepNumber.value
      );
      const minNumber = useToNumber(() => props.min);
      const computedMin = computed2(
        () => Number.isNaN(minNumber.value) ? defaultValues.min : minNumber.value
      );
      const maxNumber = useToNumber(() => props.max);
      const computedMax = computed2(() => {
        const step = computedStep.value;
        const min2 = computedMin.value;
        return Math.floor((maxNumber.value - min2) / step) * step + min2;
      });
      const repeatDelayNumber = useToNumber(() => props.repeatDelay, {
        nanToZero: true,
        method: "parseInt"
      });
      const computedDelay = computed2(
        () => repeatDelayNumber.value > 0 ? repeatDelayNumber.value : defaultValues.repeatDelay
      );
      const repeatIntervalNumber = useToNumber(() => props.repeatInterval, {
        nanToZero: true,
        method: "parseInt"
      });
      const computedInterval = computed2(
        () => repeatIntervalNumber.value > 0 ? repeatIntervalNumber.value : defaultValues.repeatInterval
      );
      const repeatThresholdNumber = useToNumber(() => props.repeatThreshold, {
        nanToZero: true,
        method: "parseInt"
      });
      const computedThreshold = computed2(
        () => Math.max(
          Number.isNaN(repeatThresholdNumber.value) ? defaultValues.repeatThreshold : repeatThresholdNumber.value,
          1
        )
      );
      const repeatStepMultiplierNumber = useToNumber(() => props.repeatStepMultiplier, {
        nanToZero: true,
        method: "parseInt"
      });
      const computedStepMultiplier = computed2(
        () => Math.max(
          Number.isNaN(repeatStepMultiplierNumber.value) ? defaultValues.repeatMultiplier : repeatStepMultiplierNumber.value,
          1
        )
      );
      const computedPrecision = computed2(() => {
        const step = computedStep.value;
        return Math.floor(step) === step ? 0 : (step.toString().split(".")[1] || "").length;
      });
      const computedMultiplier = computed2(() => Math.pow(10, computedPrecision.value || 0));
      const valueAsFixed = computed2(
        () => modelValue.value === null ? "" : modelValue.value.toFixed(computedPrecision.value)
      );
      const { isRtl, locale: globalLocale } = useRtl();
      const computedLocale = computed2(() => {
        const loc = (props.locale ?? (globalLocale == null ? void 0 : globalLocale.value)) || "locale";
        const locales = [loc];
        const nf = new Intl.NumberFormat(locales);
        return nf.resolvedOptions().locale;
      });
      const defaultFormatter = () => new Intl.NumberFormat(computedLocale.value, {
        style: "decimal",
        useGrouping: false,
        minimumIntegerDigits: 1,
        minimumFractionDigits: computedPrecision.value,
        maximumFractionDigits: computedPrecision.value,
        notation: "standard"
      }).format;
      const computedFormatter = computed2(() => props.formatterFn ?? defaultFormatter());
      const stepValue = (direction) => {
        let { value } = modelValue;
        if (!props.disabled && value !== null) {
          const step = computedStep.value * direction;
          const min2 = computedMin.value;
          const max2 = computedMax.value;
          const multiplier = computedMultiplier.value;
          const { wrap } = props;
          value = Math.round((value - min2) / step) * step + min2 + step;
          value = Math.round(value * multiplier) / multiplier;
          modelValue.value = value > max2 ? wrap ? min2 : max2 : value < min2 ? wrap ? max2 : min2 : value;
        }
      };
      const stepUp = (multiplier = 1) => {
        if (modelValue.value === null) {
          modelValue.value = computedMin.value;
          return;
        }
        stepValue(1 * multiplier);
      };
      const stepDown = (multiplier = 1) => {
        if (modelValue.value === null) {
          modelValue.value = props.wrap ? computedMax.value : computedMin.value;
          return;
        }
        stepValue(-1 * multiplier);
      };
      onKeyStroke(
        KEY_CODES,
        (event) => {
          const { code, altKey, ctrlKey, metaKey } = event;
          if (props.disabled || props.readonly || altKey || ctrlKey || metaKey)
            return;
          stopEvent(event, { immediatePropagation: true });
          if ($_keyIsDown) {
            return;
          }
          resetTimers();
          if ([CODE_UP, CODE_DOWN].includes(code)) {
            $_keyIsDown = true;
            if (code === CODE_UP) {
              handleStepRepeat(event, stepUp);
              return;
            }
            if (code === CODE_DOWN) {
              handleStepRepeat(event, stepDown);
            }
            return;
          }
          if (code === CODE_PAGEUP) {
            stepUp(computedStepMultiplier.value);
            return;
          }
          if (code === CODE_PAGEDOWN) {
            stepDown(computedStepMultiplier.value);
            return;
          }
          if (code === CODE_HOME) {
            modelValue.value = computedMin.value;
            return;
          }
          if (code === CODE_END) {
            modelValue.value = computedMax.value;
          }
        },
        { target: element, eventName: "keydown" }
      );
      onKeyStroke(
        KEY_CODES,
        (event) => {
          const { altKey, ctrlKey, metaKey } = event;
          if (props.disabled || props.readonly || altKey || ctrlKey || metaKey)
            return;
          stopEvent(event, { immediatePropagation: true });
          resetTimers();
          $_keyIsDown = false;
          emit2("change", modelValue.value);
        },
        { target: element, eventName: "keyup" }
      );
      const handleStepRepeat = (event, stepper) => {
        const { type } = event || {};
        if (!props.disabled && !props.readonly) {
          if (isMouseEvent(event)) {
            if (type === "mousedown" && event.button)
              return;
          }
          resetTimers();
          stepper(1);
          const threshold = computedThreshold.value;
          const multiplier = computedStepMultiplier.value;
          const delay3 = computedDelay.value;
          const interval = computedInterval.value;
          $_autoDelayTimer = setTimeout(() => {
            let count = 0;
            $_autoRepeatTimer = setInterval(() => {
              stepper(count < threshold ? 1 : multiplier);
              count++;
            }, interval);
          }, delay3);
        }
      };
      const isMouseEvent = (evt) => evt.type === "mouseup" || evt.type === "mousedown";
      const onMouseup = (event) => {
        if (isMouseEvent(event)) {
          if (event.type === "mouseup" && event.button) {
            return;
          }
        }
        stopEvent(event, { immediatePropagation: true });
        resetTimers();
        setMouseup(false);
        emit2("change", modelValue.value);
      };
      const setMouseup = (on) => {
        try {
          eventOnOff(on, [document.body, "mouseup", onMouseup, false]);
          eventOnOff(on, [document.body, "touchend", onMouseup, false]);
        } catch {
        }
      };
      const resetTimers = () => {
        clearTimeout($_autoDelayTimer);
        clearInterval($_autoRepeatTimer);
        $_autoDelayTimer = void 0;
        $_autoRepeatTimer = void 0;
      };
      const buttons = computed2(() => {
        const incrementSvgAttrs = {
          svg: {
            xmlns: "http://www.w3.org/2000/svg",
            width: "16",
            height: "16",
            fill: "currentColor",
            class: "bi bi-plus",
            viewBox: "0 0 16 16"
          },
          path: {
            d: "M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"
          }
        };
        const decrementSvgAttrs = {
          svg: {
            xmlns: "http://www.w3.org/2000/svg",
            width: "16",
            height: "16",
            fill: "currentColor",
            class: "bi bi-dash",
            viewBox: "0 0 16 16"
          },
          path: { d: "M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z" }
        };
        const sharedButtonAttrs = {
          "class": [{ "py-0": !props.vertical }, "btn", "btn-sm", "border-0", "rounded-0"],
          "tabindex": "-1",
          "type": "button",
          "disabled": props.disabled || props.readonly,
          "aria-disabled": props.disabled || props.readonly ? true : void 0,
          "aria-controls": computedId.value
        };
        const sharedSvgAttrs = {
          "aria-hidden": true,
          "scale": focused.value ? 1.5 : 1.25
        };
        const handler = (event, stepper) => {
          if (!props.disabled && !props.readonly) {
            stopEvent(event, { immediatePropagation: true });
            setMouseup(true);
            focused.value = true;
            handleStepRepeat(event, stepper);
          }
        };
        const incrementAttrs = {
          button: {
            ...sharedButtonAttrs,
            "aria-label": props.labelIncrement || void 0,
            "aria-keyshortcuts": "ArrowUp"
          },
          svg: {
            ...sharedSvgAttrs,
            ...incrementSvgAttrs.svg
          },
          path: {
            ...incrementSvgAttrs.path
          },
          slot: {
            name: "increment"
          },
          handler: (e) => handler(e, stepUp)
        };
        const decrementAttrs = {
          button: {
            ...sharedButtonAttrs,
            "aria-label": props.labelDecrement || void 0,
            "aria-keyshortcuts": "ArrowDown"
          },
          svg: {
            ...sharedSvgAttrs,
            ...decrementSvgAttrs.svg
          },
          path: {
            ...decrementSvgAttrs.path
          },
          slot: {
            name: "decrement"
          },
          handler: (e) => handler(e, stepDown)
        };
        return {
          top: {
            ...props.vertical ? incrementAttrs : decrementAttrs
          },
          bottom: {
            ...!props.vertical ? incrementAttrs : decrementAttrs
          }
        };
      });
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("div", {
          ref: "_element",
          class: normalizeClass(["b-form-spinbutton form-control", computedClasses.value]),
          role: "group",
          lang: computedLocale.value,
          tabindex: unref(props).disabled ? void 0 : "-1",
          title: unref(props).ariaLabel,
          onClick: _cache[4] || (_cache[4] = ($event) => focused.value = true)
        }, [
          renderSlot(_ctx.$slots, buttons.value.top.slot.name, { hasFocus: unref(focused) }, () => [
            createBaseVNode("button", mergeProps(buttons.value.top.button, {
              onMousedown: _cache[0] || (_cache[0] = //@ts-ignore
              (...args) => buttons.value.top.handler && buttons.value.top.handler(...args)),
              onTouchstart: _cache[1] || (_cache[1] = //@ts-ignore
              (...args) => buttons.value.top.handler && buttons.value.top.handler(...args))
            }), [
              (openBlock(), createElementBlock("svg", normalizeProps(guardReactiveProps(buttons.value.top.svg)), [
                createBaseVNode("path", normalizeProps(guardReactiveProps(buttons.value.top.path)), null, 16)
              ], 16))
            ], 16)
          ]),
          unref(props).name && !unref(props).disabled ? (openBlock(), createElementBlock("input", {
            key: "hidden",
            type: "hidden",
            name: unref(props).name,
            form: unref(props).form,
            value: valueAsFixed.value
          }, null, 8, _hoisted_28)) : createCommentVNode("", true),
          createBaseVNode("output", {
            id: unref(computedId),
            key: "output",
            class: normalizeClass(["flex-grow-1", computedSpinClasses.value]),
            dir: unref(isRtl) ?? false ? "rtl" : "ltr",
            tabindex: unref(props).disabled ? void 0 : "0",
            role: "spinbutton",
            "aria-live": "off",
            "aria-label": unref(props).ariaLabel || void 0,
            "aria-invalid": unref(props).state === false || !modelValue.value !== null && unref(props).required ? true : void 0,
            "aria-required": unref(props).required ? true : void 0,
            "aria-valuemin": computedMin.value,
            "aria-valuemax": computedMax.value,
            "aria-valuenow": modelValue.value !== null ? modelValue.value : void 0,
            "aria-valuetext": modelValue.value !== null ? computedFormatter.value(modelValue.value) : void 0
          }, [
            createBaseVNode("bdi", null, toDisplayString((modelValue.value !== null ? computedFormatter.value(modelValue.value) : unref(props).placeholder) || ""), 1)
          ], 10, _hoisted_32),
          renderSlot(_ctx.$slots, buttons.value.bottom.slot.name, { hasFocus: unref(focused) }, () => [
            createBaseVNode("button", mergeProps(buttons.value.bottom.button, {
              onMousedown: _cache[2] || (_cache[2] = //@ts-ignore
              (...args) => buttons.value.bottom.handler && buttons.value.bottom.handler(...args)),
              onTouchstart: _cache[3] || (_cache[3] = //@ts-ignore
              (...args) => buttons.value.bottom.handler && buttons.value.bottom.handler(...args))
            }), [
              (openBlock(), createElementBlock("svg", normalizeProps(guardReactiveProps(buttons.value.bottom.svg)), [
                createBaseVNode("path", normalizeProps(guardReactiveProps(buttons.value.bottom.path)), null, 16)
              ], 16))
            ], 16)
          ])
        ], 10, _hoisted_110);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/useSafeScrollLock-DUIeABf3.mjs
  var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
  var candidateSelector = /* @__PURE__ */ candidateSelectors.join(",");
  var NoElement = typeof Element === "undefined";
  var matches = NoElement ? function() {
  } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
    var _element$getRootNode;
    return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
  } : function(element) {
    return element === null || element === void 0 ? void 0 : element.ownerDocument;
  };
  var isInert = function isInert2(node, lookUp) {
    var _node$getAttribute;
    if (lookUp === void 0) {
      lookUp = true;
    }
    var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
    var inert = inertAtt === "" || inertAtt === "true";
    var result = inert || lookUp && node && isInert2(node.parentNode);
    return result;
  };
  var isContentEditable = function isContentEditable2(node) {
    var _node$getAttribute2;
    var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
    return attValue === "" || attValue === "true";
  };
  var getCandidates = function getCandidates2(el, includeContainer, filter) {
    if (isInert(el)) {
      return [];
    }
    var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
    if (includeContainer && matches.call(el, candidateSelector)) {
      candidates.unshift(el);
    }
    candidates = candidates.filter(filter);
    return candidates;
  };
  var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
    var candidates = [];
    var elementsToCheck = Array.from(elements);
    while (elementsToCheck.length) {
      var element = elementsToCheck.shift();
      if (isInert(element, false)) {
        continue;
      }
      if (element.tagName === "SLOT") {
        var assigned = element.assignedElements();
        var content = assigned.length ? assigned : element.children;
        var nestedCandidates = getCandidatesIteratively2(content, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: nestedCandidates
          });
        }
      } else {
        var validCandidate = matches.call(element, candidateSelector);
        if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
          candidates.push(element);
        }
        var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
        typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
        var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
        if (shadowRoot && validShadowRoot) {
          var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
          if (options.flatten) {
            candidates.push.apply(candidates, _nestedCandidates);
          } else {
            candidates.push({
              scopeParent: element,
              candidates: _nestedCandidates
            });
          }
        } else {
          elementsToCheck.unshift.apply(elementsToCheck, element.children);
        }
      }
    }
    return candidates;
  };
  var hasTabIndex = function hasTabIndex2(node) {
    return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
  };
  var getTabIndex = function getTabIndex2(node) {
    if (!node) {
      throw new Error("No node provided");
    }
    if (node.tabIndex < 0) {
      if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
        return 0;
      }
    }
    return node.tabIndex;
  };
  var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
    var tabIndex = getTabIndex(node);
    if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
      return 0;
    }
    return tabIndex;
  };
  var sortOrderedTabbables = function sortOrderedTabbables2(a, b) {
    return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
  };
  var isInput = function isInput2(node) {
    return node.tagName === "INPUT";
  };
  var isHiddenInput = function isHiddenInput2(node) {
    return isInput(node) && node.type === "hidden";
  };
  var isDetailsWithSummary = function isDetailsWithSummary2(node) {
    var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
      return child.tagName === "SUMMARY";
    });
    return r;
  };
  var getCheckedRadio = function getCheckedRadio2(nodes, form) {
    for (var i = 0; i < nodes.length; i++) {
      if (nodes[i].checked && nodes[i].form === form) {
        return nodes[i];
      }
    }
  };
  var isTabbableRadio = function isTabbableRadio2(node) {
    if (!node.name) {
      return true;
    }
    var radioScope = node.form || getRootNode(node);
    var queryRadios = function queryRadios2(name) {
      return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
    };
    var radioSet;
    if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
      radioSet = queryRadios(window.CSS.escape(node.name));
    } else {
      try {
        radioSet = queryRadios(node.name);
      } catch (err) {
        console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
        return false;
      }
    }
    var checked = getCheckedRadio(radioSet, node.form);
    return !checked || checked === node;
  };
  var isRadio = function isRadio2(node) {
    return isInput(node) && node.type === "radio";
  };
  var isNonTabbableRadio = function isNonTabbableRadio2(node) {
    return isRadio(node) && !isTabbableRadio(node);
  };
  var isNodeAttached = function isNodeAttached2(node) {
    var _nodeRoot;
    var nodeRoot = node && getRootNode(node);
    var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
    var attached = false;
    if (nodeRoot && nodeRoot !== node) {
      var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
      attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
      while (!attached && nodeRootHost) {
        var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
        nodeRoot = getRootNode(nodeRootHost);
        nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
        attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
      }
    }
    return attached;
  };
  var isZeroArea = function isZeroArea2(node) {
    var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
    return width === 0 && height === 0;
  };
  var isHidden = function isHidden2(node, _ref) {
    var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
    if (getComputedStyle(node).visibility === "hidden") {
      return true;
    }
    var isDirectSummary = matches.call(node, "details>summary:first-of-type");
    var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
    if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
      return true;
    }
    if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
      if (typeof getShadowRoot === "function") {
        var originalNode = node;
        while (node) {
          var parentElement = node.parentElement;
          var rootNode = getRootNode(node);
          if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
            return isZeroArea(node);
          } else if (node.assignedSlot) {
            node = node.assignedSlot;
          } else if (!parentElement && rootNode !== node.ownerDocument) {
            node = rootNode.host;
          } else {
            node = parentElement;
          }
        }
        node = originalNode;
      }
      if (isNodeAttached(node)) {
        return !node.getClientRects().length;
      }
      if (displayCheck !== "legacy-full") {
        return true;
      }
    } else if (displayCheck === "non-zero-area") {
      return isZeroArea(node);
    }
    return false;
  };
  var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
    if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
      var parentNode = node.parentElement;
      while (parentNode) {
        if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
          for (var i = 0; i < parentNode.children.length; i++) {
            var child = parentNode.children.item(i);
            if (child.tagName === "LEGEND") {
              return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
            }
          }
          return true;
        }
        parentNode = parentNode.parentElement;
      }
    }
    return false;
  };
  var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
    if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
    //  because we're limited in the type of selectors we can use in JSDom (see related
    //  note related to `candidateSelectors`)
    isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
    isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
      return false;
    }
    return true;
  };
  var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
    if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
      return false;
    }
    return true;
  };
  var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
    var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
    if (isNaN(tabIndex) || tabIndex >= 0) {
      return true;
    }
    return false;
  };
  var sortByOrder = function sortByOrder2(candidates) {
    var regularTabbables = [];
    var orderedTabbables = [];
    candidates.forEach(function(item, i) {
      var isScope = !!item.scopeParent;
      var element = isScope ? item.scopeParent : item;
      var candidateTabindex = getSortOrderTabIndex(element, isScope);
      var elements = isScope ? sortByOrder2(item.candidates) : element;
      if (candidateTabindex === 0) {
        isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
      } else {
        orderedTabbables.push({
          documentOrder: i,
          tabIndex: candidateTabindex,
          item,
          isScope,
          content: elements
        });
      }
    });
    return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
      sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
      return acc;
    }, []).concat(regularTabbables);
  };
  var tabbable = function tabbable2(container, options) {
    options = options || {};
    var candidates;
    if (options.getShadowRoot) {
      candidates = getCandidatesIteratively([container], options.includeContainer, {
        filter: isNodeMatchingSelectorTabbable.bind(null, options),
        flatten: false,
        getShadowRoot: options.getShadowRoot,
        shadowRootFilter: isValidShadowRootTabbable
      });
    } else {
      candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
    }
    return sortByOrder(candidates);
  };
  var focusable = function focusable2(container, options) {
    options = options || {};
    var candidates;
    if (options.getShadowRoot) {
      candidates = getCandidatesIteratively([container], options.includeContainer, {
        filter: isNodeMatchingSelectorFocusable.bind(null, options),
        flatten: true,
        getShadowRoot: options.getShadowRoot
      });
    } else {
      candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
    }
    return candidates;
  };
  var isTabbable = function isTabbable2(node, options) {
    options = options || {};
    if (!node) {
      throw new Error("No node provided");
    }
    if (matches.call(node, candidateSelector) === false) {
      return false;
    }
    return isNodeMatchingSelectorTabbable(options, node);
  };
  var focusableCandidateSelector = /* @__PURE__ */ candidateSelectors.concat("iframe").join(",");
  var isFocusable = function isFocusable2(node, options) {
    options = options || {};
    if (!node) {
      throw new Error("No node provided");
    }
    if (matches.call(node, focusableCandidateSelector) === false) {
      return false;
    }
    return isNodeMatchingSelectorFocusable(options, node);
  };
  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++)
      n[e] = r[e];
    return n;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r))
      return _arrayLikeToArray(r);
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"])
      return Array.from(r);
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e, r2).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
        _defineProperty(e, r2, t[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
        Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
      });
    }
    return e;
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t)
      return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i)
        return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r)
        return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }
  var activeFocusTraps = {
    activateTrap: function activateTrap(trapStack, trap) {
      if (trapStack.length > 0) {
        var activeTrap = trapStack[trapStack.length - 1];
        if (activeTrap !== trap) {
          activeTrap.pause();
        }
      }
      var trapIndex = trapStack.indexOf(trap);
      if (trapIndex === -1) {
        trapStack.push(trap);
      } else {
        trapStack.splice(trapIndex, 1);
        trapStack.push(trap);
      }
    },
    deactivateTrap: function deactivateTrap(trapStack, trap) {
      var trapIndex = trapStack.indexOf(trap);
      if (trapIndex !== -1) {
        trapStack.splice(trapIndex, 1);
      }
      if (trapStack.length > 0) {
        trapStack[trapStack.length - 1].unpause();
      }
    }
  };
  var isSelectableInput = function isSelectableInput2(node) {
    return node.tagName && node.tagName.toLowerCase() === "input" && typeof node.select === "function";
  };
  var isEscapeEvent = function isEscapeEvent2(e) {
    return (e === null || e === void 0 ? void 0 : e.key) === "Escape" || (e === null || e === void 0 ? void 0 : e.key) === "Esc" || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;
  };
  var isTabEvent = function isTabEvent2(e) {
    return (e === null || e === void 0 ? void 0 : e.key) === "Tab" || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;
  };
  var isKeyForward = function isKeyForward2(e) {
    return isTabEvent(e) && !e.shiftKey;
  };
  var isKeyBackward = function isKeyBackward2(e) {
    return isTabEvent(e) && e.shiftKey;
  };
  var delay = function delay2(fn) {
    return setTimeout(fn, 0);
  };
  var valueOrHandler = function valueOrHandler2(value) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    return typeof value === "function" ? value.apply(void 0, params) : value;
  };
  var getActualTarget = function getActualTarget2(event) {
    return event.target.shadowRoot && typeof event.composedPath === "function" ? event.composedPath()[0] : event.target;
  };
  var internalTrapStack = [];
  var createFocusTrap = function createFocusTrap2(elements, userOptions) {
    var doc2 = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;
    var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;
    var config = _objectSpread2({
      returnFocusOnDeactivate: true,
      escapeDeactivates: true,
      delayInitialFocus: true,
      isKeyForward,
      isKeyBackward
    }, userOptions);
    var state = {
      // containers given to createFocusTrap()
      // @type {Array<HTMLElement>}
      containers: [],
      // list of objects identifying tabbable nodes in `containers` in the trap
      // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
      //  is active, but the trap should never get to a state where there isn't at least one group
      //  with at least one tabbable node in it (that would lead to an error condition that would
      //  result in an error being thrown)
      // @type {Array<{
      //   container: HTMLElement,
      //   tabbableNodes: Array<HTMLElement>, // empty if none
      //   focusableNodes: Array<HTMLElement>, // empty if none
      //   posTabIndexesFound: boolean,
      //   firstTabbableNode: HTMLElement|undefined,
      //   lastTabbableNode: HTMLElement|undefined,
      //   firstDomTabbableNode: HTMLElement|undefined,
      //   lastDomTabbableNode: HTMLElement|undefined,
      //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
      // }>}
      containerGroups: [],
      // same order/length as `containers` list
      // references to objects in `containerGroups`, but only those that actually have
      //  tabbable nodes in them
      // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
      //  the same length
      tabbableGroups: [],
      nodeFocusedBeforeActivation: null,
      mostRecentlyFocusedNode: null,
      active: false,
      paused: false,
      // timer ID for when delayInitialFocus is true and initial focus in this trap
      //  has been delayed during activation
      delayInitialFocusTimer: void 0,
      // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
      recentNavEvent: void 0
    };
    var trap;
    var getOption = function getOption2(configOverrideOptions, optionName, configOptionName) {
      return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : config[configOptionName || optionName];
    };
    var findContainerIndex = function findContainerIndex2(element, event) {
      var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
      return state.containerGroups.findIndex(function(_ref) {
        var container = _ref.container, tabbableNodes = _ref.tabbableNodes;
        return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
        //  web components if the `tabbableOptions.getShadowRoot` option was used for
        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
        //  look inside web components even if open)
        (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function(node) {
          return node === element;
        });
      });
    };
    var getNodeForOption = function getNodeForOption2(optionName) {
      var _ref2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref2$hasFallback = _ref2.hasFallback, hasFallback = _ref2$hasFallback === void 0 ? false : _ref2$hasFallback, _ref2$params = _ref2.params, params = _ref2$params === void 0 ? [] : _ref2$params;
      var optionValue = config[optionName];
      if (typeof optionValue === "function") {
        optionValue = optionValue.apply(void 0, _toConsumableArray(params));
      }
      if (optionValue === true) {
        optionValue = void 0;
      }
      if (!optionValue) {
        if (optionValue === void 0 || optionValue === false) {
          return optionValue;
        }
        throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
      }
      var node = optionValue;
      if (typeof optionValue === "string") {
        try {
          node = doc2.querySelector(optionValue);
        } catch (err) {
          throw new Error("`".concat(optionName, '` appears to be an invalid selector; error="').concat(err.message, '"'));
        }
        if (!node) {
          if (!hasFallback) {
            throw new Error("`".concat(optionName, "` as selector refers to no known node"));
          }
        }
      }
      return node;
    };
    var getInitialFocusNode = function getInitialFocusNode2() {
      var node = getNodeForOption("initialFocus", {
        hasFallback: true
      });
      if (node === false) {
        return false;
      }
      if (node === void 0 || node && !isFocusable(node, config.tabbableOptions)) {
        if (findContainerIndex(doc2.activeElement) >= 0) {
          node = doc2.activeElement;
        } else {
          var firstTabbableGroup = state.tabbableGroups[0];
          var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
          node = firstTabbableNode || getNodeForOption("fallbackFocus");
        }
      } else if (node === null) {
        node = getNodeForOption("fallbackFocus");
      }
      if (!node) {
        throw new Error("Your focus-trap needs to have at least one focusable element");
      }
      return node;
    };
    var updateTabbableNodes = function updateTabbableNodes2() {
      state.containerGroups = state.containers.map(function(container) {
        var tabbableNodes = tabbable(container, config.tabbableOptions);
        var focusableNodes = focusable(container, config.tabbableOptions);
        var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
        var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
        var firstDomTabbableNode = focusableNodes.find(function(node) {
          return isTabbable(node);
        });
        var lastDomTabbableNode = focusableNodes.slice().reverse().find(function(node) {
          return isTabbable(node);
        });
        var posTabIndexesFound = !!tabbableNodes.find(function(node) {
          return getTabIndex(node) > 0;
        });
        return {
          container,
          tabbableNodes,
          focusableNodes,
          /** True if at least one node with positive `tabindex` was found in this container. */
          posTabIndexesFound,
          /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
          firstTabbableNode,
          /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
          lastTabbableNode,
          // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
          //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
          //  because that API doesn't work with Shadow DOM as well as it should (@see
          //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
          //  to address an edge case related to positive tabindex support, this seems like a much easier,
          //  "close enough most of the time" alternative for positive tabindexes which should generally
          //  be avoided anyway...
          /** First tabbable node in container, __DOM__ order; `undefined` if none. */
          firstDomTabbableNode,
          /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
          lastDomTabbableNode,
          /**
           * Finds the __tabbable__ node that follows the given node in the specified direction,
           *  in this container, if any.
           * @param {HTMLElement} node
           * @param {boolean} [forward] True if going in forward tab order; false if going
           *  in reverse.
           * @returns {HTMLElement|undefined} The next tabbable node, if any.
           */
          nextTabbableNode: function nextTabbableNode(node) {
            var forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var nodeIdx = tabbableNodes.indexOf(node);
            if (nodeIdx < 0) {
              if (forward) {
                return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function(el) {
                  return isTabbable(el);
                });
              }
              return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function(el) {
                return isTabbable(el);
              });
            }
            return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
          }
        };
      });
      state.tabbableGroups = state.containerGroups.filter(function(group) {
        return group.tabbableNodes.length > 0;
      });
      if (state.tabbableGroups.length <= 0 && !getNodeForOption("fallbackFocus")) {
        throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
      }
      if (state.containerGroups.find(function(g) {
        return g.posTabIndexesFound;
      }) && state.containerGroups.length > 1) {
        throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
      }
    };
    var _getActiveElement = function getActiveElement2(el) {
      var activeElement = el.activeElement;
      if (!activeElement) {
        return;
      }
      if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {
        return _getActiveElement(activeElement.shadowRoot);
      }
      return activeElement;
    };
    var _tryFocus = function tryFocus(node) {
      if (node === false) {
        return;
      }
      if (node === _getActiveElement(document)) {
        return;
      }
      if (!node || !node.focus) {
        _tryFocus(getInitialFocusNode());
        return;
      }
      node.focus({
        preventScroll: !!config.preventScroll
      });
      state.mostRecentlyFocusedNode = node;
      if (isSelectableInput(node)) {
        node.select();
      }
    };
    var getReturnFocusNode = function getReturnFocusNode2(previousActiveElement) {
      var node = getNodeForOption("setReturnFocus", {
        params: [previousActiveElement]
      });
      return node ? node : node === false ? false : previousActiveElement;
    };
    var findNextNavNode = function findNextNavNode2(_ref3) {
      var target = _ref3.target, event = _ref3.event, _ref3$isBackward = _ref3.isBackward, isBackward = _ref3$isBackward === void 0 ? false : _ref3$isBackward;
      target = target || getActualTarget(event);
      updateTabbableNodes();
      var destinationNode = null;
      if (state.tabbableGroups.length > 0) {
        var containerIndex = findContainerIndex(target, event);
        var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : void 0;
        if (containerIndex < 0) {
          if (isBackward) {
            destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
          } else {
            destinationNode = state.tabbableGroups[0].firstTabbableNode;
          }
        } else if (isBackward) {
          var startOfGroupIndex = state.tabbableGroups.findIndex(function(_ref4) {
            var firstTabbableNode = _ref4.firstTabbableNode;
            return target === firstTabbableNode;
          });
          if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
            startOfGroupIndex = containerIndex;
          }
          if (startOfGroupIndex >= 0) {
            var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
            var destinationGroup = state.tabbableGroups[destinationGroupIndex];
            destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
          } else if (!isTabEvent(event)) {
            destinationNode = containerGroup.nextTabbableNode(target, false);
          }
        } else {
          var lastOfGroupIndex = state.tabbableGroups.findIndex(function(_ref5) {
            var lastTabbableNode = _ref5.lastTabbableNode;
            return target === lastTabbableNode;
          });
          if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
            lastOfGroupIndex = containerIndex;
          }
          if (lastOfGroupIndex >= 0) {
            var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
            var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
            destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
          } else if (!isTabEvent(event)) {
            destinationNode = containerGroup.nextTabbableNode(target);
          }
        }
      } else {
        destinationNode = getNodeForOption("fallbackFocus");
      }
      return destinationNode;
    };
    var checkPointerDown = function checkPointerDown2(e) {
      var target = getActualTarget(e);
      if (findContainerIndex(target, e) >= 0) {
        return;
      }
      if (valueOrHandler(config.clickOutsideDeactivates, e)) {
        trap.deactivate({
          // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
          //  which will result in the outside click setting focus to the node
          //  that was clicked (and if not focusable, to "nothing"); by setting
          //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
          //  on activation (or the configured `setReturnFocus` node), whether the
          //  outside click was on a focusable node or not
          returnFocus: config.returnFocusOnDeactivate
        });
        return;
      }
      if (valueOrHandler(config.allowOutsideClick, e)) {
        return;
      }
      e.preventDefault();
    };
    var checkFocusIn = function checkFocusIn2(event) {
      var target = getActualTarget(event);
      var targetContained = findContainerIndex(target, event) >= 0;
      if (targetContained || target instanceof Document) {
        if (targetContained) {
          state.mostRecentlyFocusedNode = target;
        }
      } else {
        event.stopImmediatePropagation();
        var nextNode;
        var navAcrossContainers = true;
        if (state.mostRecentlyFocusedNode) {
          if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
            var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
            var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
            if (tabbableNodes.length > 0) {
              var mruTabIdx = tabbableNodes.findIndex(function(node) {
                return node === state.mostRecentlyFocusedNode;
              });
              if (mruTabIdx >= 0) {
                if (config.isKeyForward(state.recentNavEvent)) {
                  if (mruTabIdx + 1 < tabbableNodes.length) {
                    nextNode = tabbableNodes[mruTabIdx + 1];
                    navAcrossContainers = false;
                  }
                } else {
                  if (mruTabIdx - 1 >= 0) {
                    nextNode = tabbableNodes[mruTabIdx - 1];
                    navAcrossContainers = false;
                  }
                }
              }
            }
          } else {
            if (!state.containerGroups.some(function(g) {
              return g.tabbableNodes.some(function(n) {
                return getTabIndex(n) > 0;
              });
            })) {
              navAcrossContainers = false;
            }
          }
        } else {
          navAcrossContainers = false;
        }
        if (navAcrossContainers) {
          nextNode = findNextNavNode({
            // move FROM the MRU node, not event-related node (which will be the node that is
            //  outside the trap causing the focus escape we're trying to fix)
            target: state.mostRecentlyFocusedNode,
            isBackward: config.isKeyBackward(state.recentNavEvent)
          });
        }
        if (nextNode) {
          _tryFocus(nextNode);
        } else {
          _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
        }
      }
      state.recentNavEvent = void 0;
    };
    var checkKeyNav = function checkKeyNav2(event) {
      var isBackward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      state.recentNavEvent = event;
      var destinationNode = findNextNavNode({
        event,
        isBackward
      });
      if (destinationNode) {
        if (isTabEvent(event)) {
          event.preventDefault();
        }
        _tryFocus(destinationNode);
      }
    };
    var checkTabKey = function checkTabKey2(event) {
      if (config.isKeyForward(event) || config.isKeyBackward(event)) {
        checkKeyNav(event, config.isKeyBackward(event));
      }
    };
    var checkEscapeKey = function checkEscapeKey2(event) {
      if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {
        event.preventDefault();
        trap.deactivate();
      }
    };
    var checkClick = function checkClick2(e) {
      var target = getActualTarget(e);
      if (findContainerIndex(target, e) >= 0) {
        return;
      }
      if (valueOrHandler(config.clickOutsideDeactivates, e)) {
        return;
      }
      if (valueOrHandler(config.allowOutsideClick, e)) {
        return;
      }
      e.preventDefault();
      e.stopImmediatePropagation();
    };
    var addListeners = function addListeners2() {
      if (!state.active) {
        return;
      }
      activeFocusTraps.activateTrap(trapStack, trap);
      state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function() {
        _tryFocus(getInitialFocusNode());
      }) : _tryFocus(getInitialFocusNode());
      doc2.addEventListener("focusin", checkFocusIn, true);
      doc2.addEventListener("mousedown", checkPointerDown, {
        capture: true,
        passive: false
      });
      doc2.addEventListener("touchstart", checkPointerDown, {
        capture: true,
        passive: false
      });
      doc2.addEventListener("click", checkClick, {
        capture: true,
        passive: false
      });
      doc2.addEventListener("keydown", checkTabKey, {
        capture: true,
        passive: false
      });
      doc2.addEventListener("keydown", checkEscapeKey);
      return trap;
    };
    var removeListeners = function removeListeners2() {
      if (!state.active) {
        return;
      }
      doc2.removeEventListener("focusin", checkFocusIn, true);
      doc2.removeEventListener("mousedown", checkPointerDown, true);
      doc2.removeEventListener("touchstart", checkPointerDown, true);
      doc2.removeEventListener("click", checkClick, true);
      doc2.removeEventListener("keydown", checkTabKey, true);
      doc2.removeEventListener("keydown", checkEscapeKey);
      return trap;
    };
    var checkDomRemoval = function checkDomRemoval2(mutations) {
      var isFocusedNodeRemoved = mutations.some(function(mutation) {
        var removedNodes = Array.from(mutation.removedNodes);
        return removedNodes.some(function(node) {
          return node === state.mostRecentlyFocusedNode;
        });
      });
      if (isFocusedNodeRemoved) {
        _tryFocus(getInitialFocusNode());
      }
    };
    var mutationObserver = typeof window !== "undefined" && "MutationObserver" in window ? new MutationObserver(checkDomRemoval) : void 0;
    var updateObservedNodes = function updateObservedNodes2() {
      if (!mutationObserver) {
        return;
      }
      mutationObserver.disconnect();
      if (state.active && !state.paused) {
        state.containers.map(function(container) {
          mutationObserver.observe(container, {
            subtree: true,
            childList: true
          });
        });
      }
    };
    trap = {
      get active() {
        return state.active;
      },
      get paused() {
        return state.paused;
      },
      activate: function activate(activateOptions) {
        if (state.active) {
          return this;
        }
        var onActivate = getOption(activateOptions, "onActivate");
        var onPostActivate = getOption(activateOptions, "onPostActivate");
        var checkCanFocusTrap = getOption(activateOptions, "checkCanFocusTrap");
        if (!checkCanFocusTrap) {
          updateTabbableNodes();
        }
        state.active = true;
        state.paused = false;
        state.nodeFocusedBeforeActivation = doc2.activeElement;
        onActivate === null || onActivate === void 0 || onActivate();
        var finishActivation = function finishActivation2() {
          if (checkCanFocusTrap) {
            updateTabbableNodes();
          }
          addListeners();
          updateObservedNodes();
          onPostActivate === null || onPostActivate === void 0 || onPostActivate();
        };
        if (checkCanFocusTrap) {
          checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
          return this;
        }
        finishActivation();
        return this;
      },
      deactivate: function deactivate(deactivateOptions) {
        if (!state.active) {
          return this;
        }
        var options = _objectSpread2({
          onDeactivate: config.onDeactivate,
          onPostDeactivate: config.onPostDeactivate,
          checkCanReturnFocus: config.checkCanReturnFocus
        }, deactivateOptions);
        clearTimeout(state.delayInitialFocusTimer);
        state.delayInitialFocusTimer = void 0;
        removeListeners();
        state.active = false;
        state.paused = false;
        updateObservedNodes();
        activeFocusTraps.deactivateTrap(trapStack, trap);
        var onDeactivate = getOption(options, "onDeactivate");
        var onPostDeactivate = getOption(options, "onPostDeactivate");
        var checkCanReturnFocus = getOption(options, "checkCanReturnFocus");
        var returnFocus = getOption(options, "returnFocus", "returnFocusOnDeactivate");
        onDeactivate === null || onDeactivate === void 0 || onDeactivate();
        var finishDeactivation = function finishDeactivation2() {
          delay(function() {
            if (returnFocus) {
              _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
            }
            onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();
          });
        };
        if (returnFocus && checkCanReturnFocus) {
          checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
          return this;
        }
        finishDeactivation();
        return this;
      },
      pause: function pause(pauseOptions) {
        if (state.paused || !state.active) {
          return this;
        }
        var onPause = getOption(pauseOptions, "onPause");
        var onPostPause = getOption(pauseOptions, "onPostPause");
        state.paused = true;
        onPause === null || onPause === void 0 || onPause();
        removeListeners();
        updateObservedNodes();
        onPostPause === null || onPostPause === void 0 || onPostPause();
        return this;
      },
      unpause: function unpause(unpauseOptions) {
        if (!state.paused || !state.active) {
          return this;
        }
        var onUnpause = getOption(unpauseOptions, "onUnpause");
        var onPostUnpause = getOption(unpauseOptions, "onPostUnpause");
        state.paused = false;
        onUnpause === null || onUnpause === void 0 || onUnpause();
        updateTabbableNodes();
        addListeners();
        updateObservedNodes();
        onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();
        return this;
      },
      updateContainerElements: function updateContainerElements(containerElements) {
        var elementsAsArray = [].concat(containerElements).filter(Boolean);
        state.containers = elementsAsArray.map(function(element) {
          return typeof element === "string" ? doc2.querySelector(element) : element;
        });
        if (state.active) {
          updateTabbableNodes();
        }
        updateObservedNodes();
        return this;
      }
    };
    trap.updateContainerElements(elements);
    return trap;
  };
  function useFocusTrap(target, options = {}) {
    let trap;
    const { immediate, ...focusTrapOptions } = options;
    const hasFocus = ref(false);
    const isPaused = ref(false);
    const activate = (opts) => trap && trap.activate(opts);
    const deactivate = (opts) => trap && trap.deactivate(opts);
    const pause = () => {
      if (trap) {
        trap.pause();
        isPaused.value = true;
      }
    };
    const unpause = () => {
      if (trap) {
        trap.unpause();
        isPaused.value = false;
      }
    };
    const targets = computed2(() => {
      const _targets = toValue2(target);
      return (Array.isArray(_targets) ? _targets : [_targets]).map((el) => {
        const _el = toValue2(el);
        return typeof _el === "string" ? _el : unrefElement(_el);
      }).filter(notNullish);
    });
    watch2(
      targets,
      (els) => {
        if (!els.length)
          return;
        trap = createFocusTrap(els, {
          ...focusTrapOptions,
          onActivate() {
            hasFocus.value = true;
            if (options.onActivate)
              options.onActivate();
          },
          onDeactivate() {
            hasFocus.value = false;
            if (options.onDeactivate)
              options.onDeactivate();
          }
        });
        if (immediate)
          activate();
      },
      { flush: "post" }
    );
    tryOnScopeDispose(() => deactivate());
    return {
      hasFocus,
      isPaused,
      activate,
      deactivate,
      pause,
      unpause
    };
  }
  var useActivatedFocusTrap = ({
    element,
    isActive,
    noTrap,
    fallbackFocus
  }, focusTrapOpts = {
    allowOutsideClick: true,
    fallbackFocus: fallbackFocus.ref.value ?? void 0,
    escapeDeactivates: false
  }) => {
    const resolvedIsActive = readonly(toRef(isActive));
    const resolvedNoTrap = readonly(toRef(noTrap));
    const checkNeedsFocus = () => {
      var _a;
      const tabbableElements = (_a = element.value) == null ? void 0 : _a.querySelectorAll(
        `a, button, input, select, textarea, [tabindex]:not([tabindex="-1"]):not(.${fallbackFocus.classSelector})`
      );
      return !tabbableElements || tabbableElements.length === 0;
    };
    const needsFallback = ref(checkNeedsFocus());
    onMounted(() => {
      useMutationObserver(
        element,
        () => {
          needsFallback.value = checkNeedsFocus();
        },
        { childList: true, subtree: true }
      );
    });
    const trap = useFocusTrap(element, focusTrapOpts);
    watch2(resolvedIsActive, async (newValue) => {
      await nextTick();
      if (newValue && resolvedNoTrap.value === false) {
        trap.activate();
      } else {
        trap.deactivate();
      }
    });
    watch2(resolvedNoTrap, (newValue) => {
      if (newValue === true) {
        trap.deactivate();
      }
    });
    return {
      needsFallback: readonly(needsFallback)
    };
  };
  var useScrollLock2 = createSharedComposable(useScrollLock);
  var prevousRightPadding = "";
  var lockRegistry = /* @__PURE__ */ new Map();
  var useSafeScrollLock = (isOpen, bodyScroll) => {
    const resolvedIsOpen = readonly(toRef(isOpen));
    const id = useId();
    const inverseBodyScrollingValue = computed2(() => !toValue(bodyScroll));
    const isLocked = useScrollLock2(
      typeof document !== "undefined" ? document.body : null,
      resolvedIsOpen.value && inverseBodyScrollingValue.value
    );
    onMounted(() => {
      if (typeof document === "undefined")
        return;
      lockRegistry.set(id, false);
      watch2(
        [resolvedIsOpen, inverseBodyScrollingValue],
        ([modelVal, bodyVal]) => {
          const scrollBarGap = window.innerWidth - document.documentElement.clientWidth;
          const hasLocked = Array.from(lockRegistry.values()).some((val) => val === true);
          const myLocked = modelVal && bodyVal;
          lockRegistry.set(id, myLocked);
          if (myLocked && !hasLocked && !isLocked.value) {
            isLocked.value = true;
            if (scrollBarGap > 0) {
              prevousRightPadding = document.body.style.paddingRight;
              document.body.style.paddingRight = `${scrollBarGap + prevousRightPadding}px`;
            }
          }
          const hasLockedAfter = Array.from(lockRegistry.values()).some((val) => val === true);
          if (hasLocked && !hasLockedAfter) {
            lockRegistry.set(id, false);
            isLocked.value = false;
            document.body.style.paddingRight = prevousRightPadding;
          }
        },
        { immediate: true }
      );
    });
    onUnmounted(() => {
      lockRegistry.delete(id);
      const hasLockedAfter = Array.from(lockRegistry.values()).some((val) => val === true);
      if (!hasLockedAfter) {
        document.body.style.paddingRight = prevousRightPadding;
        isLocked.value = false;
      }
    });
  };

  // node_modules/bootstrap-vue-next/dist/BModalOrchestrator.vue_vue_type_script_setup_true_lang-Bwx2iZbK.mjs
  var _hoisted_111 = ["id", "aria-labelledby", "aria-describedby"];
  var _hoisted_29 = ["id"];
  var fallbackClassSelector = "modal-fallback-focus";
  var defaultModalDialogZIndex = 1056;
  var _sfc_main$15 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BModal",
    props: /* @__PURE__ */ mergeModels({
      autofocus: { type: Boolean, default: true },
      autofocusButton: { default: void 0 },
      backdropFirst: { type: Boolean, default: false },
      body: { default: void 0 },
      bodyAttrs: { default: void 0 },
      bodyBgVariant: { default: null },
      bodyClass: { default: null },
      bodyScrolling: { type: Boolean, default: false },
      bodyTextVariant: { default: null },
      bodyVariant: { default: null },
      busy: { type: Boolean, default: false },
      buttonSize: { default: "md" },
      cancelDisabled: { type: Boolean, default: false },
      cancelTitle: { default: "Cancel" },
      cancelVariant: { default: "secondary" },
      centered: { type: Boolean, default: false },
      contentClass: { default: void 0 },
      dialogClass: { default: void 0 },
      footerBgVariant: { default: null },
      footerBorderVariant: { default: null },
      footerClass: { default: void 0 },
      footerTextVariant: { default: null },
      footerVariant: { default: null },
      fullscreen: { type: [Boolean, String], default: false },
      headerBgVariant: { default: null },
      headerBorderVariant: { default: null },
      headerClass: { default: void 0 },
      headerCloseClass: { default: void 0 },
      headerCloseLabel: { default: "Close" },
      headerCloseVariant: { default: "secondary" },
      headerTextVariant: { default: null },
      headerVariant: { default: null },
      noBackdrop: { type: Boolean, default: false },
      noFooter: { type: Boolean, default: false },
      noHeader: { type: Boolean, default: false },
      noHeaderClose: { type: Boolean, default: false },
      id: { default: void 0 },
      modalClass: { default: void 0 },
      noCloseOnBackdrop: { type: Boolean, default: false },
      noCloseOnEsc: { type: Boolean, default: false },
      noTrap: { type: Boolean, default: false },
      noStacking: { type: Boolean },
      okDisabled: { type: Boolean, default: false },
      okOnly: { type: Boolean, default: false },
      okTitle: { default: "OK" },
      okVariant: { default: "primary" },
      scrollable: { type: Boolean, default: false },
      size: { default: "md" },
      title: { default: void 0 },
      titleClass: { default: void 0 },
      titleVisuallyHidden: { type: Boolean, default: false },
      titleTag: { default: "h5" },
      teleportDisabled: { type: Boolean, default: false },
      teleportTo: { default: "body" },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean },
      noFade: { type: Boolean, default: false },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean, default: false },
      show: { type: Boolean, default: false },
      transProps: { default: void 0 },
      visible: { type: Boolean, default: false }
    }, {
      "modelValue": { type: Boolean, ...{ default: false } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["backdrop", "cancel", "close", "esc", "ok", "hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BModal");
      const emit2 = __emit;
      const slots = useSlots();
      const computedId = useId2(() => props.id, "modal");
      const modelValue = useModel(__props, "modelValue");
      const element = useTemplateRef("_element");
      const fallbackFocusElement = useTemplateRef("_fallbackFocusElement");
      const okButton = useTemplateRef("_okButton");
      const cancelButton = useTemplateRef("_cancelButton");
      const closeButton = useTemplateRef("_closeButton");
      const pickFocusItem = () => {
        if (props.autofocus === false)
          return;
        if (props.autofocusButton === "ok") {
          okButtonFocus.value = true;
        } else if (props.autofocusButton === "close") {
          closeButtonFocus.value = true;
        } else if (props.autofocusButton === "cancel") {
          cancelButtonFocus.value = true;
        } else {
          modalFocus.value = true;
        }
      };
      const onAfterEnter = () => {
        pickFocusItem();
      };
      const {
        showRef,
        renderRef,
        renderBackdropRef,
        hide: hide2,
        show,
        toggle: toggle2,
        computedNoAnimation,
        transitionProps,
        backdropTransitionProps,
        isLeaving,
        isVisible: isVisible2,
        trapActive,
        contentShowing,
        backdropReady,
        backdropVisible
      } = useShowHide(modelValue, props, emit2, element, computedId, {
        // addShowClass: false,
        transitionProps: {
          onAfterEnter
        }
      });
      const { needsFallback } = useActivatedFocusTrap({
        element,
        isActive: trapActive,
        noTrap: () => props.noTrap,
        fallbackFocus: {
          ref: fallbackFocusElement,
          classSelector: fallbackClassSelector
        }
      });
      onKeyStroke(
        "Escape",
        () => {
          hide2("esc");
        },
        { target: element }
      );
      useSafeScrollLock(showRef, () => props.bodyScrolling);
      const { focused: modalFocus } = useFocus(element, {
        initialValue: modelValue.value && props.autofocusButton === void 0 && props.autofocus === true
      });
      const { focused: okButtonFocus } = useFocus(okButton, {
        initialValue: modelValue.value && props.autofocusButton === "ok" && props.autofocus === true
      });
      const { focused: cancelButtonFocus } = useFocus(cancelButton, {
        initialValue: modelValue.value && props.autofocusButton === "cancel" && props.autofocus === true
      });
      const { focused: closeButtonFocus } = useFocus(closeButton, {
        initialValue: modelValue.value && props.autofocusButton === "close" && props.autofocus === true
      });
      const hasHeaderCloseSlot = computed2(() => !isEmptySlot(slots["header-close"]));
      const modalDialogClasses = computed2(() => [
        props.dialogClass,
        {
          "modal-fullscreen": props.fullscreen === true,
          [`modal-fullscreen-${props.fullscreen}-down`]: typeof props.fullscreen === "string",
          [`modal-${props.size}`]: props.size !== "md",
          "modal-dialog-centered": props.centered,
          "modal-dialog-scrollable": props.scrollable
        }
      ]);
      const bodyColorClasses = useColorVariantClasses(() => ({
        bgVariant: props.bodyBgVariant,
        textVariant: props.bodyTextVariant,
        variant: props.bodyVariant
      }));
      const bodyClasses = computed2(() => [props.bodyClass, bodyColorClasses.value]);
      const headerColorClasses = useColorVariantClasses(() => ({
        bgVariant: props.headerBgVariant,
        textVariant: props.headerTextVariant,
        variant: props.headerVariant,
        borderVariant: props.headerBorderVariant
      }));
      const headerClasses = computed2(() => [props.headerClass, headerColorClasses.value]);
      const headerCloseAttrs = computed2(() => ({
        variant: hasHeaderCloseSlot.value ? props.headerCloseVariant : void 0,
        class: props.headerCloseClass
      }));
      const footerColorClasses = useColorVariantClasses(() => ({
        bgVariant: props.footerBgVariant,
        textVariant: props.footerTextVariant,
        variant: props.footerVariant,
        borderVariant: props.footerBorderVariant
      }));
      const footerClasses = computed2(() => [props.footerClass, footerColorClasses.value]);
      const titleClasses = computed2(() => [
        props.titleClass,
        {
          ["visually-hidden"]: props.titleVisuallyHidden
        }
      ]);
      const disableCancel = computed2(() => props.cancelDisabled || props.busy);
      const disableOk = computed2(() => props.okDisabled || props.busy);
      const { activePosition, activeModalCount, stackWithoutSelf } = useModalManager(
        showRef,
        modelValue.value
      );
      watch2(stackWithoutSelf, (newValue, oldValue) => {
        if (newValue.length > oldValue.length && showRef.value === true && props.noStacking === true)
          hide2();
      });
      const computedZIndexNumber = computed2(
        () => (
          // Make sure that newly opened modals have a higher z-index than currently active ones.
          // All active modals have a z-index of ('defaultZIndex' - 'stackSize' - 'positionInStack').
          //
          // This means inactive modals will already be higher than active ones when opened.
          showRef.value || isLeaving.value ? (
            // Just for reference there is a single frame in which the modal is not active but still has a higher z-index than the active ones due to _when_ it calculates its position. It's a small visual effect
            defaultModalDialogZIndex - (((activeModalCount == null ? void 0 : activeModalCount.value) ?? 0) * 2 - ((activePosition == null ? void 0 : activePosition.value) ?? 0) * 2)
          ) : defaultModalDialogZIndex
        )
      );
      const computedZIndex = computed2(() => ({
        "z-index": computedZIndexNumber.value
      }));
      const computedZIndexBackdrop = computed2(() => ({
        "z-index": computedZIndexNumber.value - 1
      }));
      const sharedSlots = computed2(() => ({
        cancel: () => {
          hide2("cancel");
        },
        close: () => {
          hide2("close");
        },
        hide: hide2,
        ok: () => {
          hide2("ok");
        },
        active: showRef.value,
        visible: showRef.value
      }));
      __expose({
        hide: hide2,
        id: computedId,
        show,
        toggle: toggle2
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main, {
          to: unref(props).teleportTo,
          disabled: unref(props).teleportDisabled
        }, {
          default: withCtx(() => [
            unref(renderRef) || unref(contentShowing) ? (openBlock(), createBlock(Transition, mergeProps({ key: 0 }, unref(transitionProps), {
              appear: modelValue.value || unref(props).visible,
              onAfterEnter
            }), {
              default: withCtx(() => [
                withDirectives(createBaseVNode("div", mergeProps({
                  id: unref(computedId),
                  ref: "_element",
                  class: ["modal", [
                    unref(props).modalClass,
                    {
                      fade: !unref(computedNoAnimation),
                      show: unref(isVisible2)
                    }
                  ]],
                  role: "dialog",
                  "aria-labelledby": !unref(props).noHeader ? `${unref(computedId)}-label` : void 0,
                  "aria-describedby": `${unref(computedId)}-body`,
                  tabindex: "-1"
                }, _ctx.$attrs, {
                  style: computedZIndex.value,
                  onClick: _cache[4] || (_cache[4] = withModifiers(($event) => unref(hide2)("backdrop"), ["self"]))
                }), [
                  createBaseVNode("div", {
                    class: normalizeClass(["modal-dialog", modalDialogClasses.value])
                  }, [
                    unref(contentShowing) ? (openBlock(), createElementBlock("div", {
                      key: 0,
                      class: normalizeClass(["modal-content", unref(props).contentClass])
                    }, [
                      !unref(props).noHeader ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(["modal-header", headerClasses.value])
                      }, [
                        renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                          (openBlock(), createBlock(resolveDynamicComponent(unref(props).titleTag), {
                            id: `${unref(computedId)}-label`,
                            class: normalizeClass(["modal-title", titleClasses.value])
                          }, {
                            default: withCtx(() => [
                              renderSlot(_ctx.$slots, "title", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                                createTextVNode(toDisplayString(unref(props).title), 1)
                              ], true)
                            ]),
                            _: 3
                          }, 8, ["id", "class"])),
                          !unref(props).noHeaderClose ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                            hasHeaderCloseSlot.value ? (openBlock(), createBlock(_sfc_main8, mergeProps({ key: 0 }, headerCloseAttrs.value, {
                              onClick: _cache[0] || (_cache[0] = ($event) => unref(hide2)("close"))
                            }), {
                              default: withCtx(() => [
                                renderSlot(_ctx.$slots, "header-close", {}, void 0, true)
                              ]),
                              _: 3
                            }, 16)) : (openBlock(), createBlock(_sfc_main5, mergeProps({
                              key: 1,
                              "aria-label": unref(props).headerCloseLabel
                            }, headerCloseAttrs.value, {
                              onClick: _cache[1] || (_cache[1] = ($event) => unref(hide2)("close"))
                            }), null, 16, ["aria-label"]))
                          ], 64)) : createCommentVNode("", true)
                        ], true)
                      ], 2)) : createCommentVNode("", true),
                      createBaseVNode("div", mergeProps({
                        id: `${unref(computedId)}-body`,
                        class: ["modal-body", bodyClasses.value]
                      }, unref(props).bodyAttrs), [
                        renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                          createTextVNode(toDisplayString(unref(props).body), 1)
                        ], true)
                      ], 16, _hoisted_29),
                      !unref(props).noFooter ? (openBlock(), createElementBlock("div", {
                        key: 1,
                        class: normalizeClass(["modal-footer", footerClasses.value])
                      }, [
                        renderSlot(_ctx.$slots, "footer", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                          renderSlot(_ctx.$slots, "cancel", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                            !unref(props).okOnly ? (openBlock(), createBlock(_sfc_main8, {
                              key: 0,
                              ref: "_cancelButton",
                              disabled: disableCancel.value,
                              size: unref(props).buttonSize,
                              variant: unref(props).cancelVariant,
                              onClick: _cache[2] || (_cache[2] = ($event) => unref(hide2)("cancel"))
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(unref(props).cancelTitle), 1)
                              ]),
                              _: 1
                            }, 8, ["disabled", "size", "variant"])) : createCommentVNode("", true)
                          ], true),
                          renderSlot(_ctx.$slots, "ok", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                            createVNode(_sfc_main8, {
                              ref: "_okButton",
                              disabled: disableOk.value,
                              size: unref(props).buttonSize,
                              variant: unref(props).okVariant,
                              onClick: _cache[3] || (_cache[3] = ($event) => unref(hide2)("ok"))
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(unref(props).okTitle), 1)
                              ]),
                              _: 1
                            }, 8, ["disabled", "size", "variant"])
                          ], true)
                        ], true)
                      ], 2)) : createCommentVNode("", true)
                    ], 2)) : createCommentVNode("", true)
                  ], 2),
                  unref(needsFallback) ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    ref: "_fallbackFocusElement",
                    class: normalizeClass(fallbackClassSelector),
                    tabindex: "0",
                    style: { "width": "0", "height": "0", "overflow": "hidden" }
                  }, null, 512)) : createCommentVNode("", true)
                ], 16, _hoisted_111), [
                  [vShow, unref(showRef) && (unref(backdropReady) && unref(props).backdropFirst || !unref(props).backdropFirst)]
                ])
              ]),
              _: 3
            }, 16, ["appear"])) : createCommentVNode("", true),
            !unref(props).noBackdrop ? renderSlot(_ctx.$slots, "backdrop", normalizeProps(mergeProps({ key: 1 }, sharedSlots.value)), () => [
              unref(renderBackdropRef) ? (openBlock(), createBlock(Transition, normalizeProps(mergeProps({ key: 0 }, unref(backdropTransitionProps))), {
                default: withCtx(() => [
                  withDirectives(createBaseVNode("div", {
                    class: normalizeClass(["modal-backdrop", {
                      fade: !unref(computedNoAnimation),
                      show: unref(backdropVisible) || unref(computedNoAnimation)
                    }]),
                    style: normalizeStyle(computedZIndexBackdrop.value),
                    onClick: _cache[5] || (_cache[5] = ($event) => unref(hide2)("backdrop"))
                  }, null, 6), [
                    [vShow, unref(showRef) || unref(isLeaving) && unref(props).backdropFirst && !unref(computedNoAnimation)]
                  ])
                ]),
                _: 1
              }, 16)) : createCommentVNode("", true)
            ], true) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["to", "disabled"]);
      };
    }
  });
  var BModal = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["__scopeId", "data-v-93972863"]]);
  var _sfc_main21 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BModalOrchestrator",
    props: {
      teleportDisabled: { type: Boolean, default: false },
      teleportTo: { default: "body" }
    },
    setup(__props, { expose: __expose }) {
      const _props = __props;
      const props = useDefaults(_props, "BModalOrchestrator");
      const tools = useModalController();
      __expose({
        ...tools
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main, {
          to: unref(props).teleportTo,
          disabled: unref(props).teleportDisabled
        }, {
          default: withCtx(() => {
            var _a;
            return [
              createBaseVNode("div", mergeProps({ id: "__BVID__modal-container" }, _ctx.$attrs), [
                (openBlock(true), createElementBlock(Fragment, null, renderList((_a = unref(tools).modals) == null ? void 0 : _a.value, ([self2, modal]) => {
                  return openBlock(), createBlock(resolveDynamicComponent(modal.component ?? BModal), mergeProps({
                    key: self2,
                    ref_for: true
                  }, modal.props, {
                    modelValue: modal.props._modelValue,
                    "onUpdate:modelValue": [($event) => modal.props._modelValue = $event, ($event) => {
                      var _a2, _b;
                      return (_b = (_a2 = unref(tools)).leave) == null ? void 0 : _b.call(_a2, self2);
                    }],
                    "initial-animation": "",
                    "teleport-disabled": true,
                    onHide: (e) => {
                      if (modal.props._isConfirm === true) {
                        if (e.trigger === "ok") {
                          modal.props._promise.resolve(true);
                          return;
                        }
                        if (e.trigger === "cancel") {
                          modal.props._promise.resolve(false);
                          return;
                        }
                        modal.props._promise.resolve(null);
                      }
                      modal.props._promise.resolve(true);
                    },
                    onHidden: ($event) => {
                      var _a2, _b;
                      return (_b = (_a2 = unref(tools)).remove) == null ? void 0 : _b.call(_a2, self2);
                    }
                  }), null, 16, ["modelValue", "onUpdate:modelValue", "onHide", "onHidden"]);
                }), 128))
              ], 16)
            ];
          }),
          _: 1
        }, 8, ["to", "disabled"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BNavText.vue_vue_type_script_setup_true_lang-BJ6QFz_P.mjs
  var _sfc_main$33 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BNavForm",
    props: {
      role: { default: void 0 },
      wrapperAttrs: { default: void 0 },
      formClass: { default: void 0 },
      floating: { type: Boolean, default: void 0 },
      id: { default: void 0 },
      novalidate: { type: Boolean, default: void 0 },
      validated: { type: Boolean, default: void 0 }
    },
    emits: ["submit"],
    setup(__props, { emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BNavForm");
      const emit2 = __emit;
      const { class: wrapperClass, ...attrs } = useAttrs();
      const submitted = (e) => {
        emit2("submit", e);
      };
      const liClasses = computed2(() => [
        "d-flex",
        "flex-row",
        "align-items-center",
        "flex-wrap",
        wrapperClass
      ]);
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", mergeProps({ class: liClasses.value }, _ctx.wrapperAttrs), [
          createVNode(_sfc_main15, mergeProps(attrs, {
            id: unref(props).id,
            floating: unref(props).floating,
            role: unref(props).role,
            novalidate: unref(props).novalidate,
            validated: unref(props).validated,
            class: ["d-flex", unref(props).formClass],
            onSubmit: withModifiers(submitted, ["prevent"])
          }), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["id", "floating", "role", "novalidate", "validated", "class"])
        ], 16);
      };
    }
  });
  var _hoisted_1$14 = { class: "nav-item dropdown" };
  var _sfc_main$16 = /* @__PURE__ */ defineComponent({
    __name: "BNavItemDropdown",
    props: /* @__PURE__ */ mergeModels({
      ariaLabel: { default: void 0 },
      autoClose: { type: [Boolean, String], default: true },
      boundary: { default: "clippingAncestors" },
      boundaryPadding: { default: void 0 },
      disabled: { type: Boolean, default: false },
      floatingMiddleware: { default: void 0 },
      id: { default: void 0 },
      isNav: { type: Boolean, default: true },
      menuClass: { default: void 0 },
      noCaret: { type: Boolean, default: false },
      noFlip: { type: Boolean, default: false },
      noShift: { type: Boolean, default: false },
      noSize: { type: Boolean, default: false },
      offset: { default: 0 },
      role: { default: "menu" },
      size: { default: "md" },
      noWrapper: { type: Boolean, default: void 0 },
      split: { type: Boolean, default: false },
      splitButtonType: { default: "button" },
      splitClass: { default: void 0 },
      splitDisabled: { type: Boolean, default: void 0 },
      splitHref: { default: void 0 },
      splitTo: { default: void 0 },
      splitVariant: { default: void 0 },
      strategy: { default: "absolute" },
      text: { default: void 0 },
      toggleClass: { default: void 0 },
      toggleText: { default: "Toggle dropdown" },
      variant: { default: "link" },
      wrapperClass: { default: void 0 },
      placement: { default: void 0 },
      teleportDisabled: { type: Boolean, default: false },
      teleportTo: { default: void 0 },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean },
      noFade: { type: Boolean },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean },
      show: { type: Boolean },
      transProps: {},
      visible: { type: Boolean }
    }, {
      "modelValue": { type: Boolean, ...{ default: false } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["click", "hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BNavItemDropdown");
      const emit2 = __emit;
      const modelValue = useModel(__props, "modelValue");
      const dropdown = useTemplateRef("_dropdown");
      const hide2 = () => {
        var _a;
        (_a = dropdown.value) == null ? void 0 : _a.hide();
      };
      const show = () => {
        var _a;
        (_a = dropdown.value) == null ? void 0 : _a.show();
      };
      const toggle2 = () => {
        var _a;
        (_a = dropdown.value) == null ? void 0 : _a.toggle();
      };
      __expose({
        hide: hide2,
        show,
        toggle: toggle2
      });
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("li", _hoisted_1$14, [
          createVNode(BDropdown, mergeProps({ ref: "_dropdown" }, unref(props), {
            modelValue: modelValue.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => modelValue.value = $event),
            "is-nav": "",
            onShow: _cache[1] || (_cache[1] = ($event) => emit2("show", $event)),
            onShown: _cache[2] || (_cache[2] = ($event) => emit2("shown", $event)),
            onHide: _cache[3] || (_cache[3] = ($event) => emit2("hide", $event)),
            onHidden: _cache[4] || (_cache[4] = ($event) => emit2("hidden", $event)),
            onHidePrevented: _cache[5] || (_cache[5] = ($event) => emit2("hide-prevented", $event)),
            onShowPrevented: _cache[6] || (_cache[6] = ($event) => emit2("show-prevented", $event)),
            onTogglePrevented: _cache[7] || (_cache[7] = ($event) => emit2("toggle-prevented", $event)),
            onToggle: _cache[8] || (_cache[8] = ($event) => emit2("toggle", $event)),
            onClick: _cache[9] || (_cache[9] = ($event) => emit2("click", $event))
          }), {
            "button-content": withCtx(() => [
              renderSlot(_ctx.$slots, "button-content")
            ]),
            "toggle-text": withCtx(() => [
              renderSlot(_ctx.$slots, "toggle-text")
            ]),
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default", {
                hide: hide2,
                show
              })
            ]),
            _: 3
          }, 16, ["modelValue"])
        ]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BOffcanvas-DIBIwNtP.mjs
  var _hoisted_112 = ["id", "aria-labelledby"];
  var _hoisted_210 = ["id"];
  var fallbackClassSelector2 = "offcanvas-fallback-focus";
  var _sfc_main22 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BOffcanvas",
    props: /* @__PURE__ */ mergeModels({
      noBackdrop: { type: Boolean, default: false },
      backdropFirst: { type: Boolean, default: false },
      bodyAttrs: { default: void 0 },
      bodyClass: { default: void 0 },
      bodyScrolling: { type: Boolean, default: false },
      footerClass: { default: void 0 },
      headerClass: { default: void 0 },
      headerCloseClass: { default: void 0 },
      headerCloseLabel: { default: "Close" },
      headerCloseVariant: { default: "secondary" },
      id: { default: void 0 },
      noCloseOnBackdrop: { type: Boolean, default: false },
      noCloseOnEsc: { type: Boolean, default: false },
      noFocus: { type: Boolean, default: false },
      noHeader: { type: Boolean, default: false },
      noTrap: { type: Boolean, default: false },
      noHeaderClose: { type: Boolean, default: false },
      placement: { default: "start" },
      shadow: { type: [String, Boolean], default: false },
      title: { default: void 0 },
      responsive: {},
      width: { default: void 0 },
      teleportDisabled: { type: Boolean, default: false },
      teleportTo: { default: "body" },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean, default: false },
      noFade: { type: Boolean },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean, default: false },
      show: { type: Boolean, default: false },
      transProps: {},
      visible: { type: Boolean, default: false }
    }, {
      "modelValue": { type: Boolean, ...{
        default: false
      } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["close", "esc", "backdrop", "breakpoint", "hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BOffcanvas");
      const emit2 = __emit;
      const slots = useSlots();
      const modelValue = useModel(__props, "modelValue");
      const computedId = useId2(() => props.id, "offcanvas");
      const breakpoints = useBreakpoints(breakpointsBootstrapV5);
      const smallerOrEqualToBreakpoint = breakpoints.smallerOrEqual(() => props.responsive ?? "xs");
      const isOpenByBreakpoint = ref(props.responsive !== void 0 && !smallerOrEqualToBreakpoint.value);
      const element = useTemplateRef("_element");
      const fallbackFocusElement = useTemplateRef("_fallbackFocusElement");
      const onAfterEnter = () => {
        nextTick(() => {
          if (props.noFocus === false && !isOpenByBreakpoint.value) {
            focused.value = true;
          }
        });
      };
      const {
        showRef,
        renderRef,
        renderBackdropRef,
        hide: hide2,
        show,
        toggle: toggle2,
        computedNoAnimation,
        contentShowing,
        transitionProps,
        backdropReady,
        backdropTransitionProps,
        backdropVisible,
        isVisible: isVisible2,
        buildTriggerableEvent,
        localNoAnimation,
        isLeaving,
        trapActive
      } = useShowHide(modelValue, props, emit2, element, computedId, {
        transitionProps: {
          onAfterEnter,
          enterToClass: "showing",
          leaveToClass: "hiding",
          enterActiveClass: "",
          leaveActiveClass: "",
          enterFromClass: "",
          leaveFromClass: ""
        }
      });
      useSafeScrollLock(showRef, () => props.bodyScrolling || isOpenByBreakpoint.value);
      onKeyStroke(
        "Escape",
        () => {
          hide2("esc");
        },
        { target: element }
      );
      const { focused } = useFocus(element, {
        initialValue: modelValue.value && props.noFocus === false && !isOpenByBreakpoint.value
      });
      const { needsFallback } = useActivatedFocusTrap({
        element,
        isActive: trapActive,
        noTrap: () => props.noTrap || isOpenByBreakpoint.value,
        fallbackFocus: {
          classSelector: fallbackClassSelector2,
          ref: fallbackFocusElement
        }
      });
      const showBackdrop = computed2(
        () => (props.responsive === void 0 || !isOpenByBreakpoint.value) && props.noBackdrop === false && (showRef.value === true || isLeaving.value && props.backdropFirst && !computedNoAnimation.value)
      );
      const hasHeaderCloseSlot = computed2(() => !isEmptySlot(slots["header-close"]));
      const headerCloseClasses = computed2(() => [
        { "text-reset": !hasHeaderCloseSlot.value },
        props.headerCloseClass
      ]);
      const headerCloseAttrs = computed2(() => ({
        variant: hasHeaderCloseSlot.value ? props.headerCloseVariant : void 0,
        class: headerCloseClasses.value
      }));
      const hasFooterSlot = computed2(() => !isEmptySlot(slots.footer));
      const computedClasses = computed2(() => [
        props.responsive === void 0 ? "offcanvas" : `offcanvas-${props.responsive}`,
        `offcanvas-${props.placement}`,
        {
          "show": isVisible2.value,
          [`shadow-${props.shadow}`]: !!props.shadow,
          "no-transition": computedNoAnimation.value
        }
      ]);
      const computedStyles = computed2(() => ({
        width: props.width
      }));
      const sharedSlots = computed2(() => ({
        visible: showRef.value,
        placement: props.placement,
        hide: hide2
      }));
      watch2(smallerOrEqualToBreakpoint, (newValue) => {
        if (props.responsive === void 0)
          return;
        if (newValue === true) {
          localNoAnimation.value = true;
          requestAnimationFrame(() => {
            isOpenByBreakpoint.value = false;
          });
          emit2("breakpoint", buildTriggerableEvent("breakpoint"));
          emit2("hide", buildTriggerableEvent("hide"));
        } else {
          localNoAnimation.value = true;
          requestAnimationFrame(() => {
            isOpenByBreakpoint.value = true;
          });
          emit2("breakpoint", buildTriggerableEvent("breakpoint"));
          emit2("show", buildTriggerableEvent("show"));
        }
      });
      __expose({
        hide: hide2,
        show,
        toggle: toggle2
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main, {
          to: unref(props).teleportTo,
          disabled: unref(props).teleportDisabled || isOpenByBreakpoint.value
        }, {
          default: withCtx(() => [
            unref(renderRef) || unref(contentShowing) || isOpenByBreakpoint.value ? (openBlock(), createBlock(Transition, mergeProps({ key: 0 }, unref(transitionProps), {
              appear: modelValue.value || unref(props).visible
            }), {
              default: withCtx(() => [
                withDirectives(createBaseVNode("div", mergeProps({
                  id: unref(computedId),
                  ref: "_element",
                  "aria-modal": "true",
                  role: "dialog",
                  class: computedClasses.value,
                  style: computedStyles.value,
                  tabindex: "-1",
                  "aria-labelledby": `${unref(computedId)}-offcanvas-label`,
                  "data-bs-backdrop": "false"
                }, _ctx.$attrs), [
                  unref(contentShowing) || isOpenByBreakpoint.value ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    !unref(props).noHeader ? (openBlock(), createElementBlock("div", {
                      key: 0,
                      class: normalizeClass(["offcanvas-header", unref(props).headerClass])
                    }, [
                      renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                        createBaseVNode("h5", {
                          id: `${unref(computedId)}-offcanvas-label`,
                          class: "offcanvas-title"
                        }, [
                          renderSlot(_ctx.$slots, "title", normalizeProps(guardReactiveProps(sharedSlots.value)), () => [
                            createTextVNode(toDisplayString(unref(props).title), 1)
                          ], true)
                        ], 8, _hoisted_210),
                        !unref(props).noHeaderClose ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                          hasHeaderCloseSlot.value ? (openBlock(), createBlock(_sfc_main8, mergeProps({ key: 0 }, headerCloseAttrs.value, {
                            onClick: _cache[0] || (_cache[0] = ($event) => unref(hide2)("close"))
                          }), {
                            default: withCtx(() => [
                              renderSlot(_ctx.$slots, "header-close", {}, void 0, true)
                            ]),
                            _: 3
                          }, 16)) : (openBlock(), createBlock(_sfc_main5, mergeProps({
                            key: 1,
                            "aria-label": unref(props).headerCloseLabel
                          }, headerCloseAttrs.value, {
                            onClick: _cache[1] || (_cache[1] = ($event) => unref(hide2)("close"))
                          }), null, 16, ["aria-label"]))
                        ], 64)) : createCommentVNode("", true)
                      ], true)
                    ], 2)) : createCommentVNode("", true),
                    createBaseVNode("div", mergeProps({
                      class: ["offcanvas-body", unref(props).bodyClass]
                    }, unref(props).bodyAttrs), [
                      renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(sharedSlots.value)), void 0, true)
                    ], 16),
                    hasFooterSlot.value ? (openBlock(), createElementBlock("div", {
                      key: 1,
                      class: normalizeClass(unref(props).footerClass)
                    }, [
                      renderSlot(_ctx.$slots, "footer", normalizeProps(guardReactiveProps(sharedSlots.value)), void 0, true)
                    ], 2)) : createCommentVNode("", true)
                  ], 64)) : createCommentVNode("", true),
                  unref(needsFallback) ? (openBlock(), createElementBlock("div", {
                    key: 1,
                    ref: "_fallbackFocusElement",
                    class: normalizeClass(fallbackClassSelector2),
                    tabindex: "0",
                    style: { "width": "0", "height": "0", "overflow": "hidden" }
                  }, null, 512)) : createCommentVNode("", true)
                ], 16, _hoisted_112), [
                  [
                    vShow,
                    unref(showRef) && (unref(backdropReady) && unref(props).backdropFirst || !unref(props).backdropFirst) || isOpenByBreakpoint.value
                  ]
                ])
              ]),
              _: 3
            }, 16, ["appear"])) : createCommentVNode("", true),
            !unref(props).noBackdrop ? renderSlot(_ctx.$slots, "backdrop", normalizeProps(mergeProps({ key: 1 }, sharedSlots.value)), () => [
              unref(renderBackdropRef) ? (openBlock(), createBlock(Transition, normalizeProps(mergeProps({ key: 0 }, unref(backdropTransitionProps))), {
                default: withCtx(() => [
                  withDirectives(createBaseVNode("div", {
                    class: normalizeClass(["offcanvas-backdrop", {
                      fade: !unref(computedNoAnimation),
                      show: unref(backdropVisible) || unref(computedNoAnimation)
                    }]),
                    onClick: _cache[2] || (_cache[2] = ($event) => unref(hide2)("backdrop"))
                  }, null, 2), [
                    [vShow, showBackdrop.value]
                  ])
                ]),
                _: 1
              }, 16)) : createCommentVNode("", true)
            ], true) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["to", "disabled"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BTableSimple.vue_vue_type_script_setup_true_lang-DOAS4KSP.mjs
  var defaultStickyHeaderHeight = "300px";
  var _sfc_main23 = /* @__PURE__ */ defineComponent({
    __name: "BTableSimple",
    props: {
      bordered: { type: Boolean, default: false },
      borderless: { type: Boolean, default: false },
      borderVariant: { default: null },
      captionTop: { type: Boolean, default: false },
      dark: { type: Boolean, default: false },
      fixed: { type: Boolean, default: false },
      hover: { type: Boolean, default: false },
      id: { default: void 0 },
      noBorderCollapse: { type: Boolean, default: false },
      outlined: { type: Boolean, default: false },
      responsive: { type: [Boolean, String], default: false },
      small: { type: Boolean, default: false },
      stacked: { type: [Boolean, String], default: false },
      stickyHeader: { type: [Boolean, String, Number], default: false },
      striped: { type: Boolean, default: false },
      stripedColumns: { type: Boolean, default: false },
      variant: { default: null },
      tableAttrs: { default: void 0 },
      tableClass: { default: void 0 }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BTableSimple");
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          borderVariant: props.borderVariant
        }))
      );
      const computedClasses = computed2(() => [
        props.tableClass,
        "table",
        "b-table",
        colorClasses.value,
        {
          "table-bordered": props.bordered,
          "table-borderless": props.borderless,
          "caption-top": props.captionTop,
          "table-dark": props.dark,
          "table-hover": props.hover,
          "b-table-stacked": props.stacked === true,
          [`b-table-stacked-${props.stacked}`]: typeof props.stacked === "string",
          "table-striped": props.striped,
          "table-sm": props.small,
          [`table-${props.variant}`]: props.variant !== null,
          "table-striped-columns": props.stripedColumns
        }
      ]);
      const computedTableAttrs = computed2(() => ({
        id: props.id,
        class: computedClasses.value,
        ...props.tableAttrs
      }));
      const computedSticky = useNumberishToStyle(
        computed2(
          () => (props.stickyHeader === true ? defaultStickyHeaderHeight : props.stickyHeader) || NaN
        )
      );
      const stickyIsValid = computed2(() => props.stickyHeader !== false);
      const isResponsive = computed2(() => props.responsive !== false || stickyIsValid.value);
      const responsiveStyles = computed2(
        () => stickyIsValid.value ? { maxHeight: computedSticky.value } : void 0
      );
      const responsiveClasses = computed2(() => ({
        "table-responsive": props.responsive === true,
        [`table-responsive-${props.responsive}`]: typeof props.responsive === "string",
        "b-table-sticky-header": stickyIsValid.value
      }));
      return (_ctx, _cache) => {
        return isResponsive.value ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(responsiveClasses.value),
          style: normalizeStyle(responsiveStyles.value)
        }, [
          createBaseVNode("table", normalizeProps(guardReactiveProps(computedTableAttrs.value)), [
            renderSlot(_ctx.$slots, "default")
          ], 16)
        ], 6)) : (openBlock(), createElementBlock("table", normalizeProps(mergeProps({ key: 1 }, computedTableAttrs.value)), [
          renderSlot(_ctx.$slots, "default")
        ], 16));
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BPlaceholderWrapper.vue_vue_type_script_setup_true_lang-BFsZiIaA.mjs
  var _sfc_main$42 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BPlaceholder",
    props: {
      animation: { default: void 0 },
      cols: { default: 12 },
      size: { default: "md" },
      tag: { default: "span" },
      variant: { default: null },
      width: { default: void 0 },
      wrapperTag: { default: "span" }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BPlaceholder");
      const widthString = computed2(
        () => props.width === void 0 ? void 0 : typeof props.width === "number" ? props.width.toString() : props.width.replace("%", "")
      );
      const colsString = computed2(
        () => props.cols === void 0 ? void 0 : typeof props.cols === "number" ? props.cols.toString() : props.cols
      );
      const colorClasses = useColorVariantClasses(
        computed2(() => ({
          bgVariant: props.variant
        }))
      );
      const computedClasses = computed2(() => [
        colorClasses.value,
        {
          [`col-${colsString.value}`]: colsString.value !== void 0 && widthString.value === void 0,
          [`placeholder-${props.size}`]: props.size !== "md"
        }
      ]);
      const wrapperClasses = computed2(() => ({
        [`placeholder-${props.animation}`]: props.animation !== void 0
      }));
      const computedStyle = computed2(() => ({
        width: widthString.value === void 0 ? void 0 : `${widthString.value}%`
      }));
      return (_ctx, _cache) => {
        return openBlock(), createBlock(resolveDynamicComponent(unref(props).wrapperTag), {
          class: normalizeClass(wrapperClasses.value)
        }, {
          default: withCtx(() => [
            (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps(_ctx.$attrs, {
              class: ["placeholder", computedClasses.value],
              style: computedStyle.value
            }), null, 16, ["class", "style"]))
          ]),
          _: 1
        }, 8, ["class"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BTooltip.vue_vue_type_script_setup_true_lang-C3ZQMvAC.mjs
  var _sfc_main25 = /* @__PURE__ */ defineComponent({
    __name: "BTooltip",
    props: /* @__PURE__ */ mergeModels({
      interactive: { type: Boolean, default: void 0 },
      boundary: {},
      boundaryPadding: {},
      click: { type: Boolean, default: void 0 },
      closeOnHide: { type: Boolean },
      content: { default: void 0 },
      customClass: { default: void 0 },
      delay: { default: void 0 },
      floatingMiddleware: { default: void 0 },
      hideMargin: {},
      id: { default: void 0 },
      inline: { type: Boolean, default: void 0 },
      manual: { type: Boolean, default: void 0 },
      noAutoClose: { type: Boolean, default: void 0 },
      noFlip: { type: Boolean, default: void 0 },
      noHide: { type: Boolean, default: void 0 },
      noShift: { type: Boolean, default: void 0 },
      noSize: { type: Boolean },
      noninteractive: { type: Boolean, default: void 0 },
      offset: { default: void 0 },
      placement: { default: void 0 },
      realtime: { type: Boolean, default: void 0 },
      reference: { default: void 0 },
      strategy: { default: void 0 },
      target: { default: void 0 },
      title: { default: void 0 },
      variant: { default: void 0 },
      teleportDisabled: { type: Boolean, default: void 0 },
      teleportTo: { default: void 0 },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean },
      noFade: { type: Boolean, default: void 0 },
      lazy: { type: Boolean, default: void 0 },
      unmountLazy: { type: Boolean, default: void 0 },
      show: { type: Boolean, default: void 0 },
      transProps: {},
      visible: { type: Boolean, default: void 0 }
    }, {
      "modelValue": { type: Boolean, ...{ default: void 0 } },
      "modelModifiers": {}
    }),
    emits: ["update:modelValue"],
    setup(__props, { expose: __expose }) {
      const _props = __props;
      const props = useDefaults(_props, "BTooltip");
      const slots = useSlots();
      const modelValue = useModel(__props, "modelValue");
      const computedProps = computed2(() => {
        const { interactive, noninteractive, ...rest } = props;
        return { noninteractive: noninteractive !== void 0 ? noninteractive : !interactive, ...rest };
      });
      const popover = useTemplateRef("_popover");
      __expose({
        hide: () => {
          var _a;
          (_a = popover.value) == null ? void 0 : _a.hide();
        },
        show: () => {
          var _a;
          (_a = popover.value) == null ? void 0 : _a.show();
        },
        toggle: () => {
          var _a;
          (_a = popover.value) == null ? void 0 : _a.toggle();
        }
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(BPopover, mergeProps({ ref: "_popover" }, computedProps.value, {
          modelValue: modelValue.value,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => modelValue.value = $event),
          tooltip: ""
        }), createSlots({ _: 2 }, [
          slots.default ? {
            name: "default",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            key: "0"
          } : void 0,
          slots.target ? {
            name: "target",
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, "target", normalizeProps(guardReactiveProps(scope)))
            ]),
            key: "1"
          } : void 0,
          slots.title ? {
            name: "title",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "title")
            ]),
            key: "2"
          } : void 0
        ]), 1040, ["modelValue"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BProgress.vue_vue_type_script_setup_true_lang-CjEfC0Pz.mjs
  var _sfc_main$17 = /* @__PURE__ */ defineComponent({
    __name: "BProgressBar",
    props: {
      animated: { type: Boolean, default: false },
      label: { default: void 0 },
      max: { default: void 0 },
      precision: { default: 0 },
      showProgress: { type: Boolean, default: false },
      showValue: { type: Boolean, default: false },
      striped: { type: Boolean, default: false },
      value: { default: 0 },
      variant: { default: null },
      bgVariant: { default: null },
      textVariant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BProgressBar");
      const parentData = inject(progressInjectionKey, null);
      const colorClasses = useColorVariantClasses(props);
      const computedClasses = computed2(() => [
        colorClasses.value,
        {
          "progress-bar-animated": props.animated || (parentData == null ? void 0 : parentData.animated.value),
          "progress-bar-striped": props.striped || (parentData == null ? void 0 : parentData.striped.value) || props.animated || (parentData == null ? void 0 : parentData.animated.value)
        }
      ]);
      const numberPrecision = useToNumber(() => props.precision);
      const numberValue = useToNumber(() => props.value);
      const numberMax = useToNumber(() => props.max ?? NaN);
      const parentMaxNumber = useToNumber(() => (parentData == null ? void 0 : parentData.max.value) ?? NaN);
      const computedLabel = computed2(
        () => props.showValue || (parentData == null ? void 0 : parentData.showValue.value) ? numberValue.value.toFixed(numberPrecision.value) : props.showProgress || (parentData == null ? void 0 : parentData.showProgress.value) ? (numberValue.value * 100 / (numberMax.value || 100)).toFixed(numberPrecision.value) : props.label !== void 0 ? props.label : ""
      );
      const computedWidth = computed2(
        () => parentMaxNumber.value ? `${numberValue.value * 100 / parentMaxNumber.value}%` : numberMax.value ? `${numberValue.value * 100 / numberMax.value}%` : typeof props.value === "string" ? props.value : `${props.value}%`
      );
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("div", {
          class: normalizeClass(["progress-bar", computedClasses.value]),
          style: normalizeStyle({ width: computedWidth.value })
        }, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(computedLabel.value), 1)
          ])
        ], 6);
      };
    }
  });
  var _hoisted_113 = ["aria-valuenow", "aria-valuemax"];
  var _sfc_main26 = /* @__PURE__ */ defineComponent({
    __name: "BProgress",
    props: {
      height: { default: void 0 },
      animated: { type: Boolean, default: void 0 },
      max: { default: 100 },
      precision: { default: void 0 },
      showProgress: { type: Boolean, default: void 0 },
      showValue: { type: Boolean, default: void 0 },
      striped: { type: Boolean, default: void 0 },
      value: { default: void 0 },
      variant: { default: void 0 },
      bgVariant: { default: void 0 },
      textVariant: { default: void 0 }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BProgress");
      provide(progressInjectionKey, {
        animated: toRef(() => props.animated),
        max: toRef(() => props.max),
        showProgress: toRef(() => props.showProgress),
        showValue: toRef(() => props.showValue),
        striped: toRef(() => props.striped)
      });
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("div", {
          class: "progress",
          role: "progressbar",
          style: normalizeStyle({ height: unref(props).height }),
          "aria-valuenow": unref(props).value,
          "aria-valuemin": "0",
          "aria-valuemax": unref(props).max
        }, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createVNode(_sfc_main$17, {
              animated: unref(props).animated,
              max: unref(props).max,
              precision: unref(props).precision,
              "show-progress": unref(props).showProgress,
              "show-value": unref(props).showValue,
              striped: unref(props).striped,
              value: unref(props).value,
              variant: unref(props).variant,
              "text-variant": unref(props).textVariant,
              "bg-variant": unref(props).bgVariant
            }, null, 8, ["animated", "max", "precision", "show-progress", "show-value", "striped", "value", "variant", "text-variant", "bg-variant"])
          ])
        ], 12, _hoisted_113);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BTable.vue_vue_type_script_setup_true_lang-BhFlxAjx.mjs
  var formatItem = (item, fieldKey, formatter) => {
    const val = get(item, fieldKey);
    return formatter && typeof formatter === "function" ? formatter(val, fieldKey, item) : val;
  };
  var isTableItem = (value) => typeof value === "object" && value !== null;
  var isTableField = (value) => typeof value === "object" && value !== null && "key" in value;
  var _sfc_main$72 = /* @__PURE__ */ defineComponent({
    __name: "BTbody",
    props: {
      variant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BTbody");
      const computedClasses = computed2(() => ({
        [`thead-${props.variant}`]: props.variant !== null
      }));
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("tbody", {
          class: normalizeClass(computedClasses.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var _hoisted_1$3 = ["scope", "colspan", "rowspan", "data-label"];
  var _hoisted_2$3 = { key: 0 };
  var _sfc_main$62 = /* @__PURE__ */ defineComponent({
    __name: "BTd",
    props: {
      colspan: { default: void 0 },
      rowspan: { default: void 0 },
      stackedHeading: { default: void 0 },
      stickyColumn: { type: Boolean, default: false },
      variant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BTd");
      const computedClasses = computed2(() => ({
        [`table-${props.variant}`]: props.variant !== null,
        "b-table-sticky-column": props.stickyColumn,
        "table-b-table-default": props.stickyColumn && props.variant === null
      }));
      const scope = computed2(() => props.colspan ? "colspan" : props.rowspan ? "rowspan" : "col");
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("td", {
          scope: scope.value,
          class: normalizeClass(computedClasses.value),
          colspan: unref(props).colspan,
          rowspan: unref(props).rowspan,
          "data-label": unref(props).stackedHeading
        }, [
          unref(props).stackedHeading ? (openBlock(), createElementBlock("div", _hoisted_2$3, [
            renderSlot(_ctx.$slots, "default")
          ])) : renderSlot(_ctx.$slots, "default", { key: 1 })
        ], 10, _hoisted_1$3);
      };
    }
  });
  var _sfc_main$52 = /* @__PURE__ */ defineComponent({
    __name: "BTfoot",
    props: {
      variant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BTfoot");
      const computedClasses = computed2(() => ({
        [`table-${props.variant}`]: props.variant !== null
      }));
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("tfoot", {
          class: normalizeClass(computedClasses.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var _hoisted_1$22 = ["scope", "colspan", "rowspan", "data-label"];
  var _hoisted_2$2 = { key: 0 };
  var _sfc_main$43 = /* @__PURE__ */ defineComponent({
    __name: "BTh",
    props: {
      colspan: { default: void 0 },
      rowspan: { default: void 0 },
      stackedHeading: { default: void 0 },
      stickyColumn: { type: Boolean, default: false },
      variant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BTh");
      const computedClasses = computed2(() => ({
        [`table-${props.variant}`]: props.variant !== null,
        "b-table-sticky-column": props.stickyColumn,
        "table-b-table-default": props.stickyColumn && props.variant === null
      }));
      const scope = computed2(() => props.colspan ? "colspan" : props.rowspan ? "rowspan" : "col");
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("th", {
          scope: scope.value,
          class: normalizeClass(computedClasses.value),
          colspan: unref(props).colspan,
          rowspan: unref(props).rowspan,
          "data-label": unref(props).stackedHeading
        }, [
          unref(props).stackedHeading !== void 0 ? (openBlock(), createElementBlock("div", _hoisted_2$2, [
            renderSlot(_ctx.$slots, "default")
          ])) : renderSlot(_ctx.$slots, "default", { key: 1 })
        ], 10, _hoisted_1$22);
      };
    }
  });
  var _sfc_main$34 = /* @__PURE__ */ defineComponent({
    __name: "BThead",
    props: {
      variant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BThead");
      const computedClasses = computed2(() => ({
        [`table-${props.variant}`]: props.variant !== null
      }));
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("thead", {
          class: normalizeClass(computedClasses.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var _sfc_main$23 = /* @__PURE__ */ defineComponent({
    __name: "BTr",
    props: {
      variant: { default: null }
    },
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BTr");
      const computedClasses = computed2(() => ({
        [`table-${props.variant}`]: props.variant !== null
      }));
      return (_ctx, _cache) => {
        return openBlock(), createElementBlock("tr", {
          class: normalizeClass(computedClasses.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var getTableFieldHeadLabel = (field) => typeof field === "string" ? titleCase(field) : field.label !== void 0 ? field.label : typeof field.key === "string" ? titleCase(field.key) : field.key;
  var btableSimpleProps = Object.freeze(
    Object.keys({
      bordered: 0,
      borderless: 0,
      borderVariant: 0,
      captionTop: 0,
      dark: 0,
      fixed: 0,
      hover: 0,
      id: 0,
      noBorderCollapse: 0,
      outlined: 0,
      responsive: 0,
      small: 0,
      stacked: 0,
      stickyHeader: 0,
      striped: 0,
      stripedColumns: 0,
      variant: 0,
      tableAttrs: 0,
      tableClass: 0
    })
  );
  var btableLiteProps = Object.freeze(
    Object.keys({
      align: 0,
      caption: 0,
      detailsTdClass: 0,
      fieldColumnClass: 0,
      fields: 0,
      footClone: 0,
      footRowVariant: 0,
      footVariant: 0,
      headRowVariant: 0,
      headVariant: 0,
      items: 0,
      labelStacked: 0,
      modelValue: 0,
      primaryKey: 0,
      tbodyClass: 0,
      tbodyTrAttrs: 0,
      tbodyTrClass: 0,
      tfootClass: 0,
      tfootTrClass: 0,
      theadClass: 0,
      theadTrClass: 0
    })
  );
  var TABLE_TAG_NAMES = ["TD", "TH", "TR"];
  var eventFilter = [
    "a",
    "a *",
    // Include content inside links
    "button",
    "button *",
    // Include content inside buttons
    "input:not(.disabled):not([disabled])",
    "select:not(.disabled):not([disabled])",
    "textarea:not(.disabled):not([disabled])",
    '[role="link"]',
    '[role="link"] *',
    '[role="button"]',
    '[role="button"] *',
    "[tabindex]:not(.disabled):not([disabled])"
  ].join(",");
  var filterEvent = (event) => {
    if (!event || !event.target) {
      return false;
    }
    const el = event.target;
    if ("disabled" in el && el.disabled || TABLE_TAG_NAMES.indexOf(el.tagName) !== -1) {
      return false;
    }
    if (el.closest(".dropdown-menu"))
      return true;
    const label = el.tagName === "LABEL" ? el : el.closest("label");
    if (label) {
      const labelFor = label.getAttribute("for");
      const input2 = labelFor ? document.getElementById(labelFor) : label.querySelector("input, select, textarea");
      if (input2 && !input2.disabled) {
        return true;
      }
    }
    return el.matches(eventFilter);
  };
  var _hoisted_1$15 = {
    key: 0,
    class: "b-table-stacked-label"
  };
  var _hoisted_2$1 = { class: "d-inline-flex flex-nowrap align-items-center gap-1" };
  var _hoisted_3$1 = { key: 2 };
  var _sfc_main$18 = /* @__PURE__ */ defineComponent({
    __name: "BTableLite",
    props: {
      align: { default: void 0 },
      caption: { default: void 0 },
      detailsTdClass: { default: void 0 },
      fieldColumnClass: { type: [Function, String, Object, Array], default: void 0 },
      fields: { default: () => [] },
      footClone: { type: Boolean, default: false },
      footRowVariant: { default: void 0 },
      footVariant: { default: void 0 },
      headRowVariant: { default: void 0 },
      headVariant: { default: void 0 },
      items: { default: () => [] },
      labelStacked: { type: Boolean, default: false },
      modelValue: { default: void 0 },
      primaryKey: { default: void 0 },
      tbodyClass: { default: void 0 },
      tbodyTrAttrs: { type: [Function, Object], default: void 0 },
      tbodyTrClass: { type: [Function, String, Array, Object], default: void 0 },
      tfootClass: { default: void 0 },
      tfootTrClass: { default: void 0 },
      theadClass: { default: void 0 },
      theadTrClass: { default: void 0 },
      bordered: { type: Boolean, default: void 0 },
      borderless: { type: Boolean, default: void 0 },
      borderVariant: { default: void 0 },
      captionTop: { type: Boolean, default: void 0 },
      dark: { type: Boolean, default: void 0 },
      fixed: { type: Boolean, default: void 0 },
      hover: { type: Boolean, default: void 0 },
      id: { default: void 0 },
      noBorderCollapse: { type: Boolean, default: void 0 },
      outlined: { type: Boolean, default: void 0 },
      responsive: { type: [Boolean, String], default: void 0 },
      small: { type: Boolean, default: void 0 },
      stacked: { type: [Boolean, String], default: void 0 },
      stickyHeader: { type: [Boolean, String, Number], default: void 0 },
      striped: { type: Boolean, default: void 0 },
      stripedColumns: { type: Boolean, default: void 0 },
      variant: { default: void 0 },
      tableAttrs: {},
      tableClass: { default: void 0 }
    },
    emits: ["head-clicked", "row-clicked", "row-dblclicked", "row-contextmenu", "row-hovered", "row-unhovered", "row-middle-clicked"],
    setup(__props, { emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BTableLite");
      const emit2 = __emit;
      const slots = useSlots();
      const generateDetailsItem = (item) => [
        item,
        item._showDetails
      ];
      const detailsMap = ref(/* @__PURE__ */ new WeakMap());
      watch2(
        () => props.items,
        (items) => {
          items.forEach((item) => {
            if (!isTableItem(item))
              return;
            detailsMap.value.set(...generateDetailsItem(item));
          });
        },
        { deep: true, immediate: true }
      );
      const computedTableClasses = computed2(() => [
        props.tableClass,
        {
          [`align-${props.align}`]: props.align !== void 0
        }
      ]);
      const computedFields = computed2(() => {
        if (!props.fields.length && props.items.length) {
          const [firstItem] = props.items;
          if (isTableItem(firstItem) || Array.isArray(firstItem)) {
            return Object.keys(firstItem).map((k) => {
              const label = startCase(k);
              return {
                key: k,
                label,
                tdAttr: props.stacked === true ? { "data-label": label } : void 0
              };
            });
          }
          return [{ key: "", _noHeader: true }];
        }
        return props.fields.map((f) => {
          if (isTableField(f)) {
            return {
              ...f,
              tdAttr: props.stacked === true ? { "data-label": startCase(f.key), ...f.tdAttr } : f.tdAttr
            };
          }
          const label = startCase(f);
          return {
            key: f,
            label,
            tdAttr: props.stacked === true ? { "data-label": label } : void 0
          };
        });
      });
      const computedFieldsTotal = computed2(() => computedFields.value.length);
      const showComputedHeaders = computed2(() => {
        if (computedFieldsTotal.value > 0 && computedFields.value.every((el) => el._noHeader === true))
          return false;
        return true;
      });
      const footerProps = computed2(() => ({
        variant: props.footVariant,
        class: props.tfootClass
      }));
      const itemAttributes = (item, fieldKey, attr) => {
        const val = get(item, fieldKey);
        return attr && typeof attr === "function" ? attr(val, fieldKey, item) : attr;
      };
      const callThAttr = (item, field, type) => {
        const fieldKey = String(field.key);
        const val = get(item, fieldKey);
        return field.thAttr && typeof field.thAttr === "function" ? field.thAttr(val, fieldKey, item, type) : field.thAttr;
      };
      const headerClicked = (field, event, isFooter = false) => {
        emit2("head-clicked", field.key, field, event, isFooter);
      };
      const toggleRowDetails = (tr) => {
        if (isTableItem(tr)) {
          const prevValue = detailsMap.value.get(tr);
          detailsMap.value.set(tr, !prevValue);
          tr._showDetails = !prevValue;
        }
      };
      const getFieldColumnClasses = (field) => [
        field.class,
        field.thClass,
        {
          "b-table-sticky-column": field.stickyColumn
        },
        props.fieldColumnClass ? typeof props.fieldColumnClass === "function" ? props.fieldColumnClass(field) : props.fieldColumnClass : null
      ];
      const getFieldRowClasses = (field, tr) => {
        var _a, _b;
        const val = get(tr, String(field.key));
        return [
          field.class,
          typeof field.tdClass === "function" ? field.tdClass(val, String(field.key), tr) : field.tdClass,
          (isTableItem(tr) ? (_a = tr._cellVariants) == null ? void 0 : _a[field.key] : false) ? `table-${(_b = tr._cellVariants) == null ? void 0 : _b[field.key]}` : null,
          {
            "b-table-sticky-column": field.stickyColumn
          }
        ];
      };
      const handleMiddleClick = (item, itemIndex, event) => {
        if (event.button === 1 && !filterEvent(event)) {
          emit2("row-middle-clicked", item, itemIndex, event);
        }
      };
      const callTbodyTrAttrs = (item, type) => props.tbodyTrAttrs ? typeof props.tbodyTrAttrs === "function" ? props.tbodyTrAttrs(item, type) : props.tbodyTrAttrs : null;
      const getRowClasses = (item, type) => props.tbodyTrClass ? typeof props.tbodyTrClass === "function" ? props.tbodyTrClass(item, type) : props.tbodyTrClass : null;
      const computedSimpleProps = computed2(() => ({
        ...pick(props, btableSimpleProps),
        tableClass: computedTableClasses.value
      }));
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main23, normalizeProps(guardReactiveProps(computedSimpleProps.value)), {
          default: withCtx(() => [
            withDirectives(createVNode(_sfc_main$34, {
              variant: unref(props).headVariant,
              class: normalizeClass(unref(props).theadClass)
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "thead-top", {
                  columns: computedFieldsTotal.value,
                  fields: computedFields.value
                }),
                createVNode(_sfc_main$23, {
                  variant: unref(props).headRowVariant,
                  class: normalizeClass(unref(props).theadTrClass)
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, (field) => {
                      return openBlock(), createBlock(_sfc_main$43, mergeProps({
                        key: field.key,
                        scope: "col",
                        class: getFieldColumnClasses(field),
                        title: field.headerTitle,
                        variant: field.variant,
                        abbr: field.headerAbbr,
                        style: field.thStyle,
                        ref_for: true
                      }, callThAttr(null, field, "top"), {
                        onClick: ($event) => headerClicked(field, $event)
                      }), {
                        default: withCtx(() => [
                          renderSlot(
                            _ctx.$slots,
                            slots[`head(${String(field.key)})`] ? `head(${String(field.key)})` : "head()",
                            {
                              label: field.label,
                              column: field.key,
                              field,
                              isFoot: false
                            },
                            () => [
                              createTextVNode(toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)
                            ]
                          )
                        ]),
                        _: 2
                      }, 1040, ["class", "title", "variant", "abbr", "style", "onClick"]);
                    }), 128))
                  ]),
                  _: 3
                }, 8, ["variant", "class"]),
                slots["thead-sub"] ? (openBlock(), createBlock(_sfc_main$23, { key: 0 }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, (field) => {
                      return openBlock(), createBlock(_sfc_main$62, {
                        key: field.key,
                        scope: "col",
                        variant: field.variant,
                        class: normalizeClass([field.class, field.thClass])
                      }, {
                        default: withCtx(() => [
                          renderSlot(_ctx.$slots, "thead-sub", {
                            items: unref(props).items,
                            fields: computedFields.value,
                            field
                          }, () => [
                            createTextVNode(toDisplayString(field.label), 1)
                          ])
                        ]),
                        _: 2
                      }, 1032, ["variant", "class"]);
                    }), 128))
                  ]),
                  _: 3
                })) : createCommentVNode("", true)
              ]),
              _: 3
            }, 8, ["variant", "class"]), [
              [vShow, showComputedHeaders.value]
            ]),
            createVNode(_sfc_main$72, {
              class: normalizeClass(unref(props).tbodyClass)
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "custom-body", {
                  fields: computedFields.value,
                  items: unref(props).items,
                  columns: computedFieldsTotal.value
                }, () => [
                  !unref(props).stacked && slots["top-row"] ? (openBlock(), createBlock(_sfc_main$23, mergeProps({
                    key: 0,
                    class: getRowClasses(null, "row-top")
                  }, callTbodyTrAttrs(null, "row-top")), {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "top-row", {
                        columns: computedFieldsTotal.value,
                        fields: computedFields.value
                      })
                    ]),
                    _: 3
                  }, 16, ["class"])) : createCommentVNode("", true),
                  (openBlock(true), createElementBlock(Fragment, null, renderList(unref(props).items, (item, itemIndex) => {
                    return openBlock(), createElementBlock(Fragment, {
                      key: unref(props).primaryKey ? unref(get)(item, unref(props).primaryKey) : itemIndex
                    }, [
                      createVNode(_sfc_main$23, mergeProps({
                        class: getRowClasses(item, "row"),
                        variant: unref(isTableItem)(item) ? item._rowVariant : void 0,
                        ref_for: true
                      }, callTbodyTrAttrs(item, "row"), {
                        onClick: ($event) => !unref(filterEvent)($event) && emit2("row-clicked", item, itemIndex, $event),
                        onDblclick: ($event) => !unref(filterEvent)($event) && emit2("row-dblclicked", item, itemIndex, $event),
                        onContextmenu: ($event) => !unref(filterEvent)($event) && emit2("row-contextmenu", item, itemIndex, $event),
                        onMouseenter: ($event) => !unref(filterEvent)($event) && emit2("row-hovered", item, itemIndex, $event),
                        onMouseleave: ($event) => !unref(filterEvent)($event) && emit2("row-unhovered", item, itemIndex, $event),
                        onMousedown: ($event) => handleMiddleClick(item, itemIndex, $event)
                      }), {
                        default: withCtx(() => [
                          (openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, (field) => {
                            var _a;
                            return openBlock(), createBlock(_sfc_main$62, mergeProps({
                              key: field.key,
                              variant: (unref(isTableItem)(item) ? (_a = item._cellVariants) == null ? void 0 : _a[field.key] : false) ? null : field.variant,
                              class: getFieldRowClasses(field, item),
                              ref_for: true
                            }, itemAttributes(item, String(field.key), field.tdAttr)), {
                              default: withCtx(() => [
                                unref(props).stacked && unref(props).labelStacked ? (openBlock(), createElementBlock("label", _hoisted_1$15, toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)) : createCommentVNode("", true),
                                renderSlot(
                                  _ctx.$slots,
                                  slots[`cell(${String(field.key)})`] ? `cell(${String(field.key)})` : "cell()",
                                  {
                                    value: unref(formatItem)(item, String(field.key), field.formatter),
                                    unformatted: unref(get)(item, String(field.key)),
                                    index: itemIndex,
                                    item,
                                    field,
                                    items: _ctx.items,
                                    toggleDetails: () => toggleRowDetails(item),
                                    detailsShowing: unref(isTableItem)(item) ? detailsMap.value.get(item) ?? false : false
                                  },
                                  () => [
                                    !slots[`cell(${String(field.key)})`] && !slots["cell()"] ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                                      createTextVNode(toDisplayString(unref(formatItem)(item, String(field.key), field.formatter)), 1)
                                    ], 64)) : createCommentVNode("", true)
                                  ]
                                )
                              ]),
                              _: 2
                            }, 1040, ["variant", "class"]);
                          }), 128))
                        ]),
                        _: 2
                      }, 1040, ["class", "variant", "onClick", "onDblclick", "onContextmenu", "onMouseenter", "onMouseleave", "onMousedown"]),
                      unref(isTableItem)(item) && detailsMap.value.get(item) === true && slots["row-details"] ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                        createVNode(_sfc_main$23, {
                          "aria-hidden": "true",
                          role: "presentation",
                          class: "d-none"
                        }),
                        createVNode(_sfc_main$23, mergeProps({
                          class: getRowClasses(item, "row-details"),
                          variant: item._rowVariant,
                          ref_for: true
                        }, callTbodyTrAttrs(item, "row-details")), {
                          default: withCtx(() => [
                            createVNode(_sfc_main$62, {
                              colspan: computedFieldsTotal.value,
                              class: normalizeClass(_ctx.detailsTdClass)
                            }, {
                              default: withCtx(() => [
                                renderSlot(_ctx.$slots, "row-details", {
                                  item,
                                  toggleDetails: () => toggleRowDetails(item),
                                  fields: computedFields.value,
                                  index: itemIndex
                                })
                              ]),
                              _: 2
                            }, 1032, ["colspan", "class"])
                          ]),
                          _: 2
                        }, 1040, ["class", "variant"])
                      ], 64)) : createCommentVNode("", true)
                    ], 64);
                  }), 128)),
                  !unref(props).stacked && slots["bottom-row"] ? (openBlock(), createBlock(_sfc_main$23, mergeProps({
                    key: 1,
                    class: ["bottom-row", getRowClasses(null, "row-bottom")]
                  }, callTbodyTrAttrs(null, "row-bottom")), {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "bottom-row", {
                        columns: computedFieldsTotal.value,
                        fields: computedFields.value
                      })
                    ]),
                    _: 3
                  }, 16, ["class"])) : createCommentVNode("", true)
                ])
              ]),
              _: 3
            }, 8, ["class"]),
            unref(props).footClone ? (openBlock(), createBlock(_sfc_main$52, normalizeProps(mergeProps({ key: 0 }, footerProps.value)), {
              default: withCtx(() => [
                createVNode(_sfc_main$23, {
                  variant: unref(props).footRowVariant,
                  class: normalizeClass(unref(props).tfootTrClass)
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(computedFields.value, (field) => {
                      return openBlock(), createBlock(_sfc_main$43, mergeProps({
                        key: field.key,
                        scope: "col",
                        class: getFieldColumnClasses(field),
                        title: field.headerTitle,
                        abbr: field.headerAbbr,
                        style: field.thStyle,
                        variant: field.variant,
                        ref_for: true
                      }, callThAttr(null, field, "bottom"), {
                        onClick: ($event) => headerClicked(field, $event, true)
                      }), {
                        default: withCtx(() => [
                          createBaseVNode("div", _hoisted_2$1, [
                            createBaseVNode("div", null, [
                              renderSlot(
                                _ctx.$slots,
                                slots[`foot(${String(field.key)})`] ? `foot(${String(field.key)})` : "foot()",
                                {
                                  label: field.label,
                                  column: field.key,
                                  field,
                                  isFoot: true
                                },
                                () => [
                                  createTextVNode(toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)
                                ]
                              )
                            ])
                          ])
                        ]),
                        _: 2
                      }, 1040, ["class", "title", "abbr", "style", "variant", "onClick"]);
                    }), 128))
                  ]),
                  _: 3
                }, 8, ["variant", "class"])
              ]),
              _: 3
            }, 16)) : slots["custom-foot"] ? (openBlock(), createBlock(_sfc_main$52, normalizeProps(mergeProps({ key: 1 }, footerProps.value)), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "custom-foot", {
                  fields: computedFields.value,
                  items: unref(props).items,
                  columns: computedFieldsTotal.value
                })
              ]),
              _: 3
            }, 16)) : createCommentVNode("", true),
            slots["table-caption"] || unref(props).caption ? (openBlock(), createElementBlock("caption", _hoisted_3$1, [
              renderSlot(_ctx.$slots, "table-caption", {}, () => [
                createTextVNode(toDisplayString(unref(props).caption), 1)
              ])
            ])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 16);
      };
    }
  });
  var _hoisted_114 = {
    style: { opacity: 0.4 },
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    fill: "currentColor",
    class: "bi bi-arrow-up-short",
    viewBox: "0 0 16 16",
    "aria-hidden": ""
  };
  var _hoisted_211 = {
    role: "alert",
    "aria-live": "polite"
  };
  var _hoisted_33 = { class: "text-center my-2" };
  var _sfc_main27 = /* @__PURE__ */ defineComponent({
    __name: "BTable",
    props: /* @__PURE__ */ mergeModels({
      provider: { default: void 0 },
      noProvider: { default: void 0 },
      noProviderPaging: { type: Boolean, default: false },
      noProviderSorting: { type: Boolean, default: false },
      noProviderFiltering: { type: Boolean, default: false },
      mustSort: { type: [Boolean, Array], default: false },
      selectable: { type: Boolean, default: false },
      multisort: { type: Boolean, default: false },
      stickySelect: { type: Boolean, default: false },
      selectHead: { type: [Boolean, String], default: true },
      selectMode: { default: "multi" },
      selectionVariant: { default: "primary" },
      busyLoadingText: { default: "Loading..." },
      perPage: { default: Number.POSITIVE_INFINITY },
      currentPage: { default: 1 },
      filter: { default: void 0 },
      filterable: { default: void 0 },
      noLocalSorting: { type: Boolean, default: false },
      noSelectOnClick: { type: Boolean, default: false },
      noSortableIcon: { type: Boolean, default: false },
      emptyFilteredText: { default: "There are no records matching your request" },
      emptyText: { default: "There are no records to show" },
      showEmpty: { type: Boolean, default: false },
      align: { default: void 0 },
      caption: { default: void 0 },
      detailsTdClass: { default: void 0 },
      fieldColumnClass: { type: [Function, String, Object, Array], default: void 0 },
      fields: { default: () => [] },
      footClone: { type: Boolean, default: void 0 },
      footRowVariant: { default: void 0 },
      footVariant: { default: void 0 },
      headRowVariant: { default: void 0 },
      headVariant: { default: void 0 },
      items: { default: () => [] },
      labelStacked: { type: Boolean, default: void 0 },
      modelValue: { default: void 0 },
      primaryKey: { default: void 0 },
      tbodyClass: { default: void 0 },
      tbodyTrAttrs: {},
      tbodyTrClass: { type: [Function, String, Array, Object], default: void 0 },
      tfootClass: { default: void 0 },
      tfootTrClass: { default: void 0 },
      theadClass: { default: void 0 },
      theadTrClass: { default: void 0 },
      bordered: { type: Boolean, default: void 0 },
      borderless: { type: Boolean, default: void 0 },
      borderVariant: { default: void 0 },
      captionTop: { type: Boolean, default: void 0 },
      dark: { type: Boolean, default: void 0 },
      fixed: { type: Boolean, default: void 0 },
      hover: { type: Boolean, default: void 0 },
      id: { default: void 0 },
      noBorderCollapse: { type: Boolean, default: void 0 },
      outlined: { type: Boolean, default: void 0 },
      responsive: { type: [Boolean, String], default: void 0 },
      small: { type: Boolean, default: void 0 },
      stacked: { type: [Boolean, String], default: void 0 },
      stickyHeader: { type: [Boolean, String, Number], default: void 0 },
      striped: { type: Boolean, default: void 0 },
      stripedColumns: { type: Boolean, default: void 0 },
      variant: { default: void 0 },
      tableAttrs: {}
    }, {
      "sortBy": {
        default: void 0
      },
      "sortByModifiers": {},
      "busy": { type: Boolean, ...{
        default: false
      } },
      "busyModifiers": {},
      "selectedItems": {
        default: () => []
      },
      "selectedItemsModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["filtered", "head-clicked", "row-clicked", "row-dblclicked", "row-contextmenu", "row-hovered", "row-unhovered", "row-middle-clicked", "row-selected", "row-unselected", "sorted", "change"], ["update:sortBy", "update:busy", "update:selectedItems"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BTable");
      const emit2 = __emit;
      const slots = useSlots();
      const dynamicCellSlots = computed2(
        () => Object.keys(slots).filter((key) => key.startsWith("cell("))
      );
      const dynamicFootSlots = computed2(
        () => Object.keys(slots).filter((key) => key.startsWith("foot("))
      );
      const sortByModel = useModel(__props, "sortBy");
      const busyModel = useModel(__props, "busy");
      const selectedItemsModel = useModel(
        __props,
        "selectedItems"
      );
      const selectedItemsToSet = computed2({
        get: () => /* @__PURE__ */ new Set([...selectedItemsModel.value]),
        set: (val) => {
          selectedItemsModel.value = [...val];
        }
      });
      watch2(selectedItemsToSet, (newValue, oldValue) => {
        Array.from(oldValue).filter((item) => !newValue.has(item)).forEach((item) => {
          emit2("row-unselected", item);
        });
        Array.from(newValue).filter((item) => !oldValue.has(item)).forEach((item) => {
          emit2("row-selected", item);
        });
      });
      const selectedItemsSetUtilities = {
        add: (item) => {
          const value = new Set(selectedItemsToSet.value);
          value.add(item);
          selectedItemsToSet.value = value;
        },
        clear: () => {
          selectedItemsToSet.value.forEach((item) => {
            selectedItemsSetUtilities.delete(item);
          });
        },
        delete: (item) => {
          const value = new Set(selectedItemsToSet.value);
          if (props.primaryKey) {
            const pkey = props.primaryKey;
            selectedItemsModel.value.forEach((v, i) => {
              const selectedKey = get(v, pkey);
              const itemKey = get(item, pkey);
              if (!!selectedKey && !!itemKey && selectedKey === itemKey) {
                value.delete(selectedItemsModel.value[i]);
              }
            });
          } else {
            value.delete(item);
          }
          selectedItemsToSet.value = value;
        },
        set: (items) => {
          selectedItemsToSet.value = new Set(items);
        },
        has: (item) => {
          if (!props.primaryKey)
            return selectedItemsToSet.value.has(item);
          const pkey = props.primaryKey;
          for (const selected of selectedItemsToSet.value) {
            const selectedKey = get(selected, pkey);
            const itemKey = get(item, pkey);
            if (!!selectedKey && !!itemKey && selectedKey === itemKey)
              return true;
          }
          return false;
        }
      };
      const internalItems = ref([]);
      const perPageNumber = useToNumber(() => props.perPage, { method: "parseInt" });
      const currentPageNumber = useToNumber(() => props.currentPage, { method: "parseInt" });
      const isFilterableTable = computed2(() => !!props.filter);
      const usesProvider = computed2(() => props.provider !== void 0);
      const isSelecting = computed2(() => selectedItemsToSet.value.size > 0);
      const isSortable = computed2(
        () => sortByModel.value !== void 0 || props.fields.some(
          (field) => typeof field === "object" && field !== null && field.sortable === true
        )
      );
      const computedFields = computed2(
        () => props.fields.map((el) => {
          var _a;
          if (!isTableField(el)) {
            const label = startCase(el);
            return {
              key: el,
              label,
              tdAttr: props.stacked === true ? { "data-label": label } : void 0
            };
          }
          const value = (_a = sortByModel.value) == null ? void 0 : _a.find((sb) => el.key === sb.key);
          const sortValue = isSortable.value === false ? void 0 : value === void 0 ? "none" : value.order === "desc" ? "descending" : value.order === "asc" ? "ascending" : "none";
          return {
            ...el,
            thAttr: {
              "aria-sort": sortValue,
              ...el.thAttr
            }
          };
        })
      );
      const tableClasses = computed2(() => ({
        "b-table-busy": busyModel.value,
        "b-table-selectable": props.selectable,
        "user-select-none": props.selectable && isSelecting.value
      }));
      const getBusyRowClasses = computed2(() => [
        props.tbodyTrClass ? typeof props.tbodyTrClass === "function" ? props.tbodyTrClass(null, "table-busy") : props.tbodyTrClass : null
      ]);
      const getFieldColumnClasses = (field) => [
        {
          "b-table-sortable-column": isSortable.value && field.sortable
        }
      ];
      const getRowClasses = (item, type) => [
        {
          [`selected table-${props.selectionVariant}`]: props.selectable && !!item && selectedItemsSetUtilities.has(item)
        },
        props.tbodyTrClass ? typeof props.tbodyTrClass === "function" ? props.tbodyTrClass(item, type) : props.tbodyTrClass : null
      ];
      const getFormatter = (value) => typeof value.sortByFormatted === "function" ? value.sortByFormatted : value.formatter;
      const computedItems = computed2(() => {
        const sortItems = (items) => {
          var _a;
          const sortByItems = (_a = sortByModel.value) == null ? void 0 : _a.filter((el) => !!el.order);
          if (!sortByItems || sortByItems.length === 0)
            return items;
          return [...items].sort((a, b) => {
            for (let i = 0; i < (sortByItems.length ?? 0); i++) {
              const sortOption = sortByItems[i];
              const realVal = (ob) => {
                if (!isTableItem(ob))
                  return String(ob);
                const sortField = computedFields.value.find((el) => {
                  if (isTableField(el))
                    return el.key === sortOption.key;
                  return false;
                });
                const val = get(ob, sortOption.key);
                if (isTableField(sortField) && !!sortField.sortByFormatted) {
                  const formatter = getFormatter(sortField);
                  if (formatter) {
                    return String(formatItem(ob, String(sortField.key), formatter));
                  }
                }
                return typeof val === "object" && val !== null ? JSON.stringify(val) : (val == null ? void 0 : val.toString()) ?? "";
              };
              const aValue = realVal(a);
              const bValue = realVal(b);
              const comparison = sortOption.comparer ? sortOption.comparer(aValue, bValue) : aValue.localeCompare(bValue, void 0, { numeric: true });
              if (comparison !== 0) {
                return sortOption.order === "asc" ? comparison : -comparison;
              }
            }
            return 0;
          });
        };
        const filterItems = (items) => items.filter(
          (item) => isTableItem(item) ? Object.entries(item).some(([key, val]) => {
            var _a, _b, _c;
            if (val === null || val === void 0 || key[0] === "_" || !((_a = props.filterable) == null ? void 0 : _a.includes(key)) && !!((_b = props.filterable) == null ? void 0 : _b.length))
              return false;
            const realVal = () => {
              const filterField = computedFields.value.find((el) => {
                if (isTableField(el))
                  return el.key === key;
                return false;
              });
              if (isTableField(filterField) && !!filterField.filterByFormatted) {
                const formatter = getFormatter(filterField);
                if (formatter) {
                  return String(formatter(val, String(filterField.key), item));
                }
              }
              return typeof val === "object" ? JSON.stringify(Object.values(val)) : val.toString();
            };
            const itemValue = realVal();
            return itemValue.toLowerCase().includes(((_c = props.filter) == null ? void 0 : _c.toLowerCase()) ?? "");
          }) : true
        );
        let mappedItems = usesProvider.value ? internalItems.value : props.items;
        mappedItems = mappedItems.map((item) => {
          if (typeof item === "object" && item !== null && Object.keys(item).some((key) => key.includes("."))) {
            let newItem = {};
            for (const key in item) {
              if (key.includes(".")) {
                newItem = set(newItem, key, item[key]);
              } else {
                newItem[key] = item[key];
              }
            }
            return newItem;
          }
          return item;
        });
        if (isFilterableTable.value === true && !usesProvider.value || isFilterableTable.value === true && usesProvider.value && props.noProviderFiltering) {
          mappedItems = filterItems(mappedItems);
        }
        if (isSortable.value === true && !usesProvider.value && !props.noLocalSorting || isSortable.value === true && usesProvider.value && props.noProviderSorting) {
          mappedItems = sortItems(mappedItems);
        }
        return mappedItems;
      });
      const emptySlotScope = computed2(() => ({
        emptyFilteredText: props.emptyFilteredText,
        emptyText: props.emptyText,
        fields: computedFields.value,
        items: computedItems.value
      }));
      const computedDisplayItems = computed2(() => {
        if (Number.isNaN(perPageNumber.value) || usesProvider.value && !props.noProviderPaging) {
          return computedItems.value;
        }
        return computedItems.value.slice(
          (currentPageNumber.value - 1) * (perPageNumber.value || Number.POSITIVE_INFINITY),
          currentPageNumber.value * (perPageNumber.value || Number.POSITIVE_INFINITY)
        );
      });
      watch2(computedDisplayItems, (v) => {
        emit2("change", v);
      });
      const handleRowSelection = (row, index7, shiftClicked = false, ctrlClicked = false, metaClicked = false) => {
        if (!props.selectable)
          return;
        if (props.selectMode === "single" || props.selectMode === "multi") {
          if (shiftClicked || ctrlClicked)
            return;
          if (selectedItemsSetUtilities.has(row)) {
            selectedItemsSetUtilities.delete(row);
          } else {
            if (props.selectMode === "single") {
              selectedItemsSetUtilities.set([row]);
            } else {
              selectedItemsSetUtilities.add(row);
            }
          }
        } else {
          if (ctrlClicked || metaClicked) {
            if (selectedItemsSetUtilities.has(row)) {
              selectedItemsSetUtilities.delete(row);
            } else {
              selectedItemsSetUtilities.add(row);
            }
          } else if (shiftClicked) {
            const lastSelectedItem = [...selectedItemsToSet.value].pop();
            const lastSelectedIndex = computedItems.value.findIndex((i) => i === lastSelectedItem);
            const selectStartIndex = Math.min(lastSelectedIndex, index7);
            const selectEndIndex = Math.max(lastSelectedIndex, index7);
            const items = computedItems.value.slice(selectStartIndex, selectEndIndex + 1);
            selectedItemsSetUtilities.set(items);
          } else {
            selectedItemsSetUtilities.set([row]);
          }
        }
      };
      const onRowClick = (row, index7, e) => {
        if (props.noSelectOnClick === false) {
          handleRowSelection(row, index7, e.shiftKey, e.ctrlKey, e.metaKey);
        }
        emit2("row-clicked", row, index7, e);
      };
      const handleFieldSorting = (field) => {
        var _a, _b;
        if (!isSortable.value)
          return;
        const fieldKey = typeof field === "object" && field !== null ? field.key : field;
        const fieldSortable = typeof field === "object" && field !== null ? field.sortable : false;
        if (!(isSortable.value === true && fieldSortable === true))
          return;
        const resolveOrder = (val) => {
          if (val === "asc")
            return "desc";
          if (val === void 0)
            return "asc";
          if (props.mustSort === true || Array.isArray(props.mustSort) && props.mustSort.includes(fieldKey))
            return "asc";
          return void 0;
        };
        const index7 = ((_a = sortByModel.value) == null ? void 0 : _a.findIndex((el) => el.key === fieldKey)) ?? -1;
        const originalValue = (_b = sortByModel.value) == null ? void 0 : _b[index7];
        const updatedValue = (
          // If value is new, we default to ascending
          // Otherwise we make a temp copy of the value
          index7 === -1 || !originalValue ? { key: fieldKey, order: "asc" } : { ...originalValue }
        );
        const handleMultiSort = () => {
          var _a2, _b2;
          let val = updatedValue;
          if (index7 === -1) {
            sortByModel.value = [...sortByModel.value ?? [], updatedValue];
          } else {
            const order = resolveOrder(updatedValue.order);
            val = { ...updatedValue, order };
            sortByModel.value = order ? (_a2 = sortByModel.value) == null ? void 0 : _a2.map((el) => el.key === val.key ? val : el) : (_b2 = sortByModel.value) == null ? void 0 : _b2.filter((el) => el.key !== val.key);
          }
          return val;
        };
        const handleSingleSort = () => {
          const val = {
            ...updatedValue,
            order: index7 === -1 ? updatedValue.order : resolveOrder(updatedValue.order)
          };
          sortByModel.value = [val];
          return val;
        };
        emit2("sorted", props.multisort === true ? handleMultiSort() : handleSingleSort());
      };
      const onFieldHeadClick = (fieldKey, field, event, isFooter = false) => {
        emit2("head-clicked", fieldKey, field, event, isFooter);
        handleFieldSorting(field);
      };
      const callItemsProvider = async () => {
        if (!usesProvider.value || props.provider === void 0 || busyModel.value)
          return;
        busyModel.value = true;
        const response = props.provider({
          currentPage: currentPageNumber.value,
          filter: props.filter,
          sortBy: sortByModel.value,
          perPage: perPageNumber.value
        });
        try {
          const items = response instanceof Promise ? await response : response;
          if (items === void 0)
            return;
          internalItems.value = items;
        } finally {
          busyModel.value = false;
        }
      };
      const providerPropsWatch = async (prop, val, oldVal) => {
        if (val === oldVal)
          return;
        const inNoProvider = (key) => {
          var _a;
          return ((_a = props.noProvider) == null ? void 0 : _a.includes(key)) === true;
        };
        const noProvideWhenPaging = (prop === "currentPage" || prop === "perPage") && (inNoProvider("paging") || props.noProviderPaging === true);
        const noProvideWhenFiltering = prop === "filter" && (inNoProvider("filtering") || props.noProviderFiltering === true);
        const noProvideWhenSorting = (prop === "sortBy" || prop === "sortDesc") && (inNoProvider("sorting") || props.noProviderSorting === true);
        if (noProvideWhenPaging || noProvideWhenFiltering || noProvideWhenSorting)
          return;
        if (usesProvider.value === true) {
          await callItemsProvider();
        }
        if (!(prop === "currentPage" || prop === "perPage")) {
          emit2("filtered", [...computedItems.value]);
        }
      };
      watch2(
        () => props.filter,
        (filter, oldFilter) => {
          providerPropsWatch("filter", filter, oldFilter);
          if (filter === oldFilter || usesProvider.value)
            return;
          if (!filter) {
            emit2("filtered", [...computedItems.value]);
          }
        }
      );
      watch2(currentPageNumber, (val, oldVal) => {
        providerPropsWatch("currentPage", val, oldVal);
      });
      watch2(perPageNumber, (val, oldVal) => {
        providerPropsWatch("perPage", val, oldVal);
      });
      watch2(
        sortByModel,
        (val, oldVal) => {
          providerPropsWatch("sortBy", val, oldVal);
        },
        { deep: true }
      );
      watch2(
        () => props.provider,
        (newValue) => {
          if (newValue === void 0) {
            internalItems.value = [];
            return;
          }
          callItemsProvider();
        }
      );
      onMounted(callItemsProvider);
      const exposedSelectableUtilities = {
        clearSelected: () => {
          if (!props.selectable)
            return;
          selectedItemsSetUtilities.clear();
        },
        selectAllRows: () => {
          if (!props.selectable)
            return;
          selectedItemsToSet.value = /* @__PURE__ */ new Set([...computedItems.value]);
        },
        selectRow: (index7) => {
          if (!props.selectable)
            return;
          const item = computedItems.value[index7];
          if (!item || selectedItemsSetUtilities.has(item))
            return;
          selectedItemsSetUtilities.add(item);
        },
        unselectRow: (index7) => {
          if (!props.selectable)
            return;
          const item = computedItems.value[index7];
          if (!item || !selectedItemsSetUtilities.has(item))
            return;
          selectedItemsSetUtilities.delete(item);
        },
        isRowSelected: (index7) => {
          if (!props.selectable)
            return false;
          const item = computedItems.value[index7];
          return selectedItemsSetUtilities.has(item);
        }
      };
      const computedLiteProps = computed2(() => ({
        ...pick(props, [...btableLiteProps, ...btableSimpleProps]),
        tableAttrs: {
          ariaBusy: busyModel.value
        },
        items: computedDisplayItems.value,
        fields: computedFields.value,
        tableClass: tableClasses.value,
        tbodyTrClass: getRowClasses,
        fieldColumnClass: getFieldColumnClasses
      }));
      __expose({
        // The row selection methods are really for compat. Users should probably use the v-model though
        ...exposedSelectableUtilities,
        refresh: callItemsProvider
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main$18, mergeProps(computedLiteProps.value, {
          onHeadClicked: onFieldHeadClick,
          onRowClicked: onRowClick,
          onRowDblclicked: _cache[0] || (_cache[0] = (row, index7, e) => {
            emit2("row-dblclicked", row, index7, e);
          }),
          onRowContextmenu: _cache[1] || (_cache[1] = (row, index7, e) => {
            emit2("row-contextmenu", row, index7, e);
          }),
          onRowHovered: _cache[2] || (_cache[2] = (row, index7, e) => {
            emit2("row-hovered", row, index7, e);
          }),
          onRowUnhovered: _cache[3] || (_cache[3] = (row, index7, e) => {
            emit2("row-unhovered", row, index7, e);
          }),
          onRowMiddleClicked: _cache[4] || (_cache[4] = (row, index7, e) => {
            emit2("row-middle-clicked", row, index7, e);
          })
        }), createSlots({
          "custom-body": withCtx((scope) => [
            busyModel.value && slots["table-busy"] ? (openBlock(), createBlock(_sfc_main$23, {
              key: 0,
              class: normalizeClass(["b-table-busy-slot", getBusyRowClasses.value])
            }, {
              default: withCtx(() => [
                createVNode(_sfc_main$62, {
                  colspan: scope.fields.length
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "table-busy")
                  ]),
                  _: 2
                }, 1032, ["colspan"])
              ]),
              _: 2
            }, 1032, ["class"])) : unref(props).showEmpty === true && computedItems.value.length === 0 ? (openBlock(), createBlock(_sfc_main$23, {
              key: 1,
              class: "b-table-empty-row"
            }, {
              default: withCtx(() => [
                createVNode(_sfc_main$62, {
                  colspan: computedFields.value.length
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", _hoisted_211, [
                      createBaseVNode("div", _hoisted_33, [
                        isFilterableTable.value ? renderSlot(_ctx.$slots, "empty-filtered", normalizeProps(mergeProps({ key: 0 }, emptySlotScope.value)), () => [
                          createTextVNode(toDisplayString(unref(props).emptyFilteredText), 1)
                        ]) : renderSlot(_ctx.$slots, "empty", normalizeProps(mergeProps({ key: 1 }, emptySlotScope.value)), () => [
                          createTextVNode(toDisplayString(unref(props).emptyText), 1)
                        ])
                      ])
                    ])
                  ]),
                  _: 3
                }, 8, ["colspan"])
              ]),
              _: 3
            })) : createCommentVNode("", true)
          ]),
          _: 2
        }, [
          slots["thead-top"] ? {
            name: "thead-top",
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, "thead-top", mergeProps(scope, {
                clearSelected: exposedSelectableUtilities.clearSelected,
                selectAllRows: exposedSelectableUtilities.selectAllRows,
                fields: computedFields.value
              }))
            ]),
            key: "0"
          } : void 0,
          slots["thead-sub"] ? {
            name: "thead-sub",
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, "thead-sub", mergeProps(scope, { fields: computedFields.value }))
            ]),
            key: "1"
          } : void 0,
          slots["top-row"] ? {
            name: "top-row",
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, "top-row", mergeProps(scope, { fields: computedFields.value }))
            ]),
            key: "2"
          } : void 0,
          slots["row-details"] ? {
            name: "row-details",
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, "row-details", mergeProps(scope, {
                fields: computedFields.value,
                selectRow: (index7 = scope.index) => exposedSelectableUtilities.selectRow(index7),
                unselectRow: (index7 = scope.index) => exposedSelectableUtilities.unselectRow(index7),
                rowSelected: exposedSelectableUtilities.isRowSelected(scope.index)
              }))
            ]),
            key: "3"
          } : void 0,
          slots["bottom-row"] ? {
            name: "bottom-row",
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, "bottom-row", mergeProps(scope, { fields: computedFields.value }))
            ]),
            key: "4"
          } : void 0,
          slots["custom-foot"] ? {
            name: "custom-foot",
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, "custom-foot", mergeProps(scope, { fields: computedFields.value }))
            ]),
            key: "5"
          } : void 0,
          slots["table-caption"] ? {
            name: "table-caption",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "table-caption")
            ]),
            key: "6"
          } : void 0,
          renderList(dynamicCellSlots.value, (name) => {
            return {
              name,
              fn: withCtx((scope) => [
                renderSlot(_ctx.$slots, name, mergeProps(scope, {
                  selectRow: (index7 = scope.index) => exposedSelectableUtilities.selectRow(index7),
                  unselectRow: (index7 = scope.index) => exposedSelectableUtilities.unselectRow(index7),
                  rowSelected: exposedSelectableUtilities.isRowSelected(scope.index)
                }))
              ])
            };
          }),
          renderList(dynamicFootSlots.value, (name) => {
            return {
              name,
              fn: withCtx((scope) => [
                renderSlot(_ctx.$slots, name, mergeProps(scope, {
                  selectAllRows: exposedSelectableUtilities.selectAllRows,
                  clearSelected: exposedSelectableUtilities.clearSelected
                }))
              ])
            };
          }),
          renderList(computedFields.value, (field) => {
            return {
              name: `head(${String(field.key)})`,
              fn: withCtx((scope) => {
                var _a, _b, _c, _d;
                return [
                  renderSlot(
                    _ctx.$slots,
                    slots[`head(${String(field.key)})`] ? `head(${String(field.key)})` : "head()",
                    mergeProps(scope, {
                      selectAllRows: exposedSelectableUtilities.selectAllRows,
                      clearSelected: exposedSelectableUtilities.clearSelected
                    }),
                    () => [
                      createTextVNode(toDisplayString(unref(getTableFieldHeadLabel)(field)), 1)
                    ]
                  ),
                  isSortable.value && !!scope.field.sortable && unref(props).noSortableIcon === false ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                    ((_b = (_a = sortByModel.value) == null ? void 0 : _a.find((el) => el.key === scope.field.key)) == null ? void 0 : _b.order) === "asc" ? renderSlot(
                      _ctx.$slots,
                      slots[`sortAsc(${String(scope.field.key)})`] ? `sortAsc(${String(scope.field.key)})` : "sortAsc()",
                      normalizeProps(mergeProps({ key: 0 }, scope)),
                      () => [
                        _cache[5] || (_cache[5] = createBaseVNode("svg", {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "24",
                          height: "24",
                          fill: "currentColor",
                          class: "bi bi-arrow-up-short",
                          viewBox: "0 0 16 16",
                          "aria-hidden": ""
                        }, [
                          createBaseVNode("path", {
                            "fill-rule": "evenodd",
                            d: "M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"
                          })
                        ], -1))
                      ]
                    ) : ((_d = (_c = sortByModel.value) == null ? void 0 : _c.find((el) => el.key === scope.field.key)) == null ? void 0 : _d.order) === "desc" ? renderSlot(
                      _ctx.$slots,
                      slots[`sortDesc(${String(scope.field.key)})`] ? `sortDesc(${String(scope.field.key)})` : "sortDesc()",
                      normalizeProps(mergeProps({ key: 1 }, scope)),
                      () => [
                        _cache[6] || (_cache[6] = createBaseVNode("svg", {
                          xmlns: "http://www.w3.org/2000/svg",
                          width: "24",
                          height: "24",
                          fill: "currentColor",
                          class: "bi bi-arrow-down-short",
                          viewBox: "0 0 16 16",
                          "aria-hidden": ""
                        }, [
                          createBaseVNode("path", {
                            "fill-rule": "evenodd",
                            d: "M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z"
                          })
                        ], -1))
                      ]
                    ) : renderSlot(
                      _ctx.$slots,
                      slots[`sortDefault(${String(scope.field.key)})`] ? `sortDefault(${String(scope.field.key)})` : "sortDefault()",
                      normalizeProps(mergeProps({ key: 2 }, scope)),
                      () => [
                        (openBlock(), createElementBlock("svg", _hoisted_114, _cache[7] || (_cache[7] = [
                          createBaseVNode("path", {
                            "fill-rule": "evenodd",
                            d: "M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"
                          }, null, -1)
                        ])))
                      ]
                    )
                  ], 64)) : createCommentVNode("", true)
                ];
              })
            };
          })
        ]), 1040);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BTabs.vue_vue_type_script_setup_true_lang-DR3YhpHo.mjs
  var _sfc_main$19 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BTab",
    props: /* @__PURE__ */ mergeModels({
      buttonId: { default: void 0 },
      disabled: { type: Boolean, default: false },
      id: { default: void 0 },
      lazy: { type: Boolean, default: void 0 },
      lazyOnce: { type: Boolean, default: void 0 },
      noBody: { type: Boolean, default: false },
      tag: { default: "div" },
      title: { default: void 0 },
      titleItemClass: { default: void 0 },
      titleLinkAttrs: { default: void 0 },
      titleLinkClass: { default: void 0 }
    }, {
      "active": { type: Boolean, ...{
        default: false
      } },
      "activeModifiers": {}
    }),
    emits: ["update:active"],
    setup(__props) {
      const _props = __props;
      const props = useDefaults(_props, "BTab");
      const slots = useSlots();
      const activeModel = useModel(__props, "active");
      const parentData = inject(tabsInjectionKey, null);
      const computedId = useId2(() => props.id, "tabpane");
      const computedButtonId = useId2(() => props.buttonId, "tab");
      const lazyRenderCompleted = ref(false);
      const el = useTemplateRef("_el");
      const { onClick, ...attrs } = useAttrs();
      const tab = computed2(
        () => ({
          id: computedId.value,
          buttonId: computedButtonId.value,
          disabled: props.disabled,
          title: props.title,
          titleComponent: slots.title,
          titleItemClass: () => props.titleItemClass,
          titleLinkAttrs: () => props.titleLinkAttrs,
          titleLinkClass: () => props.titleLinkClass,
          onClick,
          el: el.value
        })
      );
      onMounted(() => {
        if (!parentData)
          return;
        parentData.registerTab(tab);
        if (activeModel.value) {
          parentData.activateTab(computedId.value);
        }
      });
      onUnmounted(() => {
        if (!parentData)
          return;
        parentData.unregisterTab(computedId.value);
      });
      const isActive = computed2(() => (parentData == null ? void 0 : parentData.activeId.value) === computedId.value);
      const show = ref(isActive.value);
      const computedLazy = computed2(() => !!((parentData == null ? void 0 : parentData.lazy.value) || (props.lazyOnce ?? props.lazy)));
      const computedLazyOnce = computed2(() => props.lazyOnce !== void 0);
      const computedActive = computed2(() => isActive.value && !props.disabled);
      const showSlot = computed2(
        () => computedActive.value || !computedLazy.value || computedLazy.value && computedLazyOnce.value && lazyRenderCompleted.value
      );
      watch2(isActive, (active) => {
        if (active) {
          activeModel.value = true;
          setTimeout(() => {
            show.value = true;
          }, 0);
          return;
        }
        show.value = false;
        activeModel.value = false;
      });
      watch2(activeModel, (active) => {
        if (!parentData)
          return;
        if (!active) {
          if (isActive.value) {
            parentData.activateTab(void 0);
          }
          return;
        }
        parentData.activateTab(computedId.value);
      });
      const computedClasses = computed2(() => [
        {
          "active": isActive.value,
          "show": show.value,
          "card-body": (parentData == null ? void 0 : parentData.card.value) && props.noBody === false,
          "fade": !(parentData == null ? void 0 : parentData.noFade.value)
        },
        show.value ? parentData == null ? void 0 : parentData.activeTabClass.value : parentData == null ? void 0 : parentData.inactiveTabClass.value,
        parentData == null ? void 0 : parentData.tabClass.value
      ]);
      watch2(showSlot, (shown) => {
        if (shown && !lazyRenderCompleted.value)
          lazyRenderCompleted.value = true;
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(resolveDynamicComponent(unref(props).tag), mergeProps({
          id: unref(computedId),
          ref: "_el",
          class: ["tab-pane", computedClasses.value],
          role: "tabpanel",
          "aria-labelledby": unref(computedButtonId)
        }, attrs), {
          default: withCtx(() => [
            showSlot.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true)
          ]),
          _: 3
        }, 16, ["id", "class", "aria-labelledby"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/BToastOrchestrator.vue_vue_type_style_index_0_lang-DKAZyKKr.mjs
  var _hoisted_115 = ["id", "role", "aria-live", "aria-atomic"];
  var _hoisted_212 = { class: "me-auto" };
  var _sfc_main$110 = /* @__PURE__ */ defineComponent({
    __name: "BToast",
    props: /* @__PURE__ */ mergeModels({
      body: { default: void 0 },
      bodyClass: { default: void 0 },
      headerClass: { default: void 0 },
      headerTag: { default: "div" },
      id: { default: void 0 },
      interval: { default: "requestAnimationFrame" },
      isStatus: { type: Boolean, default: false },
      noCloseButton: { type: Boolean, default: false },
      noHoverPause: { type: Boolean, default: false },
      noResumeOnHoverLeave: { type: Boolean, default: false },
      progressProps: { default: void 0 },
      showOnPause: { type: Boolean, default: true },
      solid: { type: Boolean, default: false },
      title: { default: void 0 },
      toastClass: { default: void 0 },
      variant: { default: void 0 },
      bgVariant: { default: null },
      textVariant: { default: null },
      active: { type: Boolean, default: void 0 },
      activeClass: { default: void 0 },
      disabled: { type: Boolean, default: void 0 },
      exactActiveClass: { default: void 0 },
      href: { default: void 0 },
      icon: { type: Boolean, default: void 0 },
      noRel: { type: Boolean, default: void 0 },
      opacity: { default: void 0 },
      opacityHover: { default: void 0 },
      rel: { default: void 0 },
      replace: { type: Boolean, default: void 0 },
      routerComponentName: { default: void 0 },
      stretched: { type: Boolean, default: false },
      target: { default: void 0 },
      to: { default: void 0 },
      underlineOffset: { default: void 0 },
      underlineOffsetHover: { default: void 0 },
      underlineOpacity: { default: void 0 },
      underlineOpacityHover: { default: void 0 },
      underlineVariant: { default: void 0 },
      initialAnimation: { type: Boolean, default: false },
      noAnimation: { type: Boolean },
      noFade: { type: Boolean, default: false },
      lazy: { type: Boolean, default: false },
      unmountLazy: { type: Boolean, default: false },
      show: { type: Boolean, default: false },
      transProps: { default: void 0 },
      visible: { type: Boolean, default: false }
    }, {
      "modelValue": { type: [Boolean, Number], ...{ default: false } },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["close", "close-countdown", "hide", "hide-prevented", "hidden", "show", "show-prevented", "shown", "toggle", "toggle-prevented"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      const _props = __props;
      const props = useDefaults(_props, "BToast");
      const emit2 = __emit;
      const slots = useSlots();
      const element = useTemplateRef("_element");
      const modelValue = useModel(__props, "modelValue");
      const { computedLink, computedLinkProps } = useBLinkHelper(props);
      const computedId = useId2(() => props.id, "toast");
      const {
        showRef,
        renderRef,
        hide: hide2,
        toggle: toggle2,
        show,
        buildTriggerableEvent,
        computedNoAnimation,
        isVisible: isVisible2,
        transitionProps,
        contentShowing
      } = useShowHide(modelValue, props, emit2, element, computedId);
      const countdownLength = computed2(
        () => typeof modelValue.value === "boolean" ? 0 : modelValue.value
      );
      const {
        isActive,
        pause,
        restart,
        resume,
        stop: stop2,
        isPaused,
        value: remainingMs
      } = useCountdown(countdownLength, props.interval, {
        immediate: typeof modelValue.value === "number" && !!modelValue.value
      });
      useCountdownHover(
        element,
        computed2(() => ({
          noHoverPause: props.noHoverPause || typeof modelValue.value !== "number",
          noResumeOnHoverLeave: props.noResumeOnHoverLeave || typeof modelValue.value !== "number",
          modelValueIgnoresHover: typeof modelValue.value === "boolean"
        })),
        { pause, resume }
      );
      watchEffect(() => {
        emit2("close-countdown", remainingMs.value);
      });
      const computedTag = computed2(() => computedLink.value ? _sfc_main7 : "div");
      const isToastVisible = computed2(
        () => showRef.value || isActive.value || props.showOnPause && isPaused.value
      );
      const colorClasses = useColorVariantClasses(props);
      const computedClasses = computed2(() => [
        colorClasses.value,
        {
          show: isVisible2.value,
          fade: !computedNoAnimation.value
        }
      ]);
      watch2(modelValue, (newValue) => {
        if (typeof newValue === "number") {
          const event = buildTriggerableEvent("show", { cancelable: true, trigger: "model" });
          emit2("show", event);
          if (event.defaultPrevented) {
            emit2("show-prevented", buildTriggerableEvent("show-prevented"));
          } else {
            restart();
          }
        }
      });
      watch2(isActive, (newValue) => {
        if (newValue === false && isPaused.value === false) {
          hide2();
          modelValue.value = 0;
          stop2();
        }
      });
      __expose({
        show,
        hide: hide2,
        toggle: toggle2,
        pause,
        restart,
        resume,
        stop: stop2
      });
      return (_ctx, _cache) => {
        return unref(renderRef) || unref(contentShowing) ? (openBlock(), createBlock(Transition, mergeProps({ key: 0 }, unref(transitionProps), {
          appear: !!modelValue.value || unref(props).visible
        }), {
          default: withCtx(() => [
            withDirectives(createBaseVNode("div", {
              id: unref(props).id,
              ref: "_element",
              class: normalizeClass(["toast", [unref(props).toastClass, computedClasses.value]]),
              tabindex: "0",
              role: !isToastVisible.value ? void 0 : unref(props).isStatus ? "status" : "alert",
              "aria-live": !isToastVisible.value ? void 0 : unref(props).isStatus ? "polite" : "assertive",
              "aria-atomic": !isToastVisible.value ? void 0 : true
            }, [
              unref(contentShowing) && (slots.title || unref(props).title) ? (openBlock(), createBlock(resolveDynamicComponent(unref(props).headerTag), {
                key: 0,
                class: normalizeClass(["toast-header", unref(props).headerClass])
              }, {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "title", { hide: unref(hide2) }, () => [
                    createBaseVNode("strong", _hoisted_212, toDisplayString(unref(props).title), 1)
                  ], true),
                  !unref(props).noCloseButton ? (openBlock(), createBlock(_sfc_main5, {
                    key: 0,
                    onClick: _cache[0] || (_cache[0] = ($event) => unref(hide2)("close"))
                  })) : createCommentVNode("", true)
                ]),
                _: 3
              }, 8, ["class"])) : createCommentVNode("", true),
              unref(contentShowing) && (slots.default || unref(props).body) ? (openBlock(), createBlock(resolveDynamicComponent(computedTag.value), mergeProps({
                key: 1,
                class: ["toast-body", unref(props).bodyClass],
                style: { "display": "block" }
              }, unref(computedLinkProps), {
                onClick: _cache[1] || (_cache[1] = ($event) => unref(computedLink) ? unref(hide2)() : () => {
                })
              }), {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default", { hide: unref(hide2) }, () => [
                    createTextVNode(toDisplayString(unref(props).body), 1)
                  ], true)
                ]),
                _: 3
              }, 16, ["class"])) : createCommentVNode("", true),
              typeof modelValue.value === "number" && unref(props).progressProps !== void 0 ? (openBlock(), createBlock(_sfc_main26, {
                key: 2,
                animated: unref(props).progressProps.animated,
                precision: unref(props).progressProps.precision,
                "show-progress": unref(props).progressProps.showProgress,
                "show-value": unref(props).progressProps.showValue,
                striped: unref(props).progressProps.striped,
                variant: unref(props).progressProps.variant,
                max: modelValue.value,
                value: unref(remainingMs),
                height: "4px"
              }, null, 8, ["animated", "precision", "show-progress", "show-value", "striped", "variant", "max", "value"])) : createCommentVNode("", true)
            ], 10, _hoisted_115), [
              [vShow, isToastVisible.value]
            ])
          ]),
          _: 3
        }, 16, ["appear"])) : createCommentVNode("", true);
      };
    }
  });
  var BToast = /* @__PURE__ */ _export_sfc(_sfc_main$110, [["__scopeId", "data-v-eeb0e3de"]]);
  var positionClasses = {
    "top-start": "top-0 start-0",
    "top-center": "top-0 start-50 translate-middle-x",
    "top-end": "top-0 end-0",
    "middle-start": "top-50 start-0 translate-middle-y",
    "middle-center": "top-50 start-50 translate-middle",
    "middle-end": "top-50 end-0 translate-middle-y",
    "bottom-start": "bottom-0 start-0",
    "bottom-center": "bottom-0 start-50 translate-middle-x",
    "bottom-end": "bottom-0 end-0"
  };
  var _sfc_main28 = /* @__PURE__ */ defineComponent({
    ...{
      inheritAttrs: false
    },
    __name: "BToastOrchestrator",
    props: {
      appendToast: { type: Boolean, default: false },
      teleportDisabled: { type: Boolean, default: false },
      teleportTo: { default: "body" }
    },
    setup(__props, { expose: __expose }) {
      const _props = __props;
      const props = useDefaults(_props, "BToastOrchestrator");
      const tools = useToastController();
      watch2(
        () => props.appendToast,
        (value) => {
          var _a;
          (_a = tools._setIsAppend) == null ? void 0 : _a.call(tools, value);
        },
        { immediate: true }
      );
      __expose({
        ...tools
      });
      return (_ctx, _cache) => {
        return openBlock(), createBlock(_sfc_main, {
          to: unref(props).teleportTo,
          disabled: unref(props).teleportDisabled
        }, {
          default: withCtx(() => [
            createBaseVNode("div", mergeProps({ id: "__BVID__toaster-container" }, _ctx.$attrs), [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(positionClasses), (value, key) => {
                return openBlock(), createElementBlock("div", {
                  key,
                  class: normalizeClass([value, "toast-container position-fixed p-3"])
                }, [
                  createVNode(TransitionGroup, { name: "b-list" }, {
                    default: withCtx(() => {
                      var _a;
                      return [
                        (openBlock(true), createElementBlock(Fragment, null, renderList((_a = unref(tools).toasts) == null ? void 0 : _a.value.filter((el) => el.props.pos === key), (toast) => {
                          return openBlock(), createElementBlock("span", {
                            key: toast.props._self
                          }, [
                            (openBlock(), createBlock(resolveDynamicComponent(toast.component ?? BToast), mergeProps({ ref_for: true }, toast.props, {
                              "model-value": toast.props._modelValue,
                              "initial-animation": "",
                              "onUpdate:modelValue": ($event) => {
                                var _a2, _b;
                                return (_b = (_a2 = unref(tools)).leave) == null ? void 0 : _b.call(_a2, toast.props._self);
                              },
                              onHidden: ($event) => {
                                var _a2, _b;
                                return (_b = (_a2 = unref(tools)).remove) == null ? void 0 : _b.call(_a2, toast.props._self);
                              }
                            }), null, 16, ["model-value", "onUpdate:modelValue", "onHidden"]))
                          ]);
                        }), 128))
                      ];
                    }),
                    _: 2
                  }, 1024)
                ], 2);
              }), 128))
            ], 16)
          ]),
          _: 1
        }, 8, ["to", "disabled"]);
      };
    }
  });

  // node_modules/bootstrap-vue-next/dist/index-sLCKmIWG.mjs
  var componentsWithExternalPath = {
    BAccordion: "/components/BAccordion",
    BAccordionItem: "/components/BAccordion",
    BAlert: "/components/BAlert",
    BAvatar: "/components/BAvatar",
    BAvatarGroup: "/components/BAvatar",
    BBadge: "/components/BBadge",
    BBreadcrumb: "/components/BBreadcrumb",
    BBreadcrumbItem: "/components/BBreadcrumb",
    BButton: "/components/BButton",
    BButtonGroup: "/components/BButton",
    BButtonToolbar: "/components/BButton",
    BCloseButton: "/components/BButton",
    BCard: "/components/BCard",
    BCardBody: "/components/BCard",
    BCardFooter: "/components/BCard",
    BCardGroup: "/components/BCard",
    BCardHeader: "/components/BCard",
    BCardImg: "/components/BCard",
    BCardSubtitle: "/components/BCard",
    BCardText: "/components/BCard",
    BCardTitle: "/components/BCard",
    BCarousel: "/components/BCarousel",
    BCarouselSlide: "/components/BCarousel",
    BCol: "/components/BContainer",
    BCollapse: "/components/BCollapse",
    BContainer: "/components/BContainer",
    BDropdown: "/components/BDropdown",
    BDropdownDivider: "/components/BDropdown",
    BDropdownForm: "/components/BDropdown",
    BDropdownGroup: "/components/BDropdown",
    BDropdownHeader: "/components/BDropdown",
    BDropdownItem: "/components/BDropdown",
    BDropdownItemButton: "/components/BDropdown",
    BDropdownText: "/components/BDropdown",
    BForm: "/components/BForm",
    BFormCheckbox: "/components/BFormCheckbox",
    BFormCheckboxGroup: "/components/BFormCheckbox",
    BFormDatalist: "/components/BForm",
    BFormFile: "/components/BFormFile",
    BFormFloatingLabel: "/components/BForm",
    BFormGroup: "/components/BFormGroup",
    BFormInput: "/components/BFormInput",
    BFormInvalidFeedback: "/components/BForm",
    BFormRadio: "/components/BFormRadio",
    BFormRadioGroup: "/components/BFormRadio",
    BFormRow: "/components/BForm",
    BFormSelect: "/components/BFormSelect",
    BFormSelectOption: "/components/BFormSelect",
    BFormSelectOptionGroup: "/components/BFormSelect",
    BFormSpinbutton: "/components/BFormSpinbutton",
    BFormTag: "/components/BFormTags",
    BFormTags: "/components/BFormTags",
    BFormText: "/components/BForm",
    BFormTextarea: "/components/BFormTextarea",
    BFormValidFeedback: "/components/BForm",
    BImg: "/components/BImg",
    BInput: "/components/BFormInput",
    BInputGroup: "/components/BInputGroup",
    BInputGroupText: "/components/BInputGroup",
    BListGroup: "/components/BListGroup",
    BListGroupItem: "/components/BListGroup",
    BModal: "/components/BModal",
    BModalOrchestrator: "/components/BModal",
    BNav: "/components/BNav",
    BNavForm: "/components/BNav",
    BNavItem: "/components/BNav",
    BNavItemDropdown: "/components/BNav",
    BNavText: "/components/BNav",
    BNavbar: "/components/BNavbar",
    BNavbarBrand: "/components/BNavbar",
    BNavbarNav: "/components/BNavbar",
    BNavbarToggle: "/components/BNavbar",
    BOffcanvas: "/components/BOffcanvas",
    BOverlay: "/components/BOverlay",
    BPagination: "/components/BPagination",
    BPlaceholder: "/components/BPlaceholder",
    BPlaceholderButton: "/components/BPlaceholder",
    BPlaceholderCard: "/components/BPlaceholder",
    BPlaceholderTable: "/components/BPlaceholder",
    BPlaceholderWrapper: "/components/BPlaceholder",
    BPopover: "/components/BPopover",
    BProgress: "/components/BProgress",
    BRow: "/components/BContainer",
    BSpinner: "/components/BSpinner",
    BTab: "/components/BTabs",
    BTabs: "/components/BTabs",
    BToast: "/components/BToast",
    BToastOrchestrator: "/components/BToast",
    BTooltip: "/components/BTooltip",
    BLink: "/components/BLink",
    BProgressBar: "/components/BProgress",
    BTableSimple: "/components/BTable",
    BTableLite: "/components/BTable",
    BTable: "/components/BTable",
    BTbody: "/components/BTable",
    BTd: "/components/BTable",
    BTh: "/components/BTable",
    BThead: "/components/BTable",
    BTfoot: "/components/BTable",
    BTr: "/components/BTable",
    BPopoverOrchestrator: "/components/BPopover"
  };
  var componentNames = Object.freeze(
    Object.keys(componentsWithExternalPath)
  );
  var directivesWithExternalPath = {
    vBColorMode: "/directives/BColorMode",
    vBModal: "/directives/BModal",
    vBPopover: "/directives/BPopover",
    vBScrollspy: "/directives/BScrollspy",
    vBToggle: "/directives/BToggle",
    vBTooltip: "/directives/BTooltip"
  };
  var directiveNames = Object.freeze(
    Object.keys(directivesWithExternalPath)
  );
  var composablesWithExternalPath = {
    useBreadcrumb: "/composables/useBreadcrumb",
    useColorMode: "/composables/useColorMode",
    useModal: "/composables/useModal",
    useModalController: "/composables/useModalController",
    useScrollspy: "/composables/useScrollspy",
    useToastController: "/composables/useToastController",
    usePopoverController: "/composables/usePopoverController"
  };
  var composableNames = Object.freeze(
    Object.keys(composablesWithExternalPath)
  );
  var bvKey = "bootstrap-vue-next";
  var parseActiveImports = (options, values) => {
    const { all, ...others } = options;
    const valuesCopy = {};
    if (all) {
      values.forEach((el) => {
        valuesCopy[el] = all;
      });
    }
    const merge = { ...valuesCopy, ...others };
    return Object.entries(merge).filter(([name, value]) => !!value && values.includes(name)).map(([name]) => name);
  };
  var usedComponents = /* @__PURE__ */ new Set();
  var usedDirectives = /* @__PURE__ */ new Set();
  var BootstrapVueNextResolver = Object.assign(
    ({
      aliases = {},
      directives = true,
      components = true
    } = {}) => {
      const selectedComponents = typeof components === "boolean" ? { all: components } : components;
      const compImports = parseActiveImports(selectedComponents, componentNames).reduce(
        (map2, name) => {
          map2.set(name, `${bvKey}${componentsWithExternalPath[name]}`);
          return map2;
        },
        /* @__PURE__ */ new Map()
      );
      const selectedDirectives = typeof directives === "boolean" ? { all: directives } : directives;
      const dirImports = parseActiveImports(selectedDirectives, directiveNames).reduce(
        (map2, directive) => {
          const key = directive.toLowerCase().startsWith("v") ? directive : `v${directive}`;
          map2.set(key, `${bvKey}${directivesWithExternalPath[key]}`);
          return map2;
        },
        /* @__PURE__ */ new Map()
      );
      const resolvers = [
        {
          type: "component",
          resolve(name) {
            const destination = compImports.get(name);
            const aliasDestination = compImports.get(aliases[name]);
            if (aliasDestination) {
              const val = aliases[name];
              usedComponents.add(val);
              return {
                name: val,
                from: aliasDestination
              };
            }
            if (destination) {
              usedComponents.add(name);
              return {
                name,
                from: destination
              };
            }
          }
        },
        {
          type: "directive",
          resolve(name) {
            const prefixedName = `v${name}`;
            const destination = dirImports.get(prefixedName);
            if (destination) {
              usedDirectives.add(prefixedName);
              return {
                name: prefixedName,
                from: destination
              };
            }
          }
        }
      ];
      return resolvers;
    },
    {
      __usedComponents: usedComponents,
      __usedDirectives: usedDirectives
    }
  );

  // node_modules/bootstrap-vue-next/dist/src/plugins/bootstrap/index.mjs
  var bootstrapPlugin = {
    install(app2, options) {
      const val = (options == null ? void 0 : options.components) ?? {};
      app2.provide(defaultsKey, ref(val));
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/breadcrumb/index.mjs
  var breadcrumbPlugin = {
    install(app2) {
      const items = ref([]);
      const reset = () => {
        items.value.splice(0, items.value.length);
      };
      app2.provide(breadcrumbPluginKey, { items, reset });
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/modalController/index.mjs
  var modalControllerPlugin = {
    install(app2) {
      const modals = ref(/* @__PURE__ */ new Map());
      const buildPromise = () => {
        let resolveFunc = () => {
        };
        const promise = new Promise((resolve2) => {
          resolveFunc = resolve2;
        });
        return {
          value: promise,
          resolve: resolveFunc
        };
      };
      const buildPrereqs = (id) => [buildPromise(), id || Symbol("Modals controller"), true];
      const show = (obj = {}) => {
        var _a;
        const resolvedProps = toRef(obj.props);
        const [_promise, _self, _modelValue] = buildPrereqs((_a = resolvedProps.value) == null ? void 0 : _a.id);
        modals.value.set(_self, {
          component: !obj.component ? void 0 : markRaw(obj.component),
          props: { ...resolvedProps.value, _isConfirm: false, _promise, _modelValue }
        });
        watch2(resolvedProps, (newValue) => {
          const previous = modals.value.get(_self);
          if (!previous)
            return;
          modals.value.set(_self, {
            component: !obj.component ? void 0 : markRaw(obj.component),
            props: { ...previous.props, ...newValue }
          });
        });
        return _promise.value;
      };
      const confirm = (obj = {}) => {
        var _a;
        const resolvedProps = toRef(obj.props);
        const [_promise, _self, _modelValue] = buildPrereqs((_a = resolvedProps.value) == null ? void 0 : _a.id);
        modals.value.set(_self, {
          component: !obj.component ? void 0 : markRaw(obj.component),
          props: { ...resolvedProps.value, _isConfirm: true, _promise, _modelValue }
        });
        watch2(resolvedProps, (newValue) => {
          const previous = modals.value.get(_self);
          if (!previous)
            return;
          modals.value.set(_self, {
            component: !obj.component ? void 0 : markRaw(obj.component),
            props: { ...previous.props, ...newValue }
          });
        });
        return _promise.value;
      };
      const leave = (self2) => {
        const modal = modals.value.get(self2);
        if (!(modal == null ? void 0 : modal.props))
          return;
        modal.props = {
          ...modal.props,
          _modelValue: false
        };
      };
      const remove2 = (self2) => {
        modals.value.delete(self2);
      };
      app2.provide(modalControllerPluginKey, {
        modals,
        remove: remove2,
        show,
        confirm,
        leave
      });
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/modalManager/index.mjs
  var modalManagerPlugin = {
    install(app2) {
      const stack2 = ref(/* @__PURE__ */ new Map());
      const countStack = computed2(() => stack2.value.size);
      const valuesStack = computed2(() => [...stack2.value.values()]);
      const lastStack = computed2(() => valuesStack.value[valuesStack.value.length - 1]);
      const pushStack = (modal) => {
        stack2.value.set(modal.uid, modal);
      };
      const removeStack = (modal) => {
        stack2.value.delete(modal.uid);
      };
      const registry = ref(/* @__PURE__ */ new Map());
      const pushRegistry = (modal) => {
        registry.value.set(modal.uid, modal);
      };
      const removeRegistry = (modal) => {
        registry.value.delete(modal.uid);
      };
      app2.provide(modalManagerPluginKey, {
        countStack,
        lastStack,
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        registry: readonly(registry),
        stack: valuesStack,
        pushStack,
        removeStack,
        pushRegistry,
        removeRegistry
      });
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/popoverController/index.mjs
  var popoverPlugin = {
    install(app2) {
      const popovers = ref(/* @__PURE__ */ new Map());
      const popover = (obj) => {
        var _a;
        const resolvedProps = toRef(obj);
        const _self = ((_a = resolvedProps.value) == null ? void 0 : _a.id) || Symbol("Popover controller");
        watch2(
          resolvedProps,
          (newValue) => {
            popovers.value.set(_self, {
              ...newValue,
              ...typeof newValue["modelValue"] !== "undefined" && isRef2(obj) ? {
                "onUpdate:modelValue": (val) => {
                  var _a2;
                  (_a2 = newValue["onUpdate:modelValue"]) == null ? void 0 : _a2.call(newValue, val);
                  obj.value.modelValue = val;
                }
              } : {}
            });
          },
          {
            immediate: true,
            deep: true
          }
        );
        onScopeDispose(() => popovers.value.delete(_self), true);
        return _self;
      };
      const setPopover = (self2, val) => {
        const popover2 = popovers.value.get(self2);
        if (!popover2)
          return;
        popovers.value.set(self2, {
          ...popover2,
          ...toValue(val)
        });
      };
      const removePopover = (self2) => popovers.value.delete(self2);
      const tooltips = ref(/* @__PURE__ */ new Map());
      const tooltip = (obj) => {
        var _a;
        const resolvedProps = toRef(obj);
        const _self = ((_a = resolvedProps.value) == null ? void 0 : _a.id) || Symbol("Tooltip controller");
        watch2(
          resolvedProps,
          (newValue) => {
            popovers.value.set(_self, {
              ...newValue,
              ...typeof newValue["modelValue"] !== "undefined" && isRef2(obj) ? {
                "onUpdate:modelValue": (val) => {
                  var _a2;
                  (_a2 = newValue["onUpdate:modelValue"]) == null ? void 0 : _a2.call(newValue, val);
                  obj.value.modelValue = val;
                }
              } : {}
            });
          },
          {
            immediate: true,
            deep: true
          }
        );
        onScopeDispose(() => tooltips.value.delete(_self), true);
        return _self;
      };
      const setTooltip = (self2, val) => {
        const tooltip2 = tooltips.value.get(self2);
        if (!tooltip2)
          return;
        tooltips.value.set(self2, {
          ...tooltip2,
          ...toValue(val)
        });
      };
      const removeTooltip = (self2) => tooltips.value.delete(self2);
      app2.provide(popoverPluginKey, {
        popovers,
        tooltips,
        tooltip,
        popover,
        setPopover,
        setTooltip,
        removePopover,
        removeTooltip
      });
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/rtl/index.mjs
  var rtlPlugin = {
    install(app2, options) {
      var _a, _b;
      const rtlDefault = false;
      const localeDefault = void 0;
      const rtlInitial = typeof (options == null ? void 0 : options.rtl) === "boolean" ? rtlDefault : ((_a = options == null ? void 0 : options.rtl) == null ? void 0 : _a.rtlInitial) ?? rtlDefault;
      const localeInitial = typeof (options == null ? void 0 : options.rtl) === "boolean" ? localeDefault : ((_b = options == null ? void 0 : options.rtl) == null ? void 0 : _b.localeInitial) ?? localeDefault;
      const isRtl = ref(rtlInitial);
      const locale = ref(localeInitial);
      app2.provide(rtlPluginKey, { isRtl, locale });
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/toastController/index.mjs
  var posDefault = "top-end";
  var toastPlugin = {
    install(app2) {
      const toasts = ref([]);
      const _isAppend = ref(false);
      const _setIsAppend = (value) => {
        _isAppend.value = value;
      };
      const show = (obj = {}) => {
        var _a, _b, _c, _d;
        const resolvedProps = toRef(obj.props);
        const _self = ((_a = resolvedProps.value) == null ? void 0 : _a.id) || Symbol("Toast controller");
        const toastToAdd = {
          component: !obj.component ? void 0 : markRaw(obj.component),
          props: {
            ...resolvedProps.value,
            pos: ((_b = resolvedProps.value) == null ? void 0 : _b.pos) || posDefault,
            _modelValue: ((_c = resolvedProps.value) == null ? void 0 : _c.value) || 5e3,
            _self
          }
        };
        if (((_d = resolvedProps.value) == null ? void 0 : _d.appendToast) !== void 0 ? resolvedProps.value.appendToast : _isAppend.value) {
          toasts.value.push(toastToAdd);
        } else {
          toasts.value.unshift(toastToAdd);
        }
        watch2(resolvedProps, (newValue) => {
          const previousIndex = toasts.value.findIndex((el) => el.props._self === _self);
          if (previousIndex === -1)
            return;
          toasts.value.splice(previousIndex, 1, {
            component: !obj.component ? void 0 : markRaw(obj.component),
            props: {
              ...toasts.value[previousIndex].props,
              ...newValue,
              _modelValue: (newValue == null ? void 0 : newValue.value) || toasts.value[previousIndex].props._modelValue || 5e3
            }
          });
        });
        return _self;
      };
      const remove2 = (self2) => {
        toasts.value = toasts.value.filter((el) => el.props._self !== self2);
      };
      const leave = (self2) => {
        const toastIndex = toasts.value.findIndex((el) => el.props._self === self2);
        if (toastIndex === -1)
          return;
        toasts.value.splice(toastIndex, 1, {
          component: !toasts.value[toastIndex].component ? void 0 : markRaw(toasts.value[toastIndex].component),
          props: {
            ...toasts.value[toastIndex].props,
            _modelValue: false
          }
        });
      };
      app2.provide(toastPluginKey, {
        _setIsAppend,
        toasts,
        show,
        remove: remove2,
        leave
      });
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/showHide/index.mjs
  var showHidePlugin = {
    install(app2) {
      const values = reactive({});
      const fun = ({ id, value, toggle: toggle2, show, hide: hide2 }) => {
        values[id] = computed2(() => ({ value: value.value, toggle: toggle2, show, hide: hide2 }));
        return {
          unregister() {
            delete values[id];
          }
        };
      };
      fun.map = readonly(values);
      app2.provide(globalShowHideStorageInjectionKey, fun);
    }
  };

  // node_modules/bootstrap-vue-next/dist/src/plugins/createBootstrap/index.mjs
  var createBootstrap = (pluginData = {}) => ({
    install(app2) {
      if (pluginData.breadcrumb ?? true) {
        app2.use(breadcrumbPlugin);
      }
      if (pluginData.modalController ?? true) {
        app2.use(modalControllerPlugin);
      }
      if (pluginData.modalManager ?? true) {
        app2.use(modalManagerPlugin);
      }
      if ((pluginData.rtl ?? true) || typeof pluginData.rtl === "object") {
        app2.use(rtlPlugin, pluginData);
      }
      if (pluginData.toast ?? true) {
        app2.use(toastPlugin);
      }
      if (pluginData.popover ?? true) {
        app2.use(popoverPlugin);
      }
      app2.use(showHidePlugin);
      app2.use(bootstrapPlugin, pluginData);
    }
  });

  // js/common/debounce.ts
  function debounce(func, timeout = 100) {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      return new Promise((resolve2) => {
        timer = setTimeout(() => {
          const r = func.apply(void 0, args);
          if (r instanceof Promise) {
            r.then(resolve2);
          } else {
            resolve2(r);
          }
        }, timeout);
      });
    };
  }

  // sfc-script:/home/bjoern/development/onto-spread-ed/js/editor/Merger.vue?type=script
  var Merger_default = /* @__PURE__ */ defineComponent({
    __name: "Merger",
    props: /* @__PURE__ */ mergeModels({
      conflicts: { type: Array, required: true }
    }, {
      "modelValue": { type: Array },
      "modelModifiers": {}
    }),
    emits: /* @__PURE__ */ mergeModels(["save"], ["update:modelValue"]),
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      onMounted(() => {
        document.body.style.removeProperty("overflow");
      });
      const props = __props;
      const merged_data = useModel(__props, "modelValue");
      const emits = __emit;
      const conflicts_by_row = computed2(() => {
        const result = {};
        for (const conflict of props.conflicts) {
          if (!result[conflict.row]) {
            result[conflict.row] = [];
          }
          result[conflict.row].push(conflict);
        }
        return result;
      });
      const resolved = ref({});
      watchEffect(() => {
        resolved.value = Object.entries(conflicts_by_row.value).reduce((acc, [r, v]) => ({ ...acc, [r]: v.reduce((prev, cur) => ({ ...prev, [cur.col]: null }), {}) }), {});
      });
      const allResolved = computed2(() => Object.values(resolved.value).every((v) => Object.values(v).every((v2) => v2 !== null)));
      watch2(resolved, () => {
        for (const row in resolved.value) {
          for (const col in resolved.value[row]) {
            if (resolved.value[row][col] === null) {
              return;
            } else {
              merged_data.value[row][col] = resolved.value[row][col];
            }
          }
        }
      }, { deep: true });
      function save() {
        emits("save", "manual");
      }
      function saveTheirs() {
        for (const conflict of props.conflicts) {
          merged_data.value[conflict.row][conflict.col] = conflict.their_value;
        }
        emits("save", "theirs");
      }
      function saveOurs() {
        for (const conflict of props.conflicts) {
          merged_data.value[conflict.row][conflict.col] = conflict.our_value;
        }
        emits("save", "ours");
      }
      function highlight(row, col, selfValue) {
        const val = resolved.value?.[row]?.[col];
        if (val === null) {
          return [];
        } else if (val === selfValue) {
          return ["text-success"];
        } else {
          return ["text-danger"];
        }
      }
      const __returned__ = { props, merged_data, emits, conflicts_by_row, resolved, allResolved, save, saveTheirs, saveOurs, highlight };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/home/bjoern/development/onto-spread-ed/js/editor/Merger.vue?type=style&index=0
  {
    const el = document.createElement("style");
    el.textContent = ".conflict[data-v-576bac25] {\n  display: flex;\n  margin-bottom: 10px;\n}\n.container[data-v-576bac25] > * {\n  margin-bottom: 1.25rem;\n}\n.container > * td.text-danger[data-v-576bac25] {\n  text-decoration: line-through;\n}\n.buttons[data-v-576bac25] {\n  display: flex;\n  gap: 1.25rem;\n}\n.buttons button i[data-v-576bac25] {\n  margin-right: 0.75rem;\n}";
    document.head.append(el);
  }

  // sfc-template:/home/bjoern/development/onto-spread-ed/js/editor/Merger.vue?type=template
  var _hoisted_116 = { class: "container" };
  var _hoisted_213 = { class: "buttons" };
  var _hoisted_34 = ["disabled"];
  var _hoisted_42 = { class: "card bg-danger-subtle" };
  var _hoisted_5 = { class: "card-body" };
  var _hoisted_6 = { class: "card-title" };
  var _hoisted_7 = { class: "card-subtitle mb-3" };
  var _hoisted_8 = { class: "table" };
  var _hoisted_9 = { scope: "row" };
  var _hoisted_10 = ["onClick"];
  var _hoisted_11 = ["onClick"];
  var _hoisted_122 = ["onClick"];
  var _hoisted_132 = ["onUpdate:modelValue"];
  function render3(_ctx, _cache, $props, $setup, $data, $options) {
    return openBlock(), createElementBlock("div", _hoisted_116, [
      _cache[13] || (_cache[13] = createBaseVNode(
        "div",
        { class: "callout callout-info" },
        [
          createBaseVNode("h5", null, "Resolving merge conflicts"),
          createBaseVNode("p", null, " While your worked on the file, other users have also made changes to it. Their and your changes conflict. The conflicts are shown below. "),
          createBaseVNode("p", null, ' For each conflict, you can choose to use your value, the value from the previous version, the value from the other user, or provide a new value. Click the checkmark symbol next to one of the values to accept this version. When you resolved all conflicts, click the "Save and complete merge" button. '),
          createBaseVNode("p", null, " Alternatively, you can choose to overwrite their changes with yours, or to discard your changes and accept theirs. ")
        ],
        -1
        /* HOISTED */
      )),
      createBaseVNode("div", _hoisted_213, [
        createBaseVNode("button", {
          class: "btn btn-success",
          disabled: !$setup.allResolved,
          onClick: _cache[0] || (_cache[0] = ($event) => $setup.save())
        }, _cache[3] || (_cache[3] = [
          createBaseVNode(
            "i",
            { class: "fa fa-save" },
            null,
            -1
            /* HOISTED */
          ),
          createTextVNode("Save and complete merge ")
        ]), 8, _hoisted_34),
        createBaseVNode("button", {
          class: "btn btn-danger",
          onClick: _cache[1] || (_cache[1] = ($event) => $setup.saveTheirs())
        }, _cache[4] || (_cache[4] = [
          createBaseVNode(
            "i",
            { class: "fa fa-globe" },
            null,
            -1
            /* HOISTED */
          ),
          createTextVNode("Loose your changes and use their version ")
        ])),
        createBaseVNode("button", {
          class: "btn btn-danger",
          onClick: _cache[2] || (_cache[2] = ($event) => $setup.saveOurs())
        }, _cache[5] || (_cache[5] = [
          createBaseVNode(
            "i",
            { class: "fa fa-user" },
            null,
            -1
            /* HOISTED */
          ),
          createTextVNode("Overwrite their change with yours ")
        ]))
      ]),
      (openBlock(true), createElementBlock(
        Fragment,
        null,
        renderList(Object.keys($setup.conflicts_by_row), (row) => {
          return openBlock(), createElementBlock("div", _hoisted_42, [
            createBaseVNode("div", _hoisted_5, [
              createBaseVNode(
                "h5",
                _hoisted_6,
                toDisplayString($setup.merged_data[row]["Label"]) + " [" + toDisplayString($setup.merged_data[row]["ID"]) + "]",
                1
                /* TEXT */
              ),
              createBaseVNode(
                "h6",
                _hoisted_7,
                "Row " + toDisplayString(row),
                1
                /* TEXT */
              ),
              createBaseVNode("table", _hoisted_8, [
                _cache[12] || (_cache[12] = createBaseVNode(
                  "thead",
                  null,
                  [
                    createBaseVNode("tr", null, [
                      createBaseVNode("th", { scope: "col" }, "Column"),
                      createBaseVNode("th", { scope: "col" }, "Your value"),
                      createBaseVNode("th", { scope: "col" }, "Previous value"),
                      createBaseVNode("th", { scope: "col" }, "Their value"),
                      createBaseVNode("th", { scope: "col" }, "Final value")
                    ])
                  ],
                  -1
                  /* HOISTED */
                )),
                createBaseVNode("tbody", null, [
                  (openBlock(true), createElementBlock(
                    Fragment,
                    null,
                    renderList($setup.conflicts_by_row[row], (conflict) => {
                      return openBlock(), createElementBlock("tr", null, [
                        createBaseVNode(
                          "th",
                          _hoisted_9,
                          toDisplayString(conflict.col),
                          1
                          /* TEXT */
                        ),
                        createBaseVNode(
                          "td",
                          {
                            class: normalizeClass($setup.highlight(row, conflict.col, conflict.our_value))
                          },
                          [
                            createBaseVNode("p", null, [
                              (openBlock(true), createElementBlock(
                                Fragment,
                                null,
                                renderList(conflict.our_value.split("\n"), (line) => {
                                  return openBlock(), createElementBlock(
                                    Fragment,
                                    null,
                                    [
                                      createTextVNode(
                                        toDisplayString(line) + " ",
                                        1
                                        /* TEXT */
                                      ),
                                      _cache[6] || (_cache[6] = createBaseVNode(
                                        "br",
                                        null,
                                        null,
                                        -1
                                        /* HOISTED */
                                      ))
                                    ],
                                    64
                                    /* STABLE_FRAGMENT */
                                  );
                                }),
                                256
                                /* UNKEYED_FRAGMENT */
                              ))
                            ]),
                            createBaseVNode("button", {
                              title: "Use my value",
                              class: "btn btn-success",
                              onClick: ($event) => $setup.resolved[row][conflict.col] = conflict.our_value
                            }, [..._cache[7] || (_cache[7] = [
                              createBaseVNode(
                                "i",
                                { class: "fa fa-check" },
                                null,
                                -1
                                /* HOISTED */
                              )
                            ])], 8, _hoisted_10)
                          ],
                          2
                          /* CLASS */
                        ),
                        createBaseVNode(
                          "td",
                          {
                            class: normalizeClass($setup.highlight(row, conflict.col, conflict.base_value))
                          },
                          [
                            createBaseVNode("p", null, [
                              (openBlock(true), createElementBlock(
                                Fragment,
                                null,
                                renderList(conflict.base_value.split("\n"), (line) => {
                                  return openBlock(), createElementBlock(
                                    Fragment,
                                    null,
                                    [
                                      createTextVNode(
                                        toDisplayString(line) + " ",
                                        1
                                        /* TEXT */
                                      ),
                                      _cache[8] || (_cache[8] = createBaseVNode(
                                        "br",
                                        null,
                                        null,
                                        -1
                                        /* HOISTED */
                                      ))
                                    ],
                                    64
                                    /* STABLE_FRAGMENT */
                                  );
                                }),
                                256
                                /* UNKEYED_FRAGMENT */
                              ))
                            ]),
                            createBaseVNode("button", {
                              title: "Don't change the value",
                              class: "btn btn-success",
                              onClick: ($event) => $setup.resolved[row][conflict.col] = conflict.base_value
                            }, [..._cache[9] || (_cache[9] = [
                              createBaseVNode(
                                "i",
                                { class: "fa fa-check" },
                                null,
                                -1
                                /* HOISTED */
                              )
                            ])], 8, _hoisted_11)
                          ],
                          2
                          /* CLASS */
                        ),
                        createBaseVNode(
                          "td",
                          {
                            class: normalizeClass($setup.highlight(row, conflict.col, conflict.their_value))
                          },
                          [
                            createBaseVNode("p", null, [
                              (openBlock(true), createElementBlock(
                                Fragment,
                                null,
                                renderList(conflict.their_value.split("\n"), (line) => {
                                  return openBlock(), createElementBlock(
                                    Fragment,
                                    null,
                                    [
                                      createTextVNode(
                                        toDisplayString(line) + " ",
                                        1
                                        /* TEXT */
                                      ),
                                      _cache[10] || (_cache[10] = createBaseVNode(
                                        "br",
                                        null,
                                        null,
                                        -1
                                        /* HOISTED */
                                      ))
                                    ],
                                    64
                                    /* STABLE_FRAGMENT */
                                  );
                                }),
                                256
                                /* UNKEYED_FRAGMENT */
                              ))
                            ]),
                            createBaseVNode("button", {
                              title: "Use their value",
                              class: "btn btn-success",
                              onClick: ($event) => $setup.resolved[row][conflict.col] = conflict.their_value
                            }, [..._cache[11] || (_cache[11] = [
                              createBaseVNode(
                                "i",
                                { class: "fa fa-check" },
                                null,
                                -1
                                /* HOISTED */
                              )
                            ])], 8, _hoisted_122)
                          ],
                          2
                          /* CLASS */
                        ),
                        createBaseVNode("td", null, [
                          $setup.resolved?.[row]?.[conflict.col] !== void 0 ? withDirectives((openBlock(), createElementBlock("textarea", {
                            key: 0,
                            type: "text",
                            "onUpdate:modelValue": ($event) => $setup.resolved[row][conflict.col] = $event,
                            style: { "width": "300px" }
                          }, "              ", 8, _hoisted_132)), [
                            [vModelText, $setup.resolved[row][conflict.col]]
                          ]) : createCommentVNode("v-if", true)
                        ])
                      ]);
                    }),
                    256
                    /* UNKEYED_FRAGMENT */
                  ))
                ])
              ])
            ])
          ]);
        }),
        256
        /* UNKEYED_FRAGMENT */
      ))
    ]);
  }

  // js/editor/Merger.vue
  Merger_default.render = render3;
  Merger_default.__file = "js/editor/Merger.vue";
  Merger_default.__scopeId = "data-v-576bac25";
  var Merger_default2 = Merger_default;

  // js/editor/HistoryService.ts
  var HistoryService = class {
    _folder;
    _fileName;
    _repo;
    constructor(folder, fileName, repo) {
      this._folder = folder;
      this._fileName = fileName;
      this._repo = repo;
      this._history = ref([]);
      this._future = ref([]);
    }
    _history;
    get history() {
      return this._history.value;
    }
    _future;
    get future() {
      return this._future.value;
    }
    canRedo() {
      return this._future.value.length > 0;
    }
    canUndo() {
      return this._history.value.length > 0;
    }
    canRestoreChanges() {
      return this.storedHistory().length > 0;
    }
    storedHistory() {
      const stored = localStorage.getItem(this.storageKey("history"));
      return stored ? JSON.parse(stored) : [];
    }
    storedFuture() {
      const stored = localStorage.getItem(this.storageKey("future"));
      return stored ? JSON.parse(stored) : [];
    }
    clear() {
      this._future.value = [];
      this._history.value = [];
      this.backupChanges();
    }
    backupChanges() {
      const history2 = JSON.stringify(this._history.value);
      localStorage.setItem(this.storageKey("history"), history2);
      const future = JSON.stringify(this._future.value);
      localStorage.setItem(this.storageKey("future"), future);
    }
    restoreChanges(table) {
      const jsonHistory = localStorage.getItem(this.storageKey("history"));
      this._history.value = JSON.parse(jsonHistory ?? "[]");
      const jsonFuture = localStorage.getItem(this.storageKey("future"));
      this._future.value = JSON.parse(jsonFuture ?? "[]");
      for (const change of this._history.value) {
        if (change.type === "change") {
          table.updateData([{ id: change.row, ...change.newFields }]);
        } else if (change.type === "delete") {
          table.deleteRow(change.row);
        } else if (change.type === "add") {
          table.addData([{ id: change.row, ...change.newFields }], true, change.position);
        }
      }
    }
    recordChange(value, oldValue, rowPosition, columnName) {
      const oldFields = typeof oldValue === "object" && oldValue !== null ? oldValue : {
        [columnName]: oldValue ?? ""
      };
      const newFields = typeof value === "object" && oldValue !== null ? value : {
        [columnName]: value ?? ""
      };
      if (Object.keys(oldFields).length !== Object.keys(newFields).length) {
        return;
      }
      if (Object.entries(oldFields).filter(([k, v]) => newFields[k] !== v).length === 0) {
        return;
      }
      const changeRecord = {
        type: "change",
        row: rowPosition,
        newFields,
        oldFields
      };
      this._history.value.push(changeRecord);
      this._future.value = [];
      this.backupChanges();
    }
    recordRowAdded(id, position, values = {}) {
      this._history.value?.push({ type: "add", row: id, position, newFields: values });
      this._future.value = [];
      this.backupChanges();
    }
    recordRowDeleted(id, position, data) {
      this._history.value?.push({ type: "delete", row: id, position, oldFields: { ...data } });
      this._future.value = [];
      this.backupChanges();
    }
    undo(table, steps = 1) {
      let result = false;
      let change;
      for (change = this._history.value.pop(); change && steps !== 0; steps--) {
        if (change?.type === "change") {
          table.updateData([{ id: change.row, ...change.oldFields }]);
          this._future.value.push(change);
          result = true;
        } else if (change?.type === "delete") {
          table.addData([{ id: change.row, ...change.oldFields }], true, change.position);
          this._future.value.push(change);
          result = true;
        } else if (change?.type === "add") {
          table.deleteRow(change.row);
          this._future.value.push(change);
          result = true;
        }
      }
      this.backupChanges();
      return result;
    }
    redo(table, steps = 1) {
      let result = false;
      let change;
      for (change = this._future.value.pop(); change && steps !== 0; steps--) {
        if (change?.type === "change") {
          table.updateData([{ id: change.row, ...change.newFields }]);
          this._history.value.push(change);
          result = true;
        } else if (change?.type === "delete") {
          table.deleteRow(change.row);
          this._history.value.push(change);
          result = true;
        } else if (change?.type === "add") {
          table.addData([{ id: change.row, ...change.newFields }], true, change.position);
          this._history.value.push(change);
          result = true;
        }
      }
      this.backupChanges();
      return result;
    }
    storageKey(subkey) {
      return `history_${this._repo}_${this._folder}_${this._fileName}_${subkey}`;
    }
  };

  // js/common/tabulator-extensions.ts
  function getCell(row, column) {
    const ret = row.getCell(column);
    return ret ? ret : null;
  }

  // sfc-script:/home/bjoern/development/onto-spread-ed/js/editor/Editor.vue?type=script
  var Editor_default = /* @__PURE__ */ defineComponent({
    __name: "Editor",
    setup(__props, { expose: __expose }) {
      __expose();
      const URL_PREFIX = URLS["prefix"];
      const { show: showToast, remove: removeToast } = useToastController();
      const table = ref(null);
      const tabulator = ref(null);
      const spreadsheetData = ref(null);
      const suggestions = ref([]);
      const tableData = computed2(() => spreadsheetData.value?.rows?.map((r, i) => ({
        id: i,
        ...r
      })) ?? []);
      const tableColumns = computed2(() => spreadsheetData.value?.header?.map((h2) => columnDefFor(h2, suggestions.value, () => tabulator.value)));
      const path = location.pathname.split("/edit/")[1];
      const repo = path.substring(0, path.indexOf("/"));
      const filePath = decodeURIComponent(path.substring(path.indexOf("/") + 1));
      const fileName = decodeURIComponent(filePath.split("/").at(-1));
      const fileFolder = filePath.substring(0, filePath.lastIndexOf("/"));
      const downloadPath = computed2(() => `https://raw.githubusercontent.com/${REPOSITORY_CONFIG?.full_name}/${REPOSITORY_CONFIG?.main_branch}/${filePath}`);
      const urlParams = new URLSearchParams(window.location.search);
      const navigateToRow = urlParams.has("row") ? Number.parseInt(urlParams.get("row") ?? "0") - 2 : null;
      const urlFilter = JSON.parse(urlParams.get("filter") ?? "null");
      const tableBuilt = ref(false);
      const selectedRows = ref([]);
      const showDiagnosticList = ref(false);
      const filterToDiagnostics = ref([]);
      const historyService = new HistoryService(fileFolder, fileName, repo);
      const submitCommitMessage = ref(`Updating ${fileName}`);
      const submitDetailedMessage = ref("");
      const mode = ref("edit");
      const mergeConflicts = ref([]);
      const mergedData = ref(null);
      const lock = ref(false);
      const saving = ref(false);
      const validating = ref(false);
      const verifying = ref(false);
      const locked = computed2(() => lock.value || !tableBuilt.value || saving.value || verifying.value);
      const valid = computed2(() => errors.value.length <= 0 && warnings.value.length <= 0);
      const canValidate = computed2(() => !!spreadsheetData.value?.header?.includes(COLUMN_NAMES.ID));
      const canReview = computed2(() => spreadsheetData.value?.header?.includes(COLUMN_NAMES.CURATOR) && spreadsheetData.value?.header?.includes(COLUMN_NAMES.TO_BE_REVIEWED_BY));
      const canVisualise = computed2(() => spreadsheetData.value?.header?.includes(COLUMN_NAMES.ID) && spreadsheetData.value?.header?.includes(COLUMN_NAMES.LABEL));
      const saveDialogOpen = ref(false);
      const diagnostics = ref({});
      const allDiagnostics = computed2(() => Object.values(diagnostics.value).flatMap((x) => x).sort((a, b) => a.diagnostic.row - b.diagnostic.row));
      const errors = computed2(() => allDiagnostics.value.filter((x) => x.type === "error"));
      const warnings = computed2(() => allDiagnostics.value.filter((x) => x.type === "warning"));
      const infos = computed2(() => allDiagnostics.value.filter((x) => x.type === "info"));
      const onBeforeUnload = (e) => {
        if (historyService.canUndo()) {
          e.preventDefault();
        }
      };
      const onWindowSizeChanged = debounce(() => {
        if (!tableBuilt.value || tabulator.value === null) {
          return;
        }
        const firstRow = tabulator.value.getRows("visible")?.[0];
        tabulator.value.setHeight(document.querySelector(".row.editor-row")?.getBoundingClientRect()?.height ?? 400);
        tabulator.value.scrollToRow(firstRow ?? 0, "top");
      });
      const onKeyPress = (e) => {
        if (tabulator.value) {
          if (e.ctrlKey && e.key === "z") {
            if (!document.execCommand("undo", false)) {
              historyService.undo(tabulator.value);
            }
            e.preventDefault();
          }
          if (e.ctrlKey && (e.key === "y" || e.key === "Z")) {
            if (!document.execCommand("redo", false)) {
              historyService.redo(tabulator.value);
            }
            e.preventDefault();
          }
          if (e.ctrlKey && e.key === "s") {
            if (!locked.value && historyService.canUndo()) {
              saveChanges();
            }
            e.preventDefault();
          }
        }
      };
      let checkForUpdatesTimer;
      onMounted(() => {
        loadData();
        window.addEventListener("resize", onWindowSizeChanged);
        window.addEventListener("beforeunload", onBeforeUnload);
        window.addEventListener("keydown", onKeyPress);
      });
      onUnmounted(() => {
        window.removeEventListener("resize", onWindowSizeChanged);
        window.removeEventListener("beforeunload", onBeforeUnload);
        window.removeEventListener("keydown", onKeyPress);
        if (checkForUpdatesTimer) {
          clearInterval(checkForUpdatesTimer);
        }
      });
      watch2(showDiagnosticList, () => {
        onWindowSizeChanged();
      });
      watchEffect(() => {
        if (spreadsheetData.value !== null && tabulator.value === null) {
          const instance = new TabulatorFull$1(table.value, {
            data: tableData.value,
            //link data to table
            reactiveData: true,
            //enable data reactivity
            columns: tableColumns.value,
            //define table columns
            columnDefaults: {
              editable: () => !locked.value,
              tooltip(_, cell) {
                const messages = diagnostics.value[cell.getRow().getData()["id"]] ?? [];
                if (messages.length === 0) {
                  return "";
                }
                function diagnosticHTML(d) {
                  const badgeClass = d.type === "error" ? "danger" : d.type;
                  return `<li><span class="badge text-bg-${badgeClass}" style="text-transform: capitalize">${d.type}</span>
                      ${DIAGNOSTIC_DATA[d.diagnostic.type].message(d.diagnostic)}</li>`;
                }
                return `<ul style="list-style: none">${messages.map(diagnosticHTML).join("\n")}</ul>`;
              }
            },
            groupToggleElement: "header",
            nestedFieldSeparator: "|>",
            layout: "fitColumns",
            movableRows: false,
            persistence: true,
            history: true,
            //records table interaction
            scrollToRowPosition: "bottom",
            //for scrollToRow()
            scrollToRowIfVisible: false,
            //don't scroll if row already on screen
            height: document.querySelector(".row.editor-row")?.scrollHeight,
            selectableRows: "highlight",
            rowHeader: {
              formatter: "rowSelection",
              titleFormatter: "rowSelection",
              headerSort: false,
              resizable: false,
              frozen: true,
              headerHozAlign: "center",
              hozAlign: "center",
              width: 50
            },
            //highlight on load table:
            rowFormatter: (row) => {
              const data = row.getData();
              setRowColor(row, data);
              if (data[COLUMN_NAMES.CURATOR]?.indexOf(LOGIN_INITIALS) >= 0) {
                row.getElement()?.classList?.add("assigned-to-me");
              } else {
                row.getElement()?.classList?.remove("assigned-to-me");
              }
              row.getElement()?.classList?.remove("has-error", "has-warning", "changed");
              row.getCells().forEach((c) => c.getElement()?.classList?.remove("has-error", "has-warning", "changed"));
              for (const change of historyService.history) {
                if (change.row === row.getData()["id"]) {
                  if (change.type === "add") {
                    row.getElement()?.classList?.add("changed");
                  } else if (change.type === "change") {
                    for (const field in change.newFields) {
                      getCell(row, field)?.getElement()?.classList?.add("changed");
                    }
                  }
                }
              }
              const messages = diagnostics.value?.[data?.id] ?? [];
              for (const message of messages) {
                const d = message.diagnostic;
                if (d.type.match(/-parent/)) {
                  getCell(row, "Parent")?.getElement()?.classList?.add(`has-${message.type}`);
                } else if (d.type.match(/-label/)) {
                  getCell(row, "Label")?.getElement()?.classList?.add(`has-${message.type}`);
                } else if (d.type.match(/-domain/)) {
                  getCell(row, "Domain")?.getElement()?.classList?.add(`has-${message.type}`);
                } else if (d.type.match(/-range/)) {
                  getCell(row, "Range")?.getElement()?.classList?.add(`has-${message.type}`);
                } else if (d.type.match(/-id/)) {
                  getCell(row, "ID")?.getElement()?.classList?.add(`has-${message.type}`);
                } else if (d.type.match(/-relation-value/)) {
                  getCell(row, `REL '${d.relation?.label}'`)?.getElement()?.classList?.add(`has-${message.type}`);
                } else {
                  row.getElement().classList.add(`has-${message.type}`);
                }
              }
              if (navigateToRow === row.getIndex()) {
                row.getElement().style.boxShadow = "inset 0 0 10px 5px #ffcb00";
              }
            }
          });
          instance.on("tableBuilt", () => {
            tableBuilt.value = true;
            validate();
            if (urlFilter) {
              for (const field in urlFilter) {
                instance.setHeaderFilterValue(field, urlFilter[field]);
              }
            }
            if (history?.replaceState !== void 0 && urlFilter) {
              const newurl = window.location.protocol + "//" + window.location.host + window.location.pathname;
              window.history.replaceState({ path: newurl }, "", newurl);
            }
            if (navigateToRow !== null) {
              instance.scrollToRow(navigateToRow, "top");
            }
          });
          instance.on("rowSelectionChanged", (_, selected) => selectedRows.value = selected);
          instance.on("cellEdited", async (cell) => {
            historyService.recordChange(cell.getValue(), cell.getOldValue() ?? null, cell.getRow().getData()["id"], cell.getColumn().getField());
            cell.getRow().reformat();
          });
          tabulator.value = instance;
          const state = {};
          checkForUpdatesTimer = setInterval(() => checkForUpdates(state), 60 * 1e3);
        }
      });
      watchEffect(() => {
        if (tabulator.value === null || !tableBuilt.value) {
          return;
        }
        tabulator.value.setFilter((row) => filterToDiagnostics.value.length === 0 || !!diagnostics.value[row["id"]]?.find((d) => filterToDiagnostics.value.includes(d.type)));
      });
      watch2(tableBuilt, async () => {
        if (historyService.canRestoreChanges()) {
          const changes = historyService.storedHistory().map((c) => {
            if (c.type === "add") {
              return `<li>Added row ${c.row}</li>`;
            } else if (c.type === "change") {
              return `<li>Changed row ${c.row}: ${Object.keys(c.newFields ?? {}).map((f) => `${f} from "${c.oldFields?.[f]}" to "${c.newFields[f]}"`).join(", ")}</li>`;
            } else if (c.type === "delete") {
              return `<li>Deleted row ${c.row}</li>`;
            }
          }).join("\n");
          const restoreChanges = await confirmDialog({
            title: "Unsaved changes",
            message: `<p>You have unsaved changes. Do you want to restore them?</p><ul>${changes}</ul>`,
            buttons: {
              confirm: {
                label: "Restore",
                className: "btn-success"
              },
              cancel: {
                label: "Discard",
                className: "btn-danger"
              }
            }
          });
          if (restoreChanges) {
            historyService.restoreChanges(tabulator.value);
          } else {
            historyService.clear();
          }
        }
      }, { once: true });
      async function validateImmediate(progress2 = "toast") {
        if (!canValidate.value) {
          return;
        }
        verifying.value = true;
        let toast = null;
        if (progress2 === "toast") {
          toast = showToast?.({
            props: {
              value: true
            },
            component: h(BToast, null, {
              default: () => h("div", { style: "display: flex; align-items: center; gap: 16px" }, [
                h("div", { class: "spinner-border text-primary spinner-border-sm" }),
                "Validating ..."
              ])
            })
          }) ?? null;
        } else {
          validating.value = true;
        }
        const rows2 = tabulator?.value?.getData();
        if (!rows2) {
          return;
        }
        const data = {
          repository: REPOSITORY_CONFIG.short_name,
          spreadsheet: filePath,
          rows: rows2
        };
        try {
          const response = await fetch(`${URL_PREFIX}/api/validate/file`, {
            method: "POST",
            headers: {
              "Content-type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify(data)
          });
          const result = await response.json();
          diagnostics.value = {};
          for (const error of result.errors) {
            if (!diagnostics.value[error.row - 2]) {
              diagnostics.value[error.row - 2] = [];
            }
            diagnostics.value[error.row - 2].push({ type: "error", diagnostic: error, _id: -1 });
          }
          for (const warning of result.warnings) {
            if (!diagnostics.value[warning.row - 2]) {
              diagnostics.value[warning.row - 2] = [];
            }
            diagnostics.value[warning.row - 2].push({ type: "warning", diagnostic: warning, _id: -1 });
          }
          allDiagnostics.value.forEach((d, i) => {
            d["_id"] = i;
          });
          tabulator.value?.getRows()?.forEach((r) => r.reformat());
          if (toast) {
            removeToast?.(toast);
          } else {
            validating.value = false;
          }
          if (valid.value) {
            showToast?.({
              props: {
                value: 5e3,
                progressProps: {
                  variant: "success"
                }
              },
              component: h(BToast, { variant: "success" }, {
                default: () => h("div", { style: "display: flex; align-items: center; gap: 16px" }, [
                  h("i", { class: "fa fa-check" }),
                  h("span", null, "No errors found!")
                ])
              })
            });
          } else if (errors.value.length > 0) {
            showToast?.({
              props: {
                value: 5e3,
                progressProps: {
                  variant: "danger"
                }
              },
              component: h(BToast, { variant: "danger" }, {
                default: () => h("div", { style: "display: flex; align-items: center; gap: 16px" }, [
                  h("i", { class: "fa fa-circle-xmark" }),
                  h("span", null, `${errors.value.length} errors and ${warnings.value.length} warnings found`)
                ])
              })
            });
          } else {
            showToast?.({
              props: {
                value: 5e3,
                progressProps: {
                  variant: "warning"
                }
              },
              component: h(BToast, { variant: "warning" }, {
                default: () => h("div", { style: "display: flex; align-items: center; gap: 16px" }, [
                  h("i", { class: "fa fa-triangle-exclamation" }),
                  h("span", null, `${warnings.value.length} warnings found`)
                ])
              })
            });
          }
          showDiagnosticList.value = !valid.value;
        } catch (e) {
          console.error(e);
          if (toast) {
            removeToast?.(toast);
          }
          showToast?.({
            props: {
              value: 5e3,
              progressProps: {
                variant: "danger"
              }
            },
            component: h(BToast, { variant: "danger" }, {
              default: () => h("div", { style: "display: flex; align-items: center; gap: 16px" }, [
                h("i", { class: "fa fa-triangle-exclamation" }),
                h("span", null, `Problem communicating with the server`)
              ])
            })
          });
        }
        verifying.value = false;
      }
      const validate = debounce(() => validateImmediate());
      const onError = (message) => alertDialog({
        title: "Failed to load data",
        message: `The spreadsheet '${filePath}' could not be loaded: ${message}`
      });
      async function loadData() {
        try {
          const response = await (await fetch(`${URL_PREFIX}/api/edit/get/${repo}/${filePath}`)).json();
          if (!response.success) {
            await onError(response.error);
          } else {
            spreadsheetData.value = response.spreadsheet;
          }
          setTimeout(() => loadSuggestions(), 0);
        } catch (e) {
          await onError(e.toString());
        }
      }
      async function loadSuggestions() {
        try {
          const response = await (await fetch(`${URL_PREFIX}/api/edit/suggestions/${repo}`)).json();
          if (!response.success) {
            await onError(response.error);
          } else {
            suggestions.value.splice(0, suggestions.value.length);
            suggestions.value.push(...response.suggestions);
          }
        } catch (e) {
          await onError(e.toString());
        }
      }
      async function scrollAndHighlightRow(position) {
        const row = tabulator.value?.getRow(position);
        await row?.scrollTo("center", true);
        row?.getElement()?.classList?.add("highlight");
        await new Promise((r) => setTimeout(r, 3e3));
        row?.getElement()?.classList?.remove("highlight");
      }
      async function checkForUpdates(state) {
        if (state.toast || locked.value) {
          return;
        }
        const response = await fetch(`${URL_PREFIX}/checkForUpdates`, {
          method: "POST",
          headers: {
            "Content-TYpe": "application/x-www-form-urlencoded",
            "Accept": "application/json"
          },
          body: `repo_key=${repo}&folder=${fileFolder}&spreadsheet=${fileName}&file_sha=${spreadsheetData.value?.file_sha}`
        });
        const result = await response.json();
        if (result.message === "Success") {
        } else {
          state.toast = showToast?.({
            props: {
              value: true,
              variant: "warning",
              pos: "top-center"
            },
            component: h(BToast, null, {
              default: () => h("div", { style: "display: flex; align-items: center; gap: 16px" }, [
                h("div", { class: "spinner-grow spinner-grow-sm text-white mr-2" }),
                "Updates available"
              ])
            })
          }) ?? null;
        }
      }
      function saveCurator(row) {
        const data = row.getData();
        if (data[COLUMN_NAMES.CURATOR] !== void 0) {
          const cellValue = data[COLUMN_NAMES.CURATOR];
          const curators = [...cellValue?.split(";")?.map((x) => x.trim()), LOGIN_INITIALS].filter((x, i, self2) => !!x && self2.indexOf(x) === i).join("; ");
          const prev = data[COLUMN_NAMES.CURATOR];
          data[COLUMN_NAMES.CURATOR] = curators;
          if (curators !== "") {
            const cellValue2 = data[COLUMN_NAMES.CURATOR];
            const rowValue = data["id"];
            const columnValue = "Curator";
            historyService.recordChange(cellValue2, prev, rowValue, columnValue);
          }
        }
      }
      function clearFormatting() {
        tabulator.value?.clearSort();
        tabulator.value?.clearFilter(true);
      }
      function sendVisualisationRequest(filter, sendType) {
        const rows2 = sendType == "select" ? selectedRows.value : tabulator.value?.getRows() ?? [];
        const indices = rows2.map((r) => r.getIndex());
        indices.sort(function(a, b) {
          return a - b;
        });
        window.open("", "VisualisationWindow");
        const form = document.createElement("form");
        form.setAttribute("method", "post");
        form.setAttribute("action", URL_PREFIX + "/openVisualise");
        form.setAttribute("target", "VisualisationWindow");
        const input2 = document.createElement("input");
        input2.type = "hidden";
        input2.name = "sheet";
        input2.value = filePath;
        form.appendChild(input2);
        const input22 = document.createElement("input");
        input22.type = "hidden";
        input22.name = "repo";
        input22.value = REPOSITORY_CONFIG.short_name;
        form.appendChild(input22);
        const input4 = document.createElement("input");
        input4.type = "hidden";
        input4.name = "table";
        input4.value = JSON.stringify(tabulator?.value?.getData());
        form.appendChild(input4);
        const input5 = document.createElement("input");
        input5.type = "hidden";
        input5.name = "indices";
        input5.value = JSON.stringify(indices);
        form.appendChild(input5);
        const input6 = document.createElement("input");
        input6.type = "hidden";
        input6.name = "filter";
        input6.value = JSON.stringify(filter);
        form.appendChild(input6);
        document.body.appendChild(form);
        form.target = "VisualisationWindow";
        form.submit();
        document.body.removeChild(form);
      }
      async function saveChanges() {
        await validateImmediate("popup");
        if (!valid.value) {
          const saveValidationMessage = `<ul style="list-style: none; padding: 0; margin: 0;">${allDiagnostics.value.map((m) => `<li style="margin: 0; padding: 0; display: block"><span class="badge text-bg-${m.type === "error" ? "danger" : m.type}">${m.type}</span>
                            Row ${m.diagnostic.row}: ${DIAGNOSTIC_DATA[m.diagnostic.type].message(m.diagnostic)}</li>`).join("\n")}</ul>`;
          bootbox.dialog({
            title: "There are validation errors, are you sure you want to save?",
            message: saveValidationMessage,
            buttons: {
              confirm: {
                label: "Submit anyway",
                className: "btn-danger",
                callback: function() {
                  saveDialogOpen.value = true;
                }
              },
              fix: {
                label: "Show errors in table",
                className: "btn-primary",
                callback: function() {
                  filterToDiagnostics.value = ["error", "warning"];
                }
              },
              cancel: {
                label: "Cancel",
                className: "btn-success"
              }
            }
          });
        } else {
          saveDialogOpen.value = true;
        }
      }
      function resetSaveDialog() {
        saveDialogOpen.value = false;
      }
      async function submitChanges(commitMessage, details, merge_strategy) {
        saveDialogOpen.value = false;
        saving.value = true;
        const spreadsheet = spreadsheetData.value;
        const initialData = JSON.stringify(spreadsheetData.value?.rows).replaceAll("&", "and");
        try {
          const data = {
            repo_key: spreadsheet.repo_name,
            file_sha: spreadsheet.file_sha,
            path: filePath,
            header: tabulator.value?.getColumns()?.map((c) => c.getField())?.slice(1),
            commit_msg: commitMessage,
            commit_msg_extra: details
          };
          if (merge_strategy === void 0) {
            data["initialData"] = initialData;
            data["rowData"] = JSON.stringify(tabulator.value?.getData());
          } else {
            data["merge_strategy"] = merge_strategy;
            data["rowData"] = JSON.stringify(mergedData.value);
          }
          data["rowData"] = data["rowData"].replaceAll("&", "and");
          const response = await fetch(`${URL_PREFIX}/save`, {
            method: "POST",
            headers: {
              "Content-type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify(data)
          });
          saving.value = false;
          try {
            const result = await response.json();
            if (result.success) {
              historyService.clear();
              mode.value = "edit";
              spreadsheetData.value.file_sha = result.new_sha;
              spreadsheetData.value.header = result.new_header;
              spreadsheetData.value.rows = result.new_rows;
              tabulator.value?.setData(tableData.value);
              validateImmediate();
              if (result.merge_strategy === "automatic") {
                await alertDialog({
                  title: `Automatic merge successful!`,
                  message: `Somebody else has changed the spreadsheet while you were editing - but the changes could be merged automatically. Your changes are saved to the repository.`,
                  className: "success"
                });
              } else {
                showToast?.({
                  props: {
                    value: 5e3,
                    progressProps: {
                      variant: "success"
                    }
                  },
                  component: h(BToast, { variant: "success" }, {
                    default: () => h("div", { style: "display: flex; align-items: center; gap: 16px" }, [
                      h("i", { class: "fa fa-save" }),
                      h("span", null, "Changes were saved successfully to the repository.")
                    ])
                  })
                });
              }
            } else {
              const error = result.error;
              if (error === "merge-conflict") {
                await alertDialog({
                  title: `Merge conflicts`,
                  message: `Somebody else has changed the spreadsheet while you were editing and your changes conflict with theirs. Please resolve the conflicts, choose to overwrite your changes, or cancel the operation.`
                }, "hidden");
                mergedData.value = result.merged_table;
                mergeConflicts.value = result.merge_conflicts;
                mode.value = "merge";
              } else {
                await alertDialog({
                  title: `An error occurred while saving the file`,
                  message: `<p>An error occured while saving the file:</p><p>${error}</p>`,
                  className: "danger"
                });
              }
            }
          } catch {
            await alertDialog({
              title: `Error ${response.status}`,
              message: `<p>
                    An error occured while saving the file:
                  </p>
                  ${await response.text()}`,
              className: "danger"
            });
          }
        } catch (e) {
          saving.value = false;
          await alertDialog({
            title: "Connection problem",
            message: "There was a problem communicating with the server. Your changes have probably not been saved!"
          });
        }
      }
      const RIBBON = {
        visualiseSheet() {
          sendVisualisationRequest([], "sheet");
        },
        visualiseSelection() {
          sendVisualisationRequest([], "select");
        },
        validate() {
          validate();
        },
        saveFile() {
          saveChanges();
        },
        undo() {
          if (tabulator.value) {
            historyService.undo(tabulator.value);
          }
        },
        redo() {
          if (tabulator.value) {
            historyService.redo(tabulator.value);
          }
        },
        async addRow() {
          const idNum = tabulator.value?.getDataCount() ?? 0;
          const rowObj = { id: idNum };
          for (const column of tabulator.value?.getColumns() ?? []) {
            const field = column.getField();
            if (!field) {
              continue;
            }
            rowObj[field] = "";
            switch (field?.toLowerCase()) {
              case COLUMN_NAMES.CURATION_STATUS.toLowerCase():
                rowObj[field] = CURATION_STATUS.PROPOSED;
                break;
              case COLUMN_NAMES.E_CIGO.toLowerCase():
              case COLUMN_NAMES.FUZZY_SET.toLowerCase():
                rowObj[field] = 0;
                break;
              case COLUMN_NAMES.RELATIONSHIP_TYPE.toLowerCase():
                rowObj[field] = "ObjectProperty";
                break;
            }
          }
          clearFormatting();
          await tabulator.value.addRow(rowObj);
          await tabulator.value?.scrollToRow(idNum, "top", true);
          historyService.recordRowAdded(rowObj["id"], tabulator.value.getRow(rowObj["id"]).getPosition(), rowObj);
        },
        async deleteSelectedRows() {
          if (selectedRows.value.length > 1) {
            if (!await confirmDialog({
              title: `Delete row${selectedRows.value.length === 1 ? "" : "s"}?`,
              message: `Do you really want to delete ${selectedRows.value.length === 1 ? "the row" : selectedRows.value.length + " rows"}?`
            })) {
              return;
            }
          }
          for (const row of selectedRows.value) {
            const data = row.getData();
            if (data[COLUMN_NAMES.ID] === void 0 || data[COLUMN_NAMES.CURATION_STATUS] === void 0) {
              historyService.recordRowDeleted(data["id"], row.getPosition(), data);
              row.deselect();
              tabulator.value?.deleteRow(row);
            } else {
              const cell = getCell(row, COLUMN_NAMES.ID);
              if (cell?.getValue() !== null && cell?.getValue().trim() !== "") {
                const prevCurationStatus = data[COLUMN_NAMES.CURATION_STATUS];
                data[COLUMN_NAMES.CURATION_STATUS] = CURATION_STATUS.OBSOLETE;
                await alertDialog({ message: "You can't delete a row that has already had an ID assigned. Setting row status to 'Obsolete' instead." });
                row.deselect();
                const prevCurator = data[COLUMN_NAMES.CURATION_STATUS];
                if (COLUMN_NAMES.CURATOR in data) {
                  data[COLUMN_NAMES.CURATOR] = [data[COLUMN_NAMES.CURATOR], LOGIN_INITIALS].filter((x) => !!x).join("; ");
                }
                const prev = {
                  [COLUMN_NAMES.CURATION_STATUS]: prevCurationStatus ?? null,
                  [COLUMN_NAMES.CURATOR]: prevCurator ?? null
                };
                const value = {
                  [COLUMN_NAMES.CURATION_STATUS]: data[COLUMN_NAMES.CURATION_STATUS],
                  [COLUMN_NAMES.CURATOR]: data[COLUMN_NAMES.CURATOR]
                };
                const rowValue = data["id"];
                historyService.recordChange(value, prev, rowValue);
              } else {
                historyService.recordRowDeleted(data["id"], row.getPosition(), data);
                row.deselect();
                tabulator.value?.deleteRow(row);
              }
            }
          }
        },
        async markAsReviewed() {
          for (let row of selectedRows.value) {
            if (getCell(row, COLUMN_NAMES.TO_BE_REVIEWED_BY) === null) {
              continue;
            }
            const data = row.getData();
            const prev = data[COLUMN_NAMES.TO_BE_REVIEWED_BY];
            const cell = getCell(row, COLUMN_NAMES.TO_BE_REVIEWED_BY);
            saveCurator(row);
            const cellValue = cell?.getValue();
            const reviewers = cellValue?.split(";")?.map((x) => x.trim()).filter((x) => x !== LOGIN_INITIALS).join("; ");
            await row.update({ [COLUMN_NAMES.TO_BE_REVIEWED_BY]: reviewers });
            row.deselect();
            const cellValueData = data[COLUMN_NAMES.TO_BE_REVIEWED_BY];
            const rowValue = data["id"];
            const columnValue = "To be reviewed by";
            historyService.recordChange(cellValueData, prev ?? null, rowValue, columnValue);
          }
          tabulator.value?.redraw();
        },
        highlightOwn() {
          table.value?.classList?.toggle("highlight-assigned");
        },
        async askForReview() {
          const result = await promptDialog({
            title: "Choose reviewers",
            inputType: "checkbox",
            inputOptions: ALL_INITIALS.map((i) => ({ value: i, text: i }))
          });
          if (result === null || result.length === 0) {
            return;
          }
          for (const row of selectedRows.value) {
            const cell = getCell(row, COLUMN_NAMES.TO_BE_REVIEWED_BY);
            if (cell === null) {
              continue;
            }
            const prev = cell.getValue();
            const reviewers = [cell.getValue()?.trim(), ...result].filter((x) => !!x).join("; ");
            row.update({ [COLUMN_NAMES.TO_BE_REVIEWED_BY]: reviewers });
            row.deselect();
            const cellValueData = reviewers;
            const rowValue = row.getData()["id"];
            const columnValue = "To be reviewed by";
            historyService.recordChange(cellValueData, prev ?? null, rowValue, columnValue);
          }
        },
        removeFilters() {
          tabulator.value?.clearFilter(true);
        },
        showHiddenColumns() {
          const allColumns = tabulator.value?.getColumns()?.slice(1) ?? [];
          for (const column of allColumns) {
            if (!column.isVisible()) {
              column.show();
            }
          }
        },
        resetColumnWidths() {
          const allColumns = tabulator.value?.getColumns()?.slice(1) ?? [];
          for (const column of allColumns) {
            column.setWidth(defColumnSize(column.getField()));
          }
        },
        filterToErrors() {
          const cur = filterToDiagnostics.value;
          filterToDiagnostics.value = cur.includes("error") ? cur.filter((x) => x !== "error") : ["error", ...cur];
        },
        filterToWarnings() {
          const cur = filterToDiagnostics.value;
          filterToDiagnostics.value = cur.includes("warning") ? cur.filter((x) => x !== "warning") : ["warning", ...cur];
        },
        filterToInfos() {
          const cur = filterToDiagnostics.value;
          filterToDiagnostics.value = cur.includes("info") ? cur.filter((x) => x !== "info") : ["info", ...cur];
        }
      };
      const MERGE_COMMANDS = {
        async save(strategy) {
          await submitChanges("Resolve merge conflicts", "", strategy);
        }
      };
      function defColumnSize(field) {
        const defaultColumnSize = 200;
        return {
          "e-cigo": 140,
          "fuzzy set": 140
        }[field] ?? defaultColumnSize;
      }
      const __returned__ = { URL_PREFIX, showToast, removeToast, table, tabulator, spreadsheetData, suggestions, tableData, tableColumns, path, repo, filePath, fileName, fileFolder, downloadPath, urlParams, navigateToRow, urlFilter, tableBuilt, selectedRows, showDiagnosticList, filterToDiagnostics, historyService, submitCommitMessage, submitDetailedMessage, mode, mergeConflicts, mergedData, lock, saving, validating, verifying, locked, valid, canValidate, canReview, canVisualise, saveDialogOpen, diagnostics, allDiagnostics, errors, warnings, infos, onBeforeUnload, onWindowSizeChanged, onKeyPress, get checkForUpdatesTimer() {
        return checkForUpdatesTimer;
      }, set checkForUpdatesTimer(v) {
        checkForUpdatesTimer = v;
      }, validateImmediate, validate, onError, loadData, loadSuggestions, scrollAndHighlightRow, checkForUpdates, saveCurator, clearFormatting, sendVisualisationRequest, saveChanges, resetSaveDialog, submitChanges, RIBBON, MERGE_COMMANDS, defColumnSize, Diagnostic: Diagnostic_default2, get BModal() {
        return BModal;
      }, get BSpinner() {
        return _sfc_main6;
      }, get BToastOrchestrator() {
        return _sfc_main28;
      }, Merger: Merger_default2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });

  // sfc-style:/home/bjoern/development/onto-spread-ed/js/editor/Editor.vue?type=style&index=0
  {
    const el = document.createElement("style");
    el.textContent = '.tabulator {\n  background-color: #888;\n  border: 1px solid #999;\n  font-size: 14px;\n  overflow: hidden;\n  position: relative;\n  text-align: left;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n.tabulator[tabulator-layout=fitDataFill] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n.tabulator[tabulator-layout=fitDataTable] {\n  display: inline-block;\n}\n.tabulator.tabulator-block-select, .tabulator.tabulator-ranges .tabulator-cell:not(.tabulator-editing) {\n  user-select: none;\n}\n.tabulator .tabulator-header {\n  background-color: #e6e6e6;\n  border-bottom: 1px solid #999;\n  box-sizing: border-box;\n  color: #555;\n  font-weight: 700;\n  outline: none;\n  overflow: hidden;\n  position: relative;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  white-space: nowrap;\n  width: 100%;\n}\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n.tabulator .tabulator-header .tabulator-header-contents {\n  overflow: hidden;\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n.tabulator .tabulator-header .tabulator-col {\n  background: #e6e6e6;\n  border-right: 1px solid #aaa;\n  box-sizing: border-box;\n  display: inline-flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  overflow: hidden;\n  position: relative;\n  text-align: left;\n  vertical-align: bottom;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  background: #cdcdcd;\n  border: 1px solid #999;\n  pointer-events: none;\n  position: absolute;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-range-highlight {\n  background-color: #d6d6d6;\n  color: #000;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-range-selected {\n  background-color: #3876ca;\n  color: #fff;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  padding: 4px;\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: 0.6;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n  white-space: nowrap;\n  width: 100%;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  text-overflow: clip;\n  white-space: normal;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  background: #fff;\n  border: 1px solid #999;\n  box-sizing: border-box;\n  padding: 1px;\n  width: 100%;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  align-items: center;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  right: 4px;\n  top: 0;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: 6px solid #bbb;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  height: 0;\n  width: 0;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  border-top: 1px solid #aaa;\n  display: flex;\n  margin-right: -1px;\n  overflow: hidden;\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  box-sizing: border-box;\n  margin-top: 2px;\n  position: relative;\n  text-align: center;\n  width: 100%;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  height: 0;\n  width: 0;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    background-color: #cdcdcd;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    border-bottom: 6px solid #555;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: 6px solid #bbb;\n  border-top: none;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    border-bottom: 6px solid #555;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: 6px solid #666;\n  border-top: none;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    border-top: 6px solid #555;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  text-orientation: mixed;\n  writing-mode: vertical-rl;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-bottom: 20px;\n  padding-right: 0;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  bottom: auto;\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n}\n.tabulator .tabulator-header .tabulator-frozen {\n  left: 0;\n  position: sticky;\n  z-index: 11;\n}\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  box-sizing: border-box;\n  display: inline-block;\n}\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n}\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n.tabulator .tabulator-header .tabulator-frozen-rows-holder {\n  display: inline-block;\n}\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n.tabulator .tabulator-tableholder {\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n  position: relative;\n  white-space: nowrap;\n  width: 100%;\n}\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  min-width: 100%;\n  width: 100%;\n}\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode=virtual] {\n  min-height: 100%;\n}\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  color: #ccc;\n  display: inline-block;\n  font-size: 20px;\n  font-weight: 700;\n  padding: 10px;\n  text-align: center;\n  white-space: normal;\n}\n.tabulator .tabulator-tableholder .tabulator-table {\n  background-color: #fff;\n  color: #333;\n  display: inline-block;\n  overflow: visible;\n  position: relative;\n  white-space: nowrap;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  background: #e2e2e2 !important;\n  font-weight: 700;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #aaa;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #aaa;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay {\n  inset: 0;\n  pointer-events: none;\n  position: absolute;\n  z-index: 10;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay .tabulator-range {\n  border: 1px solid #2975dd;\n  box-sizing: border-box;\n  position: absolute;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay .tabulator-range.tabulator-range-active:after {\n  background-color: #2975dd;\n  border-radius: 999px;\n  bottom: -3px;\n  content: "";\n  height: 6px;\n  position: absolute;\n  right: -3px;\n  width: 6px;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay .tabulator-range-cell-active {\n  border: 2px solid #2975dd;\n  box-sizing: border-box;\n  position: absolute;\n}\n.tabulator .tabulator-footer {\n  background-color: #e6e6e6;\n  border-top: 1px solid #999;\n  color: #555;\n  font-weight: 700;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  white-space: nowrap;\n}\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs {\n  margin-top: -5px;\n  overflow-x: auto;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab {\n  border: 1px solid #999;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  border-top: none;\n  display: inline-block;\n  font-size: 0.9em;\n  padding: 5px;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab:hover {\n  cursor: pointer;\n  opacity: 0.7;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab.tabulator-spreadsheet-tab-active {\n  background: #fff;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  box-sizing: border-box;\n  overflow: hidden;\n  text-align: left;\n  width: 100%;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n  display: inline-block;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  border-bottom: none;\n  margin-bottom: -5px;\n}\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: 400;\n}\n.tabulator .tabulator-footer .tabulator-paginator {\n  color: #555;\n  flex: 1;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  text-align: right;\n}\n.tabulator .tabulator-footer .tabulator-page-size {\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n}\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n.tabulator .tabulator-footer .tabulator-page {\n  background: hsla(0, 0%, 100%, 0.2);\n  border: 1px solid #aaa;\n  border-radius: 3px;\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n}\n.tabulator .tabulator-footer .tabulator-page.active {\n  color: #d00;\n}\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: 0.5;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-footer .tabulator-page:not(disabled):hover {\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-col-resize-handle {\n  display: inline-block;\n  margin-left: -3px;\n  margin-right: -3px;\n  position: relative;\n  vertical-align: middle;\n  width: 6px;\n  z-index: 11;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n}\n}\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  margin-right: 0;\n  width: 3px;\n}\n.tabulator .tabulator-col-resize-guide {\n  background-color: #999;\n  height: 100%;\n  margin-left: -0.5px;\n  opacity: 0.5;\n  position: absolute;\n  top: 0;\n  width: 4px;\n}\n.tabulator .tabulator-row-resize-guide {\n  background-color: #999;\n  height: 4px;\n  left: 0;\n  margin-top: -0.5px;\n  opacity: 0.5;\n  position: absolute;\n  width: 100%;\n}\n.tabulator .tabulator-alert {\n  align-items: center;\n  background: rgba(0, 0, 0, 0.4);\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  text-align: center;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n}\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  background: #fff;\n  border-radius: 10px;\n  display: inline-block;\n  font-size: 16px;\n  font-weight: 700;\n  margin: 0 auto;\n  padding: 10px 20px;\n}\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #d00;\n  color: #590000;\n}\n.tabulator-row {\n  background-color: #fff;\n  box-sizing: border-box;\n  min-height: 22px;\n  position: relative;\n}\n.tabulator-row.tabulator-row-even {\n  background-color: #efefef;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row.tabulator-selectable:hover {\n    background-color: #bbb;\n    cursor: pointer;\n}\n}\n.tabulator-row.tabulator-selected {\n  background-color: #9abcea;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row.tabulator-selected:hover {\n    background-color: #769bcc;\n    cursor: pointer;\n}\n}\n.tabulator-row.tabulator-row-moving {\n  background: #fff;\n  border: 1px solid #000;\n}\n.tabulator-row.tabulator-moving {\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  pointer-events: none;\n  position: absolute;\n  z-index: 15;\n}\n.tabulator-row.tabulator-range-highlight .tabulator-cell.tabulator-range-row-header {\n  background-color: #d6d6d6;\n  color: #000;\n}\n.tabulator-row.tabulator-range-highlight.tabulator-range-selected .tabulator-cell.tabulator-range-row-header, .tabulator-row.tabulator-range-selected .tabulator-cell.tabulator-range-row-header {\n  background-color: #3876ca;\n  color: #fff;\n}\n.tabulator-row .tabulator-row-resize-handle {\n  bottom: 0;\n  height: 5px;\n  left: 0;\n  position: absolute;\n  right: 0;\n}\n.tabulator-row .tabulator-row-resize-handle.prev {\n  bottom: auto;\n  top: 0;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n}\n}\n.tabulator-row .tabulator-responsive-collapse {\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #aaa;\n  box-sizing: border-box;\n  padding: 5px;\n}\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 14px;\n}\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n.tabulator-row .tabulator-cell {\n  border-right: 1px solid #aaa;\n  box-sizing: border-box;\n  display: inline-block;\n  outline: none;\n  overflow: hidden;\n  padding: 4px;\n  position: relative;\n  text-overflow: ellipsis;\n  vertical-align: middle;\n  white-space: nowrap;\n}\n.tabulator-row .tabulator-cell.tabulator-row-header {\n  background: #e6e6e6;\n  border-bottom: 1px solid #aaa;\n  border-right: 1px solid #999;\n}\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  background-color: inherit;\n  display: inline-block;\n  left: 0;\n  position: sticky;\n  z-index: 11;\n}\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #aaa;\n}\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #aaa;\n}\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1d68cd;\n  outline: none;\n  padding: 0;\n}\n.tabulator-row .tabulator-cell.tabulator-editing input, .tabulator-row .tabulator-cell.tabulator-editing select {\n  background: transparent;\n  border: 1px;\n  outline: none;\n}\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #d00;\n}\n.tabulator-row .tabulator-cell.tabulator-validation-fail input, .tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  background: transparent;\n  border: 1px;\n  color: #d00;\n}\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  background: #666;\n  height: 3px;\n  margin-top: 2px;\n  width: 100%;\n}\n.tabulator-row .tabulator-cell.tabulator-range-selected:not(.tabulator-range-only-cell-selected):not(.tabulator-range-row-header) {\n  background-color: #9abcea;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  border-bottom: 2px solid #aaa;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  display: inline-block;\n  height: 9px;\n  margin-right: 5px;\n  margin-top: -9px;\n  vertical-align: middle;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  align-items: center;\n  background: rgba(0, 0, 0, 0.1);\n  border: 1px solid #333;\n  border-radius: 2px;\n  display: inline-flex;\n  height: 11px;\n  justify-content: center;\n  margin-right: 5px;\n  overflow: hidden;\n  vertical-align: middle;\n  width: 11px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    background: rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n}\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  background: transparent;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  background: #333;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  align-items: center;\n  background: #666;\n  border-radius: 20px;\n  color: #fff;\n  display: inline-flex;\n  font-size: 1.1em;\n  font-weight: 700;\n  height: 15px;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  width: 15px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    cursor: pointer;\n    opacity: 0.7;\n}\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  border-radius: 14px;\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n}\n.tabulator-row.tabulator-group {\n  background: #ccc;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  box-sizing: border-box;\n  font-weight: 700;\n  min-width: 100%;\n  padding: 5px 5px 5px 10px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row.tabulator-group:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n    cursor: pointer;\n}\n}\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  border-bottom: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  margin-right: 10px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n.tabulator-row.tabulator-group .tabulator-arrow {\n  border-bottom: 6px solid transparent;\n  border-left: 6px solid #666;\n  border-right: 0;\n  border-top: 6px solid transparent;\n  display: inline-block;\n  height: 0;\n  margin-right: 16px;\n  vertical-align: middle;\n  width: 0;\n}\n.tabulator-row.tabulator-group span {\n  color: #d00;\n  margin-left: 10px;\n}\n.tabulator-toggle {\n  background: #dcdcdc;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n}\n.tabulator-toggle.tabulator-toggle-on {\n  background: #1c6cc2;\n}\n.tabulator-toggle .tabulator-toggle-switch {\n  background: #fff;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n}\n.tabulator-popup-container {\n  -webkit-overflow-scrolling: touch;\n  background: #fff;\n  border: 1px solid #aaa;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  display: inline-block;\n  font-size: 14px;\n  overflow-y: auto;\n  position: absolute;\n  z-index: 10000;\n}\n.tabulator-popup {\n  border-radius: 3px;\n  padding: 5px;\n}\n.tabulator-tooltip {\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  max-width: min(500px, 100%);\n  padding: 3px 5px;\n  pointer-events: none;\n}\n.tabulator-menu .tabulator-menu-item {\n  box-sizing: border-box;\n  padding: 5px 10px;\n  position: relative;\n  user-select: none;\n}\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: 0.5;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    background: #efefef;\n    cursor: pointer;\n}\n}\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu:after {\n  border-color: #aaa;\n  border-style: solid;\n  border-width: 1px 1px 0 0;\n  content: "";\n  display: inline-block;\n  height: 7px;\n  position: absolute;\n  right: 10px;\n  top: calc(5px + 0.4em);\n  transform: rotate(45deg);\n  vertical-align: top;\n  width: 7px;\n}\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #aaa;\n}\n.tabulator-edit-list {\n  -webkit-overflow-scrolling: touch;\n  font-size: 14px;\n  max-height: 200px;\n  overflow-y: auto;\n}\n.tabulator-edit-list .tabulator-edit-list-item {\n  color: #333;\n  outline: none;\n  padding: 4px;\n}\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  background: #1d68cd;\n  color: #fff;\n}\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid hsla(0, 0%, 100%, 0.5);\n}\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1d68cd;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-edit-list .tabulator-edit-list-item:hover {\n    background: #1d68cd;\n    color: #fff;\n    cursor: pointer;\n}\n}\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  color: #333;\n  padding: 4px;\n  text-align: center;\n}\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #aaa;\n  color: #333;\n  font-weight: 700;\n  padding: 6px 4px 4px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n.tabulator.tabulator-rtl {\n  direction: rtl;\n  text-align: initial;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  border-left: 1px solid #aaa;\n  border-right: initial;\n  text-align: initial;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-left: -1px;\n  margin-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-left: 25px;\n  padding-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: auto;\n}\n.tabulator.tabulator-rtl .tabulator-tableholder .tabulator-range-overlay .tabulator-range.tabulator-range-active:after {\n  background-color: #2975dd;\n  border-radius: 999px;\n  bottom: -3px;\n  content: "";\n  height: 6px;\n  left: -3px;\n  position: absolute;\n  right: auto;\n  width: 6px;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #aaa;\n  margin-left: 5px;\n  margin-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-left: 5px;\n  margin-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #aaa;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #aaa;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  margin-left: 0;\n  margin-right: -3px;\n  width: 3px;\n}\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n.tabulator-print-fullscreen {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 10000;\n}\nbody.tabulator-print-fullscreen-hide > :not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n.tabulator-print-table .tabulator-data-tree-branch {\n  border-bottom: 2px solid #aaa;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #aaa;\n  display: inline-block;\n  height: 9px;\n  margin-right: 5px;\n  margin-top: -9px;\n  vertical-align: middle;\n  width: 7px;\n}\n.tabulator-print-table .tabulator-print-table-group {\n  background: #ccc;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #aaa;\n  border-top: 1px solid #999;\n  box-sizing: border-box;\n  font-weight: 700;\n  min-width: 100%;\n  padding: 5px 5px 5px 10px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-print-table .tabulator-print-table-group:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n    cursor: pointer;\n}\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  border-bottom: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  margin-right: 10px;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  border-bottom: 6px solid transparent;\n  border-left: 6px solid #666;\n  border-right: 0;\n  border-top: 6px solid transparent;\n  display: inline-block;\n  height: 0;\n  margin-right: 16px;\n  vertical-align: middle;\n  width: 0;\n}\n.tabulator-print-table .tabulator-print-table-group span {\n  color: #d00;\n  margin-left: 10px;\n}\n.tabulator-print-table .tabulator-data-tree-control {\n  align-items: center;\n  background: rgba(0, 0, 0, 0.1);\n  border: 1px solid #333;\n  border-radius: 2px;\n  display: inline-flex;\n  height: 11px;\n  justify-content: center;\n  margin-right: 5px;\n  overflow: hidden;\n  vertical-align: middle;\n  width: 11px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-print-table .tabulator-data-tree-control:hover {\n    background: rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n}\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  background: transparent;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  background: #333;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator {\n  border: 1px solid #dee2e6;\n  font-size: 16px;\n  overflow: hidden;\n  position: relative;\n  text-align: left;\n  -webkit-transform: translateZ(0);\n  -moz-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  -o-transform: translateZ(0);\n  transform: translateZ(0);\n}\n.tabulator[tabulator-layout=fitDataFill] .tabulator-tableholder .tabulator-table {\n  min-width: 100%;\n}\n.tabulator[tabulator-layout=fitDataTable] {\n  display: inline-block;\n}\n.tabulator.tabulator-block-select, .tabulator.tabulator-ranges .tabulator-cell:not(.tabulator-editing) {\n  user-select: none;\n}\n.tabulator .tabulator-header {\n  background-color: #fff;\n  border-bottom: 1px solid #dee2e6;\n  box-sizing: border-box;\n  color: #555;\n  font-weight: 700;\n  outline: none;\n  overflow: hidden;\n  position: relative;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  white-space: nowrap;\n  width: 100%;\n}\n.tabulator .tabulator-header.tabulator-header-hidden {\n  display: none;\n}\n.tabulator .tabulator-header .tabulator-header-contents {\n  overflow: hidden;\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-header-contents .tabulator-headers {\n  display: inline-block;\n}\n.tabulator .tabulator-header .tabulator-col {\n  background: #fff;\n  border-right: 1px solid #aaa;\n  box-sizing: border-box;\n  display: inline-flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  overflow: hidden;\n  position: relative;\n  text-align: left;\n  vertical-align: bottom;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-moving {\n  background: #e6e6e6;\n  border: 1px solid #dee2e6;\n  pointer-events: none;\n  position: absolute;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-range-highlight {\n  background-color: #d6d6d6;\n  color: #000;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-range-selected {\n  background-color: #3876ca;\n  color: #fff;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  box-sizing: border-box;\n  padding: 4px;\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button {\n  padding: 0 8px;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-header-popup-button:hover {\n  cursor: pointer;\n  opacity: 0.6;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title-holder {\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title {\n  box-sizing: border-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  vertical-align: bottom;\n  white-space: nowrap;\n  width: 100%;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title.tabulator-col-title-wrap {\n  text-overflow: clip;\n  white-space: normal;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-title-editor {\n  background: #fff;\n  border: 1px solid #999;\n  box-sizing: border-box;\n  padding: 1px;\n  width: 100%;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-title .tabulator-header-popup-button + .tabulator-title-editor {\n  width: calc(100% - 22px);\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  align-items: center;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  right: 4px;\n  top: 0;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: 6px solid #bbb;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  height: 0;\n  width: 0;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  border-top: 1px solid #aaa;\n  display: flex;\n  margin-right: -1px;\n  overflow: hidden;\n  position: relative;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter {\n  box-sizing: border-box;\n  margin-top: 2px;\n  position: relative;\n  text-align: center;\n  width: 100%;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter textarea {\n  height: auto !important;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter svg {\n  margin-top: 3px;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input::-ms-clear {\n  height: 0;\n  width: 0;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-right: 25px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable.tabulator-col-sorter-element:hover {\n    background-color: #e6e6e6;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter {\n  color: #bbb;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    border-bottom: 6px solid #555;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=none] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: 6px solid #bbb;\n  border-top: none;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    border-bottom: 6px solid #555;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=ascending] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: 6px solid #666;\n  border-top: none;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter {\n  color: #666;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter.tabulator-col-sorter-element .tabulator-arrow:hover {\n    border-top: 6px solid #555;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-sortable[aria-sort=descending] .tabulator-col-content .tabulator-col-sorter .tabulator-arrow {\n  border-bottom: none;\n  border-top: 6px solid #666;\n  color: #666;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical .tabulator-col-content .tabulator-col-title {\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  text-orientation: mixed;\n  writing-mode: vertical-rl;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-col-vertical-flip .tabulator-col-title {\n  transform: rotate(180deg);\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-title {\n  padding-right: 0;\n  padding-top: 20px;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable.tabulator-col-vertical-flip .tabulator-col-title {\n  padding-bottom: 20px;\n  padding-right: 0;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-vertical.tabulator-sortable .tabulator-col-sorter {\n  bottom: auto;\n  justify-content: center;\n  left: 0;\n  right: 0;\n  top: 4px;\n}\n.tabulator .tabulator-header .tabulator-frozen {\n  left: 0;\n  position: sticky;\n  z-index: 11;\n}\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #dee2e6;\n}\n.tabulator .tabulator-header .tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #dee2e6;\n}\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  background: #fff !important;\n  border-bottom: 1px solid #aaa;\n  border-top: 1px solid #dee2e6;\n  box-sizing: border-box;\n  display: inline-block;\n}\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row {\n  background: #fff !important;\n}\n.tabulator .tabulator-header .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n.tabulator .tabulator-header .tabulator-frozen-rows-holder {\n  display: inline-block;\n}\n.tabulator .tabulator-header .tabulator-frozen-rows-holder:empty {\n  display: none;\n}\n.tabulator .tabulator-tableholder {\n  -webkit-overflow-scrolling: touch;\n  overflow: auto;\n  position: relative;\n  white-space: nowrap;\n  width: 100%;\n}\n.tabulator .tabulator-tableholder:focus {\n  outline: none;\n}\n.tabulator .tabulator-tableholder .tabulator-placeholder {\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  min-width: 100%;\n  width: 100%;\n}\n.tabulator .tabulator-tableholder .tabulator-placeholder[tabulator-render-mode=virtual] {\n  min-height: 100%;\n}\n.tabulator .tabulator-tableholder .tabulator-placeholder .tabulator-placeholder-contents {\n  color: #ccc;\n  display: inline-block;\n  font-size: 20px;\n  font-weight: 700;\n  padding: 10px;\n  text-align: center;\n  white-space: normal;\n}\n.tabulator .tabulator-tableholder .tabulator-table {\n  background-color: #fff;\n  color: #333;\n  display: inline-block;\n  overflow: visible;\n  position: relative;\n  white-space: nowrap;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs {\n  background: #dadfe4 !important;\n  font-weight: 700;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-top {\n  border-bottom: 2px solid #dee2e6;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.tabulator-calcs.tabulator-calcs-bottom {\n  border-top: 2px solid #dee2e6;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay {\n  inset: 0;\n  pointer-events: none;\n  position: absolute;\n  z-index: 10;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay .tabulator-range {\n  border: 1px solid #2975dd;\n  box-sizing: border-box;\n  position: absolute;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay .tabulator-range.tabulator-range-active:after {\n  background-color: #2975dd;\n  border-radius: 999px;\n  bottom: -3px;\n  content: "";\n  height: 6px;\n  position: absolute;\n  right: -3px;\n  width: 6px;\n}\n.tabulator .tabulator-tableholder .tabulator-range-overlay .tabulator-range-cell-active {\n  border: 2px solid #2975dd;\n  box-sizing: border-box;\n  position: absolute;\n}\n.tabulator .tabulator-footer {\n  background-color: #e6e6e6;\n  border-top: 1px solid #dee2e6;\n  color: #555;\n  font-weight: 700;\n  user-select: none;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  white-space: nowrap;\n}\n.tabulator .tabulator-footer .tabulator-footer-contents {\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 5px 10px;\n}\n.tabulator .tabulator-footer .tabulator-footer-contents:empty {\n  display: none;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs {\n  margin-top: -5px;\n  overflow-x: auto;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab {\n  border: 1px solid #dee2e6;\n  border-bottom-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  border-top: none;\n  display: inline-block;\n  font-size: 0.9em;\n  padding: 5px;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab:hover {\n  cursor: pointer;\n  opacity: 0.7;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab.tabulator-spreadsheet-tab-active {\n  background: #fff;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder {\n  background: #f3f3f3 !important;\n  border-bottom: 1px solid #dee2e6;\n  border-top: 1px solid #dee2e6;\n  box-sizing: border-box;\n  overflow: hidden;\n  text-align: left;\n  width: 100%;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  background: #f3f3f3 !important;\n  display: inline-block;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder .tabulator-row .tabulator-col-resize-handle {\n  display: none;\n}\n.tabulator .tabulator-footer .tabulator-calcs-holder:only-child {\n  border-bottom: none;\n  margin-bottom: -5px;\n}\n.tabulator .tabulator-footer > * + .tabulator-page-counter {\n  margin-left: 10px;\n}\n.tabulator .tabulator-footer .tabulator-page-counter {\n  font-weight: 400;\n}\n.tabulator .tabulator-footer .tabulator-paginator {\n  color: #555;\n  flex: 1;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  text-align: right;\n}\n.tabulator .tabulator-footer .tabulator-page-size {\n  border: 1px solid #dee2e6;\n  border-radius: 3px;\n  display: inline-block;\n  margin: 0 5px;\n  padding: 2px 5px;\n}\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0 7px;\n}\n.tabulator .tabulator-footer .tabulator-page {\n  background: hsla(0, 0%, 100%, 0.2);\n  border: 1px solid #dee2e6;\n  border-radius: 3px;\n  display: inline-block;\n  margin: 0 2px;\n  padding: 2px 5px;\n}\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  opacity: 0.5;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-footer .tabulator-page:not(disabled):hover {\n    background: rgba(0, 0, 0, 0.2);\n    color: #fff;\n    cursor: pointer;\n}\n}\n.tabulator .tabulator-col-resize-handle {\n  display: inline-block;\n  margin-left: -3px;\n  margin-right: -3px;\n  position: relative;\n  vertical-align: middle;\n  width: 6px;\n  z-index: 11;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-col-resize-handle:hover {\n    cursor: ew-resize;\n}\n}\n.tabulator .tabulator-col-resize-handle:last-of-type {\n  margin-right: 0;\n  width: 3px;\n}\n.tabulator .tabulator-col-resize-guide {\n  background-color: #999;\n  height: 100%;\n  margin-left: -0.5px;\n  opacity: 0.5;\n  position: absolute;\n  top: 0;\n  width: 4px;\n}\n.tabulator .tabulator-row-resize-guide {\n  background-color: #999;\n  height: 4px;\n  left: 0;\n  margin-top: -0.5px;\n  opacity: 0.5;\n  position: absolute;\n  width: 100%;\n}\n.tabulator .tabulator-alert {\n  align-items: center;\n  background: rgba(0, 0, 0, 0.4);\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  text-align: center;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n}\n.tabulator .tabulator-alert .tabulator-alert-msg {\n  background: #fff;\n  border-radius: 10px;\n  display: inline-block;\n  font-size: 16px;\n  font-weight: 700;\n  margin: 0 auto;\n  padding: 10px 20px;\n}\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-msg {\n  border: 4px solid #333;\n  color: #000;\n}\n.tabulator .tabulator-alert .tabulator-alert-msg.tabulator-alert-state-error {\n  border: 4px solid #d00;\n  color: #590000;\n}\n.tabulator-row {\n  background-color: #fff;\n  box-sizing: border-box;\n  min-height: 24px;\n  position: relative;\n}\n.tabulator-row.tabulator-row-even {\n  background-color: #e9ecef;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row.tabulator-selectable:hover {\n    background-color: #ced4da;\n    cursor: pointer;\n}\n}\n.tabulator-row.tabulator-selected {\n  background-color: #9abcea;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row.tabulator-selected:hover {\n    background-color: #769bcc;\n    cursor: pointer;\n}\n}\n.tabulator-row.tabulator-row-moving {\n  background: #fff;\n  border: 1px solid #000;\n}\n.tabulator-row.tabulator-moving {\n  border-bottom: 1px solid #dee2e6;\n  border-top: 1px solid #dee2e6;\n  pointer-events: none;\n  position: absolute;\n  z-index: 15;\n}\n.tabulator-row.tabulator-range-highlight .tabulator-cell.tabulator-range-row-header {\n  background-color: #d6d6d6;\n  color: #000;\n}\n.tabulator-row.tabulator-range-highlight.tabulator-range-selected .tabulator-cell.tabulator-range-row-header, .tabulator-row.tabulator-range-selected .tabulator-cell.tabulator-range-row-header {\n  background-color: #3876ca;\n  color: #fff;\n}\n.tabulator-row .tabulator-row-resize-handle {\n  bottom: 0;\n  height: 5px;\n  left: 0;\n  position: absolute;\n  right: 0;\n}\n.tabulator-row .tabulator-row-resize-handle.prev {\n  bottom: auto;\n  top: 0;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row .tabulator-row-resize-handle:hover {\n    cursor: ns-resize;\n}\n}\n.tabulator-row .tabulator-responsive-collapse {\n  border-bottom: 1px solid #dee2e6;\n  border-top: 1px solid #dee2e6;\n  box-sizing: border-box;\n  padding: 5px;\n}\n.tabulator-row .tabulator-responsive-collapse:empty {\n  display: none;\n}\n.tabulator-row .tabulator-responsive-collapse table {\n  font-size: 16px;\n}\n.tabulator-row .tabulator-responsive-collapse table tr td {\n  position: relative;\n}\n.tabulator-row .tabulator-responsive-collapse table tr td:first-of-type {\n  padding-right: 10px;\n}\n.tabulator-row .tabulator-cell {\n  border-right: 1px solid #dee2e6;\n  box-sizing: border-box;\n  display: inline-block;\n  outline: none;\n  overflow: hidden;\n  padding: 4px;\n  position: relative;\n  text-overflow: ellipsis;\n  vertical-align: middle;\n  white-space: nowrap;\n}\n.tabulator-row .tabulator-cell.tabulator-row-header {\n  border-bottom: 1px solid #dee2e6;\n}\n.tabulator-row .tabulator-cell.tabulator-frozen {\n  background-color: inherit;\n  display: inline-block;\n  left: 0;\n  position: sticky;\n  z-index: 11;\n}\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-right: 2px solid #dee2e6;\n}\n.tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-left: 2px solid #dee2e6;\n}\n.tabulator-row .tabulator-cell.tabulator-editing {\n  border: 1px solid #1d68cd;\n  outline: none;\n  padding: 0;\n}\n.tabulator-row .tabulator-cell.tabulator-editing input, .tabulator-row .tabulator-cell.tabulator-editing select {\n  background: transparent;\n  border: 1px;\n  outline: none;\n}\n.tabulator-row .tabulator-cell.tabulator-validation-fail {\n  border: 1px solid #d00;\n}\n.tabulator-row .tabulator-cell.tabulator-validation-fail input, .tabulator-row .tabulator-cell.tabulator-validation-fail select {\n  background: transparent;\n  border: 1px;\n  color: #d00;\n}\n.tabulator-row .tabulator-cell.tabulator-row-handle {\n  align-items: center;\n  display: inline-flex;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n}\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box {\n  width: 80%;\n}\n.tabulator-row .tabulator-cell.tabulator-row-handle .tabulator-row-handle-box .tabulator-row-handle-bar {\n  background: #666;\n  height: 3px;\n  margin-top: 2px;\n  width: 100%;\n}\n.tabulator-row .tabulator-cell.tabulator-range-selected:not(.tabulator-range-only-cell-selected):not(.tabulator-range-row-header) {\n  background-color: #9abcea;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch-empty {\n  display: inline-block;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  border-bottom: 2px solid #dee2e6;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #dee2e6;\n  display: inline-block;\n  height: 9px;\n  margin-right: 5px;\n  margin-top: -9px;\n  vertical-align: middle;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  align-items: center;\n  background: rgba(0, 0, 0, 0.1);\n  border: 1px solid #333;\n  border-radius: 2px;\n  display: inline-flex;\n  height: 11px;\n  justify-content: center;\n  margin-right: 5px;\n  overflow: hidden;\n  vertical-align: middle;\n  width: 11px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row .tabulator-cell .tabulator-data-tree-control:hover {\n    background: rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n}\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  background: transparent;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  background: #333;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle {\n  align-items: center;\n  background: #666;\n  border-radius: 20px;\n  color: #fff;\n  display: inline-flex;\n  font-size: 1.1em;\n  font-weight: 700;\n  height: 15px;\n  justify-content: center;\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  -o-user-select: none;\n  width: 15px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle:hover {\n    cursor: pointer;\n    opacity: 0.7;\n}\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-close {\n  display: initial;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle.open .tabulator-responsive-collapse-toggle-open {\n  display: none;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle svg {\n  stroke: #fff;\n}\n.tabulator-row .tabulator-cell .tabulator-responsive-collapse-toggle .tabulator-responsive-collapse-toggle-close {\n  display: none;\n}\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\n  border-radius: 14px;\n  display: inline-block;\n  height: 14px;\n  width: 14px;\n}\n.tabulator-row.tabulator-group {\n  background: #ccc;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #dee2e6;\n  border-top: 1px solid #999;\n  box-sizing: border-box;\n  font-weight: 700;\n  min-width: 100%;\n  padding: 5px 5px 5px 10px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-row.tabulator-group:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n    cursor: pointer;\n}\n}\n.tabulator-row.tabulator-group.tabulator-group-visible .tabulator-arrow {\n  border-bottom: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  margin-right: 10px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-1 {\n  padding-left: 30px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-2 {\n  padding-left: 50px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-3 {\n  padding-left: 70px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-4 {\n  padding-left: 90px;\n}\n.tabulator-row.tabulator-group.tabulator-group-level-5 {\n  padding-left: 110px;\n}\n.tabulator-row.tabulator-group .tabulator-group-toggle {\n  display: inline-block;\n}\n.tabulator-row.tabulator-group .tabulator-arrow {\n  border-bottom: 6px solid transparent;\n  border-left: 6px solid #666;\n  border-right: 0;\n  border-top: 6px solid transparent;\n  display: inline-block;\n  height: 0;\n  margin-right: 16px;\n  vertical-align: middle;\n  width: 0;\n}\n.tabulator-row.tabulator-group span {\n  color: #d00;\n  margin-left: 10px;\n}\n.tabulator-toggle {\n  background: #dcdcdc;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n}\n.tabulator-toggle.tabulator-toggle-on {\n  background: #1c6cc2;\n}\n.tabulator-toggle .tabulator-toggle-switch {\n  background: #fff;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n}\n.tabulator-popup-container {\n  -webkit-overflow-scrolling: touch;\n  border: 1px solid #dee2e6;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  display: inline-block;\n  font-size: 16px;\n  overflow-y: auto;\n  position: absolute;\n  z-index: 10000;\n}\n.tabulator-popup {\n  border-radius: 3px;\n  padding: 5px;\n}\n.tabulator-tooltip {\n  border-radius: 2px;\n  box-shadow: none;\n  font-size: 12px;\n  max-width: min(500px, 100%);\n  padding: 3px 5px;\n  pointer-events: none;\n}\n.tabulator-menu .tabulator-menu-item {\n  box-sizing: border-box;\n  padding: 5px 10px;\n  position: relative;\n  user-select: none;\n}\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-disabled {\n  opacity: 0.5;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-menu .tabulator-menu-item:not(.tabulator-menu-item-disabled):hover {\n    background: #e9ecef;\n    cursor: pointer;\n}\n}\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu {\n  padding-right: 25px;\n}\n.tabulator-menu .tabulator-menu-item.tabulator-menu-item-submenu:after {\n  border-color: #dee2e6;\n  border-style: solid;\n  border-width: 1px 1px 0 0;\n  content: "";\n  display: inline-block;\n  height: 7px;\n  position: absolute;\n  right: 10px;\n  top: calc(5px + 0.4em);\n  transform: rotate(45deg);\n  vertical-align: top;\n  width: 7px;\n}\n.tabulator-menu .tabulator-menu-separator {\n  border-top: 1px solid #dee2e6;\n}\n.tabulator-edit-list {\n  -webkit-overflow-scrolling: touch;\n  font-size: 16px;\n  max-height: 200px;\n  overflow-y: auto;\n}\n.tabulator-edit-list .tabulator-edit-list-item {\n  color: #333;\n  outline: none;\n  padding: 4px;\n}\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  background: #1d68cd;\n}\n.tabulator-edit-list .tabulator-edit-list-item.focused {\n  outline: 1px solid #1d68cd;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-edit-list .tabulator-edit-list-item:hover {\n    background: #1d68cd;\n    color: #fff;\n    cursor: pointer;\n}\n}\n.tabulator-edit-list .tabulator-edit-list-placeholder {\n  color: #333;\n  padding: 4px;\n  text-align: center;\n}\n.tabulator-edit-list .tabulator-edit-list-group {\n  border-bottom: 1px solid #dee2e6;\n  color: #333;\n  font-weight: 700;\n  padding: 6px 4px 4px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-2, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-2 {\n  padding-left: 12px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-3, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-3 {\n  padding-left: 20px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-4, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-4 {\n  padding-left: 28px;\n}\n.tabulator-edit-list .tabulator-edit-list-group.tabulator-edit-list-group-level-5, .tabulator-edit-list .tabulator-edit-list-item.tabulator-edit-list-group-level-5 {\n  padding-left: 36px;\n}\n.tabulator.tabulator-ltr {\n  direction: ltr;\n}\n.tabulator.tabulator-rtl {\n  direction: rtl;\n  text-align: initial;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  border-left: 1px solid #aaa;\n  border-right: initial;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  margin-left: -1px;\n  margin-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col.tabulator-sortable .tabulator-col-title {\n  padding-left: 25px;\n  padding-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  left: 8px;\n  right: auto;\n}\n.tabulator.tabulator-rtl .tabulator-tableholder .tabulator-range-overlay .tabulator-range.tabulator-range-active:after {\n  background-color: #2975dd;\n  border-radius: 999px;\n  bottom: -3px;\n  content: "";\n  height: 6px;\n  left: -3px;\n  position: absolute;\n  right: auto;\n  width: 6px;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell {\n  border-left: 1px solid #dee2e6;\n  border-right: initial;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-branch {\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 1px;\n  border-left: initial;\n  border-right: 2px solid #dee2e6;\n  margin-left: 5px;\n  margin-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  margin-left: 5px;\n  margin-right: 0;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-left {\n  border-left: 2px solid #dee2e6;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-cell.tabulator-frozen.tabulator-frozen-right {\n  border-right: 2px solid #dee2e6;\n}\n.tabulator.tabulator-rtl .tabulator-row .tabulator-col-resize-handle:last-of-type {\n  margin-left: 0;\n  margin-right: -3px;\n  width: 3px;\n}\n.tabulator.tabulator-rtl .tabulator-footer .tabulator-calcs-holder {\n  text-align: initial;\n}\n.tabulator-print-fullscreen {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 10000;\n}\nbody.tabulator-print-fullscreen-hide > :not(.tabulator-print-fullscreen) {\n  display: none !important;\n}\n.tabulator-print-table {\n  border-collapse: collapse;\n}\n.tabulator-print-table .tabulator-data-tree-branch {\n  border-bottom: 2px solid #dee2e6;\n  border-bottom-left-radius: 1px;\n  border-left: 2px solid #dee2e6;\n  display: inline-block;\n  height: 9px;\n  margin-right: 5px;\n  margin-top: -9px;\n  vertical-align: middle;\n  width: 7px;\n}\n.tabulator-print-table .tabulator-print-table-group {\n  background: #ccc;\n  border-bottom: 1px solid #999;\n  border-right: 1px solid #dee2e6;\n  border-top: 1px solid #999;\n  box-sizing: border-box;\n  font-weight: 700;\n  min-width: 100%;\n  padding: 5px 5px 5px 10px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-print-table .tabulator-print-table-group:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n    cursor: pointer;\n}\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-visible .tabulator-arrow {\n  border-bottom: 0;\n  border-left: 6px solid transparent;\n  border-right: 6px solid transparent;\n  border-top: 6px solid #666;\n  margin-right: 10px;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-1 td {\n  padding-left: 30px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-2 td {\n  padding-left: 50px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-3 td {\n  padding-left: 70px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-4 td {\n  padding-left: 90px !important;\n}\n.tabulator-print-table .tabulator-print-table-group.tabulator-group-level-5 td {\n  padding-left: 110px !important;\n}\n.tabulator-print-table .tabulator-print-table-group .tabulator-group-toggle {\n  display: inline-block;\n}\n.tabulator-print-table .tabulator-print-table-group .tabulator-arrow {\n  border-bottom: 6px solid transparent;\n  border-left: 6px solid #666;\n  border-right: 0;\n  border-top: 6px solid transparent;\n  display: inline-block;\n  height: 0;\n  margin-right: 16px;\n  vertical-align: middle;\n  width: 0;\n}\n.tabulator-print-table .tabulator-print-table-group span {\n  color: #d00;\n  margin-left: 10px;\n}\n.tabulator-print-table .tabulator-data-tree-control {\n  align-items: center;\n  background: rgba(0, 0, 0, 0.1);\n  border: 1px solid #333;\n  border-radius: 2px;\n  display: inline-flex;\n  height: 11px;\n  justify-content: center;\n  margin-right: 5px;\n  overflow: hidden;\n  vertical-align: middle;\n  width: 11px;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-print-table .tabulator-data-tree-control:hover {\n    background: rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n}\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse {\n  background: transparent;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand {\n  background: #333;\n  display: inline-block;\n  height: 7px;\n  position: relative;\n  width: 1px;\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  background: #333;\n  content: "";\n  height: 1px;\n  left: -3px;\n  position: absolute;\n  top: 3px;\n  width: 7px;\n}\n.tabulator {\n  background-color: #fff;\n  border: none;\n}\n.tabulator .tabulator-header {\n  border-bottom: 2px solid #dee2e6;\n  border-top: 1px solid #dee2e6;\n  color: inherit;\n}\n.tabulator .tabulator-header .tabulator-col {\n  background-color: #fff;\n  border-right: none;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content {\n  padding: 12px;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-col-content .tabulator-col-sorter {\n  right: 0;\n}\n.tabulator .tabulator-header .tabulator-col.tabulator-col-group .tabulator-col-group-cols {\n  border-top: 1px solid #dee2e6;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input {\n  background-clip: padding-box;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  color: #495057;\n  font-size: 1rem;\n  line-height: 1.5;\n  padding: 0.375rem 0.75rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n.tabulator .tabulator-header .tabulator-col .tabulator-header-filter input:focus {\n  background-color: #fff;\n  border: 1px solid #1d68cd;\n  color: #495057;\n  outline: 0;\n}\n.tabulator .tabulator-header .tabulator-calcs-holder {\n  border-bottom: 1px solid #dee2e6;\n  width: 100%;\n}\n.tabulator .tabulator-tableholder .tabulator-placeholder span {\n  color: #000;\n}\n.tabulator .tabulator-footer, .tabulator .tabulator-tableholder .tabulator-table {\n  color: inherit;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab {\n  background-color: #fff;\n  font-weight: 400;\n}\n.tabulator .tabulator-footer .tabulator-spreadsheet-tabs .tabulator-spreadsheet-tab.tabulator-spreadsheet-tab-active {\n  background-color: #0d6efd;\n  color: #fff;\n}\n.tabulator .tabulator-footer .tabulator-paginator {\n  color: inherit;\n}\n.tabulator .tabulator-footer .tabulator-pages {\n  margin: 0;\n}\n.tabulator .tabulator-footer .tabulator-page {\n  margin: 5px 0 0;\n  padding: 8px 12px;\n}\n.tabulator .tabulator-footer .tabulator-page[data-page=first] {\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.tabulator .tabulator-footer .tabulator-page[data-page=last] {\n  border: 1px solid #dee2e6;\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.tabulator .tabulator-footer .tabulator-page.active {\n  background-color: #0d6efd;\n  border-color: #0d6efd;\n  color: #fff;\n}\n.tabulator .tabulator-footer .tabulator-page:disabled {\n  background: #fff;\n  border-color: #dee2e6;\n  color: #6c757d;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator .tabulator-footer .tabulator-page:not(.disabled):hover {\n    background: #e9ecef;\n    border-color: #dee2e6;\n    color: #0a58ca;\n}\n}\n.tabulator.thead-dark .tabulator-header, .tabulator.thead-dark .tabulator-header .tabulator-col {\n  background-color: #fff;\n  border-color: #dee2e6;\n  color: #212529;\n}\n.tabulator.table {\n  background-color: #fff;\n}\n.tabulator.table:not(.thead-light) .tabulator-header, .tabulator.table:not(.thead-light) .tabulator-header .tabulator-col {\n  background-color: #fff;\n  border-color: #dee2e6;\n  color: #212529;\n}\n.tabulator.table .tabulator-tableholder {\n  color: #212529;\n}\n.tabulator.table .tabulator-row {\n  background-color: #fff;\n  border-color: #dee2e6;\n  color: #212529;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator.table .tabulator-row:hover {\n    background-color: #dee2e6;\n}\n.tabulator.table .tabulator-row:hover .tabulator-cell {\n    background-color: #ced4da;\n}\n}\n.tabulator.table .tabulator-row.tabulator-selected {\n  background-color: #9abcea;\n}\n.tabulator.table .tabulator-footer {\n  border-color: #dee2e6 !important;\n}\n.tabulator.table .tabulator-footer .tabulator-calcs-holder {\n  background: #fff !important;\n  border-color: #dee2e6 !important;\n}\n.tabulator.table .tabulator-footer .tabulator-calcs-holder .tabulator-row {\n  background-color: #fff !important;\n  border-color: #dee2e6 !important;\n  color: #212529 !important;\n}\n.tabulator.table-striped:not(.table) .tabulator-row.tabulator-row-even {\n  background-color: #e9ecef;\n}\n.tabulator.table-striped:not(.table) .tabulator-row.tabulator-row-even.tabulator-selected {\n  background-color: #9abcea;\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator.table-striped:not(.table) .tabulator-row.tabulator-row-even.tabulator-selectable:hover {\n    background-color: #ced4da;\n    cursor: pointer;\n}\n.tabulator.table-striped:not(.table) .tabulator-row.tabulator-row-even.tabulator-selected:hover {\n    background-color: #769bcc;\n    cursor: pointer;\n}\n}\n.tabulator.table-striped.table .tabulator-row:nth-child(2n) .tabulator-cell {\n  background-color: transparent;\n}\n.tabulator.table-bordered {\n  border: 1px solid #dee2e6;\n}\n.tabulator.table-bordered .tabulator-header .tabulator-col, .tabulator.table-bordered .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell {\n  border-right: 1px solid #dee2e6;\n}\n.tabulator.table-borderless .tabulator-header, .tabulator.table-borderless .tabulator-row {\n  border: none;\n}\n.tabulator.table-sm .tabulator-header .tabulator-col .tabulator-col-content {\n  padding: 5px !important;\n}\n.tabulator.table-sm .tabulator-tableholder .tabulator-table .tabulator-row {\n  min-height: 26px;\n}\n.tabulator.table-sm .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell {\n  padding: 5px !important;\n}\n.tabulator.table-sm .tabulator-row {\n  padding-bottom: 0;\n  padding-top: 0;\n}\n.tabulator.table-sm .tabulator-col-resize-handle {\n  padding: 0;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-primary {\n  background: #cfe2ff !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-secondary {\n  background: #e2e3e5 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-success {\n  background: #d1e7dd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-info {\n  background: #cff4fc !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-warning {\n  background: #fff3cd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-danger {\n  background: #f8d7da !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-light {\n  background: #f8f9fa !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table {\n  background: #212529 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.table-active {\n  background: #6c757d !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-primary {\n  background: #cfe2ff !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-secondary {\n  background: #e2e3e5 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-success {\n  background: #d1e7dd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-info {\n  background: #cff4fc !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-warning {\n  background: #fff3cd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-danger {\n  background: #f8d7da !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-light {\n  background: #f8f9fa !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-dark {\n  background: #212529 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row.bg-active {\n  background: #6c757d !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-primary {\n  background: #cfe2ff !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-secondary {\n  background: #e2e3e5 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-success {\n  background: #d1e7dd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-info {\n  background: #cff4fc !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-warning {\n  background: #fff3cd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-danger {\n  background: #f8d7da !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-light {\n  background: #f8f9fa !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table {\n  background: #212529 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.table-active {\n  background: #6c757d !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-primary {\n  background: #cfe2ff !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-secondary {\n  background: #e2e3e5 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-success {\n  background: #d1e7dd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-info {\n  background: #cff4fc !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-warning {\n  background: #fff3cd !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-danger {\n  background: #f8d7da !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-light {\n  background: #f8f9fa !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-dark {\n  background: #212529 !important;\n}\n.tabulator .tabulator-tableholder .tabulator-table .tabulator-row .tabulator-cell.bg-active {\n  background: #6c757d !important;\n}\n.tabulator-row {\n  border-bottom: 1px solid #dee2e6;\n  min-height: 40px;\n}\n.tabulator-row .tabulator-cell {\n  border-right: none;\n  padding: 12px;\n}\n.tabulator-row .tabulator-cell:last-of-type {\n  border-right: none;\n}\n.tabulator-row .tabulator-cell.tabulator-row-header {\n  background: #fff;\n  border-bottom: none;\n  border-right: 1px solid #dee2e6;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control {\n  border: 1px solid #ccc;\n}\n.tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after, .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand, .tabulator-row .tabulator-cell .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  background: #ccc;\n}\n.tabulator-row.tabulator-group {\n  background: #fafafa;\n}\n.tabulator-row.tabulator-group span {\n  color: #666;\n}\n.tabulator-edit-select-list {\n  background: #fff;\n}\n.tabulator-edit-select-list .tabulator-edit-select-list-item.active {\n  color: #fff;\n}\n.tabulator-edit-select-list .tabulator-edit-select-list-item.active.focused {\n  outline: 1px solid hsla(0, 0%, 100%, 0.5);\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-edit-select-list .tabulator-edit-select-list-item:hover {\n    color: #fff;\n}\n}\n.tabulator-edit-select-list .tabulator-edit-select-list-group, .tabulator-edit-select-list .tabulator-edit-select-list-notice {\n  color: inherit;\n}\n.tabulator.tabulator-rtl .tabulator-header .tabulator-col {\n  border-left: initial;\n  text-align: initial;\n}\n.tabulator-print-table .tabulator-print-table-group {\n  background: #fafafa;\n}\n.tabulator-print-table .tabulator-print-table-group span {\n  color: #666;\n}\n.tabulator-print-table .tabulator-data-tree-control {\n  color: inherit;\n}\n.tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-collapse:after, .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand, .tabulator-print-table .tabulator-data-tree-control .tabulator-data-tree-control-expand:after {\n  background: #ccc;\n}\n.tabulator-popup-container {\n  background: #fff;\n}\n.tabulator-edit-list .tabulator-edit-list-item.active {\n  color: #fff;\n}\n.tabulator-edit-list .tabulator-edit-list-item.active.focused {\n  outline: 1px solid hsla(0, 0%, 100%, 0.5);\n}\n@media (hover: hover) and (pointer: fine) {\n.tabulator-edit-list .tabulator-edit-list-item:hover {\n    color: #fff;\n}\n}\n.editor-container {\n  height: calc(100vh - 143px);\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.editor-container .editor-row {\n  display: flex;\n  flex-flow: column;\n  flex: 1 1 auto;\n  overflow-y: auto;\n}\n.editor-container .ribbon {\n  position: relative;\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: max-content;\n  grid-template-rows: 1fr 2em;\n}\n.editor-container .ribbon > * {\n  margin: 0 2em;\n}\n.editor-container .ribbon .ribbon-base, .editor-container .ribbon .ribbon-full, .editor-container .ribbon .ribbon-small {\n  grid-row: 1;\n  padding: 4px;\n  margin: 4px;\n}\n.editor-container .ribbon .ribbon-base button, .editor-container .ribbon .ribbon-full button, .editor-container .ribbon .ribbon-small button, .editor-container .ribbon .ribbon-base .btn-ribbon, .editor-container .ribbon .ribbon-full .btn-ribbon, .editor-container .ribbon .ribbon-small .btn-ribbon {\n  background: none;\n  border: none;\n  text-decoration: unset;\n  color: inherit;\n  padding: 0 4px;\n}\n.editor-container .ribbon .ribbon-base button:hover:not([disabled], .disabled), .editor-container .ribbon .ribbon-full button:hover:not([disabled], .disabled), .editor-container .ribbon .ribbon-small button:hover:not([disabled], .disabled), .editor-container .ribbon .ribbon-base .btn-ribbon:hover:not([disabled], .disabled), .editor-container .ribbon .ribbon-full .btn-ribbon:hover:not([disabled], .disabled), .editor-container .ribbon .ribbon-small .btn-ribbon:hover:not([disabled], .disabled) {\n  background: #aaaaaa;\n}\n.editor-container .ribbon .ribbon-base button.active, .editor-container .ribbon .ribbon-full button.active, .editor-container .ribbon .ribbon-small button.active, .editor-container .ribbon .ribbon-base .btn-ribbon.active, .editor-container .ribbon .ribbon-full .btn-ribbon.active, .editor-container .ribbon .ribbon-small .btn-ribbon.active {\n  background: #c8c8c8;\n}\n.editor-container .ribbon .ribbon-base button[disabled], .editor-container .ribbon .ribbon-full button[disabled], .editor-container .ribbon .ribbon-small button[disabled], .editor-container .ribbon .ribbon-base button[disabled] i, .editor-container .ribbon .ribbon-full button[disabled] i, .editor-container .ribbon .ribbon-small button[disabled] i, .editor-container .ribbon .ribbon-base button[disabled]:hover, .editor-container .ribbon .ribbon-base button[disabled]:hover i, .editor-container .ribbon .ribbon-base button.disabled, .editor-container .ribbon .ribbon-full button.disabled, .editor-container .ribbon .ribbon-small button.disabled, .editor-container .ribbon .ribbon-base button.disabled i, .editor-container .ribbon .ribbon-full button.disabled i, .editor-container .ribbon .ribbon-small button.disabled i, .editor-container .ribbon .ribbon-base .btn-ribbon[disabled], .editor-container .ribbon .ribbon-full .btn-ribbon[disabled], .editor-container .ribbon .ribbon-small .btn-ribbon[disabled], .editor-container .ribbon .ribbon-base .btn-ribbon[disabled] i, .editor-container .ribbon .ribbon-full .btn-ribbon[disabled] i, .editor-container .ribbon .ribbon-small .btn-ribbon[disabled] i, .editor-container .ribbon .ribbon-base .btn-ribbon[disabled]:hover, .editor-container .ribbon .ribbon-base .btn-ribbon[disabled]:hover i, .editor-container .ribbon .ribbon-base .btn-ribbon.disabled, .editor-container .ribbon .ribbon-full .btn-ribbon.disabled, .editor-container .ribbon .ribbon-small .btn-ribbon.disabled, .editor-container .ribbon .ribbon-base .btn-ribbon.disabled i, .editor-container .ribbon .ribbon-full .btn-ribbon.disabled i, .editor-container .ribbon .ribbon-small .btn-ribbon.disabled i {\n  color: #ccc !important;\n}\n.editor-container .ribbon .ribbon-title {\n  grid-row: 2;\n  margin: 0;\n  padding: 0 2em;\n  width: 100%;\n  border-top: 1px solid grey;\n  text-align: center;\n  color: var(--bs-card-cap-color);\n  background-color: var(--bs-card-cap-bg);\n  border-top: var(--bs-card-border-width) solid var(--bs-card-border-color);\n}\n.editor-container .ribbon .ribbon-small {\n  align-self: start;\n  display: flex;\n  flex-direction: column;\n}\n.editor-container .ribbon .ribbon-small button, .editor-container .ribbon .ribbon-small .btn-ribbon {\n  border-radius: 3px;\n  display: grid;\n  grid-template-columns: 20px auto;\n  gap: 4px;\n  justify-items: start;\n  align-items: center;\n}\n.editor-container .ribbon .ribbon-full {\n  align-self: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n.editor-container .ribbon .ribbon-full button, .editor-container .ribbon .ribbon-full .btn-ribbon {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  border-radius: 3px;\n  height: 85px;\n  min-width: 85px;\n}\n.editor-container .ribbon .ribbon-full button i, .editor-container .ribbon .ribbon-full .btn-ribbon i {\n  font-size: 1.5rem;\n}\n.editor-container .ribbon .ribbon-splitter {\n  width: var(--bs-card-border-width);\n  background: var(--bs-card-border-color);\n  grid-row: 1/3;\n  margin: 0;\n}\n.editor-container .ribbon .ribbon-filler {\n  grid-row: 1/3;\n}\n.editor-container .diagnostics-grid {\n  margin-top: 32px;\n  display: grid;\n  gap: 4px 8px;\n  align-items: center;\n  grid-template-columns: 16px minmax(24px, auto) 1fr;\n  grid-auto-rows: min-content;\n}\n.editor-container .diagnostics-grid .dg-type {\n  grid-column: 1;\n}\n.editor-container .diagnostics-grid .dg-row {\n  grid-column: 2;\n  cursor: pointer;\n}\n.editor-container .diagnostics-grid .dg-diagnostic {\n  grid-column: 3;\n  margin-bottom: 0;\n}\n.editor-container .toggle-diagnostics {\n  position: absolute;\n  border: none;\n  left: 0;\n  height: 26px;\n  border-radius: 5px 5px 0 0;\n  padding: 0 8px;\n}\n.editor-container .diagnostics-header {\n  display: flex;\n  height: 32px;\n  margin-bottom: 4px;\n  position: fixed;\n}\n.editor-container .btn-diagnostics-filter {\n  background: none;\n  border: none;\n  padding: 0 8px !important;\n}\n.editor-container .btn-diagnostics-filter:hover:not([disabled]) {\n  background: #aaaaaa;\n}\n.editor-container .btn-diagnostics-filter.active {\n  background: #c8c8c8;\n}\n.editor-container .btn-diagnostics-filter[disabled] i, .editor-container .btn-diagnostics-filter[disabled]:hover i {\n  color: #ccc !important;\n}\n.editor-container .ose-curation-status-discussed {\n  background: moccasin !important;\n}\n.editor-container .ose-curation-status-proposed {\n  background: #FFFFFF !important;\n}\n.editor-container .ose-curation-status-to_be_discussed {\n  background: #eee8aa !important;\n}\n.editor-container .ose-curation-status-in_discussion {\n  background: #fffacd !important;\n}\n.editor-container .ose-curation-status-published {\n  background: #7fffd4 !important;\n}\n.editor-container .ose-curation-status-obsolete {\n  background: #2f4f4f !important;\n}\n.editor-container .ose-curation-status-external {\n  background: #D3D3D3 !important;\n}\n.editor-container .ose-curation-status-pre_proposed {\n  background: #ebfad0 !important;\n}\n.editor-container .tabulator-tableholder {\n  padding-bottom: 200px;\n}\n.editor-container .tabulator-cell input[type=text] {\n  background: white;\n}\n.editor-container .tabulator.table .tabulator-row.tabulator-selected {\n  background-color: grey !important;\n}\n.editor-container .tabulator.table.highlight-assigned .assigned-to-me .tabulator-cell {\n  color: black;\n  font-weight: bold;\n}\n.editor-container .tabulator.table .tabulator-row {\n  box-shadow: inset 0 0 0 0 transparent;\n  transition: box-shadow 500ms;\n  border-width: 1px !important;\n}\n.editor-container .tabulator.table .tabulator-row.highlight {\n  box-shadow: inset 0 0 10px 5px #ffcb00;\n}\n.editor-container .tabulator.table .tabulator-headers, .editor-container .tabulator.table .tabulator-row {\n  padding-left: 0;\n}\n.editor-container .changed {\n  color: #003399;\n}\n.editor-container .has-error {\n  color: red !important;\n  font-weight: bold;\n}\n.editor-container .loading-data {\n  display: grid;\n  align-items: center;\n  justify-items: center;\n  height: 100%;\n}\n.editor-container .loading-data .loader {\n  transform: scale(2);\n}';
    document.head.append(el);
  }

  // sfc-template:/home/bjoern/development/onto-spread-ed/js/editor/Editor.vue?type=template
  var _hoisted_117 = { class: "row mb-3" };
  var _hoisted_214 = { class: "col-md-12" };
  var _hoisted_35 = { class: "card p-0" };
  var _hoisted_43 = { class: "card-body ribbon p-0 m-0" };
  var _hoisted_52 = { class: "ribbon-full" };
  var _hoisted_62 = ["disabled"];
  var _hoisted_72 = { class: "ribbon-small" };
  var _hoisted_82 = ["disabled"];
  var _hoisted_92 = ["disabled"];
  var _hoisted_102 = ["href", "download"];
  var _hoisted_118 = { class: "ribbon-full" };
  var _hoisted_123 = ["disabled"];
  var _hoisted_133 = ["disabled"];
  var _hoisted_142 = { class: "ribbon-full" };
  var _hoisted_152 = ["disabled"];
  var _hoisted_162 = { class: "ribbon-small" };
  var _hoisted_172 = ["disabled"];
  var _hoisted_182 = ["disabled"];
  var _hoisted_192 = { class: "ribbon-small" };
  var _hoisted_20 = ["disabled"];
  var _hoisted_21 = ["disabled"];
  var _hoisted_222 = ["disabled"];
  var _hoisted_232 = { class: "ribbon-small" };
  var _hoisted_242 = ["disabled"];
  var _hoisted_252 = ["disabled"];
  var _hoisted_262 = { class: "ribbon-full" };
  var _hoisted_272 = ["disabled"];
  var _hoisted_282 = {
    id: "contentTable",
    ref: "table",
    class: "table table-bordered table-hover table-sm",
    style: { "font-size": "0.8em", "margin-bottom": "0 !important" }
  };
  var _hoisted_292 = {
    key: 0,
    class: "loading-data"
  };
  var _hoisted_30 = {
    key: 0,
    class: "row border-1 border-danger overflow-scroll bg-secondary-subtle",
    style: { "height": "200px", "min-height": "200px" }
  };
  var _hoisted_31 = { class: "diagnostics-header bg-secondary" };
  var _hoisted_322 = ["disabled"];
  var _hoisted_332 = ["disabled"];
  var _hoisted_342 = ["disabled"];
  var _hoisted_352 = { class: "diagnostics-grid" };
  var _hoisted_36 = ["onClick"];
  var _hoisted_37 = {
    key: 0,
    class: "merge-container"
  };
  var _hoisted_38 = {
    class: "form",
    role: "form"
  };
  var _hoisted_39 = { class: "form-group" };
  var _hoisted_40 = { class: "form-group" };
  var _hoisted_41 = { class: "text-center" };
  var _hoisted_422 = { class: "text-center" };
  function render4(_ctx, _cache, $props, $setup, $data, $options) {
    return openBlock(), createElementBlock(
      Fragment,
      null,
      [
        createVNode($setup["BToastOrchestrator"]),
        createBaseVNode(
          "div",
          {
            class: normalizeClass(["editor-container", { "visually-hidden": $setup.mode !== "edit" }])
          },
          [
            createBaseVNode("div", _hoisted_117, [
              createBaseVNode("div", _hoisted_214, [
                createBaseVNode("div", _hoisted_35, [
                  createBaseVNode("div", _hoisted_43, [
                    createBaseVNode("div", _hoisted_52, [
                      createBaseVNode("button", {
                        disabled: $setup.locked || !$setup.historyService.canUndo(),
                        class: "btn-ribbon",
                        onClick: _cache[0] || (_cache[0] = ($event) => $setup.RIBBON.saveFile())
                      }, _cache[26] || (_cache[26] = [
                        createBaseVNode(
                          "i",
                          {
                            class: "fas fa-save",
                            style: { "color": "cornflowerblue" }
                          },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createBaseVNode(
                          "br",
                          null,
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Save ")
                      ]), 8, _hoisted_62)
                    ]),
                    _cache[47] || (_cache[47] = createBaseVNode(
                      "span",
                      {
                        class: "ribbon-title",
                        style: { "grid-column": "span 2" }
                      },
                      "Edit",
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_72, [
                      createBaseVNode("button", {
                        disabled: $setup.locked || !$setup.historyService.canUndo(),
                        class: "btn-ribbon",
                        onClick: _cache[1] || (_cache[1] = ($event) => $setup.RIBBON.undo())
                      }, _cache[27] || (_cache[27] = [
                        createBaseVNode(
                          "i",
                          { class: "fas fa-undo" },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Undo ")
                      ]), 8, _hoisted_82),
                      createBaseVNode("button", {
                        disabled: $setup.locked || !$setup.historyService.canRedo(),
                        class: "btn-ribbon",
                        onClick: _cache[2] || (_cache[2] = ($event) => $setup.RIBBON.redo())
                      }, _cache[28] || (_cache[28] = [
                        createBaseVNode(
                          "i",
                          { class: "fas fa-redo" },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Redo ")
                      ]), 8, _hoisted_92),
                      createBaseVNode("a", {
                        class: normalizeClass([{ disabled: $setup.locked }, "btn-ribbon"]),
                        href: $setup.downloadPath,
                        target: "_blank",
                        download: $setup.fileName
                      }, _cache[29] || (_cache[29] = [
                        createBaseVNode(
                          "i",
                          {
                            class: "fas fa-download",
                            style: { "color": "cornflowerblue" }
                          },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createBaseVNode(
                          "br",
                          null,
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Download ")
                      ]), 10, _hoisted_102)
                    ]),
                    _cache[48] || (_cache[48] = createBaseVNode(
                      "div",
                      { class: "ribbon-splitter" },
                      null,
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_118, [
                      createBaseVNode("button", {
                        disabled: $setup.locked,
                        class: "btn-ribbon",
                        onClick: _cache[3] || (_cache[3] = ($event) => $setup.RIBBON.addRow())
                      }, _cache[30] || (_cache[30] = [
                        createBaseVNode(
                          "i",
                          {
                            class: "fas fa-plus",
                            style: { "color": "green" }
                          },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createBaseVNode(
                          "br",
                          null,
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Add row ")
                      ]), 8, _hoisted_123),
                      createBaseVNode("button", {
                        disabled: $setup.locked || $setup.selectedRows.length <= 0,
                        class: "btn-ribbon",
                        onClick: _cache[4] || (_cache[4] = ($event) => $setup.RIBBON.deleteSelectedRows())
                      }, _cache[31] || (_cache[31] = [
                        createBaseVNode(
                          "i",
                          {
                            class: "fas fa-trash-alt",
                            style: { "color": "indianred" }
                          },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createBaseVNode(
                          "br",
                          null,
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Delete ")
                      ]), 8, _hoisted_133)
                    ]),
                    _cache[49] || (_cache[49] = createBaseVNode(
                      "span",
                      {
                        class: "ribbon-title",
                        style: { "column-span": "2" }
                      },
                      "Data",
                      -1
                      /* HOISTED */
                    )),
                    $setup.canReview ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 0 },
                      [
                        _cache[35] || (_cache[35] = createBaseVNode(
                          "div",
                          { class: "ribbon-splitter" },
                          null,
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_142, [
                          createBaseVNode("button", {
                            disabled: $setup.locked || $setup.selectedRows.length <= 0,
                            class: "btn-ribbon",
                            onClick: _cache[5] || (_cache[5] = ($event) => $setup.RIBBON.markAsReviewed())
                          }, _cache[32] || (_cache[32] = [
                            createBaseVNode(
                              "i",
                              {
                                class: "fas fa-clipboard-check",
                                style: { "color": "green" }
                              },
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createBaseVNode(
                              "br",
                              null,
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createTextVNode(" Reviewed ")
                          ]), 8, _hoisted_152)
                        ]),
                        _cache[36] || (_cache[36] = createBaseVNode(
                          "span",
                          {
                            class: "ribbon-title",
                            style: { "grid-column": "span 2" }
                          },
                          "Review",
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_162, [
                          createBaseVNode("button", {
                            disabled: $setup.locked,
                            class: "btn-ribbon",
                            onClick: _cache[6] || (_cache[6] = ($event) => $setup.RIBBON.highlightOwn())
                          }, _cache[33] || (_cache[33] = [
                            createBaseVNode(
                              "i",
                              { class: "fas fa-user" },
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createTextVNode(" Highlight yours ")
                          ]), 8, _hoisted_172),
                          createBaseVNode("button", {
                            disabled: $setup.locked || $setup.selectedRows.length <= 0,
                            class: "btn-ribbon",
                            onClick: _cache[7] || (_cache[7] = ($event) => $setup.RIBBON.askForReview())
                          }, _cache[34] || (_cache[34] = [
                            createBaseVNode(
                              "i",
                              { class: "fas fa-clipboard" },
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createTextVNode(" Ask for review ")
                          ]), 8, _hoisted_182)
                        ])
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : createCommentVNode("v-if", true),
                    _cache[50] || (_cache[50] = createBaseVNode(
                      "div",
                      { class: "ribbon-splitter" },
                      null,
                      -1
                      /* HOISTED */
                    )),
                    createBaseVNode("div", _hoisted_192, [
                      createBaseVNode("button", {
                        disabled: $setup.locked,
                        class: "btn-ribbon",
                        onClick: _cache[8] || (_cache[8] = ($event) => $setup.RIBBON.removeFilters())
                      }, _cache[37] || (_cache[37] = [
                        createBaseVNode(
                          "i",
                          {
                            class: "fas fa-filter-circle-xmark",
                            style: { "color": "indianred" }
                          },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Remove filters ")
                      ]), 8, _hoisted_20),
                      createBaseVNode("button", {
                        disabled: $setup.locked || !$setup.tabulator?.getColumns()?.find((c) => !c.isVisible()),
                        class: "btn-ribbon",
                        onClick: _cache[9] || (_cache[9] = (...args) => $setup.RIBBON.showHiddenColumns && $setup.RIBBON.showHiddenColumns(...args))
                      }, _cache[38] || (_cache[38] = [
                        createBaseVNode(
                          "i",
                          {
                            class: "fas fa-eye",
                            style: { "color": "cornflowerblue" }
                          },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Show hidden columns ")
                      ]), 8, _hoisted_21),
                      createBaseVNode("button", {
                        disabled: $setup.locked,
                        class: "btn-ribbon",
                        onClick: _cache[10] || (_cache[10] = ($event) => $setup.RIBBON.resetColumnWidths())
                      }, _cache[39] || (_cache[39] = [
                        createBaseVNode(
                          "i",
                          { class: "fas fa-text-width" },
                          null,
                          -1
                          /* HOISTED */
                        ),
                        createTextVNode(" Reset column widths ")
                      ]), 8, _hoisted_222)
                    ]),
                    _cache[51] || (_cache[51] = createBaseVNode(
                      "span",
                      { class: "ribbon-title" },
                      "View",
                      -1
                      /* HOISTED */
                    )),
                    $setup.canVisualise ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 1 },
                      [
                        _cache[42] || (_cache[42] = createBaseVNode(
                          "div",
                          { class: "ribbon-splitter" },
                          null,
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_232, [
                          createBaseVNode("button", {
                            disabled: $setup.locked,
                            class: "btn-ribbon",
                            onClick: _cache[11] || (_cache[11] = ($event) => $setup.RIBBON.visualiseSheet())
                          }, _cache[40] || (_cache[40] = [
                            createBaseVNode(
                              "i",
                              {
                                class: "fab fa-uncharted",
                                style: { "color": "#198754" }
                              },
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createTextVNode(" Sheet ")
                          ]), 8, _hoisted_242),
                          createBaseVNode("button", {
                            disabled: $setup.locked,
                            class: "btn-ribbon",
                            onClick: _cache[12] || (_cache[12] = ($event) => $setup.RIBBON.visualiseSelection())
                          }, _cache[41] || (_cache[41] = [
                            createBaseVNode(
                              "i",
                              {
                                class: "fab fa-uncharted",
                                style: { "color": "#198754" }
                              },
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createTextVNode(" Selection ")
                          ]), 8, _hoisted_252)
                        ]),
                        _cache[43] || (_cache[43] = createBaseVNode(
                          "span",
                          { class: "ribbon-title" },
                          "Visualise",
                          -1
                          /* HOISTED */
                        ))
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : createCommentVNode("v-if", true),
                    $setup.canValidate ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 2 },
                      [
                        _cache[45] || (_cache[45] = createBaseVNode(
                          "div",
                          { class: "ribbon-splitter" },
                          null,
                          -1
                          /* HOISTED */
                        )),
                        createBaseVNode("div", _hoisted_262, [
                          createBaseVNode("button", {
                            disabled: $setup.locked,
                            class: "btn-ribbon",
                            onClick: _cache[13] || (_cache[13] = ($event) => $setup.RIBBON.validate())
                          }, _cache[44] || (_cache[44] = [
                            createBaseVNode(
                              "i",
                              {
                                class: "fas fa-spell-check",
                                style: { "color": "orange" }
                              },
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createBaseVNode(
                              "br",
                              null,
                              null,
                              -1
                              /* HOISTED */
                            ),
                            createTextVNode(" Validate ")
                          ]), 8, _hoisted_272)
                        ]),
                        _cache[46] || (_cache[46] = createBaseVNode(
                          "span",
                          {
                            class: "ribbon-title",
                            style: { "grid-column": "span 2" }
                          },
                          "Validation",
                          -1
                          /* HOISTED */
                        ))
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : createCommentVNode("v-if", true),
                    _cache[52] || (_cache[52] = createBaseVNode(
                      "div",
                      { class: "ribbon-splitter" },
                      null,
                      -1
                      /* HOISTED */
                    )),
                    _cache[53] || (_cache[53] = createBaseVNode(
                      "div",
                      { class: "ribbon-filler" },
                      null,
                      -1
                      /* HOISTED */
                    ))
                  ])
                ])
              ])
            ]),
            createBaseVNode(
              "div",
              {
                class: "row editor-row",
                style: normalizeStyle($setup.showDiagnosticList ? "height: calc(100% - 200px)" : "height: 100%")
              },
              [
                createBaseVNode(
                  "div",
                  _hoisted_282,
                  null,
                  512
                  /* NEED_PATCH */
                ),
                !$setup.tabulator ? (openBlock(), createElementBlock("div", _hoisted_292, _cache[54] || (_cache[54] = [
                  createBaseVNode(
                    "div",
                    { class: "loader" },
                    null,
                    -1
                    /* HOISTED */
                  )
                ]))) : createCommentVNode("v-if", true)
              ],
              4
              /* STYLE */
            ),
            $setup.canValidate ? (openBlock(), createElementBlock(
              Fragment,
              { key: 0 },
              [
                createBaseVNode(
                  "button",
                  {
                    class: "toggle-diagnostics bg-secondary",
                    onClick: _cache[14] || (_cache[14] = ($event) => $setup.showDiagnosticList = !$setup.showDiagnosticList),
                    style: normalizeStyle({ bottom: $setup.showDiagnosticList ? "200px" : "0" })
                  },
                  [
                    $setup.showDiagnosticList ? (openBlock(), createElementBlock(
                      Fragment,
                      { key: 0 },
                      [
                        _cache[55] || (_cache[55] = createBaseVNode(
                          "i",
                          { class: "fa fa-chevron-down" },
                          null,
                          -1
                          /* HOISTED */
                        )),
                        _cache[56] || (_cache[56] = createTextVNode(" Hide validation messages "))
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : (openBlock(), createElementBlock(
                      Fragment,
                      { key: 1 },
                      [
                        _cache[57] || (_cache[57] = createBaseVNode(
                          "i",
                          { class: "fa fa-chevron-up" },
                          null,
                          -1
                          /* HOISTED */
                        )),
                        _cache[58] || (_cache[58] = createTextVNode(" Show validation messages "))
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    ))
                  ],
                  4
                  /* STYLE */
                ),
                $setup.showDiagnosticList ? (openBlock(), createElementBlock("div", _hoisted_30, [
                  createBaseVNode("div", _hoisted_31, [
                    createBaseVNode("button", {
                      class: normalizeClass([{ active: $setup.filterToDiagnostics.includes("error") }, "btn-diagnostics-filter"]),
                      disabled: $setup.locked,
                      onClick: _cache[15] || (_cache[15] = ($event) => $setup.RIBBON.filterToErrors())
                    }, [
                      _cache[59] || (_cache[59] = createBaseVNode(
                        "i",
                        {
                          class: "fas fa-circle-xmark",
                          style: { "color": "indianred" }
                        },
                        null,
                        -1
                        /* HOISTED */
                      )),
                      createTextVNode(
                        " Errors (" + toDisplayString($setup.errors.length) + ") ",
                        1
                        /* TEXT */
                      )
                    ], 10, _hoisted_322),
                    createBaseVNode("button", {
                      class: normalizeClass([{ active: $setup.filterToDiagnostics.includes("warning") }, "btn-diagnostics-filter"]),
                      disabled: $setup.locked,
                      onClick: _cache[16] || (_cache[16] = ($event) => $setup.RIBBON.filterToWarnings())
                    }, [
                      _cache[60] || (_cache[60] = createBaseVNode(
                        "i",
                        {
                          class: "fas fa-exclamation-triangle",
                          style: { "color": "orange" }
                        },
                        null,
                        -1
                        /* HOISTED */
                      )),
                      createTextVNode(
                        " Warnings (" + toDisplayString($setup.warnings.length) + ") ",
                        1
                        /* TEXT */
                      )
                    ], 10, _hoisted_332),
                    createBaseVNode("button", {
                      class: normalizeClass([{ active: $setup.filterToDiagnostics.includes("info") }, "btn-diagnostics-filter"]),
                      disabled: $setup.locked,
                      onClick: _cache[17] || (_cache[17] = ($event) => $setup.RIBBON.filterToInfos())
                    }, [
                      _cache[61] || (_cache[61] = createBaseVNode(
                        "i",
                        {
                          class: "fas fa-info-circle",
                          style: { "color": "dodgerblue" }
                        },
                        null,
                        -1
                        /* HOISTED */
                      )),
                      createTextVNode(
                        " Infos (" + toDisplayString($setup.infos.length) + ") ",
                        1
                        /* TEXT */
                      )
                    ], 10, _hoisted_342)
                  ]),
                  createBaseVNode("div", _hoisted_352, [
                    (openBlock(true), createElementBlock(
                      Fragment,
                      null,
                      renderList($setup.allDiagnostics.filter((x) => $setup.filterToDiagnostics.length === 0 || $setup.filterToDiagnostics.includes(x.type)), (d) => {
                        return openBlock(), createElementBlock(
                          Fragment,
                          null,
                          [
                            createBaseVNode(
                              "i",
                              {
                                class: normalizeClass(["fa dg-type", {
                                  "fa-circle-xmark": d.type === "error",
                                  "fa-triangle-exclamation": d.type === "warning",
                                  "fa-info-circle": d.type === "info",
                                  [`text-${d.type === "error" ? "danger" : d.type}`]: true
                                }])
                              },
                              null,
                              2
                              /* CLASS */
                            ),
                            d.diagnostic.row > 0 ? (openBlock(), createElementBlock("a", {
                              key: 0,
                              class: "dg-row",
                              onClick: ($event) => $setup.scrollAndHighlightRow(d.diagnostic.row - 2)
                            }, "Row " + toDisplayString(d.diagnostic.row - 1), 9, _hoisted_36)) : createCommentVNode("v-if", true),
                            createVNode($setup["Diagnostic"], {
                              diagnostic: d.diagnostic,
                              format: "inline",
                              class: "dg-diagnostic"
                            }, null, 8, ["diagnostic"])
                          ],
                          64
                          /* STABLE_FRAGMENT */
                        );
                      }),
                      256
                      /* UNKEYED_FRAGMENT */
                    ))
                  ])
                ])) : createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            )) : createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        ),
        $setup.mode === "merge" && $setup.mergedData !== null ? (openBlock(), createElementBlock("div", _hoisted_37, [
          createVNode($setup["Merger"], {
            conflicts: $setup.mergeConflicts,
            modelValue: $setup.mergedData,
            "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $setup.mergedData = $event),
            onSave: $setup.MERGE_COMMANDS.save
          }, null, 8, ["conflicts", "modelValue", "onSave"])
        ])) : createCommentVNode("v-if", true),
        createVNode($setup["BModal"], {
          modelValue: $setup.saveDialogOpen,
          "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => $setup.saveDialogOpen = $event),
          title: "Submit changes"
        }, {
          footer: withCtx(() => [
            createBaseVNode("button", {
              class: "btn btn-danger",
              onClick: _cache[21] || (_cache[21] = ($event) => $setup.submitChanges($setup.submitCommitMessage, $setup.submitDetailedMessage))
            }, "Submit"),
            createBaseVNode("button", {
              class: "btn btn-primary",
              onClick: _cache[22] || (_cache[22] = ($event) => $setup.resetSaveDialog())
            }, "Cancel")
          ]),
          default: withCtx(() => [
            createBaseVNode(
              "p",
              null,
              " You are about to submit changes. Please describe the changes you have made to " + toDisplayString($setup.fileName),
              1
              /* TEXT */
            ),
            createBaseVNode("form", _hoisted_38, [
              createBaseVNode("div", _hoisted_39, [
                _cache[62] || (_cache[62] = createBaseVNode(
                  "label",
                  { for: "commit-msg" },
                  "Commit message",
                  -1
                  /* HOISTED */
                )),
                withDirectives(createBaseVNode(
                  "input",
                  {
                    id: "commit-msg",
                    "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => $setup.submitCommitMessage = $event),
                    class: "form-control",
                    name: "commit-msg",
                    required: "",
                    type: "text"
                  },
                  null,
                  512
                  /* NEED_PATCH */
                ), [
                  [vModelText, $setup.submitCommitMessage]
                ])
              ]),
              createBaseVNode("div", _hoisted_40, [
                _cache[63] || (_cache[63] = createBaseVNode(
                  "label",
                  { for: "descr" },
                  "Detailed description",
                  -1
                  /* HOISTED */
                )),
                withDirectives(createBaseVNode(
                  "textarea",
                  {
                    id: "descr",
                    "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => $setup.submitDetailedMessage = $event),
                    class: "form-control",
                    name: "descr"
                  },
                  "        ",
                  512
                  /* NEED_PATCH */
                ), [
                  [vModelText, $setup.submitDetailedMessage]
                ])
              ])
            ])
          ]),
          _: 1
          /* STABLE */
        }, 8, ["modelValue"]),
        createVNode($setup["BModal"], {
          modelValue: $setup.saving,
          "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => $setup.saving = $event),
          centered: "",
          "no-close-on-backdrop": "",
          "no-close-on-esc": "",
          "no-footer": "",
          "no-header": "",
          variant: "primary"
        }, {
          default: withCtx(() => [
            createBaseVNode("p", _hoisted_41, [
              createVNode($setup["BSpinner"], {
                class: "m-4",
                style: { "width": "5rem", "height": "5rem" }
              })
            ]),
            _cache[64] || (_cache[64] = createBaseVNode(
              "h4",
              { class: "text-center" },
              "Saving file..",
              -1
              /* HOISTED */
            ))
          ]),
          _: 1
          /* STABLE */
        }, 8, ["modelValue"]),
        createVNode($setup["BModal"], {
          modelValue: $setup.validating,
          "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => $setup.validating = $event),
          centered: "",
          "no-close-on-backdrop": "",
          "no-close-on-esc": "",
          "no-footer": "",
          "no-header": "",
          variant: "primary"
        }, {
          default: withCtx(() => [
            createBaseVNode("p", _hoisted_422, [
              createVNode($setup["BSpinner"], {
                class: "m-4",
                style: { "width": "5rem", "height": "5rem" }
              })
            ]),
            _cache[65] || (_cache[65] = createBaseVNode(
              "h4",
              { class: "text-center" },
              "Validating..",
              -1
              /* HOISTED */
            ))
          ]),
          _: 1
          /* STABLE */
        }, 8, ["modelValue"])
      ],
      64
      /* STABLE_FRAGMENT */
    );
  }

  // js/editor/Editor.vue
  Editor_default.render = render4;
  Editor_default.__file = "js/editor/Editor.vue";
  var Editor_default2 = Editor_default;

  // js/common/filter.ts
  function pluralise(str, listOrAmount) {
    let amount;
    if (Array.isArray(listOrAmount)) {
      amount = listOrAmount.length;
    } else if (listOrAmount) {
      amount = listOrAmount;
    } else {
      amount = 2;
    }
    if (amount < 2) {
      return str;
    }
    if (str?.endsWith("y")) {
      return str.substring(0, str.length - 1) + "ies";
    }
    if (str) {
      return str + "s";
    }
    return str;
  }
  function formatText(str) {
    const s = str.trim().toLowerCase().replace("_", " ");
    return s.charAt(0).toUpperCase() + s.substring(1);
  }
  function formatDate(d) {
    const date2 = d instanceof Date ? d : new Date(d);
    return new Intl.DateTimeFormat("default", { dateStyle: "long", timeStyle: "short" }).format(date2);
  }
  var $filters = {
    formatDate,
    formatText,
    pluralise
  };

  // js/editor/main.ts
  var app = createApp(Editor_default2);
  app.use(createBootstrap());
  app.config.globalProperties.$filters = $filters;
  app.mount("#vue-app-editor");
})();
/*! Bundled license information:

@vue/shared/dist/shared.esm-bundler.js:
  (**
  * @vue/shared v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)
  (*! #__NO_SIDE_EFFECTS__ *)

@vue/reactivity/dist/reactivity.esm-bundler.js:
  (**
  * @vue/reactivity v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)

@vue/runtime-core/dist/runtime-core.esm-bundler.js:
  (**
  * @vue/runtime-core v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)

@vue/runtime-core/dist/runtime-core.esm-bundler.js:
  (*! #__NO_SIDE_EFFECTS__ *)

@vue/runtime-core/dist/runtime-core.esm-bundler.js:
  (*! #__NO_SIDE_EFFECTS__ *)

@vue/runtime-core/dist/runtime-core.esm-bundler.js:
  (*! #__NO_SIDE_EFFECTS__ *)

@vue/runtime-dom/dist/runtime-dom.esm-bundler.js:
  (**
  * @vue/runtime-dom v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)

@vue/runtime-dom/dist/runtime-dom.esm-bundler.js:
  (*! #__NO_SIDE_EFFECTS__ *)

@vue/runtime-dom/dist/runtime-dom.esm-bundler.js:
  (*! #__NO_SIDE_EFFECTS__ *)

vue/dist/vue.runtime.esm-bundler.js:
  (**
  * vue v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)

bootstrap-vue-next/dist/useSafeScrollLock-DUIeABf3.mjs:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
  (*!
  * focus-trap 7.6.2
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=editor.js.map
